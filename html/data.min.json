window.__shortjsdoc_data={source:"\n\n//@filename {Foo} fileName src/jsdocmaker/core/binding.js\n\n// @module shortjsdoc @class JsDocMaker\nvar JsDocMaker = require('./class'); \nvar _ = require('underscore'); \n\n// BINDING / post processing\n\n//@class TypeBinding a datatype with an association between types names in source code and parsed class nodes. \n//It support generic types (recursive)\n//@property {TypeBinding} type\n//@property {Array<TypeBinding>} params - the generic types params array. For example the params for {Map<String,Apple>} is [StringBynding]\n//@property {Object<String,TypeBinding>} properties - the properties literal object declaration binding, {a:A,b:B}\n//@property {String} nativeTypeUrl the url for native type only\n\n\n//@class JsDocMaker\n//@method parseTypeString public, do a type binding @return {TypeBinding} the object binding to the original r\n//eferenced AST node. Or null in case the given type cannot be parsed\n//TODO: support multiple generics and generics anidation like in\nJsDocMaker.prototype.parseTypeString = function(typeString, baseClass)\n{\n\tif(!typeString || !baseClass)\n\t{ \n\t\treturn null;\n\t}\n\t//first remove the '{}'\n\ttypeString = JsDocMaker.stringFullTrim(typeString); \n\tvar inner = /^{([^}]+)}$/.exec(typeString);\n\tif(!inner || inner.length<2)\n\t{\n\t\treturn null;\n\t}\n\ttypeString = inner[1]; \n\ttypeString = typeString.replace(/\\s+/gi, '');\n\tvar ret = this.parseSingleTypeString(typeString, baseClass); \n\t// console.log('parseTypeString', ret)\n\tif(ret && ret.length===1)\n\t{\n\t\treturn ret[0]; \n\t}\n\telse\n\t{\t\n\t\treturn ret;\t\n\t}\t\n}; \n\n// @method parseSingleTypeString @param {String} typeStr\nJsDocMaker.prototype.parseSingleTypeString = function(typeStr, baseClass)\n{\n\tvar a = typeStr.split('|'), ret = [], self = this;\n\n\t_(a).each(function(typeString)\n\t{\n\t\n\t\t// is this a custom type, like #custom(1,2) ? \n\n\t\tvar regex = /^#(\\w+)\\(([^\\()]+)\\)/\n\t\t,\tcustomType = regex.exec(typeString)\n\t\t,\ttype_binded = null\n\t\t,\ttype = null;\n\n\t\tif(customType && customType.length === 3)\n\t\t{\n\t\t\tvar parserName = customType[1];\n\t\t\tvar parserInput = customType[2]; \n\t\t\tvar parser = self.typeParsers[parserName]; \n\t\t\tif(parser)\n\t\t\t{\n\t\t\t\ttry \n\t\t\t\t{\n\t\t\t\t\tvar parsed = parser.parse(parserInput, baseClass);\n\t\t\t\t\tif(parsed)\n\t\t\t\t\t{\n\t\t\t\t\t\t// TODO bind type ? \n\t\t\t\t\t\t//BIG PROBLEM HERE - this code executes at parsing time and here we are binding - do this binding in a post processing ast\n\t\t\t\t\t\t//TODO probably all this code should be moved to postprocessing ast phase and here we only dump the original type string.\n\t\t\t\t\t\ttype_binded = self.bindParsedType(parsed, baseClass); \n\t\t\t\t\t\tret.push(type_binded); \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tself.error('Invalid Custom Type: '+typeString, ', baseClass: ', (baseClass && baseClass.absoluteName)); \n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\t//it is a literal object type, like {a:String,b:Number}? \n\n\t\telse if(typeString.indexOf(':')!==-1 && typeString.indexOf('#')===-1 ) //and is not a custom type #cus\n\t\t{\n\t\t\ttype = null; \n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar props = JsDocMaker.parseType(typeString);\n\t\t\t\ttype = {name: 'Object', properties: props}; \n\t\t\t\ttype_binded = self.bindParsedType(type, baseClass);\n\t\t\t\tret.push(type_binded); \n\t\t\t}\n\t\t\tcatch(ex)\n\t\t\t{\n\t\t\t\tself.error('Invalid Type: '+typeString, ', baseClass: ', (baseClass && baseClass.absoluteName)); \n\t\t\t}\t\n\t\t}\n\n\n\t\t// it is a generic type like Array<String> ? \n\n\t\telse if(typeString.indexOf('<')!==-1)\n\t\t{\n\t\t\ttype = null;\n\t\t\ttry\n\t\t\t{\n\t\t\t\ttype = JsDocMaker.parseType(typeString);\n\t\t\t\ttype_binded = self.bindParsedType(type, baseClass);\n\t\t\t\tret.push(type_binded); \n\t\t\t}\n\t\t\tcatch(ex)\n\t\t\t{\n\t\t\t\tself.error('Invalid Type: '+typeString, ', baseClass: ', (baseClass && baseClass.absoluteName)); \n\t\t\t}\t\n\t\t}\n\n\t\telse\n\t\t{\t\n\t\t\tret.push(self.bindClass(typeString, baseClass));\t\n\t\t}\n\t}) ; \n\n\treturn ret;\n}; \n\n//@method bindParsedType merges the data of JsDocMaker.parseType with bindings of current jsdoc. recursive!\n//@param {Object} typeObject @param {Object} baseClass @return {Object}\nJsDocMaker.prototype.bindParsedType = function(typeObject, baseClass)\n{\n\tvar c = null\n\t,\tout = typeObject\n\t,\tself = this;\n\n\tif(typeObject && _(typeObject).isString())\n\t{\n\t\tc = this.bindClass(typeObject, baseClass); \n\t\tout = {name: typeObject}; \n\t}\n\telse if(typeObject && typeObject.name)\n\t{\n\t\t//recurse on params for generic types like M<T,K>!\n\t\tif(out.params)\n\t\t{\t\t\t\n\t\t\tvar new_params = [];\n\n\t\t\tc = this.bindClass(typeObject.name, baseClass); \n\n\t\t\t_(out.params).each(function(param)\n\t\t\t{\n\t\t\t\tvar new_param = self.bindParsedType(param, baseClass);\n\t\t\t\tnew_params.push(new_param);\n\t\t\t}); \n\t\t\tout.params = new_params;\t\n\t\t}\n\n\t\t//recurse on properties for literal object type like name:String,config:Config\n\t\tif(out.properties)\n\t\t{\n\t\t\tvar new_properties = {};\n\t\t\t_(out.properties).each(function(value, name)\n\t\t\t{\n\t\t\t\tvar new_property = self.bindParsedType(value, baseClass);\n\t\t\t\tnew_properties[name] = new_property; \n\t\t\t}); \n\t\t\tout.properties = new_properties;\t\n\t\t}\n\t}\n\tif(c)\n\t{\n\t\t_(out).extend(c);\n\t}\n\treturn out;\n}; \n\n\n\nvar PluginContainer = require('./plugin'); \n\n\n\n//POST PROCESSING\n\n// @property {PluginContainer} beforeBindClassPlugins these plugins accept an object like \n// {name:name,baseClass:JsDocASTNode,jsdocmaker:JsDocMaker} and perform some modification to passed node:parsed instance.\n// This is done just before a class name is binding to an actual AST class node.\nJsDocMaker.prototype.beforeBindClassPlugins = new PluginContainer(); \n\n// @property {PluginContainer} afterBindClassPlugins these plugins accept an object like \n// {name:name,baseClass:JsDocASTNode,jsdocmaker:JsDocMaker} and perform some modification to passed node:parsed instance.\n// This is done just after a class name is binding to an actual AST class node.\nJsDocMaker.prototype.afterBindClassPlugins = new PluginContainer(); \n\n\n\n//@method bindClass @param {String}name @param {Object} baseClass\n//TODO: using a internal map this could be done faster\nJsDocMaker.prototype.bindClass = function(name, baseClass)\n{\n\tvar context = {\n\t\tname:name\n\t,\tbaseClass: baseClass\n\t,\tjsdocmaker: this\n\t}; \n\n\tthis.beforeBindClassPlugins.execute(context); \n\n\t// beforeBindClassPlugins have the oportunity of changing the context\n\tname = context.name || name;\n\tbaseClass = context.baseClass || baseClass;\n\n\tvar moduleName = baseClass.annotation === 'module' ? baseClass.name : baseClass.module.name; \n\t\n\t//search all classes that matches the name\n\tvar classesWithName = _(_(this.data.classes).values()).filter(function(c)\n\t{\n\t\treturn c.name===name;//JsDocMaker.stringEndsWith(c.name, name); \n\t});\n\t//search classes of the module\n\tvar moduleClasses = _(classesWithName).filter(function(c)\n\t{\n\t\treturn JsDocMaker.startsWith(c.module.name, moduleName); \n\t}); \n\n\t//TODO: performance - classesWithName could be compauted only if moduleClasses is empty\n\n\tvar c = moduleClasses.length ? moduleClasses[0] : classesWithName[0]; \n\n\tif(!c)\n\t{\n\t\t//then it could be a function\n\t\tvar fns = []\n\t\t_.each(this.data.modules, function(module)\n\t\t{\n\t\t\t_.each(module.functions, function(fn)\n\t\t\t{\n\t\t\t\tif(fn.name===name)\n\t\t\t\t{\n\t\t\t\t\tfns.push(fn)\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\tif(fns.length)\n\t\t{\n\t\t\tc = fns[0]\n\t\t}\n\t}\n\n\tif(!c)\n\t{\n\t\t//TODO: look at native types\n\t\tvar nativeType = this.getNativeTypeUrl ? this.getNativeTypeUrl(name) : null;\n\t\tvar o = {name:name}; \n\t\tif(nativeType)\n\t\t{\n\t\t\to.nativeTypeUrl = nativeType; \n\t\t}\n\t\telse\n\t\t{\n\t\t\to.error = 'NAME_NOT_FOUND'; \n\t\t}\n\t\tc = o;\t\t\n\t}\n\n\tthis.afterBindClassPlugins.execute({name:name, binded: c, baseClass: baseClass, jsdocmaker: this});\n\n\treturn c;\n\n}; \n\n// @method simpleName @param {String} name @return {String}\nJsDocMaker.prototype.simpleName = function(name, prefix)\n{\n\tif(prefix && name.indexOf(prefix) === 0)\n\t{\n\t\treturn name.substring(prefix.length + 1, name.length);\n\t}\n\telse\n\t{\t\n\t\tvar a = name.split(JsDocMaker.ABSOLUTE_NAME_SEPARATOR);\n\t\treturn a[a.length - 1]; \t\n\t}\n}; \n\n\n\n\n\n\n\n\n//@filename {Foo} fileName src/jsdocmaker/core/class.js\n\n// @module shortjsdoc @class JsDocMaker\n// Main jsdoc parser utility. It accepts a valid js source code String and returns a JavaScript object with a jsdoc AST, this is an object\n// with classes and modules array that users can use to easily access jsdocs information, for example, parsed.classes.Apple.methods.getColor\n// use the parseFile method for this! This will return the AST, if you want to perform more enrichment and type binding, then use \n// postProccess and postProccessBinding methods after.\n\n/* jshint evil:true*/\n\nvar _ = require('underscore'); \n\nvar JsDocMaker = function(options)\n{\t\n\t//@property {Object<String,String>} customNativeTypes name to url map that the user can modify to register new native types b givin its url.\n\tthis.customNativeTypes = this.customNativeTypes || {};\n\tthis.annotationRegexp = /(\\s+@\\w+)/gi;\n\tthis.typeParsers = {};\n\tthis.inputSource = [];\n\tthis.options = options || {};\n\n\tif(this.initializePluginContainers)\n\t{\n\t\tthis.initializePluginContainers();\n\t}\n}; \n\n// @property {String} DEFAULT_CLASS @static\nJsDocMaker.DEFAULT_CLASS = 'Object'; \n\n// @property {String} DEFAULT_MODULE @static\nJsDocMaker.DEFAULT_MODULE = '__DefaultModule'; \n\n// @property {String} ABSOLUTE_NAME_SEPARATOR @static\nJsDocMaker.ABSOLUTE_NAME_SEPARATOR = '.'; \n\n// @property {String} MULTIPLE_TEXT_SEPARATOR @static\nJsDocMaker.MULTIPLE_TEXT_SEPARATOR = '\\n\\n'; \n\n//expose\nif(typeof(window) !== 'undefined')\n{\n\twindow.JsDocMaker = JsDocMaker; \n}\n\n\n//@method require perform an intelligent require n browser&nodejs, needed for esprima. Ugly :(\nJsDocMaker.require = function(name)\n{\n\treturn (typeof(window) != 'undefined' && window[name]) ? window[name] : require(name);\n}; \n\nmodule.exports = JsDocMaker; \n\n//@filename {Foo} fileName src/jsdocmaker/core/main.js\n\n'strict mode'; \n\nvar JsDocMaker = require('./class'); \n\nrequire('./util'); \n\nrequire('./parse'); \n\nrequire('./preprocess'); \n\nrequire('./type-parsing'); \n\nrequire('./postprocess'); \n\nrequire('./binding'); \n\n\nmodule.exports = JsDocMaker;\n\n//@filename {Foo} fileName src/jsdocmaker/core/parse.js\n\n/*\n@module shortjsdoc \n\n@class JsDocMaker.Data\n@property {Object<String, JsDocASTNode>} methods\n@property {Object<JsDocASTNode>} classes\n@property {Array<JsDocASTNode>} classes\n\n@class JsDocASTNode all the jsdoc parsed information is stored as nodes one containing others. modules contains classes, @class contains methods and @method contains @param and @returns\n\n\n@class JsDocMaker\n\n#Parsing and processing \n\nThe first thing done with source code is parsing its comments to extract general information about annotations. This implies\n\n * parse the sources with exprima and work with the comments array.\n * preprocess the comments array for normalization before start parsing them. Call preprocessing plugins. \n * iterate the comments text and split using PRIMARY annotations\n\n##Primary annotations\nFor representing some logic of JSDOC like 'a class contains methods that contains parameters' we have the concept of PRIMARY ANNOTATIONS. \n*These are @class @module @method @property*\n\nThese are the concepts that contains the stuff. All the other annotations are children of one primary annotation. For example @return, @param, @extend, @static are SECOND LEVEL ANNOTATIONS\nand are always children of one primary annotation.\n\nBut this is the only logic contained in the core parsing. Then a general AST, using this primary container names logic, is returned. \n\nALL declared annotations will be outputed (unless a plugin remove something)\n\n*/\n\n\nvar JsDocMaker = require('./class'); \nvar PluginContainer = require('./plugin'); \nvar esprima = JsDocMaker.require('esprima');\nvar _ = require('underscore'); \n\n\n// @property {PluginContainer} allCommentPreprocessorPlugins these plugins accept an object like \n// {node:parsed:jsdocmaker:self} and perform some modification to esprima comment node - \n// this is the FIRST stage of the parser. This is the same as commentPreprocessorPlugins but all comments nodes are passed for those plugins that need some context about the comments. \nJsDocMaker.prototype.allCommentPreprocessorPlugins = new PluginContainer(); \n\n// @property {PluginContainer} commentPreprocessorPlugins these plugins accept an object like \n// {node:parsed:jsdocmaker:self} and perform some modification to esprima comment node - this is the FIRST stage of the parser\nJsDocMaker.prototype.commentPreprocessorPlugins = new PluginContainer(); \n\n// @property {PluginContainer} beforeParseNodePlugins these plugins accept an object like \n// {node:parsed:jsdocmaker:self} and perform some modification to passed node:parsed instance.\n// This is done just before the first parsing is done on the first AST node. Only primary nodes are visited!\nJsDocMaker.prototype.beforeParseNodePlugins = new PluginContainer(); \n\n// @property {PluginContainer} parsePreprocessors these plugins accept an object like \n// {node:parsed:jsdocmaker:self} and perform some modification to passed node:parsed instance.\n// This is done just after the first parsing is done on the first AST node. Only primary nodes are visited!\nJsDocMaker.prototype.afterParseNodePlugins = new PluginContainer();\n\n// @property {PluginContainer} afterParseUnitSimplePlugins these plugins accept an object like \n// {node:parsed:jsdocmaker:self} and perform some modification to passed node:parsed instance.\n// This is done after an unit is parsed - this will iterated all nodes as units .The first node object is formed at this stage. \nJsDocMaker.prototype.afterParseUnitSimplePlugins = new PluginContainer();\n\n// @property {String}primaryAnnotationsRegexString\nJsDocMaker.prototype.primaryAnnotationsRegexString = '((?:@class)|(?:@method)|(?:@property)|(?:@attribute)|(?:@module)|(?:@event)|(?:@constructor)|(?:@function)|(?:@interface)|(?:@filename))';\n\nJsDocMaker.prototype.isPrimaryAnnotation = function(s)\n{\n\tif(s.indexOf('@')!==0)\n\t{\n\t\ts = '@' + s; \n\t}\n\treturn new RegExp('^'+this.primaryAnnotationsRegexString, 'g').test(s);\n}\n\n\n//@method jsdoc the public method to parse all the added files with addFile. @return {Object} the parsed object @param {String} source . Optional\nJsDocMaker.prototype.jsdoc = function(source)\n{\n\t//@property {Array<String>} all the input added included @filename annotations\n\tsource = source || this.inputSource.join('');\n\tthis.data = this.data || {}; \n\tthis.data.source = source;\n\n\t// @property {EsprimaSyntax} the Sprima Syntax object of the current pased file.\t\n\tthis.syntax = esprima.parse(source, {\n\t\traw: true\n\t,\trange: true\n\t,\tcomment: true\t\t\n\t});\n\n\tthis.parse(this.syntax.comments);\n\n\treturn this.data;\n}; \n\n//@method parseFile a public method for parsing a single file. Note if you want to parse more than one file please use addFile() and the jsdoc() \n//@return {Object} the parsed object @param {String} source @param {String} filename\nJsDocMaker.prototype.parseFile = function(source, fileName)\n{\n\tthis.addFile(source, fileName); \n\treturn this.jsdoc(); \n}; \n\n//@method addFile @param {String}source the source code of the file @param  {String} the file name\nJsDocMaker.prototype.addFile = function(source, fileName)\n{\n\tthis.inputSource.push('\\n\\n//@filename {Foo} fileName ' + fileName+'\\n\\n');\n\tthis.inputSource.push(source);\n}; \n\n//@property {String} ignoreCommentPrefix\nJsDocMaker.prototype.ignoreCommentPrefix = '?';\n\n//@method parse\t@return {Array} array of class description - with methods, and methods containing params. \nJsDocMaker.prototype.parse = function(comments)\n{\n\tvar self = this\n\t,\tcurrentClass = null\n\t,\tcurrentMethod = null\n\t,\tcurrentModule = null\n\t,\tcurrentFile = null;\n\n\tthis.comments = comments;\n\tthis.data = this.data || {}; \n\tthis.data.classes = this.data.classes || {}; \n\tthis.data.modules = this.data.modules || {}; \n\tthis.data.files = this.data.files || {}; \n\n\tself.allCommentPreprocessorPlugins.execute({node: self.comments, jsdocMaker: self}); \n\n\t_(self.comments).each(function(node)\n\t{\n\t\tself.commentPreprocessorPlugins.execute({node: node, jsdocMaker: self}); \n\n\t\t//because is global we must instantiate this regex each time\n\t\tvar regex = new RegExp(self.primaryAnnotationsRegexString, 'gi');\n\n\t\tvar a = JsDocMaker.splitAndPreserve(node.value || '', regex); \n\t\ta = _(a).filter(function(v)  //delete empties and trim\n\t\t{\n\t\t\treturn JsDocMaker.stringTrim(v);\n\t\t});\n\t\t\n\t\t_(a).each(function(value)\n\t\t{\n\t\t\tvar parsed_array = self.parseUnit(value, node);\n\t\t\t\n\t\t\t_(parsed_array).each(function(parsed)\n\t\t\t{\n\t\t\t\tparsed.commentRange = node.range;\n\t\t\t\tparsed.fileName = (currentFile && currentFile.fileName) ? currentFile.fileName : undefined;\n\n\t\t\t\tdelete parsed.theRestString; \n\t\t\t\t\n\t\t\t\tself.beforeParseNodePlugins.execute({node:parsed, jsdocmaker:self}); \n\n\t\t\t\t//Note: the following lines is the (only) place were the 'primary annotations' (class,module,method,property) are implemented \n\t\t\t\t//We get primary tags like class,module,method,property and form the first primary AST (a module contains classes which contain methods and properties)\n\t\t\t\t//All the other annotations are treated as secondary, this means they will be assigned as childresn to the last primary annotation.\n\n\t\t\t\tif(parsed.annotation === 'class'||parsed.annotation === 'interface') \n\t\t\t\t{\n\t\t\t\t\t//allow classes without modules - asignated to a defulat module\n\t\t\t\t\tif (!currentModule)\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrentModule = {name: JsDocMaker.DEFAULT_MODULE};\n\t\t\t\t\t}\n\n\t\t\t\t\tparsed.module = currentModule; \n\t\t\t\t\tparsed.absoluteName = currentModule.name + JsDocMaker.ABSOLUTE_NAME_SEPARATOR + parsed.name;\n\n\t\t\t\t\t//if the class was already defined we want to preserve all the definitions children and texts \n\t\t\t\t\tif(self.data.classes[parsed.absoluteName])\n\t\t\t\t\t{\n\t\t\t\t\t\t//preserve text\n\t\t\t\t\t\tif(self.data.classes[parsed.absoluteName].text !== parsed.text)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tself.data.classes[parsed.absoluteName].text += JsDocMaker.MULTIPLE_TEXT_SEPARATOR + parsed.text; \n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// preserve children\n\t\t\t\t\t\tself.data.classes[parsed.absoluteName].children = self.data.classes[parsed.absoluteName].children || [];\n\t\t\t\t\t\t_(parsed.children).each(function(classPreservedChild)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar originalChild = _(self.data.classes[parsed.absoluteName].cihldren).find(function(c2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn c2.annotation===classPreservedChild.annotation; \n\t\t\t\t\t\t\t}); \n\t\t\t\t\t\t\tif(!originalChild)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tself.data.classes[parsed.absoluteName].children.push(classPreservedChild); \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\n\t\t\t\t\t\tcurrentClass = self.data.classes[parsed.absoluteName]; \n\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\t\t\t\t\t\t\n\t\t\t\t\t\tself.data.classes[parsed.absoluteName] = parsed; \n\t\t\t\t\t\tdelete self.data.classes[parsed.name];\n\t\t\t\t\t\tcurrentClass = parsed; \n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(parsed.annotation === 'filename') \n\t\t\t\t{\n\t\t\t\t\tcurrentFile = parsed; \n\t\t\t\t\tcurrentFile.fileName = parsed.text; \n\t\t\t\t\tdelete parsed.text;\n\t\t\t\t\tself.data.files[currentFile.fileName] = currentFile;\n\t\t\t\t}\n\n\t\t\t\telse if(parsed.annotation === 'module')\n\t\t\t\t{\t\n\t\t\t\t\tcurrentModule = parsed;\n\n\t\t\t\t\t//if the module was already defined we want to preserve all the definitions texts\n\t\t\t\t\tif(self.data.modules[currentModule.name])\n\t\t\t\t\t{\n\t\t\t\t\t\tif(self.data.modules[currentModule.name].text !== currentModule.text)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tself.data.modules[currentModule.name].text += JsDocMaker.MULTIPLE_TEXT_SEPARATOR + currentModule.text; \n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tself.data.modules[currentModule.name] = currentModule; \n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//the rest are all children of class : \n\n\t\t\t\t//? we treat @method as equivalent as @constructor\n\t\t\t\telse if (parsed.annotation === 'method' && currentClass)\n\t\t\t\t{\n\t\t\t\t\tcurrentClass.methods = currentClass.methods || {};\n\t\t\t\t\tcurrentClass.methods[parsed.name] = parsed;\n\t\t\t\t\tcurrentMethod = parsed;\n\t\t\t\t}\n\t\t\t\telse if(parsed.annotation === 'constructor' && currentClass)\n\t\t\t\t{\n\t\t\t\t\tcurrentClass.constructors = currentClass.constructors || [];\n\t\t\t\t\tcurrentClass.constructors.push(parsed); \n\t\t\t\t\tcurrentMethod = parsed; \n\t\t\t\t}\n\n\n\t\t\t\telse if(parsed.annotation === 'function' && currentModule)\n\t\t\t\t{\n\t\t\t\t\tcurrentModule.functions = currentModule.functions || [];\n\t\t\t\t\tcurrentModule.functions.push(parsed); \n\t\t\t\t\tcurrentMethod = parsed; // heads up - so future @params and @returns are assigned to this function\n\t\t\t\t}\n\n\t\t\t\t//? @property and @event and @attribute are treated similarly\n\t\t\t\telse if(parsed.annotation === 'property' && currentClass)\n\t\t\t\t{\n\t\t\t\t\tcurrentClass.properties = currentClass.properties || {};\n\t\t\t\t\tcurrentClass.properties[parsed.name] = parsed;\n\t\t\t\t}\n\t\t\t\telse if(parsed.annotation === 'event' && currentClass)\n\t\t\t\t{\n\t\t\t\t\tcurrentClass.events = currentClass.events || {};\n\t\t\t\t\tcurrentClass.events[parsed.name] = parsed;\n\t\t\t\t}\n\t\t\t\telse if(parsed.annotation === 'attribute' && currentClass)\n\t\t\t\t{\n\t\t\t\t\tcurrentClass.attributes = currentClass.attributes || {};\n\t\t\t\t\tcurrentClass.attributes[parsed.name] = parsed;\n\t\t\t\t}\n\n\t\t\t\tself.afterParseNodePlugins.execute({\n\t\t\t\t\tnode: parsed\n\t\t\t\t,\tjsdocmaker: self\n\t\t\t\t\t//add loop context information to plugins\n\t\t\t\t,\tcurrentClass: currentClass\n\t\t\t\t,\tcurrentMethod: currentMethod\n\t\t\t\t,\tcurrentModule: currentModule\n\t\t\t\t,\tcurrentFile: currentFile\n\t\t\t\t});\n\t\t\t}); \n\t\t});\n\t\t\n\t}); \n};\n\n// @method {Unit} parseUnit parse a simple substring like '@annotation {Type} a text' into an object {annotation, type, text} object.\n// syntax: @method {String} methodName blabla @return {Number} blabla @param {Object} p1 blabla\nJsDocMaker.prototype.parseUnit = function(str, comment)\n{\n\t// TODO: split str into major units and then do the parsing\n\tvar parsed = this.parseUnitSimple(str, comment); \n\tif(!parsed)\n\t{\n\t\treturn null;\n\t}\n\tvar ret = [parsed];\n\tif(parsed.theRestString)\n\t{\n\t\tvar s = parsed.theRestString; \n\t\tvar child;\n\t\twhile((child = this.parseUnitSimple(s, comment)))\n\t\t{\n\t\t\tif(child.annotation === 'class') {\n\t\t\t\tret.push(child); \n\t\t\t\tparsed = child;\n\t\t\t}\n\t\t\telse\n\t\t\t{\t\t\t\t\t\n\t\t\t\tparsed.children = parsed.children || []; \n\t\t\t\tparsed.children.push(child); \n\t\t\t}\n\t\t\ts = child.theRestString; \n\t\t}\n\t}\n\treturn ret; \n}; \n\n//@method parseUnitSimple @param {String} str @param {ASTSprimaNode} comment\nJsDocMaker.prototype.parseUnitSimple = function(str, comment) \n{\t\n\tif(!str)\n\t{\n\t\treturn null;\n\t}\n\tvar result;\n\tvar regexp = null; \n\n\t// HEADS UP - TODO: the fgollowing two regex definitions must be identical in the content but not perhasin the endings/begginigns / globals\n\t// if you fix one you must also fix the other\n\tif(comment.type==='Line')\n\t{\n\t\tstr = JsDocMaker.stringFullTrim(str); \n\t\tregexp = /\\s*@([\\w\\.\\-\\_]+)\\s*(\\{[\\w<>\\|, #:\\(\\)\\.]+\\}){0,1}\\s*([\\w:\\-\\._\\$]+){0,1}(.*)\\s*/i; \n\t\tresult = regexp.exec(str);\n\t}\n\telse\n\t{\n\t\tstr = JsDocMaker.stringTrim(str); \n\t\tregexp = /\\s*@([\\w\\.\\-\\_]+)\\s*(\\{[\\w<>\\|, #:\\(\\)\\.]+\\}){0,1}\\s*([\\w:\\-\\._\\$]+){0,1}([.\\s\\w\\W]*)/gmi;\n\t\t//TODO: I have to put this regexp inline here - if not the second time I call exec on the instance it won't match. This is because the 'g' modifier.\n\t\tresult = regexp.exec(str); \n\t}\n\tif(!result || result.length<4)\n\t{\n\t\treturn null;  \n\t}\n\tvar text = result[4] || '';\n\t\t\n\tvar splitted = JsDocMaker.splitAndPreserve(text, this.annotationRegexp) || [''];  \n\ttext = splitted[0]; \n\t//@property {String} lineCommentSeparator used to separate each Line comment type text\n\tthis.lineCommentSeparator = this.lineCommentSeparator || '\\n';\n\ttext = text.replace(new RegExp(this.lineCommentSeparatorMark, 'g'), this.lineCommentSeparator);\n\ttext = JsDocMaker.stringTrim(text||'')\n\tsplitted.splice(0,1); \n\tvar ret = {\n\t\tannotation: result[1]\n\t,\ttype: result[2]\n\t,\tname: result[3]\n\t,\ttext: text\n\t,\ttheRestString: JsDocMaker.stringTrim(splitted.join(''))\n\t};\n\n\tthis.afterParseUnitSimplePlugins.execute({node:ret, jsdocmaker:this}); \n\n\treturn ret;\n}; \n\n\n\n// at last we want to document the output ast data that the parser returns:\n\n// @property {JsDocMaker.Data} data the main data on which the parser and plugins will be working on. This is the resulting AST of jsdoc.\n\n\n//@filename {Foo} fileName src/jsdocmaker/core/plugin.js\n\n// @module shortjsdoc.plugin\nvar JsDocMaker = require('./class')\n,\t_ = require('underscore'); \n\n// @class PluginContainer a plugin container can be used for installing plugins and then processing \n// some action with all of them, executing them in sequence.\n// A plugin is basically a function that acts on some data - state\n// Registered plugins are executed secuentially. plugin execution arguments can be modified so next-to-execute plugin can \n// consume new information - same with return value.\nvar PluginContainer = function()\n{\n\tthis.plugins = [];\n};\n\n//expose\nJsDocMaker.PluginContainer = PluginContainer; \n\n//@method add @param {JsDocMakerPlugin} plugin\nPluginContainer.prototype.add = function(plugin)\n{\n\tthis.plugins.push(plugin); \n\tthis.priorized = null;//clean priorized cache\n}; \n\n//TODO: remove(plugin)\n\n// @method execute @param {Object} @param {Any} input options @return {Any}\nPluginContainer.prototype.execute = function(options, input)\n{\n\tvar result = null;\n\tthis.visitPlugins(function(plugin)\n\t{\n\t\tresult = plugin.execute(options, result);\n\t}); \n\treturn result; \n}; \n\n//@method visitPlugins visit children plugins respecting priority @param {Function} visitor\nPluginContainer.prototype.visitPlugins = function(visitor)\n{\n\t// @property {Array<Array<Plugin>>} priorized array of priorities - each priority index contains the plugins with that priority\n\tvar priorized = this.priorized;// = (this.priorized || [1]); //priority calculations cache\n\n\tif(!priorized)\n\t{\n\t\tpriorized = this.priorized = []; \n\t\tfor (var i = 0; i < PluginContainer.MAX_PRIORITY; i++) \n\t\t{\n\t\t\tpriorized[i] = []; \n\t\t};\n\t\t_(this.plugins).each(function(plugin)\n\t\t{\n\t\t\t// visitor(plugin); \n\t\t\tvar p = plugin.priority || PluginContainer.DEFAULT_PRIORITY; // priority zero is invalid and it is treated as default\n\t\t\t// priorized[p] = priorized[p] || []; \n\t\t\tpriorized[p].push(plugin); \n\t\t}); \n\t}\n\n\tfor (var i = 1; i < priorized.length; i++) \n\t{\n\t\tvar p = priorized[i]; \n\t\tfor (var j = 0; j < p.length; j++) \n\t\t{\n\t\t\tvisitor(p[j]);\n\t\t};\n\t};\n}; \n\nPluginContainer.DEFAULT_PRIORITY = 6; \nPluginContainer.MAX_PRIORITY = 10; \n\n// TODO: priority\n\n\n\n// @class JsDocMakerPlugin\n// @property {String} name\n// @method execute execute this plugin @param{Object}options @param {Any}result \n// @returns{Any} result possible enriched by the plugin in the chain\n\nmodule.exports = PluginContainer;\n\n\n\n\n\n\n//@method globalPlugins @static\n// JsDocMaker.registerGlobalPlugin = function(pluginContainerName, plugin)\n// {\n// \tJsDocMaker.prototype.plugins = JsDocMaker.prototype.plugins || {};\n// \tJsDocMaker.globalPlugins[pluginContainerName] = JsDocMaker.globalPlugins[pluginContainerName] || {}; \n// }; \n// //@method initializePluginContainers called in the constructor - will install all static plugins registered with JsDocMaker.registerGlobalPlugin\n// JsDocMaker.prototype.initializePluginContainers = function()\n// {\n// }\n\n\n\n\n\n//@filename {Foo} fileName src/jsdocmaker/core/postprocess.js\n\n// @module shortjsdoc @class JsDocMaker\nvar JsDocMaker = require('./class'); \nvar _ = require('underscore'); \nvar PluginContainer = require('./plugin'); \n\n//POST PROCESSING\n\n// @property {PluginContainer} beforeTypeBindingPlugins these plugins accept an object like \n// {node:parsed:jsdocmaker:self} and perform some modification to passed node:parsed instance.\n// This is done just before doing the type binding.\nJsDocMaker.prototype.beforeTypeBindingPlugins = new PluginContainer(); \n\n// @property {PluginContainer} afterTypeBindingPlugins these plugins accept an object like \n// {node:parsed:jsdocmaker:self} and perform some modification to passed node:parsed instance.\n// This is done just after doing the type binding.\nJsDocMaker.prototype.afterTypeBindingPlugins = new PluginContainer(); \n\n// @method postProccess so the data is already parsed but we want to normalize some \n// children like @extend and @ module to be properties of the unit instead children.\n// Also we enforce explicit  parent reference, this is a class must reference its \n// parent module and a method muest reference its parent class. Also related to this \n// is the fullname property that will return an unique full name in the format \n// '$MODULE.$CLASS.$METHOD'. We assume that a module contains unique named classes and \n// that classes contain unique named properties and methods. \nJsDocMaker.prototype.postProccess = function()\n{\n\tvar self = this;\n\t// set params and throws of constructors\n\t_(self.data.classes).each(function(c)\n\t{\n\t\t_(c.constructors).each(function(co)\n\t\t{\n\t\t\tco.params = _(co.children||[]).filter(function(child)\n\t\t\t{\n\t\t\t\treturn child.annotation === 'param'; \n\t\t\t});\n\n\t\t\tco.throws = _(co.children||[]).filter(function(child)\n\t\t\t{\n\t\t\t\treturn child.annotation === 'throw' || child.annotation === 'throws'; \n\t\t\t});\n\t\t}); \n\t}); \n}; \n\n\n//@method postProccessBinding precondion: call postProccess() first. We separated the post proccessing in two because we shouln't do JSON.stringify() after we bind types because of recursive loops. \nJsDocMaker.prototype.postProccessBinding = function()\n{\n\tif(this.literalObjectInstall)\n\t{\n\t\tthis.literalObjectInstall(); \n\t}\n\tvar self = this;\n\n\t_(self.data.modules).each(function(m)\n\t{\n\t\tself.beforeTypeBindingPlugins.execute({node: m, jsdocmaker: self});\n\t\tself._postProccessBinding_methodSetup(m.functions, m, true);\n\t});\n\t\n\t//at this points we have all our modules and classes - now we normalize extend, methods and params and also do the type binding. \n\t_(self.data.classes).each(function(c)\n\t{\n\t\tself.beforeTypeBindingPlugins.execute({node: c, jsdocmaker: self});\n\t\t//class.extends property\n\t\tvar extend = _(c.children||[]).find(function(child)\n\t\t{\n\t\t\treturn child.annotation === 'extend' || child.annotation === 'extends'; \n\t\t}); \n\t\tif(!extend) // All classes must extend something\n\t\t{\n\t\t\textend = c.extends = (self.bindClass(JsDocMaker.DEFAULT_CLASS, c) || {error: 'NAME_NOT_FOUND', name: JsDocMaker.DEFAULT_CLASS});\n\t\t}\n\t\telse \n\t\t{\n\t\t\tc.extends = self.bindClass(extend.name, c);\n\t\t\tc.children = _(c.children).without(extend);\t//TODO: why we would want to do this? - remove this line\n\t\t}\n\n\t\tvar implement = _(c.children||[]).filter(function(child)\n\t\t{\n\t\t\treturn child.annotation === 'implement' || child.annotation === 'implements'; \n\t\t}) || []; \n\t\tif(!implement.length) // All classes must implement something\n\t\t{\n\t\t\timplement = c.implements = []//[(self.bindClass(JsDocMaker.DEFAULT_CLASS, c) || {error: 'NAME_NOT_FOUND', name: JsDocMaker.DEFAULT_CLASS})];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tc.implements = c.implements || [];\n\t\t\t_.each(implement, function(i)\n\t\t\t{\n\t\t\t\tc.implements.push(self.bindClass(i.name, c));\n\t\t\t\tc.children = _(c.children).without(i);\t//TODO: why we would want to do this? - remove this line\n\t\t\t})\n\t\t}\n\n\n\t\t//setup methods & constructors\n\n\t\tvar methods = _(c.methods).clone() || {};\n\t\tif(c.constructors) \n        {\n            for (var i = 0; i < c.constructors.length; i++) \n            {\n                var cname = 'constructor ' + i;\n                methods[cname] = c.constructors[i]; //using invalid method name\n                c.constructors[i].name = i+'';\n            }\n        }\n\n\t\tself._postProccessBinding_methodSetup(methods, c);\t\t\n\n\t\t//setup properties\n\t\tvar propertySetup = function(prop)\n\t\t{\n\t\t\tprop.ownerClass = c.absoluteName;\n\t\t\tprop.absoluteName = c.absoluteName + JsDocMaker.ABSOLUTE_NAME_SEPARATOR + prop.name; \n\n\t\t\tif(self.installModifiers)\n\t\t\t{\n\t\t\t\tself.installModifiers(prop); \n\t\t\t}\n\t\t\tif(_(prop.type).isString())\n\t\t\t{\n\t\t\t\tprop.type = self.parseTypeString(prop.type, c) || prop.type;\n\t\t\t}\n\n\t\t\tself.beforeTypeBindingPlugins.execute({node: prop, jsdocmaker: self});\n\t\t}; \n\t\t_(c.properties).each(propertySetup);\n\t\t_(c.events).each(propertySetup);\n\t\t_(c.attributes).each(propertySetup);\t\t\n\t});\n\n\tself.afterTypeBindingPlugins.execute({jsdocmaker: self});\n};\n\nJsDocMaker.prototype._postProccessBinding_methodSetup = function(methods, c, isFunction)\n{\n\tvar self = this;\n\tc = c || {}; \n\t_(methods).each(function(method)\n\t{\n\t\tself.beforeTypeBindingPlugins.execute({node: method, jsdocmaker: self});\n\t\t//method.param property\n\t\tvar params = _(method.children||[]).filter(function(child)\n\t\t{\n\t\t\tchild.text = JsDocMaker.stringTrim(child.text||''); \n\t\t\treturn child.annotation === 'param'; \n\t\t}); \n\t\tmethod.params = params; \n\n\t\tvar absoluteName = c.absoluteName || c.name || '';\n\t\tif(!isFunction)\n\t\t{\n\t\t\tmethod.ownerClass = absoluteName;\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmethod.ownerModule = absoluteName;\n\t\t}\t\t\n\t\tmethod.absoluteName = absoluteName + JsDocMaker.ABSOLUTE_NAME_SEPARATOR + method.name; \n\n\t\t_(method.params).each(function(param)\n\t\t{\n\t\t\tself.beforeTypeBindingPlugins.execute({node: param, jsdocmaker: self});\n\n\t\t\tif(_(param.type).isString())\n\t\t\t{\n\t\t\t\tparam.typeOriginalString = param.type; \n\t\t\t\tparam.type = self.parseTypeString(param.type, c) || param.type;\t\t\t\t\t\t\n\t\t\t}\n\t\t}); \n\n\t\t//method throws property\n\t\tvar throw$ = _(method.children||[]).filter(function(child)\n\t\t{\n\t\t\treturn child.annotation === 'throw' || child.annotation === 'throws'; \n\t\t}); \n\t\tmethod.throws = throw$; \n\t\t_(method.throws).each(function(t)\n\t\t{\n\t\t\tself.beforeTypeBindingPlugins.execute({node: t, jsdocmaker: self});\n\n\t\t\t//because @throws doesn't have a name it breaks our simple grammar, so we merge the name with its text.\n\t\t\tt.text = (t.name ? t.name+' ' : '') + (t.text||''); \n\t\t\tif(_(t.type).isString())\n\t\t\t{\n\t\t\t\tt.typeOriginalString = t.type; \n\t\t\t\tt.type = self.parseTypeString(t.type, c) || t.type;\t\t\t\t\t\t\n\t\t\t}\n\t\t}); \n\n\t\t//method.returns property\n\t\tvar returns = _(method.children||[]).filter(function(child)\n\t\t{\t\t\t\t\n\t\t\tself.beforeTypeBindingPlugins.execute({node: child, jsdocmaker: self});\n\t\t\tchild.text = JsDocMaker.stringTrim(child.text||''); \n\t\t\treturn child.annotation === 'returns' || child.annotation === 'return'; \n\t\t}); \n\t\tmethod.returns = returns.length ? returns[0] : {name:'',type:''};\n\n\t\t//because @returns doesn't have a name it breaks our simple grammar, so we merge the name with its text.\n\t\tmethod.returns.text = (method.returns.name ? method.returns.name+' ' : '') + (method.returns.text||''); \n\n\t\tif(_(method.returns.type).isString())\n\t\t{\n\t\t\tmethod.returns.type = self.parseTypeString(method.returns.type, c) || method.returns.type;\t\t\t\t\t\t\n\t\t}\n\n\t\tif(self.installModifiers)\n\t\t{\n\t\t\tself.installModifiers(method); \n\t\t}\n\t});\n};\n\n//@filename {Foo} fileName src/jsdocmaker/core/preprocess.js\n\n/* @module shortjsdoc\n\n#Comment Preprocessors\n\nThe core of comment preprocessing is done ba couple of plugins executed at allCommentPreprocessorPlugins and \ningeneral normalizes the comments text, delete non relevant comments, unify line comments into a single one, etc\n\n*/\nvar JsDocMaker = require('./class'); \nvar _ = require('underscore'); \n\n//COMMENT PREPROCESSORS\n\n//@class PreprocessCommentsPlugin1 @extends JsDocMakerPlugin  this plugin is registered in JsDocMaker.prototype.allCommentPreprocessorPlugins plugin container\n// and do an initial preprocesing on the comments erasing those marked comments to be ignored, and fixing its text to support alternative syntax.\nvar preprocessCommentsPlugin1 = {\n\tname: 'preprocessCommentsPlugin1'\n,\texecute: function(options)\n\t{\n\t\tvar comments = options.node;\n\t\t//we do the parsing block by block,\n\t\tfor (var i = 0; i < comments.length; i++) \n\t\t{\n\t\t\tvar node = comments[i];//options.node; \n\t\t\tnode.value = node.value || ''; \n\n\t\t\t// fix styled comment blocks with '*' as new line prefix\n\t\t\t// if(node.type === 'Block')\n\t\t\t// {\n\t\t\t// \t// Note: syntax /** - not necesary to implement\n\t\t\t// \tdebugger\n\t\t\t// \tnode.value = node.value.replace(/\\n \\*/gi, '\\n');\n\t\t\t// }\n\n\t\t\t// remove comments that starts with ignoreCommentPrefix\n\t\t\tif(JsDocMaker.startsWith(JsDocMaker.stringTrim(node.value), options.jsdocMaker.ignoreCommentPrefix))\n\t\t\t{\n\t\t\t\t//if \\n * is detected it is fixed to not count the decorative '*'\n\t\t\t\tcomments.splice(i, 1); //remove this node\n\t\t\t}\n\t\t}\n\t}\n} ; \n\n//install it as comment preprocessor plugin!\nJsDocMaker.prototype.allCommentPreprocessorPlugins.add(preprocessCommentsPlugin1);//.push(JsDocMaker.prototype.preprocessComments); \n\n\n//@class FixUnamedAnnotationsPlugin @extends JsDocMakerPlugin This plugin is installed at JsDocMaker.prototype.commentPreprocessorPlugins and and solves the following problem: \n//Our regexp format expect an anotation with a name. So for enabling unamed annotations we do this dirty fix, this is add a name to precondition\nvar fixUnamedAnnotationsPlugin = {\n\tname: 'fixUnamedAnnotationsPlugin'\n,\tpriority: 3\n,\texecute: function(options)\n\t{\n\t\tvar node = options.node;\n\t\tif(node.value)\n\t\t{\n\t\t\tnode.value = node.value.replace(/@constructor/gi, '@constructor n'); \n\t\t\tnode.value = node.value.replace(/(@\\w+)\\s*$/gi, '$1 dummy ');\n\t\t\tnode.value = node.value.replace(/(@\\w+)\\s+(@\\w+)/gi, '$1 dummy $2');\n\t\t}\n\t}\n}; \n//install it as comment preprocessor plugin!\nJsDocMaker.prototype.commentPreprocessorPlugins.add(fixUnamedAnnotationsPlugin); \n\n//@class UnifyLineCommentsPlugin @extends JsDocMakerPlugin this is a very important plugin for normalize our js input Line comments \n// It is executed at JsDocMaker.prototype.allCommentPreprocessorPlugins\nvar unifyLineCommentsPlugin = {\n\tname: 'unifyLineCommentsPlugin'\n,\texecute: function(options)\n\t{\n\t\tvar i = 0\n\t\t,\tcomments = options.node\n\t\t,\tjsdocMaker = options.jsdocMaker; \n\t\n\t\tjsdocMaker.lineCommentSeparatorMark = '_lineCommentSeparatorMark_';\n\t\twhile(i < comments.length - 1)\n\t\t{\n\t\t\tvar c = comments[i]\n\t\t\t,\tnext = comments[i+1]; \n\n\t\t\tvar sss = JsDocMaker.stringFullTrim(options.jsdocMaker.data.source.substring(c.range[1], next.range[0])); \n\t\t\tif (c.type==='Line' && next.type==='Line' && !sss)\n\t\t\t{\n\t\t\t\tc.value += ' ' + jsdocMaker.lineCommentSeparatorMark + ' ' + next.value; \n\t\t\t\tc.range[1] = next.range[1]; \n\t\t\t\tcomments.splice(i+1, 1); \n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n}; \nJsDocMaker.prototype.allCommentPreprocessorPlugins.add(unifyLineCommentsPlugin); \n\n\n\n//@filename {Foo} fileName src/jsdocmaker/core/type-parsing.js\n\n/* jshint evil:true */\n// @module shortjsdoc @class JsDocMaker\nvar JsDocMaker = require('./class'); \nvar shortjsdocParseLiteralObject = require('../objectTypeParser/parser.js');\nvar _ = require('underscore'); \n\n//TYPE PARSING\n\n//@method parseType parse a type string like 'Map<String,Array<Apple>>' or 'String' and return an object like {name: 'Map',params:['String',{name: 'Array',params:['Apple']}]}. This is the default type parser. \n//It depends on type parser file typeParser.js @static\nJsDocMaker.parseType = function(s)\n{\n\tvar parsed, ss;\n\tif(s.indexOf(':')!==-1)\n\t{\n\t\tss = '{'+s+'}'; \n\t\tparsed = JsDocMaker.parseLiteralObjectType(ss);\n\t}\n\telse\n\t{\n\t\tss ='{name:'+s+'}'; \n\t\tparsed = JsDocMaker.parseLiteralObjectType(ss);\n\t\tparsed = parsed.name; \n\t}\t\n\treturn parsed;\n}; \n\n// @method parse a object literal type string like '' @return {Object} the parsed object @static\nJsDocMaker.parseLiteralObjectType = function(s)\n{\n\tvar parsed = shortjsdocParseLiteralObject.parse(s);\t\n\tvar obj = eval('(' + parsed + ')'); \n\treturn obj;\n}; \n\nJsDocMaker.prototype.registerTypeParser = function(typeParser)\n{\n\tthis.typeParsers = this.typeParsers || {};\n\tthis.typeParsers[typeParser.name] = typeParser; \n}; \n\n\n\n//@filename {Foo} fileName src/jsdocmaker/core/util.js\n\n// @module shortjsdoc @class JsDocMaker\nvar JsDocMaker = require('./class'); \nvar _ = require('underscore'); \n\n// STATIC UTILITIES\n\n// @method splitAndPreserve search for given regexp and split the given string but preserving the matches\n// @param {Regexp} regexp must contain a capturing group (like /(\\s+@\\w+)/gi)\n// @return {Array of string}\n// @static\nJsDocMaker.splitAndPreserve = function(string, replace)\n{\n\tstring = string || '';\n\tvar marker = '_%_%_';\n\tvar splitted = string.replace(replace, marker+'$1');\n\tif(splitted.length<2)\n\t{\n\t\treturn null; //TODO: notify error?\n\t}\n\tsplitted = splitted.split(marker);\n\treturn splitted; \n}; \n\n//@method stringFullTrim @param {String} s @static\nJsDocMaker.stringFullTrim = function(s)\n{\n\treturn (s||'').replace(/(?:(?:^|\\n)\\s+|\\s+(?:$|\\n))/g,'').replace(/\\s+/g,' ');\n};\n//@method stringTrim @param {String} s @static\nJsDocMaker.stringTrim = function(str)\n{\n\tvar whitespace = ' \\n\\r\\t\\f\\x0b\\xa0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000';\n\tfor (var i = 0; i < str.length; i++) {\n\t\tif (whitespace.indexOf(str.charAt(i)) === -1) {\n\t\t\tstr = str.substring(i);\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (i = str.length - 1; i >= 0; i--) {\n\t\tif (whitespace.indexOf(str.charAt(i)) === -1) {\n\t\t\tstr = str.substring(0, i + 1);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn whitespace.indexOf(str.charAt(0)) === -1 ? str : '';\n};\n//@method stringEndsWith @static\nJsDocMaker.stringEndsWith = function(str, suffix) \n{\n\tstr = str || '';\n\treturn str.indexOf(suffix, str.length - suffix.length) !== -1;\n}; \n//@method stringEndsWith @static\nJsDocMaker.startsWith = function(s, prefix)\n{\n\ts = s || '';\n\treturn s.indexOf(prefix)===0;\n}; \n\n//@method error @param {String}msg\nJsDocMaker.prototype.error = function(msg)\n{\n\tconsole.error('Error detected: ' + msg); \n\t// throw msg;\n}; \n\n\n// JsDocMaker.getChildren = function(node, compareProperties)\n// {\n// \tvar a = []\n// }; \n// JsDocMaker.getAChildren = function(node, compareProperties)\n// {\n// \tvar c = JsDocMaker.getChildren(node, compareProperties);\n// \treturn (c && c.length) ? return c[0] : null;\n// }; \n\n//@filename {Foo} fileName src/jsdocmaker/main.js\n\nvar JsDocMaker = require('./core/main'); \n\nrequire('./plugin/main.js'); \n\nmodule.exports = JsDocMaker;\n\n//@filename {Foo} fileName src/jsdocmaker/objectTypeParser/parser.js\n\n/*\n\nThis is a syntax definition compiled to JavaScript that parses an expression like \n\n  {name:String,colors:Map<String,Array<String>>}\n\nHow to work with this file ? open the following syntax into http://pegjs.org/online. \nThen make sure it returns the parse() function in the global 'shortjsdocParseLiteralObject'\n\n\nstart\n  = \"{\" exprs:(EXPR)+ [,]* \"}\" {return '{' + exprs.join(',') + '}'; }\n\nEXPR\n  = name:NAME \":\" value:(VALUE) [,]* {return name + ':' + value; }\n\nVALUE\n  = type:TYPE / name:NAME [,]* {if(typeof name !== 'undefined'){return name;}}\n\nTYPE\n  = name:NAME \"<\" list:(LIST_OF_NAMES)+ \">\" {return '{name: '+ name +',params:['+list.join(',')+']}'; }\n\nNAME\n  = name:[a-zA-z1-9_.]+ {return '\\''+name.join('')+'\\''; }\n\nLIST_OF_NAMES\n  = type:TYPE / name:NAME [,]* {\n  if(typeof name !== 'undefined'){\n  return name; \n  }\n}\n\n*/\nmodule.exports = (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleIndices = { start: 0 },\n        peg$startRuleIndex   = 0,\n\n        peg$consts = [\n          peg$FAILED,\n          \"{\",\n          { type: \"literal\", value: \"{\", description: \"\\\"{\\\"\" },\n          [],\n          /^[,]/,\n          { type: \"class\", value: \"[,]\", description: \"[,]\" },\n          \"}\",\n          { type: \"literal\", value: \"}\", description: \"\\\"}\\\"\" },\n          function(exprs) {return '{' + exprs.join(',') + '}'; },\n          \":\",\n          { type: \"literal\", value: \":\", description: \"\\\":\\\"\" },\n          function(name, value) {return name + ':' + value; },\n          function(name) {if(typeof name !== 'undefined'){return name;}},\n          \"<\",\n          { type: \"literal\", value: \"<\", description: \"\\\"<\\\"\" },\n          \">\",\n          { type: \"literal\", value: \">\", description: \"\\\">\\\"\" },\n          function(name, list) {return '{name: '+ name +',params:['+list.join(',')+']}'; },\n          /^[a-zA-z1-9_.]/,\n          { type: \"class\", value: \"[a-zA-z1-9_.]\", description: \"[a-zA-z1-9_.]\" },\n          function(name) {return '\\''+name.join('')+'\\''; },\n          function(name) {\n            if(typeof name !== 'undefined'){\n            return name; \n            }\n          }\n        ],\n\n        peg$bytecode = [\n          peg$decode(\"!.!\\\"\\\"2!3\\\"+o$ #7!+&$,#&7!\\\"\\\"\\\"  +V% #0$\\\"\\\"1!3%,)&0$\\\"\\\"1!3%\\\"+8%.&\\\"\\\"2&3'+(%4$6($!\\\"%$$#  $##  $\\\"#  \\\"#  \"),\n          peg$decode(\"!7$+a$.)\\\"\\\"2)3*+Q%7\\\"+G% #0$\\\"\\\"1!3%,)&0$\\\"\\\"1!3%\\\"+)%4$6+$\\\"#!%$$#  $##  $\\\"#  \\\"#  \"),\n          peg$decode(\"7#*Q \\\"!7$+F$ #0$\\\"\\\"1!3%,)&0$\\\"\\\"1!3%\\\"+(%4\\\"6,\\\"!!%$\\\"#  \\\"#  \"),\n          peg$decode(\"!7$+b$.-\\\"\\\"2-3.+R% #7%+&$,#&7%\\\"\\\"\\\"  +9%./\\\"\\\"2/30+)%4$61$\\\"#!%$$#  $##  $\\\"#  \\\"#  \"),\n          peg$decode(\"! #02\\\"\\\"1!33+,$,)&02\\\"\\\"1!33\\\"\\\"\\\"  +' 4!64!! %\"),\n          peg$decode(\"7#*Q \\\"!7$+F$ #0$\\\"\\\"1!3%,)&0$\\\"\\\"1!3%\\\"+(%4\\\"65\\\"!!%$\\\"#  \\\"#  \")\n        ],\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleIndices)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleIndex = peg$startRuleIndices[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$decode(s) {\n      var bc = new Array(s.length), i;\n\n      for (i = 0; i < s.length; i++) {\n        bc[i] = s.charCodeAt(i) - 32;\n      }\n\n      return bc;\n    }\n\n    function peg$parseRule(index) {\n      var bc    = peg$bytecode[index],\n          ip    = 0,\n          ips   = [],\n          end   = bc.length,\n          ends  = [],\n          stack = [],\n          params, i;\n\n      function protect(object) {\n        return Object.prototype.toString.apply(object) === \"[object Array]\" ? [] : object;\n      }\n\n      while (true) {\n        while (ip < end) {\n          switch (bc[ip]) {\n            case 0:\n              stack.push(protect(peg$consts[bc[ip + 1]]));\n              ip += 2;\n              break;\n\n            case 1:\n              stack.push(peg$currPos);\n              ip++;\n              break;\n\n            case 2:\n              stack.pop();\n              ip++;\n              break;\n\n            case 3:\n              peg$currPos = stack.pop();\n              ip++;\n              break;\n\n            case 4:\n              stack.length -= bc[ip + 1];\n              ip += 2;\n              break;\n\n            case 5:\n              stack.splice(-2, 1);\n              ip++;\n              break;\n\n            case 6:\n              stack[stack.length - 2].push(stack.pop());\n              ip++;\n              break;\n\n            case 7:\n              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));\n              ip += 2;\n              break;\n\n            case 8:\n              stack.pop();\n              stack.push(input.substring(stack[stack.length - 1], peg$currPos));\n              ip++;\n              break;\n\n            case 9:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (stack[stack.length - 1]) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 10:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (stack[stack.length - 1] === peg$FAILED) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 11:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (stack[stack.length - 1] !== peg$FAILED) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 12:\n              if (stack[stack.length - 1] !== peg$FAILED) {\n                ends.push(end);\n                ips.push(ip);\n\n                end = ip + 2 + bc[ip + 1];\n                ip += 2;\n              } else {\n                ip += 2 + bc[ip + 1];\n              }\n\n              break;\n\n            case 13:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (input.length > peg$currPos) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 14:\n              ends.push(end);\n              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n\n              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {\n                end = ip + 4 + bc[ip + 2];\n                ip += 4;\n              } else {\n                end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                ip += 4 + bc[ip + 2];\n              }\n\n              break;\n\n            case 15:\n              ends.push(end);\n              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n\n              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {\n                end = ip + 4 + bc[ip + 2];\n                ip += 4;\n              } else {\n                end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                ip += 4 + bc[ip + 2];\n              }\n\n              break;\n\n            case 16:\n              ends.push(end);\n              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n\n              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {\n                end = ip + 4 + bc[ip + 2];\n                ip += 4;\n              } else {\n                end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                ip += 4 + bc[ip + 2];\n              }\n\n              break;\n\n            case 17:\n              stack.push(input.substr(peg$currPos, bc[ip + 1]));\n              peg$currPos += bc[ip + 1];\n              ip += 2;\n              break;\n\n            case 18:\n              stack.push(peg$consts[bc[ip + 1]]);\n              peg$currPos += peg$consts[bc[ip + 1]].length;\n              ip += 2;\n              break;\n\n            case 19:\n              stack.push(peg$FAILED);\n              if (peg$silentFails === 0) {\n                peg$fail(peg$consts[bc[ip + 1]]);\n              }\n              ip += 2;\n              break;\n\n            case 20:\n              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];\n              ip += 2;\n              break;\n\n            case 21:\n              peg$reportedPos = peg$currPos;\n              ip++;\n              break;\n\n            case 22:\n              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);\n              for (i = 0; i < bc[ip + 3]; i++) {\n                params[i] = stack[stack.length - 1 - params[i]];\n              }\n\n              stack.splice(\n                stack.length - bc[ip + 2],\n                bc[ip + 2],\n                peg$consts[bc[ip + 1]].apply(null, params)\n              );\n\n              ip += 4 + bc[ip + 3];\n              break;\n\n            case 23:\n              stack.push(peg$parseRule(bc[ip + 1]));\n              ip += 2;\n              break;\n\n            case 24:\n              peg$silentFails++;\n              ip++;\n              break;\n\n            case 25:\n              peg$silentFails--;\n              ip++;\n              break;\n\n            default:\n              throw new Error(\"Invalid opcode: \" + bc[ip] + \".\");\n          }\n        }\n\n        if (ends.length > 0) {\n          end = ends.pop();\n          ip = ips.pop();\n        } else {\n          break;\n        }\n      }\n\n      return stack[0];\n    }\n\n    peg$result = peg$parseRule(peg$startRuleIndex);\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})();\n\n//@filename {Foo} fileName src/jsdocmaker/plugin/alias.js\n\n// @module shortjsdoc.plugin.alias \n/*\n#Alias plugin\n\nthis plugin allow to define an alias for annotations and classes. This means we can add name \nalias to annotations or classes. Alias can override previous defined ones. \n\n##Class alias\n\nClass alias can be used to shortcut class names, like \n\n\t@alias class A Array\n\t@alias class O Object\n\t@alias class S String\n\t@alias class N Number\n\t@alias class B Boolean\n\nOr just use the shortcut\n\n\t@alias class A Array O Object S String\n\nAfter this I just can write my types like this:\n\n\t@property {config:O<S,N>,tools:A<Tool>} complex\n\nNote that these plugins perform two tasks using two different plugins: \n1) replace aliases initial annotation with original ones on parsing - the plugin runs on beforeParseNodePlugins\n2) but also perform the aliasing on type binding. This is done on beforeBindClassPlugins\n\nIMPORTANT. alias to complex types are not supported, only alias to simple types. The following is WRONG: @alias class MySuper Array<Leg>\n\n##annotation alias\n@alias annotation task method\n\n##Implementation notes\n\nat preprocessing the alias meta information will be stored in the AST under the 'alias' property. \nThen this information will be consumed at binding time in the second plugin\n\n*/\n\n\nvar JsDocMaker = require('../core/class'); \nvar _ = require('underscore'); \n\n//@class AliasBeforeParseNodePlugin @extends JsDocMakerPlugin a plugin executed at afterParseUnitSimplePlugins. Responsible of TODO \nvar aliasBeforeParseNodePlugin = {\n\n\tname: 'alias'\n\n,\texecute: function(options)\n\t{\n\t\tvar node = options.node\n\t\t,\tcontext = options.jsdocmaker.data\n\t\t,\tself = this;\n\n\t\tcontext.alias = context.alias || {}; \n\n\n\t\tvar aliasList = []; //its a list because node can have many alias children inside. alias is a second-level AST node\n\t\t\t\n\t\tif (node.annotation=='alias')\n\t\t{\t\t\t\n\t\t\taliasList = [node];\n\t\t}\n\t\telse \n\t\t{\n\t\t\taliasList = _(node.children).select(function(c)\n\t\t\t{\n\t\t\t\treturn c.annotation=='alias';\n\t\t\t});\n\t\t}\n\n\t\t_(aliasList).each(function(alias)\n\t\t{\n\t\t\tself.parseAlias(alias, context, true); \n\t\t}); \n\n\t\t//TODO: remove the alias node from comments array ? \n\t\t\n\t}\n\n\t//@method parseAlias @return {JSDocASTNode} the enhanced node with property *alias* enhanced\n\t//@param {JSDocASTNode} alias @param {JsDocMaker} context @param {Boolean} install  @return {Array<JSDocASTNode>} contained in the annotation text.\n,\tparseAlias: function(alias, context, install)\n\t{\n\t\tif(!alias)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tvar a = alias.text.split(/\\s+/)\n\t\t,\tparsed = [];\n\t\tfor (var i = 0; i < a.length; i+=2) \n\t\t{\n\t\t\tvar o = {type: alias.name, name: a[i], target: a[i+1]};\n\t\t\tparsed.push(o); \n\t\t\tif(install)\n\t\t\t{\n\t\t\t\tcontext.alias[o.name] = o;\n\n\t\t\t}\n\t\t}\n\t\treturn parsed;\n\t}\n}; \n\n\n\nJsDocMaker.prototype.afterParseUnitSimplePlugins.add(aliasBeforeParseNodePlugin); \n\n//@class AliasBeforeBindClassPlugin @extends JsDocMakerPlugin a plugin executed at afterParseUnitSimplePlugins. Responsible of TODO \nvar aliasBeforeBindClassPlugin = {\n\tname: 'aliasAfterTypeBindingPlugin'\n\n\t//@param {name:name, baseClass: baseClass, jsdocmaker: this} context  this plugin has the change of chainging the context.\n,\texecute: function(context)\n\t{\n\t\tcontext.jsdocmaker.data.alias = context.jsdocmaker.data.alias || {}; \n\t\tvar alias = context.jsdocmaker.data.alias[context.name]; \n\n\t\tif(alias)\n\t\t{\n\t\t\tcontext.name = alias.target; //alias only sypport targetting single types!\n\t\t}\n\t}\n}; \n\nJsDocMaker.prototype.beforeBindClassPlugins.add(aliasBeforeBindClassPlugin); \n\n//@class annotationAliasPlugin @extends JsDocMakerPlugin a plugin executed at commentPreprocessorPlugins. Responsible of TODO \nvar annotationAliasPlugin = {\n\texecute: function(options)\n\t{\n\t\tvar alias = {}\n\t\tvar regex = /@alias\\s+annotation\\s+([\\w\\-_\\.]+)\\s+([\\w\\-_\\.]+)/gi; //TODO: the core should provide this regex\n\t\toptions.node.value.replace(regex, function(s, newName, targetName)\n\t\t{\n\t\t\talias[newName] = targetName;\n\t\t});\n\t\t_.each(alias, function(targetName, newName)\n\t\t{\n\t\t\tvar newNameRegex = new RegExp('@'+newName, 'gi');\n\t\t\toptions.node.value = options.node.value.replace(newNameRegex, '@'+targetName);\n\t\t});\n\t}\n}\nJsDocMaker.prototype.commentPreprocessorPlugins.add(annotationAliasPlugin);\n\n\n//@filename {Foo} fileName src/jsdocmaker/plugin/comment-indentation.js\n\n/*\n@module shortjsdoc.plugin.comment.indentation \n#Comment indentation plugin\nTakes care of respecting the original indentation of block comments. \nIt will erase the initial spaces of each line according to the comment indentation.\n*/\n\nvar JsDocMaker = require('../core/class'); \nvar _ = require('underscore'); \n\n\n//@class commentIndentationPlugin @extends JsDocMakerPlugin a plugin executed at beforeParseNodePlugins. \nvar commentIndentationPlugin = {\n\n\tname: 'commentIndentation'\n\n,\texecute: function(options)\n\t{\n\t\tif(!options.node.text)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tvar fileSource = options.jsdocmaker.data.files[options.currentFile.fileName]\n\t\tvar beforeCommentText = options.jsdocmaker.data.source.substring(0, options.node.commentRange[0]); \n\n\t\tvar result = /([ \\t]+)$/.exec(beforeCommentText)\n\t\t,\tprefix = 0;\n\t\tif(result && result.length) \n\t\t{\n\t\t\tprefix = result[0];\n\n\t\t\tvar a = options.node.text.split('\\n'), output = [];;\n\t\t\t_(a).each(function(line)\n\t\t\t{\n\t\t\t\tvar repl = line.replace(new RegExp('^'+prefix), ''); \n\t\t\t\t// console.log(line, repl); \n\t\t\t\toutput.push(repl);\n\t\t\t}); \n\n\t\t\t// TODO we are ssumming files have unix end to line. we should pre process all commments first. \n\t\t\toptions.node.text = output.join('\\n');//replaceAll('\\n' + options.node.text, prefix, ''); \n\t\t}\t\n\t}\n}\nJsDocMaker.prototype.afterParseNodePlugins.add(commentIndentationPlugin); \n\n\n// function escapeRegExp(string) \n// {\n//     return string.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n// }\n// function replaceAll(string, find, replace) \n// {\n// \tvar r = new RegExp(escapeRegExp(find), 'g');\n// \tdebugger;\n// \tconsole.log(r)\n// \treturn string.replace(r, replace);\n// }\n\n\n//@filename {Foo} fileName src/jsdocmaker/plugin/dependencies.js\n\n// @module shortjsdoc.plugin.dependencies \n/*\n#dependencies plugin\n\nthis is not technically a plugin because we don't want to make the cmd line tool slower and is a not \nimportant feature. It should be executed by hand in the user agent.\n\n*/\n\n\nvar JsDocMaker = require('../core/class'); \nvar _ = require('underscore'); \n\nvar Tool = function(maker, config)\n{\n\tthis.maker = maker;\n\tthis.config = config || {}; \n}; \n_(Tool.prototype).extend({\n\tcalculateClassDependencies: function()\n\t{\n\t\tvar self = this\n\t\t,\tcurrentClass\n\t\t// ,\tcurrentModule\n\t\t,\tfn = function(node)\n\t\t\t{\n\t\t\t\t// if(node.annotation==='module')\n\t\t\t\t// {\n\t\t\t\t// \tcurrentModule = node; \n\t\t\t\t// }\n\t\t\t\tif(node.annotation==='class')\n\t\t\t\t{\n\t\t\t\t\tcurrentClass = node;\n\t\t\t\t\tcurrentClass.dependencies = currentClass.dependencies || {}; \n\t\t\t\t\tcurrentClass.dependencies.classes = currentClass.dependencies.classes || {}; \n\t\t\t\t\tif(self.config.includeExtends && currentClass.extends && \n\t\t\t\t\t\t!_(self.config.ignoreClasses).contains(currentClass.extends.absoluteName))\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrentClass.dependencies.classes[currentClass.extends.absoluteName] = currentClass.extends; \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar deps = _(node.children).filter(function(c)\n\t\t\t\t{ \n\t\t\t\t\treturn c.annotation==='depends'; \n\t\t\t\t});\n\t\t\t\n\t\t\t\tif(deps && deps.length)\n\t\t\t\t{\t\n\t\t\t\t\t_(deps).each(function(dep)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(dep.name==='class')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar c = self.maker.findClassByName(dep.text);\n\t\t\t\t\t\t\tif(!c)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconsole.log('warning dependency class not found: '+dep.text); \n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif(_(self.config.ignoreClasses).contains(c.absoluteName))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tnode.dependencies = node.dependencies || {}; \n\t\t\t\t\t\t\tnode.dependencies.classes = node.dependencies.classes || {}; \n\t\t\t\t\t\t\tnode.dependencies.classes[c.absoluteName] = c; \n\t\t\t\t\t\t\tif(currentClass)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentClass.dependencies.classes[c.absoluteName] = c; \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// else if(dep.name==='module') //TODO\n\t\t\t\t\t\t// { }\n\t\t\t\t\t\t// else //TOOD: make class to be the default and use name instead of text\n\t\t\t\t\t\t// { }\n\t\t\t\t\t}); \n\t\t\t\t}\n\t\t\t}\n\t\t,\tfn_type = function(type, ownerNode)\n\t\t\t{\n\t\t\t\tif(!currentClass || _(self.config.ignoreClasses).contains(type.absoluteName))\n\t\t\t\t{\n\t\t\t\t\treturn; \n\t\t\t\t}\n\n\t\t\t\t//when iterating types, we automatically add the type as class dependency to the currentClass\n\t\t\t\tif(type.absoluteName !== currentClass.absoluteName && \n\t\t\t\t\t!_(self.config.ignoreClasses).contains(type.absoluteName))\n\t\t\t\t{\n\t\t\t\t\tcurrentClass.dependencies.classes[type.absoluteName] = type; \t\n\t\t\t\t}\n\t\t\t};\n\t\tthis.maker.recurseAST(fn, fn_type); \n\t}\n});\n\nJsDocMaker.prototype.tools = JsDocMaker.tools || {}; \nJsDocMaker.prototype.tools.DependencyTool = Tool; \n\nJsDocMaker.prototype.findClassByName = function(className, data)\n{\n\tdata = data || this.data;\n\tvar c = _(data.classes).find(function(c)\n\t{\n\t\treturn c.absoluteName===className; \n\t});\n\tif(!c)\n\t{\n\t\tc = _(data.classes).find(function(c)\n\t\t{\n\t\t\treturn c.name===className; \n\t\t});\n\t}\n\treturn c; \n}; \n\n//@filename {Foo} fileName src/jsdocmaker/plugin/escape-at.js\n\nvar _ = require('underscore'); \nvar JsDocMaker = require('../core/class'); \nvar PluginContainer = require('../core/plugin'); \n\nrequire('./recurse-plugin-containers');\n\nvar key, keyRegexp; \n\nvar pluginBefore = {\n\tname: 'escape-at'\n,\tpriority: 2\n,\texecute: function(options)\n\t{\n\t\tvar node = options.node;\n\t\tif(!key)\n\t\t{\n\t\t\t// debugger;\n\t\t\tkey = 'escape_at_'+_.uniqueId();\n\t\t\tkeyRegexp = new RegExp(key, 'g'); \n\t\t}\n\n\t\tnode.value = (node.value||'').replace(/@@/g, key); \n\t}\n}; \nJsDocMaker.prototype.commentPreprocessorPlugins.add(pluginBefore);\n\n\nvar pluginAfter = {\n\tname: 'escape-at'\n,\texecute: function(node) \n\t{\n\t\tnode.text = (node.text||'').replace(keyRegexp, '@'); \n\t}\n}; \nJsDocMaker.prototype.afterTypeBindingRecurseASTPlugins.add(pluginAfter);\n\n\n\n\n\n// old impl\n// var plugin = {\n// \tname: 'escape-at'\n// ,\texecute: function(node)\n// \t{\n// \t\t// debugger;\n// \t\tnode.text = (node.text||'').replace(/@@/g, '@'); \n// \t}\n// }; \n// // debugger;\n// JsDocMaker.prototype.afterTypeBindingRecurseASTPlugins.add(plugin);\n//JsDocMaker.prototype.commentPreprocessorPlugins.add(plugin);\n\n\n\n//@filename {Foo} fileName src/jsdocmaker/plugin/inherited.js\n\n// @module shortjsdoc.plugin @class JsDocMaker\nvar JsDocMaker = require('../core/class'); \nvar _ = require('underscore'); \n\n// TODO : turn this into a normal plugin - right now it is mixing itself in JsDocMaker\n// INHERITED methods&properties postproccessing. Optional\n\n//@method postProccessInherited calculates inherited methods&properties and put it in class'properties inheritedMethods and inheritedProperties\nJsDocMaker.prototype.postProccessInherited = function()\n{\n\tvar self = this;\n\t_(self.data.classes).each(function(c)\n\t{\n\t\tc.inherited\t= c.inherited || {}; \n\t\tvar inheritedData = {}; \n\n\t\tc.inherited.methods = c.inherited.methods || {};\n\t\tself.extractInherited(c, c.extends, 'method', inheritedData);\n\t\t_(c.inherited.methods).extend(inheritedData); \n\n\t\tinheritedData = {}; \n\t\tc.inherited.properties = c.inherited.properties || {};\n\t\tself.extractInherited(c, c.extends, 'property', inheritedData);\n\t\t_(c.inherited.properties).extend(inheritedData); \n\n\t\tinheritedData = {}; \n\t\tc.inherited.events = c.inherited.events || {};\n\t\tself.extractInherited(c, c.extends, 'event', inheritedData);\n\t\t_(c.inherited.events).extend(inheritedData); \n\n\t\tinheritedData = {}; \n\t\tc.inherited.attributes = c.inherited.attributes || {};\n\t\tself.extractInherited(c, c.extends, 'attribute', inheritedData);\n\t\t_(c.inherited.attributes).extend(inheritedData); \n\t});\n};\n\n//@method extractInherited @param baseClass @param c @param what @para data\nJsDocMaker.prototype.extractInherited = function(baseClass, c, what, data)\n{\n\tvar self = this;\n\tif(!c || c.nativeTypeUrl)\n\t{\n\t\treturn;\n\t}\n\twhat = what || 'method'; \n\tif(what === 'method')\n\t{\t\t\n\t\t_(c.methods).each(function(method, name)\n\t\t{\n\t\t\tbaseClass.methods = baseClass.methods || {};\n\t\t\tif(!baseClass.methods[name])\n\t\t\t{\n\t\t\t\tdata[name] = method;\n\t\t\t\t// TODO: here we can act and clone the inherited nodes and add more info about the owner\n\t\t\t\t// data[name].inherited = true; \n\t\t\t\t// data[name].inheritedFrom = c; \n\t\t\t}\n\t\t});\n\t}\n\telse if(what === 'property')\n\t{\n\t\t_(c.properties).each(function(p, name)\n\t\t{\n\t\t\tbaseClass.properties = baseClass.properties || {};\n\t\t\tif(!baseClass.properties[name])\n\t\t\t{\n\t\t\t\tdata[name] = p;\n\t\t\t\t// TODO: here we can act and clone the inherited nodes and add more info about the owner\n\t\t\t\t// data[name].inherited = true; \n\t\t\t\t// data[name].inheritedFrom = c; \n\t\t\t}\n\t\t});\n\t}\n\telse if(what === 'event')\n\t{\n\t\t_(c.events).each(function(p, name)\n\t\t{\n\t\t\tbaseClass.events = baseClass.events || {};\n\t\t\tif(!baseClass.events[name])\n\t\t\t{\n\t\t\t\tdata[name] = p;\n\t\t\t\t// TODO: here we can act and clone the inherited nodes and add more info about the owner\t\n\t\t\t\t// data[name].inherited = true; \n\t\t\t\t// data[name].inheritedFrom = c; \n\t\t\t}\n\t\t});\n\t}\n\n\telse if(what === 'attribute')\n\t{\n\t\t_(c.attributes).each(function(p, name)\n\t\t{\n\t\t\tbaseClass.attributes = baseClass.attributes || {};\n\t\t\tif(!baseClass.attributes[name])\n\t\t\t{\n\t\t\t\tdata[name] = p;\n\t\t\t\t// TODO: here we can act and clone the inherited nodes and add more info about the owner\t\n\t\t\t\t// data[name].inherited = true; \n\t\t\t\t// data[name].inheritedFrom = c; \n\t\t\t}\n\t\t});\n\t}\n\n\tif(c.extends && c !== c.extends) //recurse!\n\t{\n\t\tself.extractInherited(baseClass, c.extends, what, data);\n\t}\n};\n\n//@method isClassOwner utility method for knowing if a property is defined in given class or is inherithed\n//@static @param aClass @param prop\nJsDocMaker.classOwnsProperty = function(aClass, prop)\n{\n\tvar result = prop.absoluteName && aClass.absoluteName && prop.absoluteName.indexOf(aClass.absoluteName) === 0; \n\treturn result;\n}; \n\n\n//@filename {Foo} fileName src/jsdocmaker/plugin/literal-object.js\n\n// @module shortjsdoc @class JsDocMaker\nvar JsDocMaker = require('../core/class'); \nvar _ = require('underscore'); \n\n//\n// it is an exmaple of a plugin that parse literal types like @param {#obj({p1:P1,p2:P2,...})} param1\n\n// CUSTOM TPE PLUGIN literalObjectParse - requires literalObjectParser.js - it adds support \n// for the custom type syntax #obj({p1:P1,p2:P2,...})to express literal objects\n// syntax: {#obj(prop1:String,prop2:Array<Apple>)}\n// DEPRECATED - turn it into a unit test showing an  example of plugin making. this file will be delete.\n// @method literalObjectParse\nJsDocMaker.prototype.literalObjectParse = function(s, baseClass)\n{\n\tvar parsed = null\n\t,\tself=this\n\t,\tproperties = {};\n\ttry\n\t{\n\t\tvar result  = JsDocMaker.parseLiteralObjectType('{' + s + '}');\n\t\t_(result).each(function(value, key)\n\t\t{\n\t\t\tvar valueBinded = self.bindParsedType(value, baseClass);\n\t\t\tproperties[key] = valueBinded; \n\t\t}); \n\t}\n\tcatch(ex)\n\t{\n\t\tJsDocMaker.prototype.error('Failed to parse literal object ' + s);\n\t\tthrow ex;\n\t}\n\treturn {\n\t\tname: 'Object'\n\t,\tproperties: properties\n\t,\tpropertiesOriginal: parsed\n\t}; \n};\n\nJsDocMaker.prototype.literalObjectInstall = function()\n{\t\n\tthis.typeParsers = this.typeParsers || {}; \n\tvar parser = {\n\t\tname: 'obj'\n\t,\tparse: _(this.literalObjectParse).bind(this)\n\t};\n\tthis.registerTypeParser(parser); \n}; \n\n\n\n//@filename {Foo} fileName src/jsdocmaker/plugin/main.js\n\n'strict mode'; \n\nvar JsDocMaker = require('../core/main.js'); \n\nrequire('./native-types.js'); \nrequire('./modifiers.js'); \nrequire('./inherited.js');\nrequire('./util.js');\nrequire('./literal-object.js');\nrequire('./module-exports.js');\nrequire('./alias.js');\n// require('./metadata.js');\nrequire('./comment-indentation.js');\n\nrequire('./text-marks.js');\nrequire('./text-marks-references.js');\n\nrequire('./recurse-plugin-containers.js');\nrequire('./escape-at.js');\n\n//tools\nrequire('./dependencies.js'); //TODO: review, this probably makes compilation slower. \n\nmodule.exports = JsDocMaker; \n\n//@filename {Foo} fileName src/jsdocmaker/plugin/modifiers.js\n\n// @module shortjsdoc @class JsDocMaker\nvar JsDocMaker = require('../core/class'); \nvar _ = require('underscore'); \n\n//MODIFIERS postproccessing- like static, private, final. Optional module\n\n//@property {Array<String>}MODIFIERS @static\nJsDocMaker.MODIFIERS = ['static', 'private', 'final', 'deprecated', 'experimental', 'optional', 'abstract']; \n//@method installModifiers sets the property modifiers to the node according its children\nJsDocMaker.prototype.installModifiers = function(node)\n{\n\tnode.modifiers = node.modifiers || []; \n\t_(node.children).each(function(child)\n\t{\n\t\tif(_(JsDocMaker.MODIFIERS).contains(child.annotation))\n\t\t{\n\t\t\tnode.modifiers.push(child.annotation); \n\t\t}\n\t});\n}; \n \n\n//@filename {Foo} fileName src/jsdocmaker/plugin/module-exports.js\n\n/* @module shortjsdoc.plugin.module-export\n\n#@module @exports\nthe module AST will contain a property exports pointing to a type that can be complex. Example:\n\n\t@module module1 blabla\n\t@class MyTool1\n\t@exports {version:String,Tool:MyTool1}\n*/\n\nvar JsDocMaker = require('../core/class'); \nvar _ = require('underscore'); \n\n//@class ModuleExportsPlugin @extends JsDocMakerPlugin\nvar plugin_beforeTypeBinding = {\n\tname: '@module @exports - beforeTypeBinding'\n,\texecute: function(options)\n\t{\n\t\tvar node = options.node\n\t\t,\tjsdocMaker = options.jsdocmaker; \n\t\tif(node.annotation!='module')\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tvar exports = _(node.children).select(function(child)\n\t\t{\n\t\t\treturn child.annotation=='exports';\n\t\t}) || null;\n\n\t\tif(exports && exports.length)\n\t\t{\n\t\t\texports = exports[0]; \n\t\t\tnode.exports = exports;\n\t\t\t//name is part of the text\n\t\t\texports.text = exports.name + ' ' + exports.text; \n\n\t\t\t//type binding\n\t\t\tvar parsedType = jsdocMaker.parseTypeString(node.exports.type, node);\n\t\t\tnode.exports.typeString = node.exports.type;\n\t\t\tnode.exports.type = parsedType;\n\t\t}\n\t}\n}; \n  \nJsDocMaker.prototype.beforeTypeBindingPlugins.add(plugin_beforeTypeBinding); \n\n//@filename {Foo} fileName src/jsdocmaker/plugin/native-types.js\n\n// @module shortjsdoc @class JsDocMaker\nvar JsDocMaker = require('../core/class'); \nvar _ = require('underscore'); \n\n// NATIVE TYPES LINKING / post processing. Optional\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\nJsDocMaker.NATIVE_TYPES = ['String', 'Object', 'Array', 'Date', 'Regex', 'Function', \n\t'Boolean', 'Error', 'TypeError', 'Number']; \n\n//@method getNativeTypeUrl @returns {String}an url if given name match a native types or undefined otherwise\nJsDocMaker.prototype.getNativeTypeUrl = function(name)\n{\n\tif(_(JsDocMaker.NATIVE_TYPES).contains(name))\n\t{\n\t\treturn 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/' + name;\n\t}\n\n\tvar customTypeUrl;\n\t_(this.customNativeTypes).each(function(val, key)\n\t{\n\t\tif(key===name)\n\t\t{\n\t\t\t//TODO: support wildcard like $(name) for inserting the name in the given url dynamically\n\t\t\tcustomTypeUrl = val;\n\t\t}\n\t});\n\treturn customTypeUrl;\n}; \n\n\n//@filename {Foo} fileName src/jsdocmaker/plugin/recurse-plugin-containers.js\n\n// @module recurse-plugin-containers - a plugin to be used by concrete plugins to iterate on all \n// nodes after some interesting stages. by calling recurseAST. \n// The objective is that other concrete plugins register here and so the AST recursion is made \n// ONCE instead of using recurseAST in each of them.\n\n\nvar JsDocMaker = require('../core/class'); \nvar PluginContainer = require('../core/plugin'); \nrequire('./util'); \nvar _ = require('underscore'); \n\n// @class AfterTypeBindingRecurseASTPluginContainer it is both a plugin and a plugin container @extends PluginContainer\nvar AfterTypeBindingRecurseASTPluginContainer = function()\n{\n\treturn PluginContainer.apply(this, arguments); \n};\nAfterTypeBindingRecurseASTPluginContainer.prototype = _({}).extend(PluginContainer.prototype);\n_(AfterTypeBindingRecurseASTPluginContainer.prototype).extend(\n{\n\tname: 'AfterTypeBindingRecurseASTPluginContainer'\n\n\t// for each AST node all child plugins will be executed - the objective is to recurse the ast only once.\n,\texecute: function(options)\n\t{\n\t\t// debugger;\n\t\t//TODO: this logic doesn't respect priority - don't copy and paste this logic here - define a cisitor method in super\n\t\tvar result = null, self = this;\n\t\toptions.jsdocmaker.recurseAST(function(node)\n\t\t{\n\t\t\t_(self.plugins).each(function(plugin) \n\t\t\t{\n\t\t\t\tresult = plugin.execute(node, plugin);\n\t\t\t}); \n\t\t}); \n\t\treturn result; \n\t}\n}); \n\n\nvar plugin = new AfterTypeBindingRecurseASTPluginContainer();\n\n//@module shortjsdoc @class JsDocMaker @property {AfterTypeBindingRecurseASTPluginContainer} afterTypeBindingRecurseASTPlugins\nJsDocMaker.prototype.afterTypeBindingRecurseASTPlugins = plugin; \n\nJsDocMaker.prototype.afterTypeBindingPlugins.add(plugin); \n\n//@filename {Foo} fileName src/jsdocmaker/plugin/text-marks-references.js\n\n/*\n@module shortjsdoc.plugin.text-marks-references\n\nIt is based on text-marks plugin to give support to @?class @?method @?module @?property @?event and @?ref  text marks. \n\nThey will be binded to referenced nodes. The @?ref can bind anything passed as absolute name but it is less performant. \n\nAlso it contains the implementation for @?link\n\n*/\n\nvar JsDocMaker = require('../core/class'); \nvar _ = require('underscore'); \n\nvar textMarksReferencesPlugin = {\n\n\tname: 'text-marks-references'\n\n,\texecute: function(options)\n\t{\n\t\tvar currentClass\n\t\t,\tself = this\n\t\t,\tclassMemberNameDic = {\n\t\t\t\tmethod: 'methods'\n\t\t\t,\tproperty: 'properties'\n\t\t\t,\tevent: 'events'\n\t\t\t}; \n\n\t\toptions.jsdocmaker.recurseAST(function(node)\n\t\t{\n\t\t\tif(node.annotation==='class')\n\t\t\t{\n\t\t\t\tcurrentClass = node;\n\t\t\t}\n\t\t\t_(node.textMarks).each(function(mark, key)\n\t\t\t{\n\t\t\t\tif(mark.binding)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(mark.name==='link')\n\t\t\t\t{\n\t\t\t\t\tvar linkRegex = /\\[([^\\]]+)\\]\\(([^\\)]+)\\)/g; \n\t\t\t\t\tvar result = linkRegex.exec(mark.arg); \n\t\t\t\t\tif(result && result.length >= 3)\n\t\t\t\t\t{\n\t\t\t\t\t\tmark.linkLabel = result[1]; \n\t\t\t\t\t\tmark.linkUrl = result[2]; \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(mark.name==='class')\n\t\t\t\t{\n\t\t\t\t\tmark.binding = self.bindClass(mark, currentClass, options.jsdocmaker) || {annotation: 'class', name: mark.name, error:'NAME_NOT_FOUND'};\n\t\t\t\t}\n\t\t\t\telse if(mark.name==='module')\n\t\t\t\t{\n\t\t\t\t\tmark.binding = self.bindModule(mark, currentClass, options.jsdocmaker) || {annotation: 'module', name: mark.name, error:'NAME_NOT_FOUND'};\n\t\t\t\t}\n\t\t\t\telse if(mark.name==='method' || mark.name==='property' || mark.name==='event')\n\t\t\t\t{\n\t\t\t\t\tmark.binding = self.bindClassMember(mark, currentClass, options.jsdocmaker, [classMemberNameDic[mark.name]]) || {annotation: mark.name, name: mark.name, error:'NAME_NOT_FOUND'};\n\t\t\t\t}\n\t\t\t\telse if(mark.name==='ref')\n\t\t\t\t{\n\t\t\t\t\tmark.binding = self.bindModule(mark, currentClass, options.jsdocmaker); \n\t\t\t\t\tif(!mark.binding)\n\t\t\t\t\t{\n\t\t\t\t\t\tmark.binding = self.bindClass(mark, currentClass, options.jsdocmaker); \n\t\t\t\t\t}\n\t\t\t\t\tif(!mark.binding)\n\t\t\t\t\t{\n\t\t\t\t\t\tmark.binding = self.bindClassMember(mark, currentClass, options.jsdocmaker, [classMemberNameDic['method'], classMemberNameDic['property'], classMemberNameDic['event']]) || {annotation: mark.name, name: mark.name, error:'NAME_NOT_FOUND'}; \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}); \n\t\t});\n\t}\n\n\t//@method bindClassMember binds a method, property or event using the marking  @param {String} what can be method, property, event\n,\tbindClassMember:function(mark, currentClass, maker, what)\n\t{\n\t\tvar binded;\n\t\tif(currentClass)\n\t\t{\n\t\t\t_(what).each(function(member)\n\t\t\t{\n\t\t\t\tif(currentClass[member] && currentClass[member][mark.arg])\n\t\t\t\t{\n\t\t\t\t\tbinded = currentClass[member][mark.arg];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif(!binded)\n\t\t{\n\t\t\t//the assume absolute method name\n\t\t\tvar className = mark.arg.substring(0, mark.arg.lastIndexOf('.')); \n\t\t\tvar c = maker.data.classes[className]; \n\t\t\tif(!c)\n\t\t\t{\n\t\t\t\treturn;//return {name: '', error: 'NAME_NOT_FOUND'}; // this is probably an error on the text don't do anything.\n\t\t\t}\n\t\t\t_(what).each(function(member)\n\t\t\t{\n\t\t\t\tif(!binded)\n\t\t\t\t{\n\t\t\t\t\tif(c[member])\n\t\t\t\t\t{\n\t\t\t\t\t\tvar simpleName = mark.arg.substring(mark.arg.lastIndexOf('.') + 1, mark.arg.length);\n\t\t\t\t\t\tbinded = c[member][simpleName];\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}); \t\t\n\t\t}\n\t\treturn binded;\n\t} \n\n,\tbindClass: function(mark, currentClass, maker)\n\t{\n\t\tvar self=this\n\t\t,\tbinded = maker.parseSingleTypeString(mark.arg, currentClass);\n\t\tif(_(binded).isArray() && binded.length)\n\t\t{\n\t\t\tbinded = binded[0]; \n\t\t}\n\t\tif(!binded || binded.error === 'NAME_NOT_FOUND')\n\t\t{\n\t\t\tbinded = self.findClass(mark.arg, maker); \t\t\t\n\t\t}\n\t\treturn binded;\n\t}\n\n,\tfindClass: function(name, maker)\n\t{\n\t\tvar binded;\n\t\t_(maker.data.classes).each(function(c, absoluteName)\n\t\t{\n\t\t\tif(absoluteName === name)\n\t\t\t{\n\t\t\t\tbinded = c;\n\t\t\t}\n\t\t}); \n\t\treturn binded;\n\t}\n\n,\tbindModule: function(mark, currentClass, maker)\n\t{\n\t\tvar binded;\n\t\t_(maker.data.modules).each(function(m, module_name)\n\t\t{\n\t\t\tif(module_name === mark.arg)\n\t\t\t{\n\t\t\t\tbinded = m;\n\t\t\t}\n\t\t}); \n\t\treturn binded;\n\t}\n}\n\nJsDocMaker.prototype.afterTypeBindingPlugins.add(textMarksReferencesPlugin); \n\n\n\n\n\n\n//@filename {Foo} fileName src/jsdocmaker/plugin/text-marks.js\n\n/*\n@module shortjsdoc.plugin.text-marks\n\nTODO: markings should be done 100% on post processing. \n\nthis is a meta plugin that allow to define marks inside a text. markings like @?foo something will be replaced with \na unique string key and evaluate functions and store the result in the AST under the node 'textMarks' property.\n\nOther concrete plugins then can expose a certain functionality, for example\n\n@module client \n@class MyClass The attributes of this class are given and well explained the server service that poblate this \nmodel with JSON @?see server.MyService.Attributes\n\n##History\n\nThis tool born with the neccesity of java's @see. We consider using templates (underscore,handlebars) but discarded because we cannot introduce any new \nreserved characters or complexity. An approach with template would allow also to call a function. \n\nBut finally the idea of markins is more compatible and enrich the AST and don't add a postprocessing that complicate the syntax. \n\n##Implementation notes\n\nWhy @?see and not @see ? Because @see will break the simple syntax @annotation name text. We don't want to break \nthe basic syntax even if we would easily do w a preprocessing plugin replacing @see with a no annotation mark. \n*/\n\nvar JsDocMaker = require('../core/class'); \nvar _ = require('underscore'); \n\n//@class TextMarksAfterParseNodePlugin @extends JsDocMakerPlugin a plugin executed at afterParseNodePlugin that implements the text-marks feature. \nvar textMarksAfterParseNodePlugin = {\n\n\tname: 'text-marks'\n\n,\texecute: function(options)\n\t{\n\t\tvar node = options.node\n\t\t,\tself = this;\n\n\t\tnode.text = node.text || ''; \n\n\t\tvar replaceHandler = function(all, name, arg)\n\t\t{\n\t\t\tnode.textMarks = node.textMarks || {}; \n\t\t\tvar mark = options.jsdocmaker.getUnique('_shortjsdoc_textmarkplugin_');\n\t\t\tnode.textMarks[mark] = {name:name, arg:arg}; \n\t\t\treturn mark; \n\t\t}; \n\n\t\t// first expressions like this: @?link \"[This is a link](http://google.com)\"\n\t\t// TODO: remove the link functionality since the user can use markdowns or html's\n\t\t// var regex = /@\\?([a-zA-Z0-9_\\.]+)\\s+\"([^\"]+)\"/g; \n\t\t// node.text = node.text.replace(regex, replaceHandler); \n\n\t\t// and then expressions like this: @?ref foo.bar.Class.method2\n\t\tregex = /@\\?([a-zA-Z0-9_\\.]+)\\s+([^\\s]+)/g; \n\t\t// console.log(regex.exec(node.text))\n\t\tnode.text = node.text.replace(regex, replaceHandler); \n\t}\n}; \n\t\nJsDocMaker.prototype.beforeTypeBindingPlugins.add(textMarksAfterParseNodePlugin); \n\n\n\n\n\n// afterTypeBindingPlugins\n\n\n\n//@filename {Foo} fileName src/jsdocmaker/plugin/util.js\n\n//TODO: move this file to core/recurseAST.js\n//@module shortjsdoc @class JsDocMaker\nvar JsDocMaker = require('../core/class'); \nvar _ = require('underscore'); \n\n//@method recurseAST An utility method that can be used in extensions to visit all the ast nodes and types of the AST recursively. Children are visited first. JsDocMaker.recurseAST can be used for visiting nodes through AST. The same for Types, this is visiting all subtypes of a complex type. \n//@param {Function} fn a visitor for all the nodes\n//@param {Function} fn_type a visitor for all the nodes' types\nJsDocMaker.prototype.recurseAST = function(fn, fn_type, fn_end)\n{\n\tvar self = this;\n\t_(self.data.classes).each(function(c)\n\t{\n\t\tself.recurseASTClass(c, fn, fn_type); \n\t});\n\t_(self.data.modules).each(function(m)\n\t{\n\t\tfn.apply(m, [m]); \n\t});\n\tfn_end && fn_end();\n}; \n\nJsDocMaker.prototype.recurseASTClass = function(c, fn, fn_type)\n{\n\tif(!c)\n\t{\n\t\treturn;\n\t}\n\tfn.apply(c, [c]);\n\t_(c.methods).each(function(m)\n\t{\n\t\tfn.apply(m, [m]); \n\t\t_(m.params).each(function(p)\n\t\t{\n\t\t\tp.parentNode=m;\n\t\t\tfn.apply(p, [p]); \n\t\t\tJsDocMaker.recurseType(p.type, fn_type, p); \n\t\t}); \n\t\tif(m.returns)\n\t\t{\n\t\t\tm.returns.parentNode=m;\n\t\t\tfn.apply(m.returns, [m.returns]);\n\t\t\tJsDocMaker.recurseType(m.returns.type, fn_type, m); \n\t\t}\n\t\t_(m.throws).each(function(t)\n\t\t{\n\t\t\tfn.apply(t, [t]); \n\t\t\tJsDocMaker.recurseType(t.type, fn_type, t); \n\t\t}); \n\t}); \n\n\t_(c.properties).each(function(p)\n\t{\n\t\tfn.apply(p, [p]);\n\t\tJsDocMaker.recurseType(p.type, fn_type, p);\n\t}); \n\t_(c.events).each(function(p)\n\t{\n\t\tfn.apply(p, [p]);\n\t\tJsDocMaker.recurseType(p.type, fn_type, p);\n\t}); \n\t_(c.attributes).each(function(p)\n\t{\n\t\tfn.apply(p, [p]);\n\t\tJsDocMaker.recurseType(p.type, fn_type, p);\n\t});\n\tif (c.extends)\n\t{\n\t\tfn.apply(c.extends, [c.extends]);\n\t\tJsDocMaker.recurseType(c.extends.type, fn_type, c);\n\t}\n}\n// @method recurseType will recurse the type AST - children first. \n// @param {ASTNode} type a class node @param {Function}fn @param {ASTNode} ownerNode @static \nJsDocMaker.recurseType = function(type, fn, ownerNode)\n{\n\tif(!type || !fn)\n\t{\n\t\treturn;\n\t}\n\tif(_(type).isArray())\n\t{\n\t\t_(type).each(function(t)\n\t\t{\n\t\t\tJsDocMaker.recurseType(t, fn, ownerNode); \n\t\t}); \n\t}\n\telse if(!type.annotation || type.annotation !== 'class')\n\t{\n\t\t_(type.properties).each(function(prop)\n\t\t{\n\t\t\tJsDocMaker.recurseType(prop, fn, ownerNode); \n\t\t}); \n\t\t_(type.params).each(function(param)\n\t\t{\n\t\t\tJsDocMaker.recurseType(param, fn, ownerNode); \n\t\t}); \t\t\n\t}\n\n\n\t// console.log('recurseType', type.name, ownerNode.absoluteName|| ownerNode.name)\n\tfn(type, ownerNode); \n}; \n\n\nJsDocMaker.prototype.getUnique = function(prefix)\n{\n\tthis.counter = this.counter || 0;\n\tprefix = prefix || ''; \n\tthis.counter++;\n\treturn prefix + this.counter;\n}\n\n//@filename {Foo} fileName src/shortjsdoc.js\n\n\n/* @module shortjsdoc.node\nnodejs command line utility for generating the .json definition scanning a given source folder or file. \n\nDepends on src/JsDocMaker.js\n\n*IMPORTANT* don't use console.log here since the output is dumped to stdout \n*/\nvar fs = require('fs')\n,\tpath = require('path')\n,\tesprima = require('esprima')\n,\t_ = require('underscore')\n,\tJsDocMaker = require('./jsdocmaker/main.js')\n,\tshell = require('shelljs'); \n\n \n//@class ShortJsDoc main class for running jsdocmaker using node through the command line.\nvar ShortJsDoc = function()\n{\n\tthis.maker = new JsDocMaker();\n\tthis.projectMetadata = {jsdoc: {}};\n\tthis.sources = {};\n}; \n\nShortJsDoc.make = function(options)\n{\n\treturn (new ShortJsDoc()).jsdoc(options); \n}; \n\n_(ShortJsDoc.prototype).extend({\n\n\t//@method error dumps an error @param {String} m\n\terror: function (m)\n\t{\n\t\tconsole.log(m + '\\nUSAGE:\\n\\tnode src/shortjsdoc.js home/my-js-project/ home/another-js-project/ ... > html/data.json'); \n\t\tprocess.exit(1);\n\t}\n\n\t// @method tryToParseJsonFile @param {String} path\n,\ttryToParseJsonFile: function(path)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar s = fs.readFileSync(path); \n\t\t\treturn JSON.parse(s); \n\t\t}\n\t\tcatch(ex)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t//@method execute MAIN method to parse the parsed folder's javascript files recursively and return the AST of the jsdoc. \n\t//@param {JsDocOptions}options meta information about the project like title, url, license, etc. Hsa the same format as package.json file\n\t//@return {Object} the jsdoc AST object of all the parsed files. \n,\texecute: function(options)\n\t{\n\t\tvar self=this; \n\n\t\tthis.computeVendorDirs(options);\n\n\t\t_(options.input).each(function(inputDir)\n\t\t{\n\t\t\t_(self.sources).extend(self.buildSources(inputDir)); \n\t\t}); \n\n\t\tthis.parsedSources = null;\n\t\t\n\t\ttry\n\t\t{\n\t\t\tparsedSources = this.parseSources();\n\t\t}\n\t\tcatch (ex)\n\t\t{\n\t\t\t// will print the javascript syntax error detected in the sources. we parse only valid js!\n\t\t\tconsole.error('There is JavaScript syntax error in your source. It cannot be parsed'); \n\t\t\t//TODO: file and line number and string\n\n\t\t\tconsole.error('Failing code fragment: \\n', this.maker.data.source.substring(ex.index - 50, ex.index + 50)); \n\n\t\t\tfs.writeFileSync('jsdoc_failed_source.js', this.maker.data.source);\n\t\t\tconsole.log('\\n * Dumped file that fails at jsdoc_failed_source.js * \\n');\n\t\t\t\n\t\t\tconsole.error(ex); \n\t\t\tthrow ex;\n\t\t}\n\n\t\tvar jsdoc = this.maker.data;\n\n\t\tthis.projectMetadata = jsdoc.projectMetadata = options.projectMetadata || {name: 'Untitled Project'};\n\n\t\tthis.maker.postProccess();\n\t\t\n\t\treturn jsdoc;\n\t}\n\n\t//@method computeVendorDirs @param {JsDocOptions} options\n,\tcomputeVendorDirs: function(options)\t\n\t{\n\t\t_(options.vendor).each(function(vendorName)\n\t\t{\n\t\t\tif(!vendorName)\n\t\t\t{\n\t\t\t\treturn\n\t\t\t}\n\t\t\tvar f = path.join(ShortJsDoc.getThisFolder(), 'vendor-jsdoc', vendorName); \n\t\t\tvar stats = null;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tstats = fs.statSync(f);\n\t\t\t}\n\t\t\tcatch(ex)\n\t\t\t{\n\t\t\t\t// console.log(ex)\n\t\t\t\t//TODO: log vendor name nor found?\n\t\t\t}\n\t\t\tif(stats && (stats.isDirectory() || stats.isFile()))\n\t\t\t{\t\t\t\n\t\t\t\toptions.input.push(f);\n\t\t\t}\n\t\t});\n\t\t// console.log('options.vendor', options.vendor)\n\t}\n\n\t//@method jsdoc public method meant to be called from user projects build-time code. It will perform all the job of soing the parse and generating a full html output project ready to be used. \n\t//@param {JsDocOptions}options meta information about the project like title, url, license, etc. Hsa the same format as package.json file\n,\tjsdoc: function(options)\n\t{\n\t\t//generate the data.json file\n\n\t\tvar jsdoc = this.execute(options); \n\t\tvar output = this.dumpJSON(jsdoc, options);\n\n\t\tif(!options.jsonOuput && options.output)\n\t\t{\t\t\t\n\t\t\tshell.rm('-rf', options.output)\n\t\t\tvar htmlFolder = ShortJsDoc.getHtmlFolder();\n\t\t\tshell.cp('-rf', htmlFolder, options.output);\n\t\t\t// ShortJsDoc.copyRecursiveSync(htmlFolder, options.output); \n\t\t\tvar f = path.join(options.output, 'data.json'); \n\t\t\toutput = 'window.__shortjsdoc_data = ' + output;\n\t\t\tfs.writeFileSync(f, output); \n\t\t}\n\t\telse\n\t\t{\n\t\t\tconsole.log(output); // prints on stdout\n\t\t}\n\n\t} \n\n\t// @method dumpJSON dump to json string the full ast. configurable through this.projectMetadata.jsdoc.dontMinifyOutput\n,\tdumpJSON: function(jsdoc, options) \n\t{\n\t\tif(options && options.dontMinifyOutput)\n\t\t{\t\t\n\t\t\treturn JSON.stringify(jsdoc, null, 4); // dump the output indented:\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn JSON.stringify(jsdoc); // dump the output minified:\n\t\t}\n\t}\n\n\t//@method parseSources\n,\tparseSources: function()\n\t{\n\t\tvar buffer = [], self = this; \n\n\t\t_(this.sources).each(function(val, file)\n\t\t{\n\t\t\tself.maker.addFile(val, file); \n\t\t}); \n\t\tthis.maker.jsdoc();\n\t}\n\n\t//@method __parseSourcesFastVersion this was the previous implementation without file separation support. Nevertheless we \n\t// let this uncommented and unused because parsing separate files introduced a significant parsing duration (parformance). \n\t// TODO. let the user performa a --fast-parsing not supporting files but much faster just for fast jsdoc writting..\n,\t__parseSourcesFastVersion: function()\n\t{\n\t\tvar buffer = [], self = this; \n\n\t\t_(this.sources).each(function(val, file)\n\t\t{\n\t\t\tmaker.addFile(value, name);\n\t\t\tbuffer.push(val);\n\t\t}); \n\t\tthis.maker.parseFile(buffer.join('\\n\\n'), 'ALL.js');\n\t}\n\n\t//@method buildSources parse all files in passed folders and returns the parsed results in t\n\t//@param Array<String> inputDir @returns {Object} the parsed jsdoc AST object of all passed folders\n,\tbuildSources: function buildSources(inputDir)\n\t{\t\n\t\tvar map = {}\n\t\t,\tself = this;\n\t\tif(!inputDir)\n\t\t{\n\t\t\tconsole.log('ERROR invalid null input directory'); \n\t\t\treturn;\n\t\t}\n\t\tif(!fs.statSync(inputDir).isDirectory())\n\t\t{\n\t\t\tself.readSource(inputDir, map);\n\t\t}\n\t\telse\n\t\t{\t\t\t\n\t\t\tShortJsDoc.folderWalk(inputDir, function(error, file)\n\t\t\t{\n\t\t\t\tif(!error && file && JsDocMaker.stringEndsWith(file, '.js'))\n\t\t\t\t{\t\t\t\n\t\t\t\t\tself.readSource(file, map);\n\t\t\t\t}\n\t\t\t}); \n\t\t}\n\t\treturn map;\n\t}\n\n\t//@method readSource @param file @param map\n,\treadSource: function(file, map)\n\t{\n\t\tvar src = fs.readFileSync(file, 'utf8'); \n\t\tmap[file] = src; \n\t}\n\n});\n\n\n//@method getHtmlFolder @return {String} this module's html folder path @static\nShortJsDoc.getHtmlFolder = function()\n{\n\tvar f = ShortJsDoc.getThisFolder();\n\treturn path.join(f, 'html');\n}; \n//@method getThisFolder @return {String} this module's folder path @static\nShortJsDoc.getThisFolder = function()\n{\n\tvar f = module.filename; \n\tf = f.substring(0, f.length - path.join('src','shortjsdoc.js').length);\n\treturn f;\n}; \n\n\n\n//UTILITIES\n\n// @method folderWalk General function for walking a folder recusively and sync @static \nShortJsDoc.folderWalk = function (dir, action) \n{\n\tif (typeof action !== \"function\")\n\t{\n\t\taction = function (error, file) { };\n\t}\t\n\n\tvar list = fs.readdirSync(dir);\n\n\tlist.forEach(function (file) \n\t{\n\t\tvar sep = JsDocMaker.stringEndsWith(dir, '/') ? '' : '/'; \n\t\tvar path =  dir + sep + file;\n\t\tvar stat = fs.statSync(path); \n\t\tif (stat && stat.isDirectory())\n\t\t{\n\t\t\tShortJsDoc.folderWalk(path, action);\n\t\t}\t\t\t\n\t\telse\n\t\t{\n\t\t\taction(null, path);\n\t\t}\n\t});\n};\n\n// // @method copyRecursiveSync copy directories recursively just like cp -r @static\n// // @param {String} src The path to the thing to copy.\n// // @param {String} dest The path to the new copy. \n// ShortJsDoc.copyRecursiveSync = function(src, dest) \n// {\n// \tvar exists = fs.existsSync(src);\n// \tvar stats = exists && fs.statSync(src);\n// \tvar isDirectory = exists && stats.isDirectory();\n// \tif (exists && isDirectory) \n// \t{\n// \t\tfs.mkdirSync(dest);\n// \t\tfs.readdirSync(src).forEach(function(childItemName) \n// \t\t{\n// \t\t\tShortJsDoc.copyRecursiveSync(path.join(src, childItemName), path.join(dest, childItemName));\n// \t\t});\n// \t} \n// \telse \n// \t{\n// \t\tfs.linkSync(src, dest);\n// \t}\n// };\n\nShortJsDoc.JsDocMaker = JsDocMaker;\n\nmodule.exports = ShortJsDoc;\n\n\n\n// @class JsDocOptions\n// @property {String} output output folder\n// @property {Array<String>} input the source code folders that will be parsed recursively.\n// @property {Array<String>} vendor include the jsdoc of libraries supported by short-jsdoc (see vendor-jsdoc folder). Example: vendor: ['javascript', 'html']\n\n\n\n//@filename {Foo} fileName test/test-project/empty/nomodules.js\n\n// @class Food eatable by Animals\n\n// @class Fruit what plants generate all years and can be eaten @extends Food\n\n// @class Apple a nice fruit of *cold* climates @extends Fruit\n\n// @class Banana nice powerful fruit from *warm* climates @extends Fruit\n\n\n// @event after:release-patch hello world\n\n// @event afterReleasePatch\n\n//@filename {Foo} fileName test/test-project/empty2/model1.js\n\n// @module empty2\n// @class MyView @extend Backbone.View\n// @property {Object} a\n// @property {Array} b\n// @property {Array<String>} c\n// @property {JoJoJo} d\n\n// @class OtherView This contains a @?link \"[Link to google](http://google.com/)\" to test if we can reference external resources. @extend MyView\n// @method getModel @returns {Backbone.Model} yes we do because of the association with @?class empty2.MyModel it implies that.\n// @class R @extends Backbone.Router\n// @property {Backbone.View} p \n\n// @class MyModel for more info please refeer to @?ref empty2.MyView because it uses @extends Backbone.Model\n// @attribute {String} name bla bal bal abla\n// @property {String} prop1\n// @event {String} change\n\n// @class MyModelExtension @extends MyModel\n// @attribute {String} name2 \n// @property {String} prop2\n// @event {String} change2\n\n/**\n * @module funnycomments\n * @class Letsseehow this outputed\n * a new line for this class\n * and another one\n */\n\n \n\n//@filename {Foo} fileName test/test-project/empty2/model2.js\n\n// @module empty2\n// @class MyView @extend Backbone.View\n// @property {Object} a\n// @property {Array} b\n// @property {Array<String>} c\n// @property {JoJoJo} d\n\n\n// @module shared1  @class Shared1 \n// Some text from empty 1 model 2 that reference apple: @?class Apple\n\n//@filename {Foo} fileName test/test-project/empty2/model3.js\n\n/*\n@module simpleTestModule\n@class Fruit\n\n@class Apple @extends Fruit\n\n@class Mineral\n*/\n\n// @module shared1  @class Shared1 \n// Some text from empty 1 model 3 that reference apple: @?class Apple\n\n//@filename {Foo} fileName test/test-project/ideal/Model.js\n\n//@module ideal\n//@class BaseObject \nvar s = 'these are just js sample sentences'; \nif(typeof sentence === 'undefined')\n{\n\tconsole.log('alert'); \n}\n//@property {Date} creationDate\n//@property {String} name\n//@property {String} description\n//@property {Object<String,User>} owners the owners, a map by owner id\n// @property {color:Color,amount:Number} something\nfunction BaseObject(){};\n// @method m @returns {Thing}\n\n//@class ObjectPool\nfunction ObjectPool(){};\n//@method loadObjects @param {Array<String>} objects_ids @return {Object<String,BaseObject>}\nObjectPool.prototype.getOwners = function(objects_ids){return null;}\n\n// @param {Array<String>} objects_ids\nvar s = 'these are just js sample sentences'; \nif(typeof sentence === 'undefined')\n{\n\tconsole.log('alert'); \n}\n// @method getState0 @returns {a:B231,c:D231,s:String}\n// @method getState2 @returns {a:B231,c:D231}\n// @method getState3 @re turns {#obj(color:String)}\n// @method getState4 @returns {name:String,colors:Array<Color>,car:Car}\n// @method getState get's the current state of this pool\n// @returns {id:String,objectDic:Object<String>} bla bla bla\nvar getState=function(){};\n\n//@method getOwners this method is useful for *blabla* blabla _blabla_ bab\nvar s = 'these are just js sample sentences'; \nif(typeof sentence === 'undefined')\n{\n\tconsole.log('alert'); \n}\n\n\n\n// @event objectCreated event fired when an object is created in this pool.\nvar s = 'these are just js sample sentences'; \nif(typeof sentence === 'undefined')\n{\n\tconsole.log('alert'); \n}\n\n\n//@class Thing @extends BaseObject\n//@property {Number} importance the importance of this thing in the universe\n// @property {ObjectPool} pool things always contain or are related to other things so this is the pool where this associations are mantained laskd flaks djflkasj dlkfj alsdkj flaksjd flkasjdlfkjs lkdfjalksdjflak sdjlfkasdf d s asdf  df ldkja sldkfj askd fasd. \n\nvar s = 'these are just js sample sentences'; \nif(typeof sentence === 'undefined')\n{\n\tconsole.log('alert'); \n}\n\n\n/** @class Action @extends BaseObject */\n\nvar s = 'these are just js sample sentences'; \nif(typeof sentence === 'undefined')\n{\n\tconsole.log('alert'); \n}\n\n//@method extract @param {String|BaseObject|Array<BaseObject>} what\n\n\n//@filename {Foo} fileName test/test-project/ideal/Problems.js\n\n// @module ideasAndProblems67\n\n// @class Idea\n\n// @class Problem @extends Idea\n\n// @param {Number} complexity\n\n// @class IdealProblem @extends Problem\n\n// @class MathProblem @extends IdealProblem\n\n// @property {Object<String,Equation>} equations\n\n\n\n// @class Equation\n\n// @method resolve invoke this method to solve the equation \n\n// @throws {EquationError} kja shkdj ahsd\n\n//@event afterThatHappens triggered when you-know-who comes the handler must be a ....\n// @returns {Solution} because we are very practical\n// @class Solution\n\n// @class EquationError @extends Error\n\n// @alias class A Array\n// @alias class O Object\n// @alias class S String \n// @alias class N Number\n\n// @method mutualCmpare @param {A<O>|A<O<S,N>>} p1 @param {S}p2 @param {N|S}p3\n\n\n\n// @alias class a Array\n// @alias class o Object\n// @alias class s String \n// @alias class n Number\n\n// @method anotherComparission @param {a<o>|a<o<s,n>>}\n\n//@filename {Foo} fileName test/test-project/ideal/foobar1.js\n\ndefine([], function()\n{\n\tvar Class = {\n\n\t\t/*@module empty1 @class Aba\n\t\t@method foo\n\t\tThis is some text\n\n\t\tAll of it is indented so the following source code won't be shown\n\n\t\t\tvar a = 0;\n\t\t\tvar b = 1;\n\n\t\tIsn't it?\n\t\t*/\n\n\t\tfoo: function()\n\t\t{\n\n\t\t}\n\t};\n});\n\n// @function auxiliary65 @return {String} @param p2 @param {Aba} aba\n\n//@filename {Foo} fileName test/test-project/ideal/functioning.js\n\n// @module functioning1\n// @interface Icore this is a base interface @method base1 @param {Array<Number>} foo @return {Number} lorem ipsum\n// @method handler @param {FHandler} handler @param {Boolean} trigger\n// @function FHandler this is global function FHandler lorem ipsum bla bla \n// @param {Number} @return {Boolean}\n\n\n//@filename {Foo} fileName test/test-project/ideal/interfacing.js\n\n// @module interfacing1\n// @interface IBase this is a base interface @method base1 @param {Array<Number>} foo @return {Number} lorem ipsum\n// @interface IProbe @extends IBase\n// @method test @param {ProbeConfig} config @return {Promise}\n// @class Concrete \n// @implements IProbe\n\n\n//@filename {Foo} fileName test/test-project/ideal/prettynames/something.js\n\n/* \n\n@module pretty.names_9 lorem ipsum liprim trogus\n\n@class A.Real.World.Name_123 lorem ipsum liprim trogus\n\n@class Other.Real.Name_234 lorem ipsum liprim trogus @extends A.Real.World.Name_123 \n\n@property {Array<A.Real.World.Name_123>} children lorem ipsum liprim trogus\n\n\n*/\n\n//@filename {Foo} fileName test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js\n\n /* @module json2jsdoc_test1 this is a test of the tool json2jsdoc that generates jsdoc from the response of the service \n\nhttps://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22nome%2C%20ak%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys\n\n\n@class WeatherQuery\n@property {WeatherQuery_query} query\n@class WeatherQuery_query\n@property {Number} count\n@property {String} created\n@property {String} lang\n@property {WeatherQuery_query_results} results\n@class WeatherQuery_query_results\n@property {WeatherQuery_query_results_channel} channel\n@class WeatherQuery_query_results_channel\n@property {String} title\n@property {String} link\n@property {String} description\n@property {String} language\n@property {String} lastBuildDate\n@property {String} ttl\n@property {WeatherQuery_query_results_channel_location} location\n@class WeatherQuery_query_results_channel_location\n@property {String} city\n@property {String} country\n@property {String} region\n@class WeatherQuery_query_results_channel_location\n@property {WeatherQuery_query_results_channel_units} units\n@class WeatherQuery_query_results_channel_units\n@property {String} distance\n@property {String} pressure\n@property {String} speed\n@property {String} temperature\n@class WeatherQuery_query_results_channel_units\n@property {WeatherQuery_query_results_channel_wind} wind\n@class WeatherQuery_query_results_channel_wind\n@property {String} chill\n@property {String} direction\n@property {String} speed\n@class WeatherQuery_query_results_channel_wind\n@property {WeatherQuery_query_results_channel_atmosphere} atmosphere\n@class WeatherQuery_query_results_channel_atmosphere\n@property {String} humidity\n@property {String} pressure\n@property {String} rising\n@property {String} visibility\n@class WeatherQuery_query_results_channel_atmosphere\n@property {WeatherQuery_query_results_channel_astronomy} astronomy\n@class WeatherQuery_query_results_channel_astronomy\n@property {String} sunrise\n@property {String} sunset\n@class WeatherQuery_query_results_channel_astronomy\n@property {WeatherQuery_query_results_channel_image} image\n@class WeatherQuery_query_results_channel_image\n@property {String} title\n@property {String} width\n@property {String} height\n@property {String} link\n@property {String} url\n@class WeatherQuery_query_results_channel_image\n@property {WeatherQuery_query_results_channel_item} item\n@class WeatherQuery_query_results_channel_item\n@property {String} title\n@property {String} lat\n@property {String} long\n@property {String} link\n@property {String} pubDate\n@property {WeatherQuery_query_results_channel_item_condition} condition\n@class WeatherQuery_query_results_channel_item_condition\n@property {String} code\n@property {String} date\n@property {String} temp\n@property {String} text\n@class WeatherQuery_query_results_channel_item_condition\n@property {String} description\n@property {Array<String>} forecast\n@property {WeatherQuery_query_results_channel_item_guid} guid\n@class WeatherQuery_query_results_channel_item_guid\n@property {String} isPermaLink\n@property {String} content\n@class WeatherQuery_query_results_channel_item_guid\n@class WeatherQuery_query_results_channel_item\n@class WeatherQuery_query_results_channel\n@class WeatherQuery_query_results\n@class WeatherQuery_query\n*/\n\n\n//@filename {Foo} fileName test/test-project/life/Model.js\n\n//@module life\n//@class Living @extends Thing\n//@method breath @param {Number} size\n\n//@class Animal @extends Living\n//@method eat @param {Array<Food>} food @return {Array<Energy>}\n\n//@class Person A person is an animal that knows some specialized stuff like @?method crossStreet @extends Animal\n//@method walk @return {Action}\n/*@method crossStreet\n\nThis try to be a *markdown* [text](http://google.com)\n\nAnother paragraph \n\n\tvar someMarkup = {\n\t\ta: 1\n\t,\tn: 2\n\t,\tg: function (e)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t};\n\nand some final text with a list\n\n1. First ordered list item\n2. Another item\n  * Unordered sub-list.\n1. Actual numbers don't matter, just that it's a number\n  1. Ordered sub-list\n  2. hello\n4. And another item.\n*/\n\n//@method talk @public\n\n// @property pprivate alkjsd lakjs dlka jsld k\n// @property ppublic  alksjd lka jsdl kalsjd kaj sd @public\n\n/*\n@event afterSleep this is triggered after the person ends sleeping. Example:\n\n\tvar b = 1\n\nList: \n\n * hello\n * *world*\n\n@public\n\n\n@event  beforeBath  triggered just before the person is going to bath @public\n\n@attribute {String} price lasdfj laksjd lfk jaslkd jflka sjlkdf jasd:\n\n\tvar i = 9\n\nalksjdlaksjd: \n\n1. alksjd\n  * alksjd\n  * alskdj\n2. asldkfjsd\n  * jsjsjsjs sjsjs \n  * klsdjafh kasjdhkfjs\n\n@public\n*/\n\n\n//@filename {Foo} fileName test/test-project/problem1/Model1.js\n\n// @module problem1 This is a description of planet earth city from the point of view of an alien observing us from a space ship.\n//@class TerranObject\n// @class Person @extends TerranObject\n\n//@class List This is just a semantic alias for javascript Array. @extends Array\n//@class Map This is just a semantic alias for javascript Object. @extends Object\n\n/*@class Building @extends TerranObject */\n\n//@class Hospital @extends Building\n//@constructor Neque porro quisquam est qui _dolorem_ *ipsum* quia dolor sit amet, consectetur, adipisci velit... \n//@param {Number} availableBeds\n//Neque porro quisquam est qui _dolorem_ *ipsum* quia dolor sit amet, consectetur, adipisci velit...\n//@method getActiveDoctors @returns {List<Doctor>} the currently active doctors in this hospital\n//@property {Array<Person>} todayIngresedPatients all the patiens that entered this hospital today\n\n// @class Doctor @extend Person\n// @property {Map<String,MedicalTopic>} skills\n\n/*\n\n@class MedicalTopic\nLorem *ipsum* dolor sit amet, consectetur adipisicing elit, \n\n\tsed do eiusmod tempor \n\tincididunt ut labore et dolore \n\tmagna aliqua. \n\t\tUt enim ad minim \n\t\t\tveniam, quis nostrud exercitation\n\t\t\tullamco laboris nisi ut aliquip ex \n\t\tea commodo consequat. Duis aute irure dolor\n\tin reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \n\nExcepteur sint occaecat *cupidatat* non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\n\n@method beUsed \n\nLorem *ipsum* dolor sit amet, consectetur adipisicing elit, \n\n\tsed do eiusmod tempor \n\tincididunt ut labore et dolore \n\tmagna aliqua. \n\t\tUt enim ad minim \n\t\t\tveniam, quis nostrud exercitation\n\t\t\tullamco laboris nisi ut aliquip ex \n\t\tea commodo consequat. Duis aute irure dolor\n\tin reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \n\nExcepteur sint occaecat *cupidatat* non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\n@throws {MedicalException} if there is any medical issue stuff...\n@param {Number} amount Excepteur sint occaecat *cupidatat* \n\n@return {Array<MedicalTopic>}\n\n\n\n\n@class Medical.Exception @extends Error\n@method method1 foo @param a @throws b\n@property {String} name\n@event pepe\n*/\n\n// @property somethingintheway\n// This is some markdown text with a lot of paragraph, this is the first\n//\n// this is the second\n//\n// and this is the third\n;\n\n\n// @alias annotation gulp-task module\n\n// @gulp-task compilecss with this command you can compile all the project's css\n// @class testclass33\n\n// @alias annotation newclass class\n// @module aliasannotationtest1\n// @newclass aliasannotationtest1C1 hello world\n",
classes:{"shortjsdoc.JsDocMaker":{annotation:"class",name:"JsDocMaker",text:"\n\nMain jsdoc parser utility. It accepts a valid js source code String and returns a JavaScript object with a jsdoc AST, this is an object \n with classes and modules array that users can use to easily access jsdocs information, for example, parsed.classes.Apple.methods.getColor \n use the parseFile method for this! This will return the AST, if you want to perform more enrichment and type binding, then use \n postProccess and postProccessBinding methods after.\n\n#Parsing and processing \n\nThe first thing done with source code is parsing its comments to extract general information about annotations. This implies\n\n * parse the sources with exprima and work with the comments array.\n * preprocess the comments array for normalization before start parsing them. Call preprocessing plugins. \n * iterate the comments text and split using PRIMARY annotations\n\n##Primary annotations\nFor representing some logic of JSDOC like 'a class contains methods that contains parameters' we have the concept of PRIMARY ANNOTATIONS. \n*These are\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",commentRange:[2,100],fileName:"src/jsdocmaker/core/binding.js",module:{annotation:"module",name:"shortjsdoc",text:"\n\n#Comment Preprocessors\n\nThe core of comment preprocessing is done ba couple of plugins executed at allCommentPreprocessorPlugins and \ningeneral normalizes the comments text, delete non relevant comments, unify line comments into a single one, etc\n\n\n\n\n\n\n\n\n\n\n\n\n\n",commentRange:[2,100],fileName:"src/jsdocmaker/core/binding.js"},absoluteName:"shortjsdoc.JsDocMaker",children:[],methods:{parseTypeString:{annotation:"method",name:"parseTypeString",text:"public, do a type binding",children:[{annotation:"return",type:"{TypeBinding}",name:"the",text:"object binding to the original r \n eferenced AST node. Or null in case the given type cannot be parsed \n TODO: support multiple generics and generics anidation like in",theRestString:""}],commentRange:[172,970],fileName:"src/jsdocmaker/core/binding.js"},parseSingleTypeString:{annotation:"method",name:"parseSingleTypeString",text:"",children:[{annotation:"param",type:"{String}",name:"typeStr",text:"",theRestString:""}],commentRange:[1532,1588],fileName:"src/jsdocmaker/core/binding.js"},bindParsedType:{annotation:"method",name:"bindParsedType",text:"merges the data of JsDocMaker.parseType with bindings of current jsdoc. recursive!",children:[{annotation:"param",type:"{Object}",name:"typeObject",text:"",theRestString:"@param {Object} baseClass @return {Object}"},{annotation:"param",type:"{Object}",name:"baseClass",text:"",theRestString:"@return {Object}"},{annotation:"return",type:"{Object}",text:"",theRestString:""}],commentRange:[3741,3920],fileName:"src/jsdocmaker/core/binding.js"},bindClass:{annotation:"method",name:"bindClass",text:"",children:[{annotation:"param",type:"{String}",name:"name",text:"",theRestString:"@param {Object} baseClass _lineCommentSeparatorMark_ TODO: using a internal map this could be done faster"},{annotation:"param",type:"{Object}",name:"baseClass",text:"TODO: using a internal map this could be done faster",theRestString:""}],commentRange:[5734,5854],fileName:"src/jsdocmaker/core/binding.js"},simpleName:{annotation:"method",name:"simpleName",text:"",children:[{annotation:"param",type:"{String}",name:"name",text:"",theRestString:"@return {String}"},{annotation:"return",type:"{String}",text:"",theRestString:""}],commentRange:[7452,7511],fileName:"src/jsdocmaker/core/binding.js"},require:{annotation:"method",name:"require",text:"perform an intelligent require n browser&nodejs, needed for esprima. Ugly :(",commentRange:[9308,9402],fileName:"src/jsdocmaker/core/class.js"},postProccess:{annotation:"method",name:"postProccess",text:"so the data is already parsed but we want to normalize some \n children like",children:[{annotation:"extend",name:"and",text:"@ module to be properties of the unit instead children. \n Also we enforce explicit parent reference, this is a class must reference its \n parent module and a method muest reference its parent class. Also related to this \n is the fullname property that will return an unique full name in the format \n '$MODULE.$CLASS.$METHOD'. We assume that a module contains unique named classes and \n that classes contain unique named properties and methods.",theRestString:""}],commentRange:[27453,28021],fileName:"src/jsdocmaker/core/postprocess.js"},postProccessBinding:{annotation:"method",name:"postProccessBinding",text:"precondion: call postProccess() first. We separated the post proccessing in two because we shouln't do JSON.stringify() after we bind types because of recursive loops.",commentRange:[28490,28688],fileName:"src/jsdocmaker/core/postprocess.js"},parseType:{annotation:"method",name:"parseType",text:"parse a type string like 'Map<String,Array<Apple>>' or 'String' and return an object like {name: 'Map',params:['String',{name: 'Array',params:['Apple']}]}. This is the default type parser. \n It depends on type parser file typeParser.js",children:[{annotation:"static",name:"dummy",text:"",theRestString:""}],commentRange:[37781,38061],fileName:"src/jsdocmaker/core/type-parsing.js"},parse:{annotation:"method",name:"parse",text:"a object literal type string like ''",children:[{annotation:"return",type:"{Object}",name:"the",text:"parsed object",theRestString:"@static dummy"},{annotation:"static",name:"dummy",text:"",theRestString:""}],commentRange:[38348,38444],fileName:"src/jsdocmaker/core/type-parsing.js"},splitAndPreserve:{annotation:"method",name:"splitAndPreserve",text:"search for given regexp and split the given string but preserving the matches",children:[{annotation:"param",type:"{Regexp}",name:"regexp",text:"must contain a capturing group (like /(\\s+@\\w+)/gi)",theRestString:"@return {Array of string} _lineCommentSeparatorMark_ @static dummy"},{annotation:"return",type:"{Array of string}",name:"_lineCommentSeparatorMark_",text:"",theRestString:"@static dummy"},{annotation:"static",name:"dummy",text:"",theRestString:""}],commentRange:[38938,39182],fileName:"src/jsdocmaker/core/util.js"},stringFullTrim:{annotation:"method",name:"stringFullTrim",text:"",children:[{annotation:"param",type:"{String}",name:"s",text:"",theRestString:"@static dummy"},{annotation:"static",name:"dummy",text:"",theRestString:""}],commentRange:[39468,39518],fileName:"src/jsdocmaker/core/util.js"},stringTrim:{annotation:"method",name:"stringTrim",text:"",children:[{annotation:"param",type:"{String}",name:"s",text:"",theRestString:"@static dummy"},{annotation:"static",name:"dummy",text:"",theRestString:""}],commentRange:[39644,39690],fileName:"src/jsdocmaker/core/util.js"},stringEndsWith:{annotation:"method",name:"stringEndsWith",text:"",children:[{annotation:"static",name:"dummy",text:"",theRestString:""}],commentRange:[40372,40404],fileName:"src/jsdocmaker/core/util.js"},error:{annotation:"method",name:"error",text:"",children:[{annotation:"param",type:"{String}",name:"msg",text:"",theRestString:""}],commentRange:[40501,40535],fileName:"src/jsdocmaker/core/util.js"},literalObjectParse:{annotation:"method",name:"literalObjectParse",text:"",commentRange:[70357,70821],fileName:"src/jsdocmaker/plugin/literal-object.js"},installModifiers:{annotation:"method",name:"installModifiers",text:"sets the property modifiers to the node according its children",commentRange:[72639,72728],fileName:"src/jsdocmaker/plugin/modifiers.js"},getNativeTypeUrl:{annotation:"method",name:"getNativeTypeUrl",text:"",children:[{annotation:"returns",type:"{String}",name:"an",text:"url if given name match a native types or undefined otherwise",theRestString:""}],commentRange:[74673,74781],fileName:"src/jsdocmaker/plugin/native-types.js"},bindClassMember:{annotation:"method",name:"bindClassMember",text:"binds a method, property or event using the marking",children:[{annotation:"param",type:"{String}",name:"what",text:"can be method, property, event",theRestString:""}],commentRange:[79439,79569],fileName:"src/jsdocmaker/plugin/text-marks-references.js"},recurseAST:{annotation:"method",name:"recurseAST",text:"An utility method that can be used in extensions to visit all the ast nodes and types of the AST recursively. Children are visited first. JsDocMaker.recurseAST can be used for visiting nodes through AST. The same for Types, this is visiting all subtypes of a complex type.",children:[{annotation:"param",type:"{Function}",name:"fn",text:"a visitor for all the nodes",theRestString:"@param {Function} fn_type a visitor for all the nodes' types"},{annotation:"param",type:"{Function}",name:"fn_type",text:"a visitor for all the nodes' types",theRestString:""}],commentRange:[84010,84418],fileName:"src/jsdocmaker/plugin/util.js \n TODO: move this file to core/recurseAST.js"},recurseType:{annotation:"method",name:"recurseType",text:"will recurse the type AST - children first.",children:[{annotation:"param",type:"{ASTNode}",name:"type",text:"a class node",theRestString:"@param {Function}fn @param {ASTNode} ownerNode @static dummy"},{annotation:"param",type:"{Function}",name:"fn",text:"",theRestString:"@param {ASTNode} ownerNode @static dummy"},{annotation:"param",type:"{ASTNode}",name:"ownerNode",text:"",theRestString:"@static dummy"},{annotation:"static",name:"dummy",text:"",theRestString:""}],commentRange:[85679,85840],fileName:"src/jsdocmaker/plugin/util.js \n TODO: move this file to core/recurseAST.js"}},properties:{beforeBindClassPlugins:{annotation:"property",type:"{PluginContainer}",name:"beforeBindClassPlugins",text:"these plugins accept an object like \n {name:name,baseClass:JsDocASTNode,jsdocmaker:JsDocMaker} and perform some modification to passed node:parsed instance. \n This is done just before a class name is binding to an actual AST class node.",commentRange:[4986,5298],fileName:"src/jsdocmaker/core/binding.js"},afterBindClassPlugins:{annotation:"property",type:"{PluginContainer}",name:"afterBindClassPlugins",text:"these plugins accept an object like \n {name:name,baseClass:JsDocASTNode,jsdocmaker:JsDocMaker} and perform some modification to passed node:parsed instance. \n This is done just after a class name is binding to an actual AST class node.",commentRange:[5370,5661],fileName:"src/jsdocmaker/core/binding.js"},customNativeTypes:{annotation:"property",type:"{Object<String,String>}",name:"customNativeTypes",text:"name to url map that the user can modify to register new native types b givin its url.",commentRange:[8446,8586],fileName:"src/jsdocmaker/core/class.js"},DEFAULT_CLASS:{annotation:"property",type:"{String}",name:"DEFAULT_CLASS",text:"",children:[{annotation:"static",name:"dummy",text:"",theRestString:""}],commentRange:[8848,8891],fileName:"src/jsdocmaker/core/class.js"},DEFAULT_MODULE:{annotation:"property",type:"{String}",name:"DEFAULT_MODULE",text:"",children:[{annotation:"static",name:"dummy",text:"",theRestString:""}],commentRange:[8931,8975],fileName:"src/jsdocmaker/core/class.js"},ABSOLUTE_NAME_SEPARATOR:{annotation:"property",type:"{String}",name:"ABSOLUTE_NAME_SEPARATOR",text:"",children:[{annotation:"static",name:"dummy",text:"",theRestString:""}],commentRange:[9025,9078],fileName:"src/jsdocmaker/core/class.js"},MULTIPLE_TEXT_SEPARATOR:{annotation:"property",type:"{String}",name:"MULTIPLE_TEXT_SEPARATOR",text:"",children:[{annotation:"static",name:"dummy",text:"",theRestString:""}],commentRange:[9123,9176],fileName:"src/jsdocmaker/core/class.js"},beforeTypeBindingPlugins:{annotation:"property",type:"{PluginContainer}",name:"beforeTypeBindingPlugins",text:"these plugins accept an object like \n {node:parsed:jsdocmaker:self} and perform some modification to passed node:parsed instance. \n This is done just before doing the type binding.",commentRange:[26811,27069],fileName:"src/jsdocmaker/core/postprocess.js"},afterTypeBindingPlugins:{annotation:"property",type:"{PluginContainer}",name:"afterTypeBindingPlugins",text:"these plugins accept an object like \n {node:parsed:jsdocmaker:self} and perform some modification to passed node:parsed instance. \n This is done just after doing the type binding.",commentRange:[27143,27380],fileName:"src/jsdocmaker/core/postprocess.js"},complex:{annotation:"property",type:"{config:O<S,N>,tools:A<Tool>}",name:"complex",text:"Note that these plugins perform two tasks using two different plugins: \n1) replace aliases initial annotation with original ones on parsing - the plugin runs on beforeParseNodePlugins\n2) but also perform the aliasing on type binding. This is done on beforeBindClassPlugins\n\nIMPORTANT. alias to complex types are not supported, only alias to simple types. The following is WRONG:",children:[{annotation:"alias",name:"class",text:"MySuper Array<Leg>\n\n##annotation alias",theRestString:"@alias annotation task method\n\n##Implementation notes\n\nat preprocessing the alias meta information will be stored in the AST under the 'alias' property. \nThen this information will be consumed at binding time in the second plugin"},{annotation:"alias",name:"annotation",text:"task method\n\n##Implementation notes\n\nat preprocessing the alias meta information will be stored in the AST under the 'alias' property. \nThen this information will be consumed at binding time in the second plugin",theRestString:""}],commentRange:[56527,57733],fileName:"src/jsdocmaker/plugin/alias.js"},MODIFIERS:{annotation:"property",type:"{Array<String>}",name:"MODIFIERS",text:"",children:[{annotation:"static",name:"dummy",text:"",theRestString:""}],commentRange:[72409,72528],fileName:"src/jsdocmaker/plugin/modifiers.js"},afterTypeBindingRecurseASTPlugins:{annotation:"property",type:"{AfterTypeBindingRecurseASTPluginContainer}",name:"afterTypeBindingRecurseASTPlugins",text:"",commentRange:[76782,76908],fileName:"src/jsdocmaker/plugin/recurse-plugin-containers.js"}}},"shortjsdoc.TypeBinding":{annotation:"class",name:"TypeBinding",text:"a datatype with an association between types names in source code and parsed class nodes. \n It support generic types (recursive)",commentRange:[172,970],fileName:"src/jsdocmaker/core/binding.js",module:{annotation:"module",name:"shortjsdoc",text:"\n\n#Comment Preprocessors\n\nThe core of comment preprocessing is done ba couple of plugins executed at allCommentPreprocessorPlugins and \ningeneral normalizes the comments text, delete non relevant comments, unify line comments into a single one, etc\n\n\n\n\n\n\n\n\n\n\n\n\n\n",commentRange:[2,100],fileName:"src/jsdocmaker/core/binding.js"},absoluteName:"shortjsdoc.TypeBinding",properties:{type:{annotation:"property",type:"{TypeBinding}",name:"type",text:"",commentRange:[172,970],fileName:"src/jsdocmaker/core/binding.js"},params:{annotation:"property",type:"{Array<TypeBinding>}",name:"params",text:"- the generic types params array. For example the params for {Map<String,Apple>} is [StringBynding]",commentRange:[172,970],fileName:"src/jsdocmaker/core/binding.js"},properties:{annotation:"property",type:"{Object<String,TypeBinding>}",name:"properties",text:"- the properties literal object declaration binding, {a:A,b:B}",commentRange:[172,970],fileName:"src/jsdocmaker/core/binding.js"},nativeTypeUrl:{annotation:"property",type:"{String}",name:"nativeTypeUrl",text:"the url for native type only",commentRange:[172,970],fileName:"src/jsdocmaker/core/binding.js"}}},"shortjsdoc.JsDocMaker.Data":{annotation:"class",name:"JsDocMaker.Data",text:"",commentRange:[9916,11357],fileName:"src/jsdocmaker/core/parse.js",module:{annotation:"module",name:"shortjsdoc",text:"",commentRange:[9916,11357],fileName:"src/jsdocmaker/core/parse.js"},absoluteName:"shortjsdoc.JsDocMaker.Data",properties:{methods:{annotation:"property",type:"{Object<String, JsDocASTNode>}",name:"methods",text:"",commentRange:[9916,11357],fileName:"src/jsdocmaker/core/parse.js"},classes:{annotation:"property",type:"{Array<JsDocASTNode>}",name:"classes",text:"",commentRange:[9916,11357],fileName:"src/jsdocmaker/core/parse.js"}}},"shortjsdoc.JsDocASTNode":{annotation:"class",name:"JsDocASTNode",text:"all the jsdoc parsed information is stored as nodes one containing others. modules contains classes,",commentRange:[9916,11357],fileName:"src/jsdocmaker/core/parse.js",module:{annotation:"module",name:"shortjsdoc",text:"",commentRange:[9916,11357],fileName:"src/jsdocmaker/core/parse.js"},absoluteName:"shortjsdoc.JsDocASTNode"},"shortjsdoc.contains":{annotation:"class",name:"contains",text:"methods and",commentRange:[9916,11357],fileName:"src/jsdocmaker/core/parse.js",module:{annotation:"module",name:"shortjsdoc",text:"",commentRange:[9916,11357],fileName:"src/jsdocmaker/core/parse.js"},absoluteName:"shortjsdoc.contains",methods:{contains:{annotation:"method",name:"contains",text:"",children:[{annotation:"param",name:"and",text:"",theRestString:"@returns dummy"},{annotation:"returns",name:"dummy",text:"",theRestString:""}],commentRange:[9916,11357],fileName:"src/jsdocmaker/core/parse.js"}}},"shortjsdoc.dummy":{annotation:"class",name:"dummy",text:"",commentRange:[9916,11357],fileName:"src/jsdocmaker/core/parse.js",module:{annotation:"module",name:"shortjsdoc",text:"",commentRange:[9916,11357],fileName:"src/jsdocmaker/core/parse.js"},absoluteName:"shortjsdoc.dummy",methods:{dummy:{annotation:"method",name:"dummy",text:"",commentRange:[9916,11357],fileName:"src/jsdocmaker/core/parse.js"},jsdoc:{annotation:"method",name:"jsdoc",text:"the public method to parse all the added files with addFile.",children:[{annotation:"return",type:"{Object}",name:"the",text:"parsed object",theRestString:"@param {String} source . Optional"},{annotation:"param",type:"{String}",name:"source",text:". Optional",theRestString:""}],commentRange:[13814,13959],fileName:"src/jsdocmaker/core/parse.js"},parseFile:{annotation:"method",name:"parseFile",text:"a public method for parsing a single file. Note if you want to parse more than one file please use addFile() and the jsdoc()",children:[{annotation:"return",type:"{Object}",name:"the",text:"parsed object",theRestString:"@param {String} source @param {String} filename"},{annotation:"param",type:"{String}",name:"source",text:"",theRestString:"@param {String} filename"},{annotation:"param",type:"{String}",name:"filename",text:"",theRestString:""}],commentRange:[14429,14659]},addFile:{annotation:"method",name:"addFile",text:"",children:[{annotation:"param",type:"{String}",name:"source",text:"the source code of the file",theRestString:"@param {String} the file name"},{annotation:"param",type:"{String}",name:"the",text:"file name",theRestString:""}],commentRange:[14784,14882]},parse:{annotation:"method",name:"parse",text:"",children:[{annotation:"return",type:"{Array}",name:"array",text:"of class description - with methods, and methods containing params.",theRestString:""}],commentRange:[15147,15253]},parseUnit:{annotation:"method",type:"{Unit}",name:"parseUnit",text:"parse a simple substring like '@annotation {Type} a text' into an object {annotation, type, text} object. \n syntax:",commentRange:[20911,21140]},methodName:{annotation:"method",type:"{String}",name:"methodName",text:"blabla",children:[{annotation:"return",type:"{Number}",name:"blabla",text:"",theRestString:"@param {Object} p1 blabla"},{annotation:"param",type:"{Object}",name:"p1",text:"blabla",theRestString:""}],commentRange:[20911,21140]},parseUnitSimple:{annotation:"method",name:"parseUnitSimple",text:"",children:[{annotation:"param",type:"{String}",name:"str",text:"",theRestString:"@param {ASTSprimaNode} comment"},{annotation:"param",type:"{ASTSprimaNode}",name:"comment",text:"",theRestString:""}],commentRange:[21740,21816]}},properties:{undefined:{annotation:"property",text:"*\n\nThese are the concepts that contains the stuff. All the other annotations are children of one primary annotation. For example",children:[{annotation:"return",text:",",theRestString:"@param, @extend, @static are SECOND LEVEL ANNOTATIONS\nand are always children of one primary annotation.\n\nBut this is the only logic contained in the core parsing. Then a general AST, using this primary container names logic, is returned. \n\nALL declared annotations will be outputed (unless a plugin remove something)"},{annotation:"param",text:",",theRestString:"@extend, @static are SECOND LEVEL ANNOTATIONS\nand are always children of one primary annotation.\n\nBut this is the only logic contained in the core parsing. Then a general AST, using this primary container names logic, is returned. \n\nALL declared annotations will be outputed (unless a plugin remove something)"},{annotation:"extend",text:",",theRestString:"@static are SECOND LEVEL ANNOTATIONS\nand are always children of one primary annotation.\n\nBut this is the only logic contained in the core parsing. Then a general AST, using this primary container names logic, is returned. \n\nALL declared annotations will be outputed (unless a plugin remove something)"},{annotation:"static",name:"are",text:"SECOND LEVEL ANNOTATIONS\nand are always children of one primary annotation.\n\nBut this is the only logic contained in the core parsing. Then a general AST, using this primary container names logic, is returned. \n\nALL declared annotations will be outputed (unless a plugin remove something)",theRestString:""}],commentRange:[9916,11357],fileName:"src/jsdocmaker/core/parse.js"},allCommentPreprocessorPlugins:{annotation:"property",type:"{PluginContainer}",name:"allCommentPreprocessorPlugins",text:"these plugins accept an object like \n {node:parsed:jsdocmaker:self} and perform some modification to esprima comment node - \n this is the FIRST stage of the parser. This is the same as commentPreprocessorPlugins but all comments nodes are passed for those plugins that need some context about the comments.",commentRange:[11521,11893],fileName:"src/jsdocmaker/core/parse.js"},commentPreprocessorPlugins:{annotation:"property",type:"{PluginContainer}",name:"commentPreprocessorPlugins",text:"these plugins accept an object like \n {node:parsed:jsdocmaker:self} and perform some modification to esprima comment node - this is the FIRST stage of the parser",commentRange:[11972,12193],fileName:"src/jsdocmaker/core/parse.js"},beforeParseNodePlugins:{annotation:"property",type:"{PluginContainer}",name:"beforeParseNodePlugins",text:"these plugins accept an object like \n {node:parsed:jsdocmaker:self} and perform some modification to passed node:parsed instance. \n This is done just before the first parsing is done on the first AST node. Only primary nodes are visited!",commentRange:[12269,12563],fileName:"src/jsdocmaker/core/parse.js"},parsePreprocessors:{annotation:"property",type:"{PluginContainer}",name:"parsePreprocessors",text:"these plugins accept an object like \n {node:parsed:jsdocmaker:self} and perform some modification to passed node:parsed instance. \n This is done just after the first parsing is done on the first AST node. Only primary nodes are visited!",commentRange:[12635,12924],fileName:"src/jsdocmaker/core/parse.js"},afterParseUnitSimplePlugins:{annotation:"property",type:"{PluginContainer}",name:"afterParseUnitSimplePlugins",text:"these plugins accept an object like \n {node:parsed:jsdocmaker:self} and perform some modification to passed node:parsed instance. \n This is done after an unit is parsed - this will iterated all nodes as units .The first node object is formed at this stage.",commentRange:[12994,13313],fileName:"src/jsdocmaker/core/parse.js"},primaryAnnotationsRegexString:{annotation:"property",type:"{String}",name:"primaryAnnotationsRegexString",text:"",commentRange:[13389,13439],fileName:"src/jsdocmaker/core/parse.js"},all:{annotation:"property",type:"{Array<String>}",name:"all",text:"the input added included",commentRange:[14009,14087],fileName:"src/jsdocmaker/core/parse.js"},the:{annotation:"property",type:"{EsprimaSyntax}",name:"the",text:"Sprima Syntax object of the current pased file.",commentRange:[14196,14277]},ignoreCommentPrefix:{annotation:"property",type:"{String}",name:"ignoreCommentPrefix",text:"",commentRange:[15057,15097]},lineCommentSeparator:{annotation:"property",type:"{String}",name:"lineCommentSeparator",text:"used to separate each Line comment type text",commentRange:[22864,22950]},data:{annotation:"property",type:"{JsDocMaker.Data}",name:"data",text:"the main data on which the parser and plugins will be working on. This is the resulting AST of jsdoc.",commentRange:[23423,23726]}}},"shortjsdoc.plugin.PluginContainer":{annotation:"class",name:"PluginContainer",text:"a plugin container can be used for installing plugins and then processing \n some action with all of them, executing them in sequence. \n A plugin is basically a function that acts on some data - state \n Registered plugins are executed secuentially. plugin execution arguments can be modified so next-to-execute plugin can \n consume new information - same with return value.",commentRange:[23794,24198],fileName:"src/jsdocmaker/core/plugin.js",module:{annotation:"module",name:"shortjsdoc.plugin",text:"",commentRange:[23423,23726],fileName:"src/jsdocmaker/core/plugin.js"},absoluteName:"shortjsdoc.plugin.PluginContainer",methods:{add:{annotation:"method",name:"add",text:"",children:[{annotation:"param",type:"{JsDocMakerPlugin}",name:"plugin",text:"",theRestString:""}],commentRange:[24315,24361],fileName:"src/jsdocmaker/core/plugin.js"},execute:{annotation:"method",name:"execute",text:"",children:[{annotation:"param",type:"{Object}",text:"@param {Any} input options",theRestString:"@return {Any}"},{annotation:"return",type:"{Any}",text:"",theRestString:""}],commentRange:[24494,24593],fileName:"src/jsdocmaker/core/plugin.js"},visitPlugins:{annotation:"method",name:"visitPlugins",text:"visit children plugins respecting priority",children:[{annotation:"param",type:"{Function}",name:"visitor",text:"",theRestString:""}],commentRange:[24788,24879],fileName:"src/jsdocmaker/core/plugin.js"}},properties:{priorized:{annotation:"property",type:"{Array<Array<Plugin>>}",name:"priorized",text:"array of priorities - each priority index contains the plugins with that priority",commentRange:[24942,25069],fileName:"src/jsdocmaker/core/plugin.js"}}},"shortjsdoc.plugin.JsDocMakerPlugin":{annotation:"class",name:"JsDocMakerPlugin",text:"",commentRange:[25804,26028],fileName:"src/jsdocmaker/core/plugin.js",module:{annotation:"module",name:"shortjsdoc.plugin",text:"",commentRange:[23423,23726],fileName:"src/jsdocmaker/core/plugin.js"},absoluteName:"shortjsdoc.plugin.JsDocMakerPlugin",properties:{name:{annotation:"property",type:"{String}",name:"name",text:"",commentRange:[25804,26028],fileName:"src/jsdocmaker/core/plugin.js"}},methods:{execute:{annotation:"method",name:"execute",text:"execute this plugin",children:[{annotation:"param",type:"{Object}",name:"options",text:"",theRestString:"@param {Any}result _lineCommentSeparatorMark_ @returns{Any} result possible enriched by the plugin in the chain"},{annotation:"param",type:"{Any}",name:"result",text:"",theRestString:"@returns{Any} result possible enriched by the plugin in the chain"},{annotation:"returns",type:"{Any}",name:"result",text:"possible enriched by the plugin in the chain",theRestString:""}],commentRange:[25804,26028],fileName:"src/jsdocmaker/core/plugin.js"},globalPlugins:{annotation:"method",name:"globalPlugins",text:"",children:[{annotation:"static",name:"_lineCommentSeparatorMark_",text:"JsDocMaker.registerGlobalPlugin = function(pluginContainerName, plugin) \n { \n JsDocMaker.prototype.plugins = JsDocMaker.prototype.plugins || {}; \n JsDocMaker.globalPlugins[pluginContainerName] = JsDocMaker.globalPlugins[pluginContainerName] || {}; \n }; \n //",theRestString:""}],commentRange:[26070,26695],fileName:"src/jsdocmaker/core/plugin.js"},initializePluginContainers:{annotation:"method",name:"initializePluginContainers",text:"called in the constructor - will install all static plugins registered with JsDocMaker.registerGlobalPlugin \n JsDocMaker.prototype.initializePluginContainers = function() \n { \n }",commentRange:[26070,26695],fileName:"src/jsdocmaker/core/plugin.js"}}},"shortjsdoc.PreprocessCommentsPlugin1":{annotation:"class",name:"PreprocessCommentsPlugin1",text:"",children:[{annotation:"extends",name:"JsDocMakerPlugin",text:"this plugin is registered in JsDocMaker.prototype.allCommentPreprocessorPlugins plugin container \n and do an initial preprocesing on the comments erasing those marked comments to be ignored, and fixing its text to support alternative syntax.",theRestString:""}],commentRange:[34344,34673],fileName:"src/jsdocmaker/core/preprocess.js",module:{annotation:"module",name:"shortjsdoc",text:"#Comment Preprocessors\n\nThe core of comment preprocessing is done ba couple of plugins executed at allCommentPreprocessorPlugins and \ningeneral normalizes the comments text, delete non relevant comments, unify line comments into a single one, etc",commentRange:[33999,34272],fileName:"src/jsdocmaker/core/preprocess.js"},absoluteName:"shortjsdoc.PreprocessCommentsPlugin1"},"shortjsdoc.FixUnamedAnnotationsPlugin":{annotation:"class",name:"FixUnamedAnnotationsPlugin",text:"",children:[{annotation:"extends",name:"JsDocMakerPlugin",text:"This plugin is installed at JsDocMaker.prototype.commentPreprocessorPlugins and and solves the following problem: \n Our regexp format expect an anotation with a name. So for enabling unamed annotations we do this dirty fix, this is add a name to precondition",theRestString:""}],commentRange:[35638,36012],fileName:"src/jsdocmaker/core/preprocess.js",module:{annotation:"module",name:"shortjsdoc",text:"#Comment Preprocessors\n\nThe core of comment preprocessing is done ba couple of plugins executed at allCommentPreprocessorPlugins and \ningeneral normalizes the comments text, delete non relevant comments, unify line comments into a single one, etc",commentRange:[33999,34272],fileName:"src/jsdocmaker/core/preprocess.js"},absoluteName:"shortjsdoc.FixUnamedAnnotationsPlugin"},"shortjsdoc.UnifyLineCommentsPlugin":{annotation:"class",name:"UnifyLineCommentsPlugin",text:"",children:[{annotation:"extends",name:"JsDocMakerPlugin",text:"this is a very important plugin for normalize our js input Line comments \n It is executed at JsDocMaker.prototype.allCommentPreprocessorPlugins",theRestString:""}],commentRange:[36527,36731],fileName:"src/jsdocmaker/core/preprocess.js",module:{annotation:"module",name:"shortjsdoc",text:"#Comment Preprocessors\n\nThe core of comment preprocessing is done ba couple of plugins executed at allCommentPreprocessorPlugins and \ningeneral normalizes the comments text, delete non relevant comments, unify line comments into a single one, etc",commentRange:[33999,34272],fileName:"src/jsdocmaker/core/preprocess.js"},absoluteName:"shortjsdoc.UnifyLineCommentsPlugin"},"shortjsdoc.plugin.alias.AliasBeforeParseNodePlugin":{annotation:"class",name:"AliasBeforeParseNodePlugin",text:"",children:[{annotation:"extends",name:"JsDocMakerPlugin",text:"a plugin executed at afterParseUnitSimplePlugins. Responsible of TODO",theRestString:""}],commentRange:[57813,57945],fileName:"src/jsdocmaker/plugin/alias.js",module:{annotation:"module",name:"shortjsdoc.plugin.alias",text:"",commentRange:[56432,56526],fileName:"src/jsdocmaker/plugin/alias.js"},absoluteName:"shortjsdoc.plugin.alias.AliasBeforeParseNodePlugin",methods:{parseAlias:{annotation:"method",name:"parseAlias",text:"",children:[{annotation:"return",type:"{JSDocASTNode}",name:"the",text:"enhanced node with property *alias* enhanced",theRestString:"@param {JSDocASTNode} alias @param {JsDocMaker} context @param {Boolean} install @return {Array<JSDocASTNode>} contained in the annotation text."},{annotation:"param",type:"{JSDocASTNode}",name:"alias",text:"",theRestString:"@param {JsDocMaker} context @param {Boolean} install @return {Array<JSDocASTNode>} contained in the annotation text."},{annotation:"param",type:"{JsDocMaker}",name:"context",text:"",theRestString:"@param {Boolean} install @return {Array<JSDocASTNode>} contained in the annotation text."
},{annotation:"param",type:"{Boolean}",name:"install",text:"",theRestString:"@return {Array<JSDocASTNode>} contained in the annotation text."},{annotation:"return",type:"{Array<JSDocASTNode>}",name:"contained",text:"in the annotation text.",theRestString:""}],commentRange:[58610,58851],fileName:"src/jsdocmaker/plugin/alias.js"}}},"shortjsdoc.plugin.alias.AliasBeforeBindClassPlugin":{annotation:"class",name:"AliasBeforeBindClassPlugin",text:"",children:[{annotation:"extends",name:"JsDocMakerPlugin",text:"a plugin executed at afterParseUnitSimplePlugins. Responsible of TODO",theRestString:""}],commentRange:[59280,59412],fileName:"src/jsdocmaker/plugin/alias.js",module:{annotation:"module",name:"shortjsdoc.plugin.alias",text:"",commentRange:[56432,56526],fileName:"src/jsdocmaker/plugin/alias.js"},absoluteName:"shortjsdoc.plugin.alias.AliasBeforeBindClassPlugin"},"shortjsdoc.plugin.alias.annotationAliasPlugin":{annotation:"class",name:"annotationAliasPlugin",text:"",children:[{annotation:"extends",name:"JsDocMakerPlugin",text:"a plugin executed at commentPreprocessorPlugins. Responsible of TODO",theRestString:""}],commentRange:[59960,60086],fileName:"src/jsdocmaker/plugin/alias.js",module:{annotation:"module",name:"shortjsdoc.plugin.alias",text:"",commentRange:[56432,56526],fileName:"src/jsdocmaker/plugin/alias.js"},absoluteName:"shortjsdoc.plugin.alias.annotationAliasPlugin"},"shortjsdoc.plugin.comment.indentation.commentIndentationPlugin":{annotation:"class",name:"commentIndentationPlugin",text:"",children:[{annotation:"extends",name:"JsDocMakerPlugin",text:"a plugin executed at beforeParseNodePlugins.",theRestString:""}],commentRange:[61049,61154],fileName:"src/jsdocmaker/plugin/comment-indentation.js",module:{annotation:"module",name:"shortjsdoc.plugin.comment.indentation",text:"#Comment indentation plugin\nTakes care of respecting the original indentation of block comments. \nIt will erase the initial spaces of each line according to the comment indentation.",commentRange:[60735,60969],fileName:"src/jsdocmaker/plugin/comment-indentation.js"},absoluteName:"shortjsdoc.plugin.comment.indentation.commentIndentationPlugin"},"shortjsdoc.plugin.JsDocMaker":{annotation:"class",name:"JsDocMaker",text:"",commentRange:[66267,66702],fileName:"src/jsdocmaker/plugin/inherited.js",module:{annotation:"module",name:"shortjsdoc.plugin",text:"",commentRange:[66267,66702],fileName:"src/jsdocmaker/plugin/inherited.js"},absoluteName:"shortjsdoc.plugin.JsDocMaker",methods:{postProccessInherited:{annotation:"method",name:"postProccessInherited",text:"calculates inherited methods&properties and put it in class'properties inheritedMethods and inheritedProperties",commentRange:[66780,67069],fileName:"src/jsdocmaker/plugin/inherited.js"},extractInherited:{annotation:"method",name:"extractInherited",text:"",children:[{annotation:"param",name:"baseClass",text:"",theRestString:"@param c @param what @para data"},{annotation:"param",name:"c",text:"",theRestString:"@param what @para data"},{annotation:"param",name:"what",text:"",theRestString:"@para data"},{annotation:"para",name:"data",text:"",theRestString:""}],commentRange:[68008,68083],fileName:"src/jsdocmaker/plugin/inherited.js"},isClassOwner:{annotation:"method",name:"isClassOwner",text:"utility method for knowing if a property is defined in given class or is inherithed",children:[{annotation:"static",name:"dummy",text:"",theRestString:"@param aClass @param prop"},{annotation:"param",name:"aClass",text:"",theRestString:"@param prop"},{annotation:"param",name:"prop",text:"",theRestString:""}],commentRange:[69838,69980],fileName:"src/jsdocmaker/plugin/inherited.js"}}},"module1.MyTool1":{annotation:"class",name:"MyTool1",text:"",children:[{annotation:"exports",type:"{version:String,Tool:MyTool1}",text:"",theRestString:""}],commentRange:[73057,73298],fileName:"src/jsdocmaker/plugin/module-exports.js",module:{annotation:"module",name:"module1",text:"blabla",commentRange:[73057,73298],fileName:"src/jsdocmaker/plugin/module-exports.js"},absoluteName:"module1.MyTool1"},"module1.ModuleExportsPlugin":{annotation:"class",name:"ModuleExportsPlugin",text:"",children:[{annotation:"extends",name:"JsDocMakerPlugin",text:"",theRestString:""}],commentRange:[73377,73431],fileName:"src/jsdocmaker/plugin/module-exports.js",module:{annotation:"module",name:"module1",text:"blabla",commentRange:[73057,73298],fileName:"src/jsdocmaker/plugin/module-exports.js"},absoluteName:"module1.ModuleExportsPlugin"},"recurse-plugin-containers.AfterTypeBindingRecurseASTPluginContainer":{annotation:"class",name:"AfterTypeBindingRecurseASTPluginContainer",text:"it is both a plugin and a plugin container",children:[{annotation:"extends",name:"PluginContainer",text:"",theRestString:""}],commentRange:[75783,75902],fileName:"src/jsdocmaker/plugin/recurse-plugin-containers.js",module:{annotation:"module",name:"recurse-plugin-containers",text:"- a plugin to be used by concrete plugins to iterate on all \n nodes after some interesting stages. by calling recurseAST. \n The objective is that other concrete plugins register here and so the AST recursion is made \n ONCE instead of using recurseAST in each of them.",commentRange:[75244,75633],fileName:"src/jsdocmaker/plugin/recurse-plugin-containers.js"},absoluteName:"recurse-plugin-containers.AfterTypeBindingRecurseASTPluginContainer"},"client.MyClass":{annotation:"class",name:"MyClass",text:"The attributes of this class are given and well explained the server service that poblate this \nmodel with JSON @?see server.MyService.Attributes\n\n##History\n\nThis tool born with the neccesity of java's",children:[{annotation:"see.",name:"We",text:"consider using templates (underscore,handlebars) but discarded because we cannot introduce any new \nreserved characters or complexity. An approach with template would allow also to call a function. \n\nBut finally the idea of markins is more compatible and enrich the AST and don't add a postprocessing that complicate the syntax. \n\n##Implementation notes\n\nWhy @?see and not",theRestString:"@see ? Because @see will break the simple syntax @annotation name text. We don't want to break \nthe basic syntax even if we would easily do w a preprocessing plugin replacing @see with a no annotation mark."},{annotation:"see",text:"? Because",theRestString:"@see will break the simple syntax @annotation name text. We don't want to break \nthe basic syntax even if we would easily do w a preprocessing plugin replacing @see with a no annotation mark."},{annotation:"see",name:"will",text:"break the simple syntax",theRestString:"@annotation name text. We don't want to break \nthe basic syntax even if we would easily do w a preprocessing plugin replacing @see with a no annotation mark."},{annotation:"annotation",name:"name",text:"text. We don't want to break \nthe basic syntax even if we would easily do w a preprocessing plugin replacing",theRestString:"@see with a no annotation mark."},{annotation:"see",name:"with",text:"a no annotation mark.",theRestString:""}],commentRange:[81307,82537],fileName:"src/jsdocmaker/plugin/text-marks.js",module:{annotation:"module",name:"client",text:"",commentRange:[81307,82537],fileName:"src/jsdocmaker/plugin/text-marks.js"},absoluteName:"client.MyClass"},"client.TextMarksAfterParseNodePlugin":{annotation:"class",name:"TextMarksAfterParseNodePlugin",text:"",children:[{annotation:"extends",name:"JsDocMakerPlugin",text:"a plugin executed at afterParseNodePlugin that implements the text-marks feature.",theRestString:""}],commentRange:[82616,82763],fileName:"src/jsdocmaker/plugin/text-marks.js",module:{annotation:"module",name:"client",text:"",commentRange:[81307,82537],fileName:"src/jsdocmaker/plugin/text-marks.js"},absoluteName:"client.TextMarksAfterParseNodePlugin"},"shortjsdoc.node.ShortJsDoc":{annotation:"class",name:"ShortJsDoc",text:"main class for running jsdocmaker using node through the command line.",commentRange:[87066,87156],fileName:"src/shortjsdoc.js",module:{annotation:"module",name:"shortjsdoc.node",text:"nodejs command line utility for generating the .json definition scanning a given source folder or file. \n\nDepends on src/JsDocMaker.js\n\n*IMPORTANT* don't use console.log here since the output is dumped to stdout",commentRange:[86635,86877],fileName:"src/shortjsdoc.js"},absoluteName:"shortjsdoc.node.ShortJsDoc",methods:{error:{annotation:"method",name:"error",text:"dumps an error",children:[{annotation:"param",type:"{String}",name:"m",text:"",theRestString:""}],commentRange:[87403,87451],fileName:"src/shortjsdoc.js"},tryToParseJsonFile:{annotation:"method",name:"tryToParseJsonFile",text:"",children:[{annotation:"param",type:"{String}",name:"path",text:"",theRestString:""}],commentRange:[87624,87674],fileName:"src/shortjsdoc.js"},execute:{annotation:"method",name:"execute",text:"MAIN method to parse the parsed folder's javascript files recursively and return the AST of the jsdoc.",children:[{annotation:"param",type:"{JsDocOptions}",name:"options",text:"meta information about the project like title, url, license, etc. Hsa the same format as package.json file",theRestString:"@return {Object} the jsdoc AST object of all the parsed files."},{annotation:"return",type:"{Object}",name:"the",text:"jsdoc AST object of all the parsed files.",theRestString:""}],commentRange:[87831,88158],fileName:"src/shortjsdoc.js"},computeVendorDirs:{annotation:"method",name:"computeVendorDirs",text:"",children:[{annotation:"param",type:"{JsDocOptions}",name:"options",text:"",theRestString:""}],commentRange:[89187,89244],fileName:"src/shortjsdoc.js"},jsdoc:{annotation:"method",name:"jsdoc",text:"public method meant to be called from user projects build-time code. It will perform all the job of soing the parse and generating a full html output project ready to be used.",children:[{annotation:"param",type:"{JsDocOptions}",name:"options",text:"meta information about the project like title, url, license, etc. Hsa the same format as package.json file",theRestString:""}],commentRange:[89766,90097],fileName:"src/shortjsdoc.js"},dumpJSON:{annotation:"method",name:"dumpJSON",text:"dump to json string the full ast. configurable through this.projectMetadata.jsdoc.dontMinifyOutput",commentRange:[90699,90817],fileName:"src/shortjsdoc.js"},parseSources:{annotation:"method",name:"parseSources",text:"",commentRange:[91064,91086],fileName:"src/shortjsdoc.js"},__parseSourcesFastVersion:{annotation:"method",name:"__parseSourcesFastVersion",text:"this was the previous implementation without file separation support. Nevertheless we \n let this uncommented and unused because parsing separate files introduced a significant parsing duration (parformance). \n TODO. let the user performa a --fast-parsing not supporting files but much faster just for fast jsdoc writting..",commentRange:[91267,91631],fileName:"src/shortjsdoc.js"},buildSources:{annotation:"method",name:"buildSources",text:"parse all files in passed folders and returns the parsed results in t",children:[{annotation:"param",name:"Array",text:"<String> inputDir",theRestString:"@returns {Object} the parsed jsdoc AST object of all passed folders"},{annotation:"returns",type:"{Object}",name:"the",text:"parsed jsdoc AST object of all passed folders",theRestString:""}],commentRange:[91875,92068],fileName:"src/shortjsdoc.js"},readSource:{annotation:"method",name:"readSource",text:"",children:[{annotation:"param",name:"file",text:"",theRestString:"@param map"},{annotation:"param",name:"map",text:"",theRestString:""}],commentRange:[92549,92592],fileName:"src/shortjsdoc.js"},getHtmlFolder:{annotation:"method",name:"getHtmlFolder",text:"",children:[{annotation:"return",type:"{String}",name:"this",text:"module's html folder path",theRestString:"@static dummy"},{annotation:"static",name:"dummy",text:"",theRestString:""}],commentRange:[92704,92783],fileName:"src/shortjsdoc.js"},getThisFolder:{annotation:"method",name:"getThisFolder",text:"",children:[{annotation:"return",type:"{String}",name:"this",text:"module's folder path",theRestString:"@static dummy"},{annotation:"static",name:"dummy",text:"",theRestString:""}],commentRange:[92895,92969],fileName:"src/shortjsdoc.js"},folderWalk:{annotation:"method",name:"folderWalk",text:"General function for walking a folder recusively and sync",children:[{annotation:"static",name:"dummy",text:"",theRestString:""}],commentRange:[93128,93229],fileName:"src/shortjsdoc.js"},copyRecursiveSync:{annotation:"method",name:"copyRecursiveSync",text:"copy directories recursively just like cp -r",children:[{annotation:"static",name:"_lineCommentSeparatorMark_",text:"//",theRestString:"@param {String} src The path to the thing to copy. _lineCommentSeparatorMark_ // @param {String} dest The path to the new copy. _lineCommentSeparatorMark_ ShortJsDoc.copyRecursiveSync = function(src, dest) _lineCommentSeparatorMark_ { _lineCommentSeparatorMark_ var exists = fs.existsSync(src); _lineCommentSeparatorMark_ var stats = exists && fs.statSync(src); _lineCommentSeparatorMark_ var isDirectory = exists && stats.isDirectory(); _lineCommentSeparatorMark_ if (exists && isDirectory) _lineCommentSeparatorMark_ { _lineCommentSeparatorMark_ fs.mkdirSync(dest); _lineCommentSeparatorMark_ fs.readdirSync(src).forEach(function(childItemName) _lineCommentSeparatorMark_ { _lineCommentSeparatorMark_ ShortJsDoc.copyRecursiveSync(path.join(src, childItemName), path.join(dest, childItemName)); _lineCommentSeparatorMark_ }); _lineCommentSeparatorMark_ } _lineCommentSeparatorMark_ else _lineCommentSeparatorMark_ { _lineCommentSeparatorMark_ fs.linkSync(src, dest); _lineCommentSeparatorMark_ } _lineCommentSeparatorMark_ };"},{annotation:"param",type:"{String}",name:"src",text:"The path to the thing to copy. \n //",theRestString:"@param {String} dest The path to the new copy. _lineCommentSeparatorMark_ ShortJsDoc.copyRecursiveSync = function(src, dest) _lineCommentSeparatorMark_ { _lineCommentSeparatorMark_ var exists = fs.existsSync(src); _lineCommentSeparatorMark_ var stats = exists && fs.statSync(src); _lineCommentSeparatorMark_ var isDirectory = exists && stats.isDirectory(); _lineCommentSeparatorMark_ if (exists && isDirectory) _lineCommentSeparatorMark_ { _lineCommentSeparatorMark_ fs.mkdirSync(dest); _lineCommentSeparatorMark_ fs.readdirSync(src).forEach(function(childItemName) _lineCommentSeparatorMark_ { _lineCommentSeparatorMark_ ShortJsDoc.copyRecursiveSync(path.join(src, childItemName), path.join(dest, childItemName)); _lineCommentSeparatorMark_ }); _lineCommentSeparatorMark_ } _lineCommentSeparatorMark_ else _lineCommentSeparatorMark_ { _lineCommentSeparatorMark_ fs.linkSync(src, dest); _lineCommentSeparatorMark_ } _lineCommentSeparatorMark_ };"},{annotation:"param",type:"{String}",name:"dest",text:"The path to the new copy. \n ShortJsDoc.copyRecursiveSync = function(src, dest) \n { \n var exists = fs.existsSync(src); \n var stats = exists && fs.statSync(src); \n var isDirectory = exists && stats.isDirectory(); \n if (exists && isDirectory) \n { \n fs.mkdirSync(dest); \n fs.readdirSync(src).forEach(function(childItemName) \n { \n ShortJsDoc.copyRecursiveSync(path.join(src, childItemName), path.join(dest, childItemName)); \n }); \n } \n else \n { \n fs.linkSync(src, dest); \n } \n };",theRestString:""}],commentRange:[93688,94377],fileName:"src/shortjsdoc.js"}}},"shortjsdoc.node.JsDocOptions":{annotation:"class",name:"JsDocOptions",text:"",commentRange:[94448,96061],fileName:"src/shortjsdoc.js",module:{annotation:"module",name:"shortjsdoc.node",text:"nodejs command line utility for generating the .json definition scanning a given source folder or file. \n\nDepends on src/JsDocMaker.js\n\n*IMPORTANT* don't use console.log here since the output is dumped to stdout",commentRange:[86635,86877],fileName:"src/shortjsdoc.js"},absoluteName:"shortjsdoc.node.JsDocOptions",properties:{output:{annotation:"property",type:"{String}",name:"output",text:"output folder",commentRange:[94448,96061],fileName:"src/shortjsdoc.js"},input:{annotation:"property",type:"{Array<String>}",name:"input",text:"the source code folders that will be parsed recursively.",commentRange:[94448,96061],fileName:"src/shortjsdoc.js"},vendor:{annotation:"property",type:"{Array<String>}",name:"vendor",text:"include the jsdoc of libraries supported by short-jsdoc (see vendor-jsdoc folder). Example: vendor: ['javascript', 'html']",commentRange:[94448,96061],fileName:"src/shortjsdoc.js"}}},"shortjsdoc.node.Food":{annotation:"class",name:"Food",text:"eatable by Animals",commentRange:[94448,96061],fileName:"test/test-project/empty/nomodules.js",module:{annotation:"module",name:"shortjsdoc.node",text:"nodejs command line utility for generating the .json definition scanning a given source folder or file. \n\nDepends on src/JsDocMaker.js\n\n*IMPORTANT* don't use console.log here since the output is dumped to stdout",commentRange:[86635,86877],fileName:"src/shortjsdoc.js"},absoluteName:"shortjsdoc.node.Food"},"shortjsdoc.node.Fruit":{annotation:"class",name:"Fruit",text:"what plants generate all years and can be eaten",children:[{annotation:"extends",name:"Food",text:"",theRestString:""}],commentRange:[94448,96061],fileName:"test/test-project/empty/nomodules.js",module:{annotation:"module",name:"shortjsdoc.node",text:"nodejs command line utility for generating the .json definition scanning a given source folder or file. \n\nDepends on src/JsDocMaker.js\n\n*IMPORTANT* don't use console.log here since the output is dumped to stdout",commentRange:[86635,86877],fileName:"src/shortjsdoc.js"},absoluteName:"shortjsdoc.node.Fruit"},"shortjsdoc.node.Apple":{annotation:"class",name:"Apple",text:"a nice fruit of *cold* climates",children:[{annotation:"extends",name:"Fruit",text:"",theRestString:""}],commentRange:[94448,96061],fileName:"test/test-project/empty/nomodules.js",module:{annotation:"module",name:"shortjsdoc.node",text:"nodejs command line utility for generating the .json definition scanning a given source folder or file. \n\nDepends on src/JsDocMaker.js\n\n*IMPORTANT* don't use console.log here since the output is dumped to stdout",commentRange:[86635,86877],fileName:"src/shortjsdoc.js"},absoluteName:"shortjsdoc.node.Apple"},"shortjsdoc.node.Banana":{annotation:"class",name:"Banana",text:"nice powerful fruit from *warm* climates",children:[{annotation:"extends",name:"Fruit",text:"",theRestString:""}],commentRange:[94448,96061],fileName:"test/test-project/empty/nomodules.js",module:{annotation:"module",name:"shortjsdoc.node",text:"nodejs command line utility for generating the .json definition scanning a given source folder or file. \n\nDepends on src/JsDocMaker.js\n\n*IMPORTANT* don't use console.log here since the output is dumped to stdout",commentRange:[86635,86877],fileName:"src/shortjsdoc.js"},absoluteName:"shortjsdoc.node.Banana",events:{"after:release-patch":{annotation:"event",name:"after:release-patch",text:"hello world",commentRange:[94448,96061],fileName:"test/test-project/empty/nomodules.js"},afterReleasePatch:{annotation:"event",name:"afterReleasePatch",text:"",commentRange:[94448,96061],fileName:"test/test-project/empty/nomodules.js"}}},"empty2.MyView":{annotation:"class",name:"MyView",text:"",children:[{annotation:"extend",name:"Backbone.View",text:"",theRestString:""},{annotation:"extend",name:"Backbone.View",text:"",theRestString:""}],commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js",module:{annotation:"module",name:"empty2",text:"",commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js"},absoluteName:"empty2.MyView",properties:{a:{annotation:"property",type:"{Object}",name:"a",text:"",commentRange:[96183,96575],fileName:"test/test-project/empty2/model2.js"},b:{annotation:"property",type:"{Array}",name:"b",text:"",commentRange:[96183,96575],fileName:"test/test-project/empty2/model2.js"},c:{annotation:"property",type:"{Array<String>}",name:"c",text:"",commentRange:[96183,96575],fileName:"test/test-project/empty2/model2.js"},d:{annotation:"property",type:"{JoJoJo}",name:"d",text:"",commentRange:[96183,96575],fileName:"test/test-project/empty2/model2.js"}}},"empty2.OtherView":{annotation:"class",name:"OtherView",text:'This contains a @?link "[Link to google](http://google.com/)" to test if we can reference external resources.',children:[{annotation:"extend",name:"MyView",text:"",theRestString:""}],commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js",module:{annotation:"module",name:"empty2",text:"",commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js"},absoluteName:"empty2.OtherView",methods:{getModel:{annotation:"method",name:"getModel",text:"",children:[{annotation:"returns",type:"{Backbone.Model}",name:"yes",text:"we do because of the association with @?class empty2.MyModel it implies that.",theRestString:""}],commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js"}}},"empty2.R":{annotation:"class",name:"R",text:"",children:[{annotation:"extends",name:"Backbone.Router",text:"",theRestString:""}],commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js",module:{annotation:"module",name:"empty2",text:"",commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js"},absoluteName:"empty2.R",properties:{p:{annotation:"property",type:"{Backbone.View}",name:"p",text:"",commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js"}}},"empty2.MyModel":{annotation:"class",name:"MyModel",text:"for more info please refeer to @?ref empty2.MyView because it uses",children:[{annotation:"extends",name:"Backbone.Model",text:"",theRestString:""}],commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js",module:{annotation:"module",name:"empty2",text:"",commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js"},absoluteName:"empty2.MyModel",attributes:{name:{annotation:"attribute",type:"{String}",name:"name",text:"bla bal bal abla",commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js"}},properties:{prop1:{annotation:"property",type:"{String}",name:"prop1",text:"",commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js"}},events:{change:{annotation:"event",type:"{String}",name:"change",text:"",commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js"}}},"empty2.MyModelExtension":{annotation:"class",name:"MyModelExtension",text:"",children:[{annotation:"extends",name:"MyModel",text:"",theRestString:""}],commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js",module:{annotation:"module",name:"empty2",text:"",commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js"},absoluteName:"empty2.MyModelExtension",attributes:{name2:{annotation:"attribute",type:"{String}",name:"name2",text:"",commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js"}},properties:{prop2:{annotation:"property",type:"{String}",name:"prop2",text:"",commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js"}},events:{change2:{annotation:"event",type:"{String}",name:"change2",text:"",commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js"}}},"funnycomments.Letsseehow":{annotation:"class",name:"Letsseehow",text:"this outputed\n * a new line for this class\n * and another one",commentRange:[96063,96178],fileName:"test/test-project/empty2/model1.js",module:{annotation:"module",name:"funnycomments",text:"*",commentRange:[96063,96178],fileName:"test/test-project/empty2/model1.js"},absoluteName:"funnycomments.Letsseehow"},"shared1.Shared1":{annotation:"class",name:"Shared1",text:"Some text from empty 1 model 2 that reference apple: @?class Apple\n\nSome text from empty 1 model 3 that reference apple: @?class Apple",commentRange:[96183,96575],fileName:"test/test-project/empty2/model2.js",module:{annotation:"module",name:"shared1",text:"",commentRange:[96183,96575],fileName:"test/test-project/empty2/model2.js"},absoluteName:"shared1.Shared1",children:[]},"simpleTestModule.Fruit":{annotation:"class",name:"Fruit",text:"",commentRange:[96577,96665],fileName:"test/test-project/empty2/model3.js",module:{annotation:"module",name:"simpleTestModule",text:"",commentRange:[96577,96665],fileName:"test/test-project/empty2/model3.js"},absoluteName:"simpleTestModule.Fruit"},"simpleTestModule.Apple":{annotation:"class",name:"Apple",text:"",children:[{annotation:"extends",name:"Fruit",text:"",theRestString:""}],commentRange:[96577,96665],fileName:"test/test-project/empty2/model3.js",module:{annotation:"module",name:"simpleTestModule",text:"",commentRange:[96577,96665],fileName:"test/test-project/empty2/model3.js"},absoluteName:"simpleTestModule.Apple"},"simpleTestModule.Mineral":{annotation:"class",name:"Mineral",text:"",commentRange:[96577,96665],fileName:"test/test-project/empty2/model3.js",module:{annotation:"module",name:"simpleTestModule",text:"",commentRange:[96577,96665],fileName:"test/test-project/empty2/model3.js"},absoluteName:"simpleTestModule.Mineral"},"ideal.BaseObject":{annotation:"class",name:"BaseObject",text:"",commentRange:[96667,96871],fileName:"test/test-project/ideal/Model.js",module:{annotation:"module",name:"ideal",text:"",commentRange:[96667,96871],fileName:"test/test-project/ideal/Model.js"},absoluteName:"ideal.BaseObject",properties:{creationDate:{annotation:"property",type:"{Date}",name:"creationDate",text:"",commentRange:[96983,97195],fileName:"test/test-project/ideal/Model.js"},name:{annotation:"property",type:"{String}",name:"name",text:"",commentRange:[96983,97195],fileName:"test/test-project/ideal/Model.js"},description:{annotation:"property",type:"{String}",name:"description",text:"",commentRange:[96983,97195],fileName:"test/test-project/ideal/Model.js"},owners:{annotation:"property",type:"{Object<String,User>}",name:"owners",text:"the owners, a map by owner id",commentRange:[96983,97195],fileName:"test/test-project/ideal/Model.js"},something:{annotation:"property",type:"{color:Color,amount:Number}",name:"something",text:"",commentRange:[96983,97195],fileName:"test/test-project/ideal/Model.js"}},methods:{m:{annotation:"method",name:"m",text:"",children:[{annotation:"returns",type:"{Thing}",name:"_lineCommentSeparatorMark_",text:"",theRestString:""}],commentRange:[97221,97271],fileName:"test/test-project/ideal/Model.js"}}},"ideal.ObjectPool":{annotation:"class",name:"ObjectPool",text:"",commentRange:[97221,97271],fileName:"test/test-project/ideal/Model.js",module:{annotation:"module",name:"ideal",text:"",commentRange:[96667,96871],fileName:"test/test-project/ideal/Model.js"},absoluteName:"ideal.ObjectPool",methods:{loadObjects:{annotation:"method",name:"loadObjects",text:"",children:[{annotation:"param",type:"{Array<String>}",name:"objects_ids",text:"",theRestString:"@return {Object<String,BaseObject>}"},{annotation:"return",type:"{Object<String,BaseObject>}",text:"",theRestString:""}],commentRange:[97297,97389],fileName:"test/test-project/ideal/Model.js"},getState0:{annotation:"method",name:"getState0",text:"",children:[{annotation:"returns",type:"{a:B231,c:D231,s:String}",name:"_lineCommentSeparatorMark_",text:"",theRestString:""}],commentRange:[97609,97951],fileName:"test/test-project/ideal/Model.js"},getState2:{annotation:"method",name:"getState2",text:"",children:[{annotation:"returns",type:"{a:B231,c:D231}",name:"_lineCommentSeparatorMark_",text:"",theRestString:""}],commentRange:[97609,97951],fileName:"test/test-project/ideal/Model.js"},getState3:{annotation:"method",name:"getState3",text:"",children:[{annotation:"re",name:"turns",text:"{#obj(color:String)}",theRestString:""}],commentRange:[97609,97951],fileName:"test/test-project/ideal/Model.js"},getState4:{annotation:"method",name:"getState4",text:"",children:[{annotation:"returns",type:"{name:String,colors:Array<Color>,car:Car}",name:"_lineCommentSeparatorMark_",text:"",theRestString:""}],commentRange:[97609,97951],fileName:"test/test-project/ideal/Model.js"},getState:{annotation:"method",name:"getState",text:"get's the current state of this pool",children:[{annotation:"returns",type:"{id:String,objectDic:Object<String>}",name:"bla",text:"bla bla",theRestString:""}],commentRange:[97609,97951],fileName:"test/test-project/ideal/Model.js"},getOwners:{annotation:"method",name:"getOwners",text:"this method is useful for *blabla* blabla _blabla_ bab",commentRange:[97980,98054],fileName:"test/test-project/ideal/Model.js"}},events:{objectCreated:{annotation:"event",name:"objectCreated",text:"event fired when an object is created in this pool.",commentRange:[98169,98244],fileName:"test/test-project/ideal/Model.js"}}},"ideal.Thing":{annotation:"class",name:"Thing",text:"",children:[{annotation:"extends",name:"BaseObject",text:"",theRestString:""}],commentRange:[98358,98731],fileName:"test/test-project/ideal/Model.js",module:{annotation:"module",name:"ideal",text:"",commentRange:[96667,96871],fileName:"test/test-project/ideal/Model.js"},absoluteName:"ideal.Thing",properties:{importance:{annotation:"property",type:"{Number}",name:"importance",text:"the importance of this thing in the universe",commentRange:[98358,98731],fileName:"test/test-project/ideal/Model.js"},pool:{annotation:"property",type:"{ObjectPool}",name:"pool",text:"things always contain or are related to other things so this is the pool where this associations are mantained laskd flaks djflkasj dlkfj alsdkj flaksjd flkasjdlfkjs lkdfjalksdjflak sdjlfkasdf d s asdf df ldkja sldkfj askd fasd.",commentRange:[98358,98731],fileName:"test/test-project/ideal/Model.js"}}},"ideal.Action":{annotation:"class",name:"Action",text:"",children:[{annotation:"extends",name:"BaseObject",text:"",theRestString:""}],commentRange:[98846,98886],fileName:"test/test-project/ideal/Model.js",module:{annotation:"module",name:"ideal",text:"",commentRange:[96667,96871],fileName:"test/test-project/ideal/Model.js"},absoluteName:"ideal.Action",methods:{extract:{annotation:"method",name:"extract",text:"",children:[{annotation:"param",type:"{String|BaseObject|Array<BaseObject>}",name:"what",text:"",theRestString:""}],commentRange:[99e3,100109],fileName:"test/test-project/ideal/Model.js"}}},"ideasAndProblems67.Idea":{annotation:"class",name:"Idea",text:"",commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js",module:{annotation:"module",name:"ideasAndProblems67",text:"",commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js"},absoluteName:"ideasAndProblems67.Idea"},"ideasAndProblems67.Problem":{annotation:"class",name:"Problem",text:"",children:[{annotation:"extends",name:"Idea",text:"",theRestString:"@param {Number} complexity _lineCommentSeparatorMark_"},{annotation:"param",type:"{Number}",name:"complexity",text:"",theRestString:""}],commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js",module:{annotation:"module",name:"ideasAndProblems67",text:"",commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js"},absoluteName:"ideasAndProblems67.Problem"},"ideasAndProblems67.IdealProblem":{annotation:"class",name:"IdealProblem",text:"",children:[{annotation:"extends",name:"Problem",text:"",theRestString:""}],commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js",module:{annotation:"module",name:"ideasAndProblems67",text:"",commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js"},absoluteName:"ideasAndProblems67.IdealProblem"},"ideasAndProblems67.MathProblem":{annotation:"class",name:"MathProblem",text:"",children:[{annotation:"extends",name:"IdealProblem",text:"",theRestString:""}],commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js",module:{annotation:"module",name:"ideasAndProblems67",text:"",commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js"},absoluteName:"ideasAndProblems67.MathProblem",properties:{equations:{annotation:"property",type:"{Object<String,Equation>}",name:"equations",text:"",commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js"
}}},"ideasAndProblems67.Equation":{annotation:"class",name:"Equation",text:"",commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js",module:{annotation:"module",name:"ideasAndProblems67",text:"",commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js"},absoluteName:"ideasAndProblems67.Equation",methods:{resolve:{annotation:"method",name:"resolve",text:"invoke this method to solve the equation",children:[{annotation:"throws",type:"{EquationError}",name:"kja",text:"shkdj ahsd",theRestString:""}],commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js"}},events:{afterThatHappens:{annotation:"event",name:"afterThatHappens",text:"triggered when you-know-who comes the handler must be a ....",children:[{annotation:"returns",type:"{Solution}",name:"because",text:"we are very practical",theRestString:""}],commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js"}}},"ideasAndProblems67.Solution":{annotation:"class",name:"Solution",text:"",commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js",module:{annotation:"module",name:"ideasAndProblems67",text:"",commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js"},absoluteName:"ideasAndProblems67.Solution"},"ideasAndProblems67.EquationError":{annotation:"class",name:"EquationError",text:"",children:[{annotation:"extends",name:"Error",text:"",theRestString:"@alias class A Array _lineCommentSeparatorMark_ @alias class O Object _lineCommentSeparatorMark_ @alias class S String _lineCommentSeparatorMark_ @alias class N Number _lineCommentSeparatorMark_"},{annotation:"alias",name:"class",text:"A Array",theRestString:"@alias class O Object _lineCommentSeparatorMark_ @alias class S String _lineCommentSeparatorMark_ @alias class N Number _lineCommentSeparatorMark_"},{annotation:"alias",name:"class",text:"O Object",theRestString:"@alias class S String _lineCommentSeparatorMark_ @alias class N Number _lineCommentSeparatorMark_"},{annotation:"alias",name:"class",text:"S String",theRestString:"@alias class N Number _lineCommentSeparatorMark_"},{annotation:"alias",name:"class",text:"N Number",theRestString:""}],commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js",module:{annotation:"module",name:"ideasAndProblems67",text:"",commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js"},absoluteName:"ideasAndProblems67.EquationError",methods:{mutualCmpare:{annotation:"method",name:"mutualCmpare",text:"",children:[{annotation:"param",type:"{A<O>|A<O<S,N>>}",name:"p1",text:"",theRestString:"@param {S}p2 @param {N|S}p3 _lineCommentSeparatorMark_ @alias class a Array _lineCommentSeparatorMark_ @alias class o Object _lineCommentSeparatorMark_ @alias class s String _lineCommentSeparatorMark_ @alias class n Number _lineCommentSeparatorMark_"},{annotation:"param",type:"{S}",name:"p2",text:"",theRestString:"@param {N|S}p3 _lineCommentSeparatorMark_ @alias class a Array _lineCommentSeparatorMark_ @alias class o Object _lineCommentSeparatorMark_ @alias class s String _lineCommentSeparatorMark_ @alias class n Number _lineCommentSeparatorMark_"},{annotation:"param",type:"{N|S}",name:"p3",text:"",theRestString:"@alias class a Array _lineCommentSeparatorMark_ @alias class o Object _lineCommentSeparatorMark_ @alias class s String _lineCommentSeparatorMark_ @alias class n Number _lineCommentSeparatorMark_"},{annotation:"alias",name:"class",text:"a Array",theRestString:"@alias class o Object _lineCommentSeparatorMark_ @alias class s String _lineCommentSeparatorMark_ @alias class n Number _lineCommentSeparatorMark_"},{annotation:"alias",name:"class",text:"o Object",theRestString:"@alias class s String _lineCommentSeparatorMark_ @alias class n Number _lineCommentSeparatorMark_"},{annotation:"alias",name:"class",text:"s String",theRestString:"@alias class n Number _lineCommentSeparatorMark_"},{annotation:"alias",name:"class",text:"n Number",theRestString:""}],commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js"},anotherComparission:{annotation:"method",name:"anotherComparission",text:"",children:[{annotation:"param",type:"{a<o>|a<o<s,n>>}",name:"_lineCommentSeparatorMark_",text:"",theRestString:""}],commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js"}}},"empty1.Aba":{annotation:"class",name:"Aba",text:"",commentRange:[100153,100330],fileName:"test/test-project/ideal/foobar1.js",module:{annotation:"module",name:"empty1",text:"",commentRange:[100153,100330],fileName:"test/test-project/ideal/foobar1.js",functions:[{annotation:"function",name:"auxiliary65",text:"",children:[{annotation:"return",type:"{String}",text:"@param p2",theRestString:"@param {Aba} aba _lineCommentSeparatorMark_"},{annotation:"param",type:"{Aba}",name:"aba",text:"",theRestString:""}],commentRange:[100368,101252],fileName:"test/test-project/ideal/foobar1.js"}]},absoluteName:"empty1.Aba",methods:{foo:{annotation:"method",name:"foo",text:"This is some text\n\nAll of it is indented so the following source code won't be shown\n\n\tvar a = 0;\n\tvar b = 1;\n\nIsn't it?",commentRange:[100153,100330],fileName:"test/test-project/ideal/foobar1.js"}}},"functioning1.Icore":{annotation:"interface",name:"Icore",text:"this is a base interface",commentRange:[100368,101252],fileName:"test/test-project/ideal/functioning.js",module:{annotation:"module",name:"functioning1",text:"",commentRange:[100368,101252],fileName:"test/test-project/ideal/functioning.js",functions:[{annotation:"function",name:"FHandler",text:"this is global function FHandler lorem ipsum bla bla",children:[{annotation:"param",type:"{Number}",text:"@return {Boolean}",theRestString:""}],commentRange:[100368,101252],fileName:"test/test-project/ideal/functioning.js"}]},absoluteName:"functioning1.Icore",methods:{base1:{annotation:"method",name:"base1",text:"",children:[{annotation:"param",type:"{Array<Number>}",name:"foo",text:"",theRestString:"@return {Number} lorem ipsum _lineCommentSeparatorMark_"},{annotation:"return",type:"{Number}",name:"lorem",text:"ipsum",theRestString:""}],commentRange:[100368,101252],fileName:"test/test-project/ideal/functioning.js"},handler:{annotation:"method",name:"handler",text:"",children:[{annotation:"param",type:"{FHandler}",name:"handler",text:"",theRestString:"@param {Boolean} trigger _lineCommentSeparatorMark_"},{annotation:"param",type:"{Boolean}",name:"trigger",text:"",theRestString:""}],commentRange:[100368,101252],fileName:"test/test-project/ideal/functioning.js"}}},"interfacing1.IBase":{annotation:"interface",name:"IBase",text:"this is a base interface",commentRange:[100368,101252],fileName:"test/test-project/ideal/interfacing.js",module:{annotation:"module",name:"interfacing1",text:"",commentRange:[100368,101252],fileName:"test/test-project/ideal/interfacing.js"},absoluteName:"interfacing1.IBase",methods:{base1:{annotation:"method",name:"base1",text:"",children:[{annotation:"param",type:"{Array<Number>}",name:"foo",text:"",theRestString:"@return {Number} lorem ipsum _lineCommentSeparatorMark_"},{annotation:"return",type:"{Number}",name:"lorem",text:"ipsum",theRestString:""}],commentRange:[100368,101252],fileName:"test/test-project/ideal/interfacing.js"}}},"interfacing1.IProbe":{annotation:"interface",name:"IProbe",text:"",children:[{annotation:"extends",name:"IBase",text:"",theRestString:""}],commentRange:[100368,101252],fileName:"test/test-project/ideal/interfacing.js",module:{annotation:"module",name:"interfacing1",text:"",commentRange:[100368,101252],fileName:"test/test-project/ideal/interfacing.js"},absoluteName:"interfacing1.IProbe",methods:{test:{annotation:"method",name:"test",text:"",children:[{annotation:"param",type:"{ProbeConfig}",name:"config",text:"",theRestString:"@return {Promise} _lineCommentSeparatorMark_"},{annotation:"return",type:"{Promise}",name:"_lineCommentSeparatorMark_",text:"",theRestString:""}],commentRange:[100368,101252],fileName:"test/test-project/ideal/interfacing.js"}}},"interfacing1.Concrete":{annotation:"class",name:"Concrete",text:"",children:[{annotation:"implements",name:"IProbe",text:"",theRestString:""}],commentRange:[100368,101252],fileName:"test/test-project/ideal/interfacing.js",module:{annotation:"module",name:"interfacing1",text:"",commentRange:[100368,101252],fileName:"test/test-project/ideal/interfacing.js"},absoluteName:"interfacing1.Concrete"},"pretty.names_9.A.Real.World.Name_123":{annotation:"class",name:"A.Real.World.Name_123",text:"lorem ipsum liprim trogus",commentRange:[101254,101531],fileName:"test/test-project/ideal/prettynames/something.js",module:{annotation:"module",name:"pretty.names_9",text:"lorem ipsum liprim trogus",commentRange:[101254,101531],fileName:"test/test-project/ideal/prettynames/something.js"},absoluteName:"pretty.names_9.A.Real.World.Name_123"},"pretty.names_9.Other.Real.Name_234":{annotation:"class",name:"Other.Real.Name_234",text:"lorem ipsum liprim trogus",children:[{annotation:"extends",name:"A.Real.World.Name_123",text:"",theRestString:""}],commentRange:[101254,101531],fileName:"test/test-project/ideal/prettynames/something.js",module:{annotation:"module",name:"pretty.names_9",text:"lorem ipsum liprim trogus",commentRange:[101254,101531],fileName:"test/test-project/ideal/prettynames/something.js"},absoluteName:"pretty.names_9.Other.Real.Name_234",properties:{children:{annotation:"property",type:"{Array<A.Real.World.Name_123>}",name:"children",text:"lorem ipsum liprim trogus",commentRange:[101254,101531],fileName:"test/test-project/ideal/prettynames/something.js"}}},"json2jsdoc_test1.WeatherQuery":{annotation:"class",name:"WeatherQuery",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js",module:{annotation:"module",name:"json2jsdoc_test1",text:"this is a test of the tool json2jsdoc that generates jsdoc from the response of the service \n\nhttps://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22nome%2C%20ak%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},absoluteName:"json2jsdoc_test1.WeatherQuery",properties:{query:{annotation:"property",type:"{WeatherQuery_query}",name:"query",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"}}},"json2jsdoc_test1.WeatherQuery_query":{annotation:"class",name:"WeatherQuery_query",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js",module:{annotation:"module",name:"json2jsdoc_test1",text:"this is a test of the tool json2jsdoc that generates jsdoc from the response of the service \n\nhttps://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22nome%2C%20ak%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},absoluteName:"json2jsdoc_test1.WeatherQuery_query",properties:{count:{annotation:"property",type:"{Number}",name:"count",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},created:{annotation:"property",type:"{String}",name:"created",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},lang:{annotation:"property",type:"{String}",name:"lang",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},results:{annotation:"property",type:"{WeatherQuery_query_results}",name:"results",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"}},children:[]},"json2jsdoc_test1.WeatherQuery_query_results":{annotation:"class",name:"WeatherQuery_query_results",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js",module:{annotation:"module",name:"json2jsdoc_test1",text:"this is a test of the tool json2jsdoc that generates jsdoc from the response of the service \n\nhttps://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22nome%2C%20ak%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},absoluteName:"json2jsdoc_test1.WeatherQuery_query_results",properties:{channel:{annotation:"property",type:"{WeatherQuery_query_results_channel}",name:"channel",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"}},children:[]},"json2jsdoc_test1.WeatherQuery_query_results_channel":{annotation:"class",name:"WeatherQuery_query_results_channel",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js",module:{annotation:"module",name:"json2jsdoc_test1",text:"this is a test of the tool json2jsdoc that generates jsdoc from the response of the service \n\nhttps://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22nome%2C%20ak%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},absoluteName:"json2jsdoc_test1.WeatherQuery_query_results_channel",properties:{title:{annotation:"property",type:"{String}",name:"title",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},link:{annotation:"property",type:"{String}",name:"link",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},description:{annotation:"property",type:"{String}",name:"description",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},language:{annotation:"property",type:"{String}",name:"language",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},lastBuildDate:{annotation:"property",type:"{String}",name:"lastBuildDate",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},ttl:{annotation:"property",type:"{String}",name:"ttl",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},location:{annotation:"property",type:"{WeatherQuery_query_results_channel_location}",name:"location",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"}},children:[]},"json2jsdoc_test1.WeatherQuery_query_results_channel_location":{annotation:"class",name:"WeatherQuery_query_results_channel_location",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js",module:{annotation:"module",name:"json2jsdoc_test1",text:"this is a test of the tool json2jsdoc that generates jsdoc from the response of the service \n\nhttps://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22nome%2C%20ak%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},absoluteName:"json2jsdoc_test1.WeatherQuery_query_results_channel_location",properties:{city:{annotation:"property",type:"{String}",name:"city",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},country:{annotation:"property",type:"{String}",name:"country",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},region:{annotation:"property",type:"{String}",name:"region",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},units:{annotation:"property",type:"{WeatherQuery_query_results_channel_units}",name:"units",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"}},children:[]},"json2jsdoc_test1.WeatherQuery_query_results_channel_units":{annotation:"class",name:"WeatherQuery_query_results_channel_units",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js",module:{annotation:"module",name:"json2jsdoc_test1",text:"this is a test of the tool json2jsdoc that generates jsdoc from the response of the service \n\nhttps://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22nome%2C%20ak%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},absoluteName:"json2jsdoc_test1.WeatherQuery_query_results_channel_units",properties:{distance:{annotation:"property",type:"{String}",name:"distance",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},pressure:{annotation:"property",type:"{String}",name:"pressure",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},speed:{annotation:"property",type:"{String}",name:"speed",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},temperature:{annotation:"property",type:"{String}",name:"temperature",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},wind:{annotation:"property",type:"{WeatherQuery_query_results_channel_wind}",name:"wind",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"}},children:[]},"json2jsdoc_test1.WeatherQuery_query_results_channel_wind":{annotation:"class",name:"WeatherQuery_query_results_channel_wind",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js",module:{annotation:"module",name:"json2jsdoc_test1",text:"this is a test of the tool json2jsdoc that generates jsdoc from the response of the service \n\nhttps://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22nome%2C%20ak%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},absoluteName:"json2jsdoc_test1.WeatherQuery_query_results_channel_wind",properties:{chill:{annotation:"property",type:"{String}",name:"chill",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},direction:{annotation:"property",type:"{String}",name:"direction",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},speed:{annotation:"property",type:"{String}",name:"speed",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},atmosphere:{annotation:"property",type:"{WeatherQuery_query_results_channel_atmosphere}",name:"atmosphere",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"}},children:[]},"json2jsdoc_test1.WeatherQuery_query_results_channel_atmosphere":{annotation:"class",name:"WeatherQuery_query_results_channel_atmosphere",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js",module:{annotation:"module",name:"json2jsdoc_test1",text:"this is a test of the tool json2jsdoc that generates jsdoc from the response of the service \n\nhttps://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22nome%2C%20ak%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},absoluteName:"json2jsdoc_test1.WeatherQuery_query_results_channel_atmosphere",properties:{humidity:{annotation:"property",type:"{String}",name:"humidity",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},pressure:{annotation:"property",type:"{String}",name:"pressure",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},rising:{annotation:"property",type:"{String}",name:"rising",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},visibility:{annotation:"property",type:"{String}",name:"visibility",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},astronomy:{annotation:"property",type:"{WeatherQuery_query_results_channel_astronomy}",name:"astronomy",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"}},children:[]},"json2jsdoc_test1.WeatherQuery_query_results_channel_astronomy":{annotation:"class",name:"WeatherQuery_query_results_channel_astronomy",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js",module:{annotation:"module",name:"json2jsdoc_test1",text:"this is a test of the tool json2jsdoc that generates jsdoc from the response of the service \n\nhttps://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22nome%2C%20ak%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},absoluteName:"json2jsdoc_test1.WeatherQuery_query_results_channel_astronomy",properties:{sunrise:{annotation:"property",type:"{String}",name:"sunrise",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},sunset:{annotation:"property",type:"{String}",name:"sunset",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},image:{annotation:"property",type:"{WeatherQuery_query_results_channel_image}",name:"image",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"}},children:[]},"json2jsdoc_test1.WeatherQuery_query_results_channel_image":{annotation:"class",name:"WeatherQuery_query_results_channel_image",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js",module:{annotation:"module",name:"json2jsdoc_test1",text:"this is a test of the tool json2jsdoc that generates jsdoc from the response of the service \n\nhttps://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22nome%2C%20ak%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},absoluteName:"json2jsdoc_test1.WeatherQuery_query_results_channel_image",properties:{title:{annotation:"property",type:"{String}",name:"title",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},width:{annotation:"property",type:"{String}",name:"width",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},height:{annotation:"property",type:"{String}",name:"height",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},link:{annotation:"property",type:"{String}",name:"link",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},url:{annotation:"property",type:"{String}",name:"url",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},item:{annotation:"property",type:"{WeatherQuery_query_results_channel_item}",name:"item",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"}},children:[]},"json2jsdoc_test1.WeatherQuery_query_results_channel_item":{annotation:"class",name:"WeatherQuery_query_results_channel_item",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js",module:{annotation:"module",name:"json2jsdoc_test1",text:"this is a test of the tool json2jsdoc that generates jsdoc from the response of the service \n\nhttps://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22nome%2C%20ak%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},absoluteName:"json2jsdoc_test1.WeatherQuery_query_results_channel_item",properties:{title:{annotation:"property",type:"{String}",name:"title",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},lat:{annotation:"property",type:"{String}",name:"lat",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},long:{annotation:"property",type:"{String}",name:"long",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},link:{annotation:"property",type:"{String}",name:"link",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},pubDate:{annotation:"property",type:"{String}",name:"pubDate",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},condition:{annotation:"property",type:"{WeatherQuery_query_results_channel_item_condition}",name:"condition",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"}},children:[]},"json2jsdoc_test1.WeatherQuery_query_results_channel_item_condition":{annotation:"class",name:"WeatherQuery_query_results_channel_item_condition",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js",module:{annotation:"module",name:"json2jsdoc_test1",text:"this is a test of the tool json2jsdoc that generates jsdoc from the response of the service \n\nhttps://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22nome%2C%20ak%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},absoluteName:"json2jsdoc_test1.WeatherQuery_query_results_channel_item_condition",properties:{code:{annotation:"property",type:"{String}",name:"code",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},date:{annotation:"property",type:"{String}",name:"date",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},temp:{annotation:"property",type:"{String}",name:"temp",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},text:{annotation:"property",type:"{String}",name:"text",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},description:{annotation:"property",type:"{String}",name:"description",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},forecast:{annotation:"property",type:"{Array<String>}",name:"forecast",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},guid:{annotation:"property",type:"{WeatherQuery_query_results_channel_item_guid}",name:"guid",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"}},children:[]},"json2jsdoc_test1.WeatherQuery_query_results_channel_item_guid":{annotation:"class",name:"WeatherQuery_query_results_channel_item_guid",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js",module:{annotation:"module",name:"json2jsdoc_test1",text:"this is a test of the tool json2jsdoc that generates jsdoc from the response of the service \n\nhttps://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22nome%2C%20ak%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},absoluteName:"json2jsdoc_test1.WeatherQuery_query_results_channel_item_guid",properties:{isPermaLink:{annotation:"property",type:"{String}",name:"isPermaLink",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},content:{annotation:"property",type:"{String}",name:"content",text:"",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"}},children:[]},"life.Living":{annotation:"class",name:"Living",text:"",children:[{annotation:"extends",name:"Thing",text:"",theRestString:""}],commentRange:[104981,105368],fileName:"test/test-project/life/Model.js",module:{annotation:"module",name:"life",text:"",commentRange:[104981,105368],fileName:"test/test-project/life/Model.js"},absoluteName:"life.Living",methods:{breath:{annotation:"method",name:"breath",text:"",children:[{annotation:"param",type:"{Number}",name:"size",text:"",theRestString:""}],commentRange:[104981,105368],fileName:"test/test-project/life/Model.js"}}},"life.Animal":{annotation:"class",name:"Animal",text:"",children:[{annotation:"extends",name:"Living",text:"",theRestString:""}],commentRange:[104981,105368],fileName:"test/test-project/life/Model.js",module:{annotation:"module",name:"life",text:"",commentRange:[104981,105368],fileName:"test/test-project/life/Model.js"},absoluteName:"life.Animal",methods:{eat:{annotation:"method",name:"eat",text:"",children:[{annotation:"param",type:"{Array<Food>}",name:"food",text:"",theRestString:"@return {Array<Energy>} _lineCommentSeparatorMark_"},{annotation:"return",type:"{Array<Energy>}",name:"_lineCommentSeparatorMark_",text:"",theRestString:""}],commentRange:[104981,105368],fileName:"test/test-project/life/Model.js"}}},"life.Person":{annotation:"class",name:"Person",text:"A person is an animal that knows some specialized stuff like @?method crossStreet",children:[{annotation:"extends",name:"Animal",text:"",theRestString:""}],commentRange:[104981,105368],
fileName:"test/test-project/life/Model.js",module:{annotation:"module",name:"life",text:"",commentRange:[104981,105368],fileName:"test/test-project/life/Model.js"},absoluteName:"life.Person",methods:{walk:{annotation:"method",name:"walk",text:"",children:[{annotation:"return",type:"{Action}",text:"",theRestString:""}],commentRange:[104981,105368],fileName:"test/test-project/life/Model.js"},crossStreet:{annotation:"method",name:"crossStreet",text:"This try to be a *markdown* [text](http://google.com)\n\nAnother paragraph \n\n\tvar someMarkup = {\n\t\ta: 1\n\t,\tn: 2\n\t,\tg: function (e)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t};\n\nand some final text with a list\n\n1. First ordered list item\n2. Another item\n  * Unordered sub-list.\n1. Actual numbers don't matter, just that it's a number\n  1. Ordered sub-list\n  2. hello\n4. And another item.",commentRange:[105369,105759],fileName:"test/test-project/life/Model.js"},talk:{annotation:"method",name:"talk",text:"",children:[{annotation:"public",name:"_lineCommentSeparatorMark_",text:"",theRestString:""}],commentRange:[105761,105891],fileName:"test/test-project/life/Model.js"}},properties:{pprivate:{annotation:"property",name:"pprivate",text:"alkjsd lakjs dlka jsld k",commentRange:[105761,105891],fileName:"test/test-project/life/Model.js"},ppublic:{annotation:"property",name:"ppublic",text:"alksjd lka jsdl kalsjd kaj sd",children:[{annotation:"public",name:"dummy",text:"",theRestString:""}],commentRange:[105761,105891],fileName:"test/test-project/life/Model.js"}},events:{afterSleep:{annotation:"event",name:"afterSleep",text:"this is triggered after the person ends sleeping. Example:\n\n\tvar b = 1\n\nList: \n\n * hello\n * *world*",children:[{annotation:"public",name:"dummy",text:"",theRestString:""}],commentRange:[105893,106303],fileName:"test/test-project/life/Model.js"},beforeBath:{annotation:"event",name:"beforeBath",text:"triggered just before the person is going to bath",children:[{annotation:"public",name:"dummy",text:"",theRestString:""}],commentRange:[105893,106303],fileName:"test/test-project/life/Model.js"}},attributes:{price:{annotation:"attribute",type:"{String}",name:"price",text:"lasdfj laksjd lfk jaslkd jflka sjlkdf jasd:\n\n\tvar i = 9\n\nalksjdlaksjd: \n\n1. alksjd\n  * alksjd\n  * alskdj\n2. asldkfjsd\n  * jsjsjsjs sjsjs \n  * klsdjafh kasjdhkfjs",children:[{annotation:"public",name:"dummy",text:"",theRestString:""}],commentRange:[105893,106303],fileName:"test/test-project/life/Model.js"}}},"problem1.TerranObject":{annotation:"class",name:"TerranObject",text:"",commentRange:[106306,106725],fileName:"test/test-project/problem1/Model1.js",module:{annotation:"module",name:"problem1",text:"This is a description of planet earth city from the point of view of an alien observing us from a space ship.",commentRange:[106306,106725],fileName:"test/test-project/problem1/Model1.js"},absoluteName:"problem1.TerranObject"},"problem1.Person":{annotation:"class",name:"Person",text:"",children:[{annotation:"extends",name:"TerranObject",text:"",theRestString:""}],commentRange:[106306,106725],fileName:"test/test-project/problem1/Model1.js",module:{annotation:"module",name:"problem1",text:"This is a description of planet earth city from the point of view of an alien observing us from a space ship.",commentRange:[106306,106725],fileName:"test/test-project/problem1/Model1.js"},absoluteName:"problem1.Person"},"problem1.List":{annotation:"class",name:"List",text:"This is just a semantic alias for javascript Array.",children:[{annotation:"extends",name:"Array",text:"",theRestString:""}],commentRange:[106306,106725],fileName:"test/test-project/problem1/Model1.js",module:{annotation:"module",name:"problem1",text:"This is a description of planet earth city from the point of view of an alien observing us from a space ship.",commentRange:[106306,106725],fileName:"test/test-project/problem1/Model1.js"},absoluteName:"problem1.List"},"problem1.Map":{annotation:"class",name:"Map",text:"This is just a semantic alias for javascript Object.",children:[{annotation:"extends",name:"Object",text:"",theRestString:""}],commentRange:[106306,106725],fileName:"test/test-project/problem1/Model1.js",module:{annotation:"module",name:"problem1",text:"This is a description of planet earth city from the point of view of an alien observing us from a space ship.",commentRange:[106306,106725],fileName:"test/test-project/problem1/Model1.js"},absoluteName:"problem1.Map"},"problem1.Building":{annotation:"class",name:"Building",text:"",children:[{annotation:"extends",name:"TerranObject",text:"",theRestString:""}],commentRange:[106727,106769],fileName:"test/test-project/problem1/Model1.js",module:{annotation:"module",name:"problem1",text:"This is a description of planet earth city from the point of view of an alien observing us from a space ship.",commentRange:[106306,106725],fileName:"test/test-project/problem1/Model1.js"},absoluteName:"problem1.Building"},"problem1.Hospital":{annotation:"class",name:"Hospital",text:"",children:[{annotation:"extends",name:"Building",text:"",theRestString:""}],commentRange:[106771,107330],fileName:"test/test-project/problem1/Model1.js",module:{annotation:"module",name:"problem1",text:"This is a description of planet earth city from the point of view of an alien observing us from a space ship.",commentRange:[106306,106725],fileName:"test/test-project/problem1/Model1.js"},absoluteName:"problem1.Hospital",constructors:[{annotation:"constructor",name:"n",text:"Neque porro quisquam est qui _dolorem_ *ipsum* quia dolor sit amet, consectetur, adipisci velit...",children:[{annotation:"param",type:"{Number}",name:"availableBeds",text:"Neque porro quisquam est qui _dolorem_ *ipsum* quia dolor sit amet, consectetur, adipisci velit...",theRestString:""}],commentRange:[106771,107330],fileName:"test/test-project/problem1/Model1.js",params:[{annotation:"param",type:"{Number}",name:"availableBeds",text:"Neque porro quisquam est qui _dolorem_ *ipsum* quia dolor sit amet, consectetur, adipisci velit...",theRestString:""}],throws:[]}],methods:{getActiveDoctors:{annotation:"method",name:"getActiveDoctors",text:"",children:[{annotation:"returns",type:"{List<Doctor>}",name:"the",text:"currently active doctors in this hospital",theRestString:""}],commentRange:[106771,107330],fileName:"test/test-project/problem1/Model1.js"}},properties:{todayIngresedPatients:{annotation:"property",type:"{Array<Person>}",name:"todayIngresedPatients",text:"all the patiens that entered this hospital today",commentRange:[106771,107330],fileName:"test/test-project/problem1/Model1.js"}}},"problem1.Doctor":{annotation:"class",name:"Doctor",text:"",children:[{annotation:"extend",name:"Person",text:"",theRestString:""}],commentRange:[106771,107330],fileName:"test/test-project/problem1/Model1.js",module:{annotation:"module",name:"problem1",text:"This is a description of planet earth city from the point of view of an alien observing us from a space ship.",commentRange:[106306,106725],fileName:"test/test-project/problem1/Model1.js"},absoluteName:"problem1.Doctor",properties:{skills:{annotation:"property",type:"{Map<String,MedicalTopic>}",name:"skills",text:"",commentRange:[106771,107330],fileName:"test/test-project/problem1/Model1.js"}}},"problem1.MedicalTopic":{annotation:"class",name:"MedicalTopic",text:"Lorem *ipsum* dolor sit amet, consectetur adipisicing elit, \n\n\tsed do eiusmod tempor \n\tincididunt ut labore et dolore \n\tmagna aliqua. \n\t\tUt enim ad minim \n\t\t\tveniam, quis nostrud exercitation\n\t\t\tullamco laboris nisi ut aliquip ex \n\t\tea commodo consequat. Duis aute irure dolor\n\tin reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \n\nExcepteur sint occaecat *cupidatat* non proident, sunt in culpa qui officia deserunt mollit anim id est laborum",commentRange:[107332,108600],fileName:"test/test-project/problem1/Model1.js",module:{annotation:"module",name:"problem1",text:"This is a description of planet earth city from the point of view of an alien observing us from a space ship.",commentRange:[106306,106725],fileName:"test/test-project/problem1/Model1.js"},absoluteName:"problem1.MedicalTopic",methods:{beUsed:{annotation:"method",name:"beUsed",text:"Lorem *ipsum* dolor sit amet, consectetur adipisicing elit, \n\n\tsed do eiusmod tempor \n\tincididunt ut labore et dolore \n\tmagna aliqua. \n\t\tUt enim ad minim \n\t\t\tveniam, quis nostrud exercitation\n\t\t\tullamco laboris nisi ut aliquip ex \n\t\tea commodo consequat. Duis aute irure dolor\n\tin reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \n\nExcepteur sint occaecat *cupidatat* non proident, sunt in culpa qui officia deserunt mollit anim id est laborum",children:[{annotation:"throws",type:"{MedicalException}",name:"if",text:"there is any medical issue stuff...",theRestString:"@param {Number} amount Excepteur sint occaecat *cupidatat* \n\n@return {Array<MedicalTopic>}"},{annotation:"param",type:"{Number}",name:"amount",text:"Excepteur sint occaecat *cupidatat*",theRestString:"@return {Array<MedicalTopic>}"},{annotation:"return",type:"{Array<MedicalTopic>}",text:"",theRestString:""}],commentRange:[107332,108600],fileName:"test/test-project/problem1/Model1.js"}}},"problem1.Medical.Exception":{annotation:"class",name:"Medical.Exception",text:"",children:[{annotation:"extends",name:"Error",text:"",theRestString:""}],commentRange:[107332,108600],fileName:"test/test-project/problem1/Model1.js",module:{annotation:"module",name:"problem1",text:"This is a description of planet earth city from the point of view of an alien observing us from a space ship.",commentRange:[106306,106725],fileName:"test/test-project/problem1/Model1.js"},absoluteName:"problem1.Medical.Exception",methods:{method1:{annotation:"method",name:"method1",text:"foo",children:[{annotation:"param",name:"a",text:"",theRestString:"@throws b"},{annotation:"throws",name:"b",text:"",theRestString:""}],commentRange:[107332,108600],fileName:"test/test-project/problem1/Model1.js"}},properties:{name:{annotation:"property",type:"{String}",name:"name",text:"",commentRange:[107332,108600],fileName:"test/test-project/problem1/Model1.js"},somethingintheway:{annotation:"property",name:"somethingintheway",text:"This is some markdown text with a lot of paragraph, this is the first \n \n this is the second \n \n and this is the third",commentRange:[108602,108758],fileName:"test/test-project/problem1/Model1.js"}},events:{pepe:{annotation:"event",name:"pepe",text:"",commentRange:[107332,108600],fileName:"test/test-project/problem1/Model1.js"}}},"compilecss.testclass33":{annotation:"class",name:"testclass33",text:"",children:[{annotation:"alias",name:"annotation",text:"newclass class",theRestString:""}],commentRange:[108763,109021],fileName:"test/test-project/problem1/Model1.js",module:{annotation:"module",name:"compilecss",text:"with this command you can compile all the project's css",commentRange:[108763,109021],fileName:"test/test-project/problem1/Model1.js"},absoluteName:"compilecss.testclass33"},"aliasannotationtest1.aliasannotationtest1C1":{annotation:"class",name:"aliasannotationtest1C1",text:"hello world",commentRange:[108763,109021],fileName:"test/test-project/problem1/Model1.js",module:{annotation:"module",name:"aliasannotationtest1",text:"",commentRange:[108763,109021],fileName:"test/test-project/problem1/Model1.js"},absoluteName:"aliasannotationtest1.aliasannotationtest1C1"}},modules:{shortjsdoc:{annotation:"module",name:"shortjsdoc",text:"\n\n#Comment Preprocessors\n\nThe core of comment preprocessing is done ba couple of plugins executed at allCommentPreprocessorPlugins and \ningeneral normalizes the comments text, delete non relevant comments, unify line comments into a single one, etc\n\n\n\n\n\n\n\n\n\n\n\n\n\n",commentRange:[2,100],fileName:"src/jsdocmaker/core/binding.js"},undefined:{annotation:"module",text:"",commentRange:[9916,11357],fileName:"src/jsdocmaker/core/parse.js"},"shortjsdoc.plugin":{annotation:"module",name:"shortjsdoc.plugin",text:"",commentRange:[23423,23726],fileName:"src/jsdocmaker/core/plugin.js"},"shortjsdoc.plugin.alias":{annotation:"module",name:"shortjsdoc.plugin.alias",text:"",commentRange:[56432,56526],fileName:"src/jsdocmaker/plugin/alias.js"},"shortjsdoc.plugin.comment.indentation":{annotation:"module",name:"shortjsdoc.plugin.comment.indentation",text:"#Comment indentation plugin\nTakes care of respecting the original indentation of block comments. \nIt will erase the initial spaces of each line according to the comment indentation.",commentRange:[60735,60969],fileName:"src/jsdocmaker/plugin/comment-indentation.js"},"shortjsdoc.plugin.dependencies":{annotation:"module",name:"shortjsdoc.plugin.dependencies",text:"",commentRange:[62095,62496],fileName:"src/jsdocmaker/plugin/dependencies.js"},"shortjsdoc.plugin.module-export":{annotation:"module",name:"shortjsdoc.plugin.module-export",text:"#",commentRange:[73057,73298],fileName:"src/jsdocmaker/plugin/module-exports.js"},dummy:{annotation:"module",name:"dummy",text:"",children:[{annotation:"exports",name:"the",text:"module AST will contain a property exports pointing to a type that can be complex. Example:",theRestString:""}],commentRange:[73057,73298],fileName:"src/jsdocmaker/plugin/module-exports.js"},module1:{annotation:"module",name:"module1",text:"blabla",commentRange:[73057,73298],fileName:"src/jsdocmaker/plugin/module-exports.js"},"recurse-plugin-containers":{annotation:"module",name:"recurse-plugin-containers",text:"- a plugin to be used by concrete plugins to iterate on all \n nodes after some interesting stages. by calling recurseAST. \n The objective is that other concrete plugins register here and so the AST recursion is made \n ONCE instead of using recurseAST in each of them.",commentRange:[75244,75633],fileName:"src/jsdocmaker/plugin/recurse-plugin-containers.js"},"shortjsdoc.plugin.text-marks-references":{annotation:"module",name:"shortjsdoc.plugin.text-marks-references",text:"It is based on text-marks plugin to give support to @?class @?method @?module @?property @?event and @?ref  text marks. \n\nThey will be binded to referenced nodes. The @?ref can bind anything passed as absolute name but it is less performant. \n\nAlso it contains the implementation for @?link",commentRange:[77111,77457],fileName:"src/jsdocmaker/plugin/text-marks-references.js"},"shortjsdoc.plugin.text-marks":{annotation:"module",name:"shortjsdoc.plugin.text-marks",text:"TODO: markings should be done 100% on post processing. \n\nthis is a meta plugin that allow to define marks inside a text. markings like @?foo something will be replaced with \na unique string key and evaluate functions and store the result in the AST under the node 'textMarks' property.\n\nOther concrete plugins then can expose a certain functionality, for example",commentRange:[81307,82537],fileName:"src/jsdocmaker/plugin/text-marks.js"},client:{annotation:"module",name:"client",text:"",commentRange:[81307,82537],fileName:"src/jsdocmaker/plugin/text-marks.js"},"shortjsdoc.node":{annotation:"module",name:"shortjsdoc.node",text:"nodejs command line utility for generating the .json definition scanning a given source folder or file. \n\nDepends on src/JsDocMaker.js\n\n*IMPORTANT* don't use console.log here since the output is dumped to stdout",commentRange:[86635,86877],fileName:"src/shortjsdoc.js"},empty2:{annotation:"module",name:"empty2",text:"",commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js"},funnycomments:{annotation:"module",name:"funnycomments",text:"*",commentRange:[96063,96178],fileName:"test/test-project/empty2/model1.js"},shared1:{annotation:"module",name:"shared1",text:"",commentRange:[96183,96575],fileName:"test/test-project/empty2/model2.js"},simpleTestModule:{annotation:"module",name:"simpleTestModule",text:"",commentRange:[96577,96665],fileName:"test/test-project/empty2/model3.js"},ideal:{annotation:"module",name:"ideal",text:"",commentRange:[96667,96871],fileName:"test/test-project/ideal/Model.js"},ideasAndProblems67:{annotation:"module",name:"ideasAndProblems67",text:"",commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js"},empty1:{annotation:"module",name:"empty1",text:"",commentRange:[100153,100330],fileName:"test/test-project/ideal/foobar1.js",functions:[{annotation:"function",name:"auxiliary65",text:"",children:[{annotation:"return",type:"{String}",text:"@param p2",theRestString:"@param {Aba} aba _lineCommentSeparatorMark_"},{annotation:"param",type:"{Aba}",name:"aba",text:"",theRestString:""}],commentRange:[100368,101252],fileName:"test/test-project/ideal/foobar1.js"}]},functioning1:{annotation:"module",name:"functioning1",text:"",commentRange:[100368,101252],fileName:"test/test-project/ideal/functioning.js",functions:[{annotation:"function",name:"FHandler",text:"this is global function FHandler lorem ipsum bla bla",children:[{annotation:"param",type:"{Number}",text:"@return {Boolean}",theRestString:""}],commentRange:[100368,101252],fileName:"test/test-project/ideal/functioning.js"}]},interfacing1:{annotation:"module",name:"interfacing1",text:"",commentRange:[100368,101252],fileName:"test/test-project/ideal/interfacing.js"},"pretty.names_9":{annotation:"module",name:"pretty.names_9",text:"lorem ipsum liprim trogus",commentRange:[101254,101531],fileName:"test/test-project/ideal/prettynames/something.js"},json2jsdoc_test1:{annotation:"module",name:"json2jsdoc_test1",text:"this is a test of the tool json2jsdoc that generates jsdoc from the response of the service \n\nhttps://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22nome%2C%20ak%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys",commentRange:[101628,104978],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},life:{annotation:"module",name:"life",text:"",commentRange:[104981,105368],fileName:"test/test-project/life/Model.js"},problem1:{annotation:"module",name:"problem1",text:"This is a description of planet earth city from the point of view of an alien observing us from a space ship.",commentRange:[106306,106725],fileName:"test/test-project/problem1/Model1.js"},compilecss:{annotation:"module",name:"compilecss",text:"with this command you can compile all the project's css",commentRange:[108763,109021],fileName:"test/test-project/problem1/Model1.js"},aliasannotationtest1:{annotation:"module",name:"aliasannotationtest1",text:"",commentRange:[108763,109021],fileName:"test/test-project/problem1/Model1.js"}},files:{"src/jsdocmaker/core/binding.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[2,100],fileName:"src/jsdocmaker/core/binding.js"},"src/jsdocmaker/core/class.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[7787,8349],fileName:"src/jsdocmaker/core/class.js"},"src/jsdocmaker/core/main.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[9565,9619],fileName:"src/jsdocmaker/core/main.js"},"src/jsdocmaker/core/parse.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[9859,9914],fileName:"src/jsdocmaker/core/parse.js"},"":{annotation:"filename",name:"annotations",commentRange:[14009,14087],fileName:""},"src/jsdocmaker/core/plugin.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[23423,23726],fileName:"src/jsdocmaker/core/plugin.js"},"src/jsdocmaker/core/postprocess.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[26070,26695],fileName:"src/jsdocmaker/core/postprocess.js"},"src/jsdocmaker/core/preprocess.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[33937,33997],fileName:"src/jsdocmaker/core/preprocess.js"},"src/jsdocmaker/core/type-parsing.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[37506,37568],fileName:"src/jsdocmaker/core/type-parsing.js"},"src/jsdocmaker/core/util.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[38771,38866],fileName:"src/jsdocmaker/core/util.js"},"src/jsdocmaker/main.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[40645,40969],fileName:"src/jsdocmaker/main.js"},"src/jsdocmaker/objectTypeParser/parser.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[41075,41143],fileName:"src/jsdocmaker/objectTypeParser/parser.js"},"src/jsdocmaker/plugin/alias.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[56432,56526],fileName:"src/jsdocmaker/plugin/alias.js"},"src/jsdocmaker/plugin/comment-indentation.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[60662,60733],fileName:"src/jsdocmaker/plugin/comment-indentation.js"},"src/jsdocmaker/plugin/dependencies.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[62095,62496],fileName:"src/jsdocmaker/plugin/dependencies.js"},"src/jsdocmaker/plugin/escape-at.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[65451,65512],fileName:"src/jsdocmaker/plugin/escape-at.js"},"src/jsdocmaker/plugin/inherited.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[66267,66702],fileName:"src/jsdocmaker/plugin/inherited.js"},"src/jsdocmaker/plugin/literal-object.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[70172,70279],fileName:"src/jsdocmaker/plugin/literal-object.js"},"src/jsdocmaker/plugin/main.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[71579,71635],fileName:"src/jsdocmaker/plugin/main.js"},"src/jsdocmaker/plugin/modifiers.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[72229,72331],fileName:"src/jsdocmaker/plugin/modifiers.js"},"src/jsdocmaker/plugin/module-exports.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[72989,73055],fileName:"src/jsdocmaker/plugin/module-exports.js"},"src/jsdocmaker/plugin/native-types.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[74213,74318],fileName:"src/jsdocmaker/plugin/native-types.js"},"src/jsdocmaker/plugin/recurse-plugin-containers.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[75244,75633],fileName:"src/jsdocmaker/plugin/recurse-plugin-containers.js"},"src/jsdocmaker/plugin/text-marks-references.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[77036,77109],fileName:"src/jsdocmaker/plugin/text-marks-references.js"},"src/jsdocmaker/plugin/text-marks.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[81243,81305],fileName:"src/jsdocmaker/plugin/text-marks.js"},"src/jsdocmaker/plugin/util.js \n TODO: move this file to core/recurseAST.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[83761,83932],fileName:"src/jsdocmaker/plugin/util.js \n TODO: move this file to core/recurseAST.js"},"src/shortjsdoc.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[86588,86632],fileName:"src/shortjsdoc.js"},"test/test-project/empty/nomodules.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[94448,96061],fileName:"test/test-project/empty/nomodules.js"},"test/test-project/empty2/model1.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[94448,96061],fileName:"test/test-project/empty2/model1.js"},"test/test-project/empty2/model2.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[96183,96575],fileName:"test/test-project/empty2/model2.js"},"test/test-project/empty2/model3.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[96183,96575],fileName:"test/test-project/empty2/model3.js"},"test/test-project/ideal/Model.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[96667,96871],fileName:"test/test-project/ideal/Model.js"},"test/test-project/ideal/Problems.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[99e3,100109],fileName:"test/test-project/ideal/Problems.js"},"test/test-project/ideal/foobar1.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[99e3,100109],fileName:"test/test-project/ideal/foobar1.js"},"test/test-project/ideal/functioning.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[100368,101252],fileName:"test/test-project/ideal/functioning.js"},"test/test-project/ideal/interfacing.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[100368,101252],fileName:"test/test-project/ideal/interfacing.js"},"test/test-project/ideal/prettynames/something.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[100368,101252],fileName:"test/test-project/ideal/prettynames/something.js"},"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[101533,101625],fileName:"test/test-project/json2jsdoc-test/yahoo_wheather_json_response.js"},"test/test-project/life/Model.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[104981,105368],fileName:"test/test-project/life/Model.js"},"test/test-project/problem1/Model1.js":{annotation:"filename",type:"{Foo}",name:"fileName",commentRange:[106306,106725],fileName:"test/test-project/problem1/Model1.js"}},alias:{A:{type:"class",name:"A",target:"Array"},O:{type:"class",name:"O",target:"Object"},S:{type:"class",name:"S",target:"String"},N:{type:"class",name:"N",target:"Number"},B:{type:"class",name:"B",target:"Boolean"},Or:{type:"class",name:"Or",target:"just"},use:{type:"class",name:"use",target:"the"},shortcut:{type:"class",name:"shortcut"},After:{type:"class",name:"After",target:"this"},I:{type:"class",name:"I",target:"just"},can:{type:"class",name:"can",target:"write"},my:{type:"class",name:"my",target:"types"},like:{type:"class",name:"like",target:"this:"},MySuper:{type:"class",name:"MySuper",target:"Array<Leg>"},"##annotation":{type:"class",name:"##annotation",target:"alias"},task:{type:"annotation",name:"task",target:"method"},"##Implementation":{type:"annotation",name:"##Implementation",target:"notes"},at:{type:"annotation",name:"at",target:"binding"},the:{type:"annotation",name:"the",target:"second"},meta:{type:"annotation",name:"meta",target:"information"},will:{type:"annotation",name:"will",target:"be"},stored:{type:"annotation",name:"stored",target:"in"},under:{type:"annotation",name:"under",target:"the"},"'alias'":{type:"annotation",name:"'alias'",target:"property."},Then:{type:"annotation",name:"Then",target:"this"},information:{type:"annotation",name:"information",target:"will"},be:{type:"annotation",name:"be",target:"consumed"},time:{type:"annotation",name:"time",target:"in"},plugin:{type:"annotation",name:"plugin"},a:{type:"class",name:"a",target:"Array"},o:{type:"class",name:"o",target:"Object"},s:{type:"class",name:"s",target:"String"},n:{type:"class",name:"n",target:"Number"},"gulp-task":{type:"annotation",name:"gulp-task",target:"module"},newclass:{type:"annotation",name:"newclass",target:"class"}},projectMetadata:{name:"Untitled Project"}};
//# sourceMappingURL=data.min.json.map