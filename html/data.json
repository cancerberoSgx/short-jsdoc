{
    "source": "//@module ideal\n//@class BaseObject \nvar s = 'these are just js sample sentences'; \nif(typeof sentence === 'undefined')\n{\n\tconsole.log('alert'); \n}\n//@property {Date} creationDate\n//@property {String} name\n//@property {String} description\n//@property {Object<String,User>} owners the owners, a map by owner id\nfunction BaseObject(){};\n\n//@class ObjectPool\nfunction ObjectPool(){};\n//@method loadObjects @param {Array<String>} objects_ids @return {Object<String,BaseObject>}\nObjectPool.prototype.getOwners = function(objects_ids){return null;}\n//@method getOwners this method is useful for *blabla* blabla _blabla_ bab\nvar s = 'these are just js sample sentences'; \nif(typeof sentence === 'undefined')\n{\n\tconsole.log('alert'); \n}\n\n\n/*@param {Array<String>} objects_ids @return {Object<String,Object<String,User>>}*/\nvar s = 'these are just js sample sentences'; \nif(typeof sentence === 'undefined')\n{\n\tconsole.log('alert'); \n}\n//@event objectCreated event fired when an object is created in this pool.\n\nvar s = 'these are just js sample sentences'; \nif(typeof sentence === 'undefined')\n{\n\tconsole.log('alert'); \n}\n\n\n//@class Thing @extends BaseObject\n//@property {Number} importance\n\nvar s = 'these are just js sample sentences'; \nif(typeof sentence === 'undefined')\n{\n\tconsole.log('alert'); \n}\n\n\n/** @class Action @extends BaseObject */\n\nvar s = 'these are just js sample sentences'; \nif(typeof sentence === 'undefined')\n{\n\tconsole.log('alert'); \n}\n\n//@method extract @param {String|BaseObject|Array<BaseObject>} what\n\n// @module Problems\n\n// @class Idea\n// @class Problem\n\n//@module life\n//@class Living @extends Thing\n//@method breath @param {Number} size\n\n//@class Animal @extends Living\n//@method eat @param {Array<Food>} food @return {Array<Energy>}\n\n//@class Person @extends Animal\n//@method walk @return {Action}\n/*@method crossStreet\n\nThis try to be a markdown [text](http://google.com)\n\nAnother paragraph \n\n\tvar someMarkup = {\n\t\ta: 1\n\t,\tn: 2\n\t,\tg: function (e)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t};\n\nand some final text with a list\n\n1. First ordered list item\n2. Another item\n  * Unordered sub-list.\n1. Actual numbers don't matter, just that it's a number\n  1. Ordered sub-list\n  2. hello\n4. And another item.\n*/\n\n\n// @module problem1 This is a description of planet earth city from the point of view of an alien observing us from a space ship.\n//@class TerranObject\n// @class Person @extends TerranObject\n\n//@class List This is just a semantic alias for javascript Array. @extends Array\n//@class Map This is just a semantic alias for javascript Object. @extends Object\n\n/*@class Building @extends TerranObject */\n\n//@class Hospital @extends Building\n//@constructor Neque porro quisquam est qui _dolorem_ *ipsum* quia dolor sit amet, consectetur, adipisci velit... \n//@param {Number} availableBeds\n//Neque porro quisquam est qui _dolorem_ *ipsum* quia dolor sit amet, consectetur, adipisci velit...\n//@method getActiveDoctors @returns {List<Doctor>} the currently active doctors in this hospital\n//@property {Array<Person>} todayIngresedPatients all the patiens that entered this hospital today\n\n// @class Doctor @extend Person\n// @property {Map<String,MedicalTopic>} skills\n\n/*@class MedicalTopic\nLorem *ipsum* dolor sit amet, consectetur adipisicing elit, \n\n\tsed do eiusmod tempor \n\tincididunt ut labore et dolore \n\tmagna aliqua. \n\t\tUt enim ad minim \n\t\t\tveniam, quis nostrud exercitation\n\t\t\tullamco laboris nisi ut aliquip ex \n\t\tea commodo consequat. Duis aute irure dolor\n\tin reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \n\nExcepteur sint occaecat *cupidatat* non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\n\n@method beUsed \nLorem *ipsum* dolor sit amet, consectetur adipisicing elit, \n\n\tsed do eiusmod tempor \n\tincididunt ut labore et dolore \n\tmagna aliqua. \n\t\tUt enim ad minim \n\t\t\tveniam, quis nostrud exercitation\n\t\t\tullamco laboris nisi ut aliquip ex \n\t\tea commodo consequat. Duis aute irure dolor\n\tin reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \n\nExcepteur sint occaecat *cupidatat* non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\n@param {Number} amount Excepteur sint occaecat *cupidatat* \n\n@return {Array<MedicalTopic>}\n*/\n\n//@module shortjsdoc\n//@class AbstractView @extend Backbone.View @module shortjsdoc\n\nvar AbstractView = Backbone.View.extend({\n\n\ttagName: 'div'\n\n,\tinitialize: function(application) \n\t{\n\t\tthis.application = application;\n\t}\n\n\t//@method renderIn renders this view in given parent element @param {jQuery} $parent\n,\trenderIn: function($parent)\n\t{\n\t\tvar template = this.application.templates[this.template]; \n\t\tif(template)\n\t\t{\t\t\t\n\t\t\tvar html = template.apply(this, []); \n\t\t\tthis.$el.html(html);\n\t\t\t$parent.append(this.$el); \n\t\t}\n\t\tthis.afterRender();\n\t\treturn this;\n\t}\n\n\t//@method render implemented to comply with Backbone View contract\n,\trender: function()\n\t{\n\t\treturn this.renderIn(jQuery(this.el)); \n\t}\n\n\n,\tafterRender: function()\n\t{\n\t\tthis.renderSource(); \n\t}\n});\n\n\n\n//@module shortjsdoc\n// this is the main class for all the application\n// utilities for rendering jsdoc data generated by jsdocgenerator1 js-indentator plugin\n// using backbone. The user should provide with underscore templates. \n// @class AbstractView @extend Backbone.View @module shortjsdoc\n// @author: sgurin\n\n//@class Application \n//@constructor Application @param {Object} data\nvar Application = function(data)\n{\n\tthis.textFormat = 'markdown'; \n\t\n\tthis.templates = shortjsdoc; //global variable given b templates.js\n\n\t// this.parser = jsindentator.styles.shortJsDoc; \n\tthis.data = data; \n\n\tthis.maker = new JsDocMaker();\n\tthis.maker.data = data;\n\tthis.maker.postProccessBinding();\n\tthis.maker.postProccessInherited(); // <-- important - explicitly ask the framework to calculate inherited methods&properties\n\n\tif(jQuery('#mainContainer').size()===0)\n\t{\n\t\tjQuery('body').append('<div id=\"mainContainer\"></div>'); \n\t}\n\tthis.$containerEl = jQuery('#mainContainer'); \n};\n\n_(Application.prototype).extend({\n\n\t//@method start starts the application by instantiating routers and history and navigating to the index.\n\tstart: function()\n\t{\t\t\n\t\tthis.router = new JsDocRouter(this);\n\t\tBackbone.history.start();\n\t\tvar navigateTo = Backbone.history.getHash() || 'index'; \n\t\tBackbone.history.navigate(navigateTo, {trigger: true});\n\t}\n\n\t//@method showView @param {AbstractView} view\n,\tshowView: function(view)\n\t{\n\t\tthis.applicationView = this.applicationView || new ApplicationView(this); \n\t\tthis.currentView = view;\n\t\tthis.$containerEl.empty();\n\t\tthis.applicationView.renderIn(this.$containerEl);\n\t}\n\n\t//@method refreshWithNewModel @param {Object}data\n,\trefreshWithNewModel: function(data)\n\t{\n\t\tthis.data = data; \n\t\tBackbone.history.navigate('#index', {trigger: true}); \n\t\tthis.showView(this.currentView);\n\t}\n\n\t//@method showErrorView @param {String}s \n,\tshowErrorView: function(s) \n\t{\n\t\tthis.$containerEl.empty().append('<h1>'+s+'</h1>'); \n\t}\n\n});\n\n//@method start an application loading it with given data. @static\n//@param data the output of passing jsindentator JsDocMaker. \nApplication.startApplication = function(data)\n{\n\tvar app = new Application(data); \n\tapp.start();\n}; \n  \n\n//@module shortjsdoc\n//@class ApplicationView @extends AbstractView\nvar ApplicationView = AbstractView.extend({\n\n\tclassName: 'application-view'\n\n,\ttemplate: 'application'\n\n,\tinitialize: function(application) \n\t{\n\t\tthis.application = application;\n\t}\n\n,\trenderIn: function($el)\n\t{\n\t\tAbstractView.prototype.renderIn.apply(this, arguments); \n\n\t\tthis.headerView = this.headerView || new HeaderView(this.application);\n\t\tthis.headerView.renderIn(this.$('[data-type=\"header-container\"]')); \n\n\t\tthis.mainView = this.application.currentView; \n\n\t\tthis.mainView.renderIn(this.$('[data-type=\"main-view-container\"]')); \n\t}\n\n});\n\n//@module shortjsdoc\n//@class ClassView @extends AbstractView\n\nvar ClassView = AbstractView.extend({\n\n\tclassName: 'class-view'\n\n,\ttemplate: 'class'\n\n,\tinitialize: function(application, className, options) \n\t{\n\t\tthis.application = application;\n\t\tthis.jsdoc = this.application.data.classes[className]; \n\t\tif(!this.jsdoc)\n\t\t{\n\t\t\tthis.resourceNotFound = true;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.jsdoc.textHtml = this.getTextHtml(this.jsdoc);\t\n\n\t\tthis.options = options || {};\n\t\tthis.options.inherited = this.options.inherited ? parseInt(this.options.inherited, 10) : 0;\n\n\t\tthis.methods = this.jsdoc.methods;\n\t\tif(this.options.inherited)\n\t\t{\n\t\t\tthis.methods = _(_(this.methods).clone()).extend(this.jsdoc.inherited.methods); \n\t\t}\n\n\t\tthis.properties = this.jsdoc.properties;\n\t\tif(this.options.inherited)\n\t\t{\n\t\t\tthis.properties = _(_(this.properties).clone()).extend(this.jsdoc.inherited.properties); \n\t\t}\n\t\t// this.hierarchy = this.computeHierarchy();\n\t}\n\n\t//@method inherit @return true if inherited param is an inherited property from the point of view of baseClass\n,\tinherit: function(inherited, baseClass)\n\t{\n\t\t\n\t}\n/*\n,\tcomputeHierarchy: function()\n\t{\n\t\tvar hierarchy = [];\n\t\tvar c = this.jsdoc;\n\t\tdo \n\t\t{\n\t\t\thierarchy = [c].concat(hierarchy);\n\t\t\tif(c.name===this.jsdoc.name)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\twhile( (c = c.extends) ); \n\t\treturn hierarchy;\n\t}\n*/\n});\n\n//@module shortjsdoc\n//@class HeaderView @extends AbstractView\nvar HeaderView = AbstractView.extend({\n\n\tclassName: 'header-view'\n\n,\ttemplate: 'header'\n\n,\tinitialize: function(application) \n\t{\n\t\tthis.application = application;\n\t}\n\t\n,\trenderIn: function()\n\t{\n\t\tAbstractView.prototype.renderIn.apply(this, arguments); \n\t\tthis.installTypeAhead();\n\t}\n\n,\tinstallTypeAhead: function()\n\t{\n\t\tthis.classes = this.application.data.classes;\n\t\tthis.modules = this.application.data.modules;\n\n\t\tthis.typeahead = $('.main-header .typeahead1').typeahead({\n\t\t\thint: true,\n\t\t\thighlight: true,\n\t\t\tminLength: 1\n\t\t},\t{\n\t\t\tname: 'jsdoc',\n\t\t\tdisplayKey: 'value',\n\t\t\tsource: this.substringMatcher()\n\t\t});\n\n\t\tvar self = this;\n\t\tthis.typeahead.on('typeahead:selected', function()\n\t\t{\n\t\t\tself.handleSearchSelection.apply(self, arguments);\n\t\t});\n\t}\n\n,\thandleSearchSelection: function(event, object, dataset)\n\t{\n\t\tvar href = this.makeLink(object.node);\n\t\tBackbone.history.navigate(href, {trigger: true}); \n\t}\n\n,\tsearch: function(q)\n\t{\n\t\tvar self=this,matches = []\n\n\t\t// regex used to determine if a string contains the substring `q`\n\t\t,\tsubstrRegex = new RegExp(q, 'i');\n\n\t\t// iterate through the pool of strings and for any string that\n\t\t// contains the substring `q`, add it to the `matches` array\n\t\t_(self.classes).each(function (c)\n\t\t{\n\t\t\tif (substrRegex.test(c.name)) \n\t\t\t{\n\t\t\t\tmatches.push({ value: c.name, node: c });\n\t\t\t}\n\t\t\t_(c.methods).each(function (m)\n\t\t\t{\n\t\t\t\tif (substrRegex.test(m.name)) \n\t\t\t\t{\n\t\t\t\t\tmatches.push({ value: m.name, node: m });\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}); \n\t\t}); \n\n\t\t_(self.modules).each(function (m)\n\t\t{\n\t\t\tif (substrRegex.test(m.name)) \n\t\t\t{\n\t\t\t\tmatches.push({ value: m.name, node: m });\n\t\t\t}\n\t\t}); \n\n\t\treturn matches;\n\t}\n\n,\tsubstringMatcher: function() \n\t{\n\t\tvar self = this;\n\t\treturn function findMatches(q, cb) \n\t\t{\n\t\t\tvar matches;\n\t\t\t// an array that will be populated with substring matches\n\t\t\tmatches = self.search(q);\t\t\t\n\t\t\tcb(matches);\n\t\t};\n\t}\n\n});\n\n\n//@module shortjsdoc\n//@class IndexView @extends AbstractView\nvar IndexView = AbstractView.extend({\n\n\tclassName: 'index'\n\n,\ttemplate: 'index'\n\n});\n\n//@module shortjsdoc\n//@class JsDocRouter @extends BackboneRouter\nvar JsDocRouter = Backbone.Router.extend({\n\n\troutes: {\n\t\t'class/:class': 'showClass'\n\t,\t'class/:class?:options': 'showClass'\n\n\t// ,\t'classHierarchy/:class': 'showClass'event\n\n\t,\t'module/:module': 'showModule'\n\n\t,\t'method/:method': 'showMethod'\n\t,\t'constructor/:method': 'showMethod'\n\n\t,\t'property/:property': 'showProperty'\n\t,\t'event/:event': 'showEvent'\n\n\t,\t'index': 'showIndex'\n\t,\t'modules': 'showModules'\n\t,\t'classes': 'showClasses'\n\n\t,\t'parse': 'showParse'\n\t// ,\t'search': 'showSearch'\n\t}\n\n,\tinitialize: function(application) \n\t{\n\t\tthis.application=application;\n\t}\n\n\t//@method showView @param {AbstractView}view @param {String} resourceName\n,\tshowView: function(view, resourceName)\n\t{\n\t\tresourceName = resourceName||'Resource'; \n\t\tif(view.resourceNotFound)\n\t\t{\n\t\t\tthis.application.showErrorView(resourceName+' '+resourceName+' not found!'); \n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.application.showView(view); \n\t\t}\n\t}\n\n\t//@method showModule  @param {String} moduleName\n,\tshowModule: function(moduleName) \n\t{\n\t\tvar view = new ModuleView(this.application, moduleName);\n\t\tthis.showView(view); \n\t}\n\n\t//method parseOptions @return {Object<String,String>}\n,\tparseOptions: function(options)\n\t{\n\t\tvar params = {};\n\t\t_(options.split('&')).each(function(p)\n\t\t{\n\t\t\tvar a = p.split('='); \n\t\t\tif (a.length >= 2)\n\t\t\t{\n\t\t\t\tparams[a[0]] = a[1]; \n\t\t\t}\n\t\t}); \n\t\treturn params;\n\t}\n\n\t//@method showClass  @param {String} className\n,\tshowClass: function(className, options) \n\t{\n\t\toptions = options || '';\n\t\tvar params = this.parseOptions(options);\t\t\n\t\tvar view = new ClassView(this.application, className, params);\n\t\tthis.showView(view); \n\t}\n\n\t//@method showMethod  @param {String} method\n,\tshowMethod: function(method)\n\t{\n\t\tvar view = new MethodView(this.application, method);\n\t\tthis.showView(view); \n\t}\n\n\t//@method showProperty  @param {String} property\n,\tshowProperty: function(property)\n\t{\n\t\tvar view = new PropertyView(this.application, property);\n\t\tthis.showView(view); \n\t}\n\n\t//@method showEvent  @param {String} event\n,\tshowEvent: function(event)\n\t{\n\t\tvar view = new PropertyView(this.application, event, true);\n\t\tthis.showView(view); \n\t}\n\n\t//@method showModules\n,\tshowModules: function()\n\t{\n\t\tvar view = new AbstractView(this.application);\n\t\tview.template = 'modules';\n\t\tthis.showView(view);\n\t}\n\t\n\t//@method showClasses\n,\tshowClasses: function()\n\t{\n\t\tvar view = new AbstractView(this.application);\n\t\tview.template = 'classes';\n\t\tthis.showView(view);\n\t}\n\t\n\t//@method showIndex\n,\tshowIndex: function() \n\t{\n\t\tvar view = new IndexView(this.application);\n\t\tthis.application.showView(view); \n\t}\n\n\t//@method showParse\n,\tshowParse: function() \n\t{\n\t\tvar view = new ParseView(this.application);\n\t\tthis.application.showView(view); \n\t}\n\n});\n\n\n//@module shortjsdoc\n//@class MethodView @extends AbstractView\nvar MethodView = AbstractView.extend({\n\n\tclassName: 'method-view'\n\n,\ttemplate: 'method'\n\n,\tinitialize: function(application, methodName) \n\t{\n\t\tthis.application = application;\n\t\tvar a = methodName.split('.');\n\t\tvar className = a[0] + '.' + a[1]; \n\t\tvar class_ = this.application.data.classes[className];\n\t\tvar methodSimpleName = a[2];\n\t\tif(!isNaN(parseInt(methodSimpleName, 10)))\n\t\t{\n\t\t\tthis.jsdoc = class_.constructors[parseInt(methodSimpleName, 10)]; \n\t\t\tthis.isConstructor = true;\n\t\t}\n\t\telse\n\t\t{\t\t\t\n\t\t\tthis.jsdoc = class_.methods[methodSimpleName]; \n\t\t\tthis.isConstructor = false;\n\t\t}\n\t\tif(!this.jsdoc)\n\t\t{\n\t\t\tthis.resourceNotFound = true;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.jsdoc.textHtml = this.getTextHtml(this.jsdoc);\t\t\n\t}\n\n});\n\n\n\n//@module shortjsdoc\n//@class ModuleView @extends AbstractView\nvar ModuleView = AbstractView.extend({\n\n\tclassName: 'module'\n\n,\ttemplate: 'module'\n\n,\tinitialize: function(application, moduleName) \n\t{\n\t\tthis.application = application;\n\t\tthis.jsdoc = this.application.data.modules[moduleName]; \n\t\tthis.classes = _( _(this.application.data.classes).values() ).filter(function(c){\n\t\t\treturn c.module.name === moduleName; \n\t\t}); \n\t\t\n\t\tthis.jsdoc.textHtml = this.getTextHtml(this.jsdoc);\t\n\t}\n\n});\n\n//@module shortjsdoc\n//@class ParseView @extends AbstractView\nvar ParseView = AbstractView.extend({\n\n\tclassName: \"parse\"\n\n,\tevents: {\n\t\t'click [data-action=\"inputcode_doit\"]': 'inputCodeDoit'\n\t}\n\n,\ttemplate: 'parse'\n\n,\tinputCodeDoit: function()\n\t{\n\t\tvar code = this.$('[data-type=\"inputcode\"]').val();\n\t\tvar maker = this.application.maker;\n\t\tmaker.parseFile(code, 'textarea');\t\t\n\t\tmaker.postProccess();\n\t\t//console.log(JSON.stringify(maker.data));\n\t\tmaker.postProccessBinding();\n\t\tthis.application.refreshWithNewModel(maker.data);\n\t\t// \n\t}\n\n});\n\n//@module shortjsdoc\n//@class PropertyView @extends AbstractView\nvar PropertyView = AbstractView.extend({\n\n\tclassName: \"property-view\"\n\n,\ttemplate: 'property'\n\n,\tinitialize: function(application, propertyName, isEvent) \n\t{\n\t\tthis.application = application;\n\t\tthis.isEvent = isEvent;\n\t\tvar a = propertyName.split('.');\n\t\tvar className = a[0] + '.' + a[1]; \n\t\tvar class_ = this.application.data.classes[className];\n\t\tvar propertySimpleName = a[2];\n\t\tthis.jsdoc = isEvent ? class_.events[propertySimpleName] : class_.properties[propertySimpleName];\n\t\tif(!this.jsdoc)\n\t\t{\n\t\t\tthis.resourceNotFound = true;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.jsdoc.textHtml = this.getTextHtml(this.jsdoc);\t\t\n\t}\n\n\n});\n\n\n\n//@module shortjsdoc\n//@class SourcesView @extends AbstractView\nvar SourcesView = AbstractView.extend({\n\n\tclassName: \"sources\"\n\n,\ttemplate: 'sources'\n\n,\tevents: {\n\t\t'click [data-type=\"goto-source\"]': 'gotoSource'\n\t}\n\n,\tinitialize: function(application, jsdoc)\n\t{\n\t\tthis.application = application;\n\t\tthis.jsdoc = jsdoc;\n\t\tthis.allSource = this.application.maker.data.source; \n\n\t\tvar rangeRatio = 400;\n\t\tvar rangeMin = Math.max(0, this.jsdoc.commentRange[0] - rangeRatio);\n\t\tvar rangeMax = Math.min(this.allSource.length - 1, this.jsdoc.commentRange[1] + rangeRatio);\n\t\tthis.sourceSubset = this.allSource.substring(rangeMin, rangeMax);\n\t\tvar jsdocSource = this.allSource.substring(this.jsdoc.commentRange[0], this.jsdoc.commentRange[1]); \n\t\tvar previusSource = this.sourceSubset.substring(0, this.sourceSubset.indexOf(jsdocSource));\n\t\tvar previusSourceLineCount = previusSource.split('\\n').length; \n\n\t\tthis.jsdocLineNumber = previusSourceLineCount - 1;\n\n\t\tthis.lineCount = jsdocSource.split('\\n').length; \n\n\t\t//TODO: count the lines of the comment and show all the lines - not only the first one\n\t}\n\n,\tafterRender: function()\n\t{\n\t\tif(typeof prettyPrint !== 'undefined') \n\t\t{\n\t\t\tprettyPrint();\n\t\t}\n\t}\n\n,\tgotoSource: function()\n\t{\n\t\tvar selector = 'ol.linenums>li'\n\t\t,\t$target = jQuery(jQuery(selector).get(this.jsdocLineNumber));\n\t\tif($target.size())\n\t\t{\n\t\t\tjQuery(window).scrollTop($target.position().top);\n\t\t\t$target.addClass('selectedJsDocLine'); \n\t\t}\n\n\t\tfor (var i = 0; i < this.lineCount; i++) \n\t\t{\n\t\t\t$target = jQuery(jQuery(selector).get(this.jsdocLineNumber+i));\n\t\t\t$target.addClass('selectedJsDocLine'); \n\t\t}\n\t}\n});\n\n//@module shortjsdoc\n// this file add methods to Abstract Application for dealing with types and html markup. \n// @class AbstractView @extends BackboneView\n\n_(AbstractView.prototype).extend({\n\n\t//@method printTag\n\tprintTag: function(text, classAttribute, tag) {\n\t\ttag = tag || 'span'; \n\t\tclassAttribute = classAttribute ||'';\n\t\tif(text)\n\t\t{\n\t\t\treturn '<'+tag+ (classAttribute?(' class=\"'+classAttribute+'\"'):'') +'>'+text+'</'+tag+'>'; \n\t\t}\n\t\treturn '';\n\t}\n\n\t//@method simpleName @param {String}name\n,\tsimpleName: function(name)\n\t{\n\t\treturn this.application.maker.simpleName(name);\n\t}\n\n\t//@method makeLink @param {boolean} htmlAnchors will output anchor elements html\n,\tmakeLink: function(node, htmlAnchors)\n\t{\n\t\t// if (!node || !node.type) // no type for this node. This isn't undefined ! This means we just simply doesn't have the information.\n\t\t// {\n\t\t//\treturn '';\n\t\t// }\n\t\tvar s = htmlAnchors?'<a href=\"':'';\n\t\tif(node.annotation==='method')\n\t\t{\n\t\t\ts += '#method/' + node.absoluteName; \n\t\t}\n\t\telse if(node.annotation==='constructor')\n\t\t{\t\t\t\n\t\t\ts += '#constructor/' + node.absoluteName; \n\t\t}\n\t\telse if(node.annotation==='property')\n\t\t{\n\t\t\ts += '#property/' + node.absoluteName; \n\t\t}\n\t\telse if(node.annotation==='event')\n\t\t{\n\t\t\ts += '#event/' + node.absoluteName; \n\t\t}\n\t\telse if(node.annotation==='class')\n\t\t{\n\t\t\ts += '#class/' + node.absoluteName; \n\t\t}\n\t\telse if(node.annotation==='module')\n\t\t{\n\t\t\ts += '#module/' + node.name; \n\t\t}\n\n\t\ts += htmlAnchors?('\">'+node.name+'</a>'):'';\n\t\treturn s;\n\t}\n\t\n\t//@method printType @param {Object}context\n,\tprintType: function(context)\n\t{\n\t\tif(!context || !context.type)\n\t\t{\n\t\t\treturn ''; \n\t\t}\n\t\tvar self = this;\n\t\tvar href = context.type.nativeTypeUrl || '#class/'+context.type.absoluteName; \n\t\tvar htmlText = context.type.name; \n\t\t// htmlText += (context.type.nativeTypeUrl ? '<span class=\"external-label\">(external)</span>' : '');\n\t\t// htmlText += (context.type.nativeTypeUrl ? '<span class=\"glyphicon glyphicon-star\"></span>' : '');\n\t\tvar aclass = (context.type.nativeTypeUrl ? ' type external ' : ' type ');\n\t\tvar iconHtml = context.type.nativeTypeUrl ? '<span class=\"glyphicon glyphicon-share\"></span>' : ''; \n\n\t\tcontext.buffer.push('<a class=\"'+aclass+'\" href=\"'+href+'\">'+iconHtml+htmlText+'</a>');\n\n\t\tif(context.type.params) \n\t\t{ \n\t\t\tcontext.buffer.push('&lt;');\n\t\t\tfor (var i = 0; i < (context.type.params||[]).length; i++) \n\t\t\t{\n\t\t\t\tvar param = context.type.params[i]; \n\t\t\t\tself.printType({ //recurse!\n\t\t\t\t\ttype:param\n\t\t\t\t,\tbuffer: context.buffer\n\t\t\t\t});\n\t\t\t\tif(i < context.type.params.length - 1)\n\t\t\t\t{\n\t\t\t\t\tcontext.buffer.push(','); \n\t\t\t\t}\n\t\t\t}\n\t\t\tcontext.buffer.push('>'); \n\t\t} \n\t}\n\n\t//@method printTypeAsString @param {String} type @return {String}\n,\tprintSingleTypeAsString: function(type)\n\t{\n\t\tvar buffer = [];\n\t\tvar context = {type: type, typeTemplate: this.printType, buffer: buffer}; \n\t\tthis.printType(context); \n\t\tvar typeOutput = buffer.join(''); \n\t\treturn typeOutput; \n\t}\n,\tprintTypeAsString: function(type)\n\t{\n\t\tvar self = this;\n\t\tif(_(type).isArray())\n\t\t{\n\t\t\tvar a = [];\n\t\t\t_(type).each(function(t)\n\t\t\t{\n\t\t\t\ta.push(self.printSingleTypeAsString(t));\n\t\t\t}); \n\t\t\treturn a.join('<span class=\"type-separator\">or</span>'); \n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.printSingleTypeAsString(type); \n\t\t}\n\t}\n\t//@method getTextHtml depends on lib/marked/\n,\tgetTextHtml: function(node)\n\t{\n\t\tif(!node || !node.text)\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t\tvar text = node.text\n\t\t,\ttype = this.application.textFormat\n\t\t,\thtml = _(node.children).find(function(c){return c.annotation==='html'; })\n\t\t,\tmarkdown = _(node.children).find(function(c){return c.annotation==='markdown'; });\n\t\t\n\t\tif(html)\n\t\t{\n\t\t\ttype = 'html'; \n\t\t}\n\t\tif(markdown)\n\t\t{\n\t\t\ttype = 'markdown'; \n\t\t}\n\n\t\tif(type === 'markdown')\n\t\t{\n\t\t\treturn marked(text); \n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn text; \n\t\t}\n\t}\n\n\t//@method printMethod\n,\tprintMethod: function(m)\n\t{\n\t\tvar isConstructor = m.annotation==='constructor'; \n\t\tvar s = '<span class=\"method\">';\n\t\tvar methodName = isConstructor ? this.simpleName(m.ownerClass) : m.name;\n\t\tif(!isConstructor && m.returns)\n\t\t{\n\t\t\ts += this.printTypeAsString(m.returns) + '&nbsp;'; \n\t\t}\n\n\t\ts += '<a href=\"' + this.makeLink(m) + '\">' + methodName + '</a>'; \n\n\t\treturn s + '</span>';\n\t}\n\n,\trenderSource_: function(jsdoc, $container)\n\t{\n\t\tvar view = new SourcesView(this.application, jsdoc); \n\t\tview.renderIn($container); \n\t}\n\n\n,\trenderSource: function()\n\t{\n\t\tif(!this.jsdoc)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tthis.renderSource_(this.jsdoc, this.$('[data-type=\"sources\"]')); \n\t\tthis.$('pre code').addClass('prettyprint'); \n\t\tif(typeof prettyPrint !== 'undefined') \n\t\t{\n\t\t\tprettyPrint('pre code');\n\t\t}\n\t}\n\n\t\n,\tgetInherited: function(c, what)\n\t{\n\t\tvar data = {};\n\t\tif(what==='method')\n\t\t{\n\t\t\tdata = _(c.methods).clone();\n\t\t\t_(data).extend(c.inherited.methods || {});\n\t\t}\n\t\treturn data;\n\t}\n});\n\n\n//@module Backbone\n\n//@class BackboneView\n//@property {jQuery} $el\n//@property {jQuery} $\n//@property {HTMLElement} el\n//@method render\n\n//@class BackboneRouter\n//@class BackboneModel\n\n//@module jQuery\n// @class jQuery a jQuery Object\n\n/*\n@module javascript\n\n@class Object\nAdapted from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n@property {ObjectPrototype} prototype\n@static \n\n*/\n\n\n\n\n\n\n\n//?weird use of shortjsdoc. The following is a copy&paste of Object.prototype.js. Since Object extends ObjectPrototype but ObjectPrototype extends Object - circular extension dependency. Error!\n/*\n\n@module javascript \n\n\n\nAdapted from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\n\nThe Object.prototype property represents the Object prototype object.\n\nAll objects in JavaScript are descended from Object; all objects inherit methods and properties from Object.prototype, although they may be overridden (except an Object with a null prototype, i.e. Object.create(null)). For example, other constructors' prototypes override the constructor property and provide their own toString() methods. Changes to the Object prototype object are propagated to all objects unless the properties and methods subject to those changes are overridden further along the prototype chain.\n\n*/\n\n\n\n/*\n\n\n\n@property {Function} constructor Specifies the function that creates an object's prototype.\n\n##Summary\nReturns a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name. The value is only read-only for primitive values such as 1, true and \"test\".\n\n##Description\n\nAll objects inherit a constructor property from their prototype:\n\n\tvar o = {};\n\to.constructor === Object; // true\n\n\tvar a = [];\n\ta.constructor === Array; // true\n\n\tvar n = new Number(3);\n\tn.constructor === Number; // true\n\n##Examples\n\n###Example: Displaying the constructor of an object\n\nThe following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.\n\n\tfunction Tree(name) {\n\t  this.name = name;\n\t}\n\n\tvar theTree = new Tree('Redwood');\n\tconsole.log('theTree.constructor is ' + theTree.constructor);\n\tThis example displays the following output:\n\n\ttheTree.constructor is function Tree(name) {\n\t  this.name = name;\n\t}\n\n###Example: Changing the constructor of an object\n\nThe following example shows how to modify constructor value of generic objects. Only true, 1 and \"test\" will not be affected as they have read-only native constructors. This example shows that it is not always safe to rely on the constructor property of an object.\n\n\tfunction Type () {}\n\n\tvar types = [\n\t  new Array(),\n\t  [],\n\t  new Boolean(),\n\t  true,             // remains unchanged\n\t  new Date(),\n\t  new Error(),\n\t  new Function(),\n\t  function () {},\n\t  Math,\n\t  new Number(),\n\t  1,                // remains unchanged\n\t  new Object(),\n\t  {},\n\t  new RegExp(),\n\t  /(?:)/,\n\t  new String(),\n\t  'test'            // remains unchanged\n\t];\n\tfor (var i = 0; i < types.length; i++) {\n\t  types[i].constructor = Type;\n\t  types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n\t}\n\tconsole.log(types.join('\\n'));\n\tThis example displays the following output:\n\n\tfunction Type() {},false,\n\tfunction Type() {},false,\n\tfunction Type() {},false,false\n\tfunction Boolean() {\n\t    [native code]\n\t},false,true\n\tfunction Type() {},false,Mon Sep 01 2014 16:03:49 GMT+0600\n\tfunction Type() {},false,Error\n\tfunction Type() {},false,function anonymous() {\n\n\t}\n\tfunction Type() {},false,function () {}\n\tfunction Type() {},false,[object Math]\n\tfunction Type() {},false,0\n\tfunction Number() {\n\t    [native code]\n\t},false,1\n\tfunction Type() {},false,[object Object]\n\tfunction Type() {},false,[object Object]\n\tfunction Type() {},false,/(?:)/\n\tfunction Type() {},false,/(?:)/\n\tfunction Type() {},false,\n\tfunction String() {\n\t    [native code]\n\t},false,тест\n\n*/\n\n\n\n\n\n\n\n/*\n@property {Object} __proto__ \nPoints to the object which was used as prototype when the object was instantiated.\n\n@property {Function} __noSuchMethod__ \nAllows a function to be defined that will be executed when an undefined object member is called as a method.\n*/\n\n\n\n\n\n/*\n@method __defineGetter__()  \nAssociates a function with a property that, when accessed, executes that function and returns its return value.\n*/\n\n\n\n\n\n\n\n\n\n\n\n/*\n@method hasOwnProperty\n##Summary\nThe hasOwnProperty() method returns a boolean indicating whether the object has the specified property.\n\n##Syntax\nobj.hasOwnProperty(prop)\n\n##Examples\n###Example: Using hasOwnProperty to test for a property's existence\n\nThe following example determines whether the o object contains a property named prop:\n\n\to = new Object();\n\to.prop = 'exists';\n\n\tfunction changeO() {\n\t  o.newprop = o.prop;\n\t  delete o.prop;\n\t}\n\n\to.hasOwnProperty('prop');   // returns true\n\tchangeO();\n\to.hasOwnProperty('prop');   // returns false\n\n###Example: Direct versus inherited properties\n\nThe following example differentiates between direct properties and properties inherited through the prototype chain:\n\n\to = new Object();\n\to.prop = 'exists';\n\to.hasOwnProperty('prop');             // returns true\n\to.hasOwnProperty('toString');         // returns false\n\to.hasOwnProperty('hasOwnProperty');   // returns false\n\n##Example: Iterating over the properties of an object\n\nThe following example shows how to iterate over the properties of an object without executing on inherit properties. Note that the for..in loop is already only iterating enumerable items, so one should not assume based on the lack of non-enumerable properties shown in the loop that hasOwnProperty itself is confined strictly to enumerable items (as with Object.getOwnPropertyNames()).\n\n\tvar buz = {\n\t    fog: 'stack'\n\t};\n\n\tfor (var name in buz) {\n\t    if (buz.hasOwnProperty(name)) {\n\t        alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n\t    }\n\t    else {\n\t        alert(name); // toString or something else\n\t    }\n\t}\n\n###Example: hasOwnProperty as a property\n\nJavaScript does not protect the property name hasOwnProperty; thus, if the possibility exists that an object might have a property with this name, it is necessary to use an external hasOwnProperty to get correct results:\n\n\tvar foo = {\n\t    hasOwnProperty: function() {\n\t        return false;\n\t    },\n\t    bar: 'Here be dragons'\n\t};\n\n\tfoo.hasOwnProperty('bar'); // always returns false\n\n\t// Use another Object's hasOwnProperty and call it with 'this' set to foo\n\t({}).hasOwnProperty.call(foo, 'bar'); // true\n\n\t// It's also possible to use the hasOwnProperty property from the Object property for this purpose\n\tObject.prototype.hasOwnProperty.call(foo, 'bar'); // true\n\nNote that in the last case there are no newly created objects.\n\n@param param The name of the property to test.\n\n*/\n\n\n\n\n\n\n\n\n/*\n@method isPrototypeOf\n##Summary\nThe isPrototypeOf() method tests for an object in another object's prototype chain.\n\n\tNote: isPrototypeOf differs from the instanceof operator. In the expression \"object instanceof AFunction\", the object prototype chain is checked against AFunction.prototype, not against AFunction itself.\n\nThe isPrototypeOf method allows you to check whether or not an object exists within another object's prototype chain.\n\nFor example, consider the following prototype chain:\n\n\tfunction Fee() {\n\t  // . . .\n\t}\n\n\tfunction Fi() {\n\t  // . . .\n\t}\n\tFi.prototype = new Fee();\n\n\tfunction Fo() {\n\t  // . . .\n\t}\n\tFo.prototype = new Fi();\n\n\tfunction Fum() {\n\t  // . . .\n\t}\n\tFum.prototype = new Fo();\n\nLater on down the road, if you instantiate Fum and need to check if Fi's prototype exists within the Fum prototype chain, you could do this:\n\n\tvar fum = new Fum();\n\t. . .\n\t\n\tif (Fi.prototype.isPrototypeOf(fum)) {\n\t  // do something safe\n\t}\nThis, along with the instanceof operator particularly comes in handy if you have code that can only function when dealing with objects descended from a specific prototype chain, e.g., to guarantee that certain methods or properties will be present on that object.\n\n\n@param {Object} obj the object whose prototype chain will be searched\n*/\n\n\n\n\n\n/*\n@method propertyIsEnumerable\n##Summary\nThe propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable.\n\n##Description\nEvery object has a propertyIsEnumerable method. This method can determine whether the specified property in an object can be enumerated by a for...in loop, with the exception of properties inherited through the prototype chain. If the object does not have the specified property, this method returns false.\n\n##Examples\n###Example: A basic use of propertyIsEnumerable\n\nThe following example shows the use of propertyIsEnumerable on objects and arrays:\n\n\tvar o = {};\n\tvar a = [];\n\to.prop = 'is enumerable';\n\ta[0] = 'is enumerable';\n\n\to.propertyIsEnumerable('prop');   // returns true\n\ta.propertyIsEnumerable(0);        // returns true\n\n###Example: User-defined versus built-in objects\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n\tvar a = ['is enumerable'];\n\n\ta.propertyIsEnumerable(0);          // returns true\n\ta.propertyIsEnumerable('length');   // returns false\n\n\tMath.propertyIsEnumerable('random');   // returns false\n\tthis.propertyIsEnumerable('Math');     // returns false\n\tExample: Direct versus inherited properties\n\n\tvar a = [];\n\ta.propertyIsEnumerable('constructor');         // returns false\n\n\tfunction firstConstructor() {\n\t  this.property = 'is not enumerable';\n\t}\n\n\tfirstConstructor.prototype.firstMethod = function () {};\n\n\tfunction secondConstructor() {\n\t  this.method = function method() { return 'is enumerable'; };\n\t}\n\n\tsecondConstructor.prototype = new firstConstructor;\n\tsecondConstructor.prototype.constructor = secondConstructor;\n\n\tvar o = new secondConstructor();\n\to.arbitraryProperty = 'is enumerable';\n\n\to.propertyIsEnumerable('arbitraryProperty');   // returns true\n\to.propertyIsEnumerable('method');              // returns true\n\to.propertyIsEnumerable('property');            // returns false\n\n\to.property = 'is enumerable';\n\n\to.propertyIsEnumerable('property');            // returns true\n\n\t// These return false as they are on the prototype which \n\t// propertyIsEnumerable does not consider (even though the last two\n\t// are iteratable with for-in)\n\to.propertyIsEnumerable('prototype');   // returns false (as of JS 1.8.1/FF3.6)\n\to.propertyIsEnumerable('constructor'); // returns false\n\to.propertyIsEnumerable('firstMethod'); // returns false\n\n@param prop\nThe name of the property to test.\n*/\n\n\n\n\n/*\n@method toLocaleString\n##Summary\nThe toLocaleString() method returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.\n\n##Syntax\nobj.toLocaleString();\n##Description\nObject's toLocaleString returns the result of calling toString().\n\nThis function is provided to give objects a generic toLocaleString method, even though not all may use it. See the list below.\n\n##Objects overriding toLocaleString\n\nArray: Array.prototype.toLocaleString()\nNumber: Number.prototype.toLocaleString()\nDate: Date.prototype.toLocaleString()\n*/\n\n\n\n\n\n/*\n@method toString\n##Summary\nThe toString() method returns a string representing object.\n\n##Syntax\nobj.toString()\n##Description\nEvery object has a toString() method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the toString() method is inherited by every object descended from Object. If this method is not overridden in a custom object, toString() returns \"[object type]\", where type is the object type. The following code illustrates this:\n\nvar o = new Object();\no.toString();           // returns [object Object]\nStarting in JavaScript 1.8.5 toString() called on null returns [object Null], and undefined returns [object Undefined], as defined in the 5th Edition of ECMAScript and a subsequent Errata. See Using toString to detect object type.\n##Examples\n###Overriding the default toString method\n\nYou can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object.\n\nThe following code defines the Dog object type and creates theDog, an object of type Dog:\n\n\tfunction Dog(name,breed,color,sex) {\n\t   this.name=name;\n\t   this.breed=breed;\n\t   this.color=color;\n\t   this.sex=sex;\n\t}\n\n\ttheDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\nIf you call the toString() method on this custom object, it returns the default value inherited from Object:\n\n\ttheDog.toString(); //returns [object Object]\n\tThe following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form \"property = value;\".\n\n\tDog.prototype.toString = function dogToString() {\n\t  var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n\t  return ret;\n\t}\nWith the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:\n\nDog Gabby is a female chocolate Lab\nUsing toString() to detect object class\n\ntoString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg.\n\n\tvar toString = Object.prototype.toString;\n\n\ttoString.call(new Date); // [object Date]\n\ttoString.call(new String); // [object String]\n\ttoString.call(Math); // [object Math]\n\n\t//Since JavaScript 1.8.5\n\ttoString.call(undefined); // [object Undefined]\n\ttoString.call(null); // [object Null]\n*/\n\n/*\n\n@module javascript \n\n\n\n@class ObjectPrototype\n\nAdapted from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\n\nThe Object.prototype property represents the Object prototype object.\n\nAll objects in JavaScript are descended from Object; all objects inherit methods and properties from Object.prototype, although they may be overridden (except an Object with a null prototype, i.e. Object.create(null)). For example, other constructors' prototypes override the constructor property and provide their own toString() methods. Changes to the Object prototype object are propagated to all objects unless the properties and methods subject to those changes are overridden further along the prototype chain.\n\n*/\n\n\n\n/*\n\n\n\n@property {Function} constructor Specifies the function that creates an object's prototype.\n\n##Summary\nReturns a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name. The value is only read-only for primitive values such as 1, true and \"test\".\n\n##Description\n\nAll objects inherit a constructor property from their prototype:\n\n\tvar o = {};\n\to.constructor === Object; // true\n\n\tvar a = [];\n\ta.constructor === Array; // true\n\n\tvar n = new Number(3);\n\tn.constructor === Number; // true\n\n##Examples\n\n###Example: Displaying the constructor of an object\n\nThe following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.\n\n\tfunction Tree(name) {\n\t  this.name = name;\n\t}\n\n\tvar theTree = new Tree('Redwood');\n\tconsole.log('theTree.constructor is ' + theTree.constructor);\n\tThis example displays the following output:\n\n\ttheTree.constructor is function Tree(name) {\n\t  this.name = name;\n\t}\n\n###Example: Changing the constructor of an object\n\nThe following example shows how to modify constructor value of generic objects. Only true, 1 and \"test\" will not be affected as they have read-only native constructors. This example shows that it is not always safe to rely on the constructor property of an object.\n\n\tfunction Type () {}\n\n\tvar types = [\n\t  new Array(),\n\t  [],\n\t  new Boolean(),\n\t  true,             // remains unchanged\n\t  new Date(),\n\t  new Error(),\n\t  new Function(),\n\t  function () {},\n\t  Math,\n\t  new Number(),\n\t  1,                // remains unchanged\n\t  new Object(),\n\t  {},\n\t  new RegExp(),\n\t  /(?:)/,\n\t  new String(),\n\t  'test'            // remains unchanged\n\t];\n\tfor (var i = 0; i < types.length; i++) {\n\t  types[i].constructor = Type;\n\t  types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n\t}\n\tconsole.log(types.join('\\n'));\n\tThis example displays the following output:\n\n\tfunction Type() {},false,\n\tfunction Type() {},false,\n\tfunction Type() {},false,false\n\tfunction Boolean() {\n\t    [native code]\n\t},false,true\n\tfunction Type() {},false,Mon Sep 01 2014 16:03:49 GMT+0600\n\tfunction Type() {},false,Error\n\tfunction Type() {},false,function anonymous() {\n\n\t}\n\tfunction Type() {},false,function () {}\n\tfunction Type() {},false,[object Math]\n\tfunction Type() {},false,0\n\tfunction Number() {\n\t    [native code]\n\t},false,1\n\tfunction Type() {},false,[object Object]\n\tfunction Type() {},false,[object Object]\n\tfunction Type() {},false,/(?:)/\n\tfunction Type() {},false,/(?:)/\n\tfunction Type() {},false,\n\tfunction String() {\n\t    [native code]\n\t},false,тест\n\n*/\n\n\n\n\n\n\n\n/*\n@property {Object} __proto__ \nPoints to the object which was used as prototype when the object was instantiated.\n\n@property {Function} __noSuchMethod__ \nAllows a function to be defined that will be executed when an undefined object member is called as a method.\n*/\n\n\n\n\n\n/*\n@method __defineGetter__()  \nAssociates a function with a property that, when accessed, executes that function and returns its return value.\n*/\n\n\n\n\n\n\n\n\n\n\n\n/*\n@method hasOwnProperty\n##Summary\nThe hasOwnProperty() method returns a boolean indicating whether the object has the specified property.\n\n##Syntax\nobj.hasOwnProperty(prop)\n\n##Examples\n###Example: Using hasOwnProperty to test for a property's existence\n\nThe following example determines whether the o object contains a property named prop:\n\n\to = new Object();\n\to.prop = 'exists';\n\n\tfunction changeO() {\n\t  o.newprop = o.prop;\n\t  delete o.prop;\n\t}\n\n\to.hasOwnProperty('prop');   // returns true\n\tchangeO();\n\to.hasOwnProperty('prop');   // returns false\n\n###Example: Direct versus inherited properties\n\nThe following example differentiates between direct properties and properties inherited through the prototype chain:\n\n\to = new Object();\n\to.prop = 'exists';\n\to.hasOwnProperty('prop');             // returns true\n\to.hasOwnProperty('toString');         // returns false\n\to.hasOwnProperty('hasOwnProperty');   // returns false\n\n##Example: Iterating over the properties of an object\n\nThe following example shows how to iterate over the properties of an object without executing on inherit properties. Note that the for..in loop is already only iterating enumerable items, so one should not assume based on the lack of non-enumerable properties shown in the loop that hasOwnProperty itself is confined strictly to enumerable items (as with Object.getOwnPropertyNames()).\n\n\tvar buz = {\n\t    fog: 'stack'\n\t};\n\n\tfor (var name in buz) {\n\t    if (buz.hasOwnProperty(name)) {\n\t        alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n\t    }\n\t    else {\n\t        alert(name); // toString or something else\n\t    }\n\t}\n\n###Example: hasOwnProperty as a property\n\nJavaScript does not protect the property name hasOwnProperty; thus, if the possibility exists that an object might have a property with this name, it is necessary to use an external hasOwnProperty to get correct results:\n\n\tvar foo = {\n\t    hasOwnProperty: function() {\n\t        return false;\n\t    },\n\t    bar: 'Here be dragons'\n\t};\n\n\tfoo.hasOwnProperty('bar'); // always returns false\n\n\t// Use another Object's hasOwnProperty and call it with 'this' set to foo\n\t({}).hasOwnProperty.call(foo, 'bar'); // true\n\n\t// It's also possible to use the hasOwnProperty property from the Object property for this purpose\n\tObject.prototype.hasOwnProperty.call(foo, 'bar'); // true\n\nNote that in the last case there are no newly created objects.\n\n@param param The name of the property to test.\n\n*/\n\n\n\n\n\n\n\n\n/*\n@method isPrototypeOf\n##Summary\nThe isPrototypeOf() method tests for an object in another object's prototype chain.\n\n\tNote: isPrototypeOf differs from the instanceof operator. In the expression \"object instanceof AFunction\", the object prototype chain is checked against AFunction.prototype, not against AFunction itself.\n\nThe isPrototypeOf method allows you to check whether or not an object exists within another object's prototype chain.\n\nFor example, consider the following prototype chain:\n\n\tfunction Fee() {\n\t  // . . .\n\t}\n\n\tfunction Fi() {\n\t  // . . .\n\t}\n\tFi.prototype = new Fee();\n\n\tfunction Fo() {\n\t  // . . .\n\t}\n\tFo.prototype = new Fi();\n\n\tfunction Fum() {\n\t  // . . .\n\t}\n\tFum.prototype = new Fo();\n\nLater on down the road, if you instantiate Fum and need to check if Fi's prototype exists within the Fum prototype chain, you could do this:\n\n\tvar fum = new Fum();\n\t. . .\n\t\n\tif (Fi.prototype.isPrototypeOf(fum)) {\n\t  // do something safe\n\t}\nThis, along with the instanceof operator particularly comes in handy if you have code that can only function when dealing with objects descended from a specific prototype chain, e.g., to guarantee that certain methods or properties will be present on that object.\n\n\n@param {Object} obj the object whose prototype chain will be searched\n*/\n\n\n\n\n\n/*\n@method propertyIsEnumerable\n##Summary\nThe propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable.\n\n##Description\nEvery object has a propertyIsEnumerable method. This method can determine whether the specified property in an object can be enumerated by a for...in loop, with the exception of properties inherited through the prototype chain. If the object does not have the specified property, this method returns false.\n\n##Examples\n###Example: A basic use of propertyIsEnumerable\n\nThe following example shows the use of propertyIsEnumerable on objects and arrays:\n\n\tvar o = {};\n\tvar a = [];\n\to.prop = 'is enumerable';\n\ta[0] = 'is enumerable';\n\n\to.propertyIsEnumerable('prop');   // returns true\n\ta.propertyIsEnumerable(0);        // returns true\n\n###Example: User-defined versus built-in objects\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n\tvar a = ['is enumerable'];\n\n\ta.propertyIsEnumerable(0);          // returns true\n\ta.propertyIsEnumerable('length');   // returns false\n\n\tMath.propertyIsEnumerable('random');   // returns false\n\tthis.propertyIsEnumerable('Math');     // returns false\n\tExample: Direct versus inherited properties\n\n\tvar a = [];\n\ta.propertyIsEnumerable('constructor');         // returns false\n\n\tfunction firstConstructor() {\n\t  this.property = 'is not enumerable';\n\t}\n\n\tfirstConstructor.prototype.firstMethod = function () {};\n\n\tfunction secondConstructor() {\n\t  this.method = function method() { return 'is enumerable'; };\n\t}\n\n\tsecondConstructor.prototype = new firstConstructor;\n\tsecondConstructor.prototype.constructor = secondConstructor;\n\n\tvar o = new secondConstructor();\n\to.arbitraryProperty = 'is enumerable';\n\n\to.propertyIsEnumerable('arbitraryProperty');   // returns true\n\to.propertyIsEnumerable('method');              // returns true\n\to.propertyIsEnumerable('property');            // returns false\n\n\to.property = 'is enumerable';\n\n\to.propertyIsEnumerable('property');            // returns true\n\n\t// These return false as they are on the prototype which \n\t// propertyIsEnumerable does not consider (even though the last two\n\t// are iteratable with for-in)\n\to.propertyIsEnumerable('prototype');   // returns false (as of JS 1.8.1/FF3.6)\n\to.propertyIsEnumerable('constructor'); // returns false\n\to.propertyIsEnumerable('firstMethod'); // returns false\n\n@param prop\nThe name of the property to test.\n*/\n\n\n\n\n/*\n@method toLocaleString\n##Summary\nThe toLocaleString() method returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.\n\n##Syntax\nobj.toLocaleString();\n##Description\nObject's toLocaleString returns the result of calling toString().\n\nThis function is provided to give objects a generic toLocaleString method, even though not all may use it. See the list below.\n\n##Objects overriding toLocaleString\n\nArray: Array.prototype.toLocaleString()\nNumber: Number.prototype.toLocaleString()\nDate: Date.prototype.toLocaleString()\n*/\n\n\n\n\n\n/*\n@method toString\n##Summary\nThe toString() method returns a string representing object.\n\n##Syntax\nobj.toString()\n##Description\nEvery object has a toString() method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the toString() method is inherited by every object descended from Object. If this method is not overridden in a custom object, toString() returns \"[object type]\", where type is the object type. The following code illustrates this:\n\nvar o = new Object();\no.toString();           // returns [object Object]\nStarting in JavaScript 1.8.5 toString() called on null returns [object Null], and undefined returns [object Undefined], as defined in the 5th Edition of ECMAScript and a subsequent Errata. See Using toString to detect object type.\n##Examples\n###Overriding the default toString method\n\nYou can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object.\n\nThe following code defines the Dog object type and creates theDog, an object of type Dog:\n\n\tfunction Dog(name,breed,color,sex) {\n\t   this.name=name;\n\t   this.breed=breed;\n\t   this.color=color;\n\t   this.sex=sex;\n\t}\n\n\ttheDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\nIf you call the toString() method on this custom object, it returns the default value inherited from Object:\n\n\ttheDog.toString(); //returns [object Object]\n\tThe following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form \"property = value;\".\n\n\tDog.prototype.toString = function dogToString() {\n\t  var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n\t  return ret;\n\t}\nWith the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:\n\nDog Gabby is a female chocolate Lab\nUsing toString() to detect object class\n\ntoString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg.\n\n\tvar toString = Object.prototype.toString;\n\n\ttoString.call(new Date); // [object Date]\n\ttoString.call(new String); // [object String]\n\ttoString.call(Math); // [object Math]\n\n\t//Since JavaScript 1.8.5\n\ttoString.call(undefined); // [object Undefined]\n\ttoString.call(null); // [object Null]\n*/",
    "classes": {
        "ideal.BaseObject": {
            "annotation": "class",
            "name": "BaseObject",
            "text": "",
            "commentRange": [
                0,
                36
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "ideal",
                "text": "",
                "commentRange": [
                    0,
                    36
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "ideal.BaseObject",
            "properties": {
                "creationDate": {
                    "annotation": "property",
                    "type": "{Date}",
                    "name": "creationDate",
                    "text": "",
                    "commentRange": [
                        148,
                        309
                    ],
                    "fileName": "ALL.js"
                },
                "name": {
                    "annotation": "property",
                    "type": "{String}",
                    "name": "name",
                    "text": "",
                    "commentRange": [
                        148,
                        309
                    ],
                    "fileName": "ALL.js"
                },
                "description": {
                    "annotation": "property",
                    "type": "{String}",
                    "name": "description",
                    "text": "",
                    "commentRange": [
                        148,
                        309
                    ],
                    "fileName": "ALL.js"
                },
                "owners": {
                    "annotation": "property",
                    "type": "{Object<String,User>}",
                    "name": "owners",
                    "text": "the owners, a map by owner id",
                    "commentRange": [
                        148,
                        309
                    ],
                    "fileName": "ALL.js"
                }
            }
        },
        "ideal.ObjectPool": {
            "annotation": "class",
            "name": "ObjectPool",
            "text": "",
            "commentRange": [
                336,
                355
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "ideal",
                "text": "",
                "commentRange": [
                    0,
                    36
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "ideal.ObjectPool",
            "methods": {
                "loadObjects": {
                    "annotation": "method",
                    "name": "loadObjects",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{Array<String>}",
                            "name": "objects_ids",
                            "text": "",
                            "theRestString": "@return {Object<String,BaseObject>}"
                        },
                        {
                            "annotation": "return",
                            "type": "{Object<String,BaseObject>}",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        381,
                        473
                    ],
                    "fileName": "ALL.js"
                },
                "getOwners": {
                    "annotation": "method",
                    "name": "getOwners",
                    "text": "this method is useful for *blabla* blabla _blabla_ bab",
                    "commentRange": [
                        543,
                        617
                    ],
                    "fileName": "ALL.js",
                    "params": {
                        "objects_ids": {
                            "annotation": "param",
                            "type": "{Array<String>}",
                            "name": "objects_ids",
                            "text": "",
                            "children": [
                                {
                                    "annotation": "return",
                                    "type": "{Object<String,Object<String,User>>}",
                                    "text": "",
                                    "theRestString": ""
                                }
                            ],
                            "commentRange": [
                                731,
                                814
                            ],
                            "fileName": "ALL.js"
                        }
                    }
                }
            },
            "events": {
                "objectCreated": {
                    "annotation": "event",
                    "name": "objectCreated",
                    "text": "event fired when an object is created in this pool.",
                    "commentRange": [
                        926,
                        1000
                    ],
                    "fileName": "ALL.js"
                }
            }
        },
        "ideal.Thing": {
            "annotation": "class",
            "name": "Thing",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "BaseObject",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                1115,
                1181
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "ideal",
                "text": "",
                "commentRange": [
                    0,
                    36
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "ideal.Thing",
            "properties": {
                "importance": {
                    "annotation": "property",
                    "type": "{Number}",
                    "name": "importance",
                    "text": "",
                    "commentRange": [
                        1115,
                        1181
                    ],
                    "fileName": "ALL.js"
                }
            }
        },
        "ideal.Action": {
            "annotation": "class",
            "name": "Action",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "BaseObject",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                1296,
                1336
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "ideal",
                "text": "",
                "commentRange": [
                    0,
                    36
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "ideal.Action",
            "methods": {
                "extract": {
                    "annotation": "method",
                    "name": "extract",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{String|BaseObject|Array<BaseObject>}",
                            "name": "what",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        1450,
                        1819
                    ],
                    "fileName": "ALL.js"
                }
            }
        },
        "Problems.Idea": {
            "annotation": "class",
            "name": "Idea",
            "text": "",
            "commentRange": [
                1450,
                1819
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "Problems",
                "text": "",
                "commentRange": [
                    1450,
                    1819
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "Problems.Idea"
        },
        "Problems.Problem": {
            "annotation": "class",
            "name": "Problem",
            "text": "",
            "commentRange": [
                1450,
                1819
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "Problems",
                "text": "",
                "commentRange": [
                    1450,
                    1819
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "Problems.Problem"
        },
        "life.Living": {
            "annotation": "class",
            "name": "Living",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "Thing",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                1450,
                1819
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "life",
                "text": "",
                "commentRange": [
                    1450,
                    1819
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "life.Living",
            "methods": {
                "breath": {
                    "annotation": "method",
                    "name": "breath",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{Number}",
                            "name": "size",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        1450,
                        1819
                    ],
                    "fileName": "ALL.js"
                }
            }
        },
        "life.Animal": {
            "annotation": "class",
            "name": "Animal",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "Living",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                1450,
                1819
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "life",
                "text": "",
                "commentRange": [
                    1450,
                    1819
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "life.Animal",
            "methods": {
                "eat": {
                    "annotation": "method",
                    "name": "eat",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{Array<Food>}",
                            "name": "food",
                            "text": "",
                            "theRestString": "@return {Array<Energy>}"
                        },
                        {
                            "annotation": "return",
                            "type": "{Array<Energy>}",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        1450,
                        1819
                    ],
                    "fileName": "ALL.js"
                }
            }
        },
        "life.Person": {
            "annotation": "class",
            "name": "Person",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "Animal",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                1450,
                1819
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "life",
                "text": "",
                "commentRange": [
                    1450,
                    1819
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "life.Person",
            "methods": {
                "walk": {
                    "annotation": "method",
                    "name": "walk",
                    "text": "",
                    "children": [
                        {
                            "annotation": "return",
                            "type": "{Action}",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        1450,
                        1819
                    ],
                    "fileName": "ALL.js"
                },
                "crossStreet": {
                    "annotation": "method",
                    "name": "crossStreet",
                    "text": "This try to be a markdown [text](http://google.com)\n\nAnother paragraph \n\n\tvar someMarkup = {\n\t\ta: 1\n\t,\tn: 2\n\t,\tg: function (e)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t};\n\nand some final text with a list\n\n1. First ordered list item\n2. Another item\n  * Unordered sub-list.\n1. Actual numbers don't matter, just that it's a number\n  1. Ordered sub-list\n  2. hello\n4. And another item.",
                    "commentRange": [
                        1820,
                        2208
                    ],
                    "fileName": "ALL.js"
                }
            }
        },
        "problem1.TerranObject": {
            "annotation": "class",
            "name": "TerranObject",
            "text": "",
            "commentRange": [
                2211,
                2565
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "problem1",
                "text": "This is a description of planet earth city from the point of view of an alien observing us from a space ship.",
                "commentRange": [
                    2211,
                    2565
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "problem1.TerranObject"
        },
        "problem1.Person": {
            "annotation": "class",
            "name": "Person",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "TerranObject",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                2211,
                2565
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "problem1",
                "text": "This is a description of planet earth city from the point of view of an alien observing us from a space ship.",
                "commentRange": [
                    2211,
                    2565
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "problem1.Person"
        },
        "problem1.List": {
            "annotation": "class",
            "name": "List",
            "text": "This is just a semantic alias for javascript Array.",
            "children": [
                {
                    "annotation": "extends",
                    "name": "Array",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                2211,
                2565
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "problem1",
                "text": "This is a description of planet earth city from the point of view of an alien observing us from a space ship.",
                "commentRange": [
                    2211,
                    2565
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "problem1.List"
        },
        "problem1.Map": {
            "annotation": "class",
            "name": "Map",
            "text": "This is just a semantic alias for javascript Object.",
            "children": [
                {
                    "annotation": "extends",
                    "name": "Object",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                2211,
                2565
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "problem1",
                "text": "This is a description of planet earth city from the point of view of an alien observing us from a space ship.",
                "commentRange": [
                    2211,
                    2565
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "problem1.Map"
        },
        "problem1.Building": {
            "annotation": "class",
            "name": "Building",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "TerranObject",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                2567,
                2609
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "problem1",
                "text": "This is a description of planet earth city from the point of view of an alien observing us from a space ship.",
                "commentRange": [
                    2211,
                    2565
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "problem1.Building"
        },
        "problem1.Hospital": {
            "annotation": "class",
            "name": "Hospital",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "Building",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                2611,
                3170
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "problem1",
                "text": "This is a description of planet earth city from the point of view of an alien observing us from a space ship.",
                "commentRange": [
                    2211,
                    2565
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "problem1.Hospital",
            "constructors": [
                {
                    "annotation": "constructor",
                    "name": "n",
                    "text": "Neque porro quisquam est qui _dolorem_ *ipsum* quia dolor sit amet, consectetur, adipisci velit...",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{Number}",
                            "name": "availableBeds",
                            "text": "Neque porro quisquam est qui _dolorem_ *ipsum* quia dolor sit amet, consectetur, adipisci velit...",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        2611,
                        3170
                    ],
                    "fileName": "ALL.js",
                    "params": [
                        {
                            "annotation": "param",
                            "type": "{Number}",
                            "name": "availableBeds",
                            "text": "Neque porro quisquam est qui _dolorem_ *ipsum* quia dolor sit amet, consectetur, adipisci velit...",
                            "theRestString": ""
                        }
                    ]
                }
            ],
            "methods": {
                "getActiveDoctors": {
                    "annotation": "method",
                    "name": "getActiveDoctors",
                    "text": "",
                    "children": [
                        {
                            "annotation": "returns",
                            "type": "{List<Doctor>}",
                            "name": "the",
                            "text": "currently active doctors in this hospital",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        2611,
                        3170
                    ],
                    "fileName": "ALL.js"
                }
            },
            "properties": {
                "todayIngresedPatients": {
                    "annotation": "property",
                    "type": "{Array<Person>}",
                    "name": "todayIngresedPatients",
                    "text": "all the patiens that entered this hospital today",
                    "commentRange": [
                        2611,
                        3170
                    ],
                    "fileName": "ALL.js"
                }
            }
        },
        "problem1.Doctor": {
            "annotation": "class",
            "name": "Doctor",
            "text": "",
            "children": [
                {
                    "annotation": "extend",
                    "name": "Person",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                2611,
                3170
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "problem1",
                "text": "This is a description of planet earth city from the point of view of an alien observing us from a space ship.",
                "commentRange": [
                    2211,
                    2565
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "problem1.Doctor",
            "properties": {
                "skills": {
                    "annotation": "property",
                    "type": "{Map<String,MedicalTopic>}",
                    "name": "skills",
                    "text": "",
                    "commentRange": [
                        2611,
                        3170
                    ],
                    "fileName": "ALL.js"
                }
            }
        },
        "problem1.MedicalTopic": {
            "annotation": "class",
            "name": "MedicalTopic",
            "text": "Lorem *ipsum* dolor sit amet, consectetur adipisicing elit, \n\n\tsed do eiusmod tempor \n\tincididunt ut labore et dolore \n\tmagna aliqua. \n\t\tUt enim ad minim \n\t\t\tveniam, quis nostrud exercitation\n\t\t\tullamco laboris nisi ut aliquip ex \n\t\tea commodo consequat. Duis aute irure dolor\n\tin reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \n\nExcepteur sint occaecat *cupidatat* non proident, sunt in culpa qui officia deserunt mollit anim id est laborum",
            "commentRange": [
                3172,
                4252
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "problem1",
                "text": "This is a description of planet earth city from the point of view of an alien observing us from a space ship.",
                "commentRange": [
                    2211,
                    2565
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "problem1.MedicalTopic",
            "methods": {
                "beUsed": {
                    "annotation": "method",
                    "name": "beUsed",
                    "text": "Lorem *ipsum* dolor sit amet, consectetur adipisicing elit, \n\n\tsed do eiusmod tempor \n\tincididunt ut labore et dolore \n\tmagna aliqua. \n\t\tUt enim ad minim \n\t\t\tveniam, quis nostrud exercitation\n\t\t\tullamco laboris nisi ut aliquip ex \n\t\tea commodo consequat. Duis aute irure dolor\n\tin reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \n\nExcepteur sint occaecat *cupidatat* non proident, sunt in culpa qui officia deserunt mollit anim id est laborum",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{Number}",
                            "name": "amount",
                            "text": "Excepteur sint occaecat *cupidatat*",
                            "theRestString": "@return {Array<MedicalTopic>}"
                        },
                        {
                            "annotation": "return",
                            "type": "{Array<MedicalTopic>}",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        3172,
                        4252
                    ],
                    "fileName": "ALL.js"
                }
            }
        },
        "shortjsdoc.AbstractView": {
            "annotation": "class",
            "name": "AbstractView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "BackboneView",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                18161,
                18316
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "this file add methods to Abstract Application for dealing with types and html markup.",
                "commentRange": [
                    18161,
                    18316
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.AbstractView",
            "methods": {
                "printTag": {
                    "annotation": "method",
                    "name": "printTag",
                    "text": "",
                    "commentRange": [
                        18355,
                        18373
                    ],
                    "fileName": "ALL.js"
                },
                "simpleName": {
                    "annotation": "method",
                    "name": "simpleName",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{String}",
                            "name": "name",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        18620,
                        18660
                    ],
                    "fileName": "ALL.js"
                },
                "makeLink": {
                    "annotation": "method",
                    "name": "makeLink",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{boolean}",
                            "name": "htmlAnchors",
                            "text": "will output anchor elements html",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        18748,
                        18828
                    ],
                    "fileName": "ALL.js"
                },
                "printType": {
                    "annotation": "method",
                    "name": "printType",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{Object}",
                            "name": "context",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        19663,
                        19705
                    ],
                    "fileName": "ALL.js"
                },
                "printTypeAsString": {
                    "annotation": "method",
                    "name": "printTypeAsString",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{String}",
                            "name": "type",
                            "text": "",
                            "theRestString": "@return {String}"
                        },
                        {
                            "annotation": "return",
                            "type": "{String}",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        20799,
                        20864
                    ],
                    "fileName": "ALL.js"
                },
                "getTextHtml": {
                    "annotation": "method",
                    "name": "getTextHtml",
                    "text": "depends on lib/marked/",
                    "commentRange": [
                        21414,
                        21458
                    ],
                    "fileName": "ALL.js"
                },
                "printMethod": {
                    "annotation": "method",
                    "name": "printMethod",
                    "text": "",
                    "commentRange": [
                        21951,
                        21972
                    ],
                    "fileName": "ALL.js"
                }
            }
        },
        "shortjsdoc.Application": {
            "annotation": "class",
            "name": "Application",
            "text": "",
            "commentRange": [
                5021,
                5404
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "children": [
                    {
                        "annotation": "author",
                        "text": ": sgurin",
                        "theRestString": ""
                    }
                ],
                "commentRange": [
                    5021,
                    5404
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.Application",
            "constructors": [
                {
                    "annotation": "constructor",
                    "name": "n",
                    "text": "Application",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{Object}",
                            "name": "data",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        5021,
                        5404
                    ],
                    "fileName": "ALL.js",
                    "params": [
                        {
                            "annotation": "param",
                            "type": "{Object}",
                            "name": "data",
                            "text": "",
                            "theRestString": ""
                        }
                    ]
                }
            ],
            "methods": {
                "start": {
                    "annotation": "method",
                    "name": "start",
                    "text": "an application loading it with given data.",
                    "children": [
                        {
                            "annotation": "static",
                            "name": "dummy",
                            "text": "",
                            "theRestString": "@param data the output of passing jsindentator JsDocMaker."
                        },
                        {
                            "annotation": "param",
                            "name": "data",
                            "text": "the output of passing jsindentator JsDocMaker.",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        6963,
                        7091
                    ],
                    "fileName": "ALL.js"
                },
                "showView": {
                    "annotation": "method",
                    "name": "showView",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{AbstractView}",
                            "name": "view",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        6349,
                        6394
                    ],
                    "fileName": "ALL.js"
                },
                "refreshWithNewModel": {
                    "annotation": "method",
                    "name": "refreshWithNewModel",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{Object}",
                            "name": "data",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        6615,
                        6664
                    ],
                    "fileName": "ALL.js"
                },
                "showErrorView": {
                    "annotation": "method",
                    "name": "showErrorView",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{String}",
                            "name": "s",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        6824,
                        6865
                    ],
                    "fileName": "ALL.js"
                }
            }
        },
        "shortjsdoc.ApplicationView": {
            "annotation": "class",
            "name": "ApplicationView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "AbstractView",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                7197,
                7264
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    7197,
                    7264
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.ApplicationView"
        },
        "shortjsdoc.ClassView": {
            "annotation": "class",
            "name": "ClassView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "AbstractView",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                7812,
                7873
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    7812,
                    7873
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.ClassView",
            "methods": {
                "inherit": {
                    "annotation": "method",
                    "name": "inherit",
                    "text": "",
                    "children": [
                        {
                            "annotation": "return",
                            "name": "true",
                            "text": "if inherited param is an inherited property from the point of view of baseClass",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        8751,
                        8861
                    ],
                    "fileName": "ALL.js"
                }
            }
        },
        "shortjsdoc.HeaderView": {
            "annotation": "class",
            "name": "HeaderView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "AbstractView",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                9159,
                9221
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    9159,
                    9221
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.HeaderView"
        },
        "shortjsdoc.IndexView": {
            "annotation": "class",
            "name": "IndexView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "AbstractView",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                11109,
                11170
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    11109,
                    11170
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.IndexView"
        },
        "shortjsdoc.JsDocRouter": {
            "annotation": "class",
            "name": "JsDocRouter",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "BackboneRouter",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                11257,
                11322
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    11257,
                    11322
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.JsDocRouter",
            "methods": {
                "showView": {
                    "annotation": "method",
                    "name": "showView",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{AbstractView}",
                            "name": "view",
                            "text": "",
                            "theRestString": "@param {String} resourceName"
                        },
                        {
                            "annotation": "param",
                            "type": "{String}",
                            "name": "resourceName",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        11894,
                        11967
                    ],
                    "fileName": "ALL.js"
                },
                "showModule": {
                    "annotation": "method",
                    "name": "showModule",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{String}",
                            "name": "moduleName",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        12230,
                        12278
                    ],
                    "fileName": "ALL.js"
                },
                "showClass": {
                    "annotation": "method",
                    "name": "showClass",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{String}",
                            "name": "className",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        12674,
                        12720
                    ],
                    "fileName": "ALL.js"
                },
                "showMethod": {
                    "annotation": "method",
                    "name": "showMethod",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{String}",
                            "name": "method",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        12933,
                        12977
                    ],
                    "fileName": "ALL.js"
                },
                "showProperty": {
                    "annotation": "method",
                    "name": "showProperty",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{String}",
                            "name": "property",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        13096,
                        13144
                    ],
                    "fileName": "ALL.js"
                },
                "showEvent": {
                    "annotation": "method",
                    "name": "showEvent",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{String}",
                            "name": "event",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        13271,
                        13313
                    ],
                    "fileName": "ALL.js"
                },
                "showModules": {
                    "annotation": "method",
                    "name": "showModules",
                    "text": "",
                    "commentRange": [
                        13437,
                        13458
                    ],
                    "fileName": "ALL.js"
                },
                "showClasses": {
                    "annotation": "method",
                    "name": "showClasses",
                    "text": "",
                    "commentRange": [
                        13595,
                        13616
                    ],
                    "fileName": "ALL.js"
                },
                "showIndex": {
                    "annotation": "method",
                    "name": "showIndex",
                    "text": "",
                    "commentRange": [
                        13753,
                        13772
                    ],
                    "fileName": "ALL.js"
                },
                "showParse": {
                    "annotation": "method",
                    "name": "showParse",
                    "text": "",
                    "commentRange": [
                        13888,
                        13907
                    ],
                    "fileName": "ALL.js"
                }
            }
        },
        "shortjsdoc.MethodView": {
            "annotation": "class",
            "name": "MethodView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "AbstractView",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                14028,
                14090
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    14028,
                    14090
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.MethodView"
        },
        "shortjsdoc.ModuleView": {
            "annotation": "class",
            "name": "ModuleView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "AbstractView",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                14816,
                14878
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    14816,
                    14878
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.ModuleView"
        },
        "shortjsdoc.ParseView": {
            "annotation": "class",
            "name": "ParseView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "AbstractView",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                15307,
                15368
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    15307,
                    15368
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.ParseView"
        },
        "shortjsdoc.PropertyView": {
            "annotation": "class",
            "name": "PropertyView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "AbstractView",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                15853,
                15917
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    15853,
                    15917
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.PropertyView"
        },
        "shortjsdoc.SourcesView": {
            "annotation": "class",
            "name": "SourcesView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "AbstractView",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                16538,
                16601
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    16538,
                    16601
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.SourcesView"
        },
        "Backbone.BackboneView": {
            "annotation": "class",
            "name": "BackboneView",
            "text": "",
            "commentRange": [
                22953,
                23187
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "Backbone",
                "text": "",
                "commentRange": [
                    22953,
                    23187
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "Backbone.BackboneView",
            "properties": {
                "undefined": {
                    "annotation": "property",
                    "type": "{jQuery}",
                    "text": "",
                    "commentRange": [
                        22953,
                        23187
                    ],
                    "fileName": "ALL.js"
                },
                "el": {
                    "annotation": "property",
                    "type": "{HTMLElement}",
                    "name": "el",
                    "text": "",
                    "commentRange": [
                        22953,
                        23187
                    ],
                    "fileName": "ALL.js"
                }
            },
            "methods": {
                "render": {
                    "annotation": "method",
                    "name": "render",
                    "text": "",
                    "commentRange": [
                        22953,
                        23187
                    ],
                    "fileName": "ALL.js"
                }
            }
        },
        "Backbone.BackboneRouter": {
            "annotation": "class",
            "name": "BackboneRouter",
            "text": "",
            "commentRange": [
                22953,
                23187
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "Backbone",
                "text": "",
                "commentRange": [
                    22953,
                    23187
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "Backbone.BackboneRouter"
        },
        "Backbone.BackboneModel": {
            "annotation": "class",
            "name": "BackboneModel",
            "text": "",
            "commentRange": [
                22953,
                23187
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "Backbone",
                "text": "",
                "commentRange": [
                    22953,
                    23187
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "Backbone.BackboneModel"
        },
        "jQuery.jQuery": {
            "annotation": "class",
            "name": "jQuery",
            "text": "a jQuery Object",
            "commentRange": [
                22953,
                23187
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "jQuery",
                "text": "",
                "commentRange": [
                    22953,
                    23187
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "jQuery.jQuery"
        },
        "javascript.Object": {
            "annotation": "class",
            "name": "Object",
            "text": "Adapted from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
            "commentRange": [
                23189,
                23378
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "javascript",
                "text": "",
                "commentRange": [
                    23189,
                    23378
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "javascript.Object",
            "properties": {
                "prototype": {
                    "annotation": "property",
                    "type": "{ObjectPrototype}",
                    "name": "prototype",
                    "text": "",
                    "children": [
                        {
                            "annotation": "static",
                            "name": "dummy",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        23189,
                        23378
                    ],
                    "fileName": "ALL.js"
                },
                "constructor": {
                    "annotation": "property",
                    "type": "{Function}",
                    "name": "constructor",
                    "text": "Specifies the function that creates an object's prototype.\n\n##Summary\nReturns a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name. The value is only read-only for primitive values such as 1, true and \"test\".\n\n##Description\n\nAll objects inherit a constructor property from their prototype:\n\n\tvar o = {};\n\to.constructor === Object; // true\n\n\tvar a = [];\n\ta.constructor === Array; // true\n\n\tvar n = new Number(3);\n\tn.constructor === Number; // true\n\n##Examples\n\n###Example: Displaying the constructor of an object\n\nThe following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.\n\n\tfunction Tree(name) {\n\t  this.name = name;\n\t}\n\n\tvar theTree = new Tree('Redwood');\n\tconsole.log('theTree.constructor is ' + theTree.constructor);\n\tThis example displays the following output:\n\n\ttheTree.constructor is function Tree(name) {\n\t  this.name = name;\n\t}\n\n###Example: Changing the constructor of an object\n\nThe following example shows how to modify constructor value of generic objects. Only true, 1 and \"test\" will not be affected as they have read-only native constructors. This example shows that it is not always safe to rely on the constructor property of an object.\n\n\tfunction Type () {}\n\n\tvar types = [\n\t  new Array(),\n\t  [],\n\t  new Boolean(),\n\t  true,             // remains unchanged\n\t  new Date(),\n\t  new Error(),\n\t  new Function(),\n\t  function () {},\n\t  Math,\n\t  new Number(),\n\t  1,                // remains unchanged\n\t  new Object(),\n\t  {},\n\t  new RegExp(),\n\t  /(?:)/,\n\t  new String(),\n\t  'test'            // remains unchanged\n\t];\n\tfor (var i = 0; i < types.length; i++) {\n\t  types[i].constructor = Type;\n\t  types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n\t}\n\tconsole.log(types.join('\\n'));\n\tThis example displays the following output:\n\n\tfunction Type() {},false,\n\tfunction Type() {},false,\n\tfunction Type() {},false,false\n\tfunction Boolean() {\n\t    [native code]\n\t},false,true\n\tfunction Type() {},false,Mon Sep 01 2014 16:03:49 GMT+0600\n\tfunction Type() {},false,Error\n\tfunction Type() {},false,function anonymous() {\n\n\t}\n\tfunction Type() {},false,function () {}\n\tfunction Type() {},false,[object Math]\n\tfunction Type() {},false,0\n\tfunction Number() {\n\t    [native code]\n\t},false,1\n\tfunction Type() {},false,[object Object]\n\tfunction Type() {},false,[object Object]\n\tfunction Type() {},false,/(?:)/\n\tfunction Type() {},false,/(?:)/\n\tfunction Type() {},false,\n\tfunction String() {\n\t    [native code]\n\t},false,тест",
                    "commentRange": [
                        24314,
                        27042
                    ],
                    "fileName": "ALL.js"
                },
                "__noSuchMethod__": {
                    "annotation": "property",
                    "type": "{Function}",
                    "name": "__noSuchMethod__",
                    "text": "Allows a function to be defined that will be executed when an undefined object member is called as a method.",
                    "commentRange": [
                        27050,
                        27317
                    ],
                    "fileName": "ALL.js"
                }
            },
            "methods": {
                "__defineGetter__": {
                    "annotation": "method",
                    "name": "__defineGetter__",
                    "text": "()  \nAssociates a function with a property that, when accessed, executes that function and returns its return value.",
                    "commentRange": [
                        27323,
                        27469
                    ],
                    "fileName": "ALL.js"
                },
                "hasOwnProperty": {
                    "annotation": "method",
                    "name": "hasOwnProperty",
                    "text": "##Summary\nThe hasOwnProperty() method returns a boolean indicating whether the object has the specified property.\n\n##Syntax\nobj.hasOwnProperty(prop)\n\n##Examples\n###Example: Using hasOwnProperty to test for a property's existence\n\nThe following example determines whether the o object contains a property named prop:\n\n\to = new Object();\n\to.prop = 'exists';\n\n\tfunction changeO() {\n\t  o.newprop = o.prop;\n\t  delete o.prop;\n\t}\n\n\to.hasOwnProperty('prop');   // returns true\n\tchangeO();\n\to.hasOwnProperty('prop');   // returns false\n\n###Example: Direct versus inherited properties\n\nThe following example differentiates between direct properties and properties inherited through the prototype chain:\n\n\to = new Object();\n\to.prop = 'exists';\n\to.hasOwnProperty('prop');             // returns true\n\to.hasOwnProperty('toString');         // returns false\n\to.hasOwnProperty('hasOwnProperty');   // returns false\n\n##Example: Iterating over the properties of an object\n\nThe following example shows how to iterate over the properties of an object without executing on inherit properties. Note that the for..in loop is already only iterating enumerable items, so one should not assume based on the lack of non-enumerable properties shown in the loop that hasOwnProperty itself is confined strictly to enumerable items (as with Object.getOwnPropertyNames()).\n\n\tvar buz = {\n\t    fog: 'stack'\n\t};\n\n\tfor (var name in buz) {\n\t    if (buz.hasOwnProperty(name)) {\n\t        alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n\t    }\n\t    else {\n\t        alert(name); // toString or something else\n\t    }\n\t}\n\n###Example: hasOwnProperty as a property\n\nJavaScript does not protect the property name hasOwnProperty; thus, if the possibility exists that an object might have a property with this name, it is necessary to use an external hasOwnProperty to get correct results:\n\n\tvar foo = {\n\t    hasOwnProperty: function() {\n\t        return false;\n\t    },\n\t    bar: 'Here be dragons'\n\t};\n\n\tfoo.hasOwnProperty('bar'); // always returns false\n\n\t// Use another Object's hasOwnProperty and call it with 'this' set to foo\n\t({}).hasOwnProperty.call(foo, 'bar'); // true\n\n\t// It's also possible to use the hasOwnProperty property from the Object property for this purpose\n\tObject.prototype.hasOwnProperty.call(foo, 'bar'); // true\n\nNote that in the last case there are no newly created objects.",
                    "children": [
                        {
                            "annotation": "param",
                            "name": "param",
                            "text": "The name of the property to test.",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        27481,
                        29931
                    ],
                    "fileName": "ALL.js"
                },
                "isPrototypeOf": {
                    "annotation": "method",
                    "name": "isPrototypeOf",
                    "text": "##Summary\nThe isPrototypeOf() method tests for an object in another object's prototype chain.\n\n\tNote: isPrototypeOf differs from the instanceof operator. In the expression \"object instanceof AFunction\", the object prototype chain is checked against AFunction.prototype, not against AFunction itself.\n\nThe isPrototypeOf method allows you to check whether or not an object exists within another object's prototype chain.\n\nFor example, consider the following prototype chain:\n\n\tfunction Fee() {\n\t  // . . .\n\t}\n\n\tfunction Fi() {\n\t  // . . .\n\t}\n\tFi.prototype = new Fee();\n\n\tfunction Fo() {\n\t  // . . .\n\t}\n\tFo.prototype = new Fi();\n\n\tfunction Fum() {\n\t  // . . .\n\t}\n\tFum.prototype = new Fo();\n\nLater on down the road, if you instantiate Fum and need to check if Fi's prototype exists within the Fum prototype chain, you could do this:\n\n\tvar fum = new Fum();\n\t. . .\n\t\n\tif (Fi.prototype.isPrototypeOf(fum)) {\n\t  // do something safe\n\t}\nThis, along with the instanceof operator particularly comes in handy if you have code that can only function when dealing with objects descended from a specific prototype chain, e.g., to guarantee that certain methods or properties will be present on that object.",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{Object}",
                            "name": "obj",
                            "text": "the object whose prototype chain will be searched",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        29940,
                        31231
                    ],
                    "fileName": "ALL.js"
                },
                "propertyIsEnumerable": {
                    "annotation": "method",
                    "name": "propertyIsEnumerable",
                    "text": "##Summary\nThe propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable.\n\n##Description\nEvery object has a propertyIsEnumerable method. This method can determine whether the specified property in an object can be enumerated by a for...in loop, with the exception of properties inherited through the prototype chain. If the object does not have the specified property, this method returns false.\n\n##Examples\n###Example: A basic use of propertyIsEnumerable\n\nThe following example shows the use of propertyIsEnumerable on objects and arrays:\n\n\tvar o = {};\n\tvar a = [];\n\to.prop = 'is enumerable';\n\ta[0] = 'is enumerable';\n\n\to.propertyIsEnumerable('prop');   // returns true\n\ta.propertyIsEnumerable(0);        // returns true\n\n###Example: User-defined versus built-in objects\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n\tvar a = ['is enumerable'];\n\n\ta.propertyIsEnumerable(0);          // returns true\n\ta.propertyIsEnumerable('length');   // returns false\n\n\tMath.propertyIsEnumerable('random');   // returns false\n\tthis.propertyIsEnumerable('Math');     // returns false\n\tExample: Direct versus inherited properties\n\n\tvar a = [];\n\ta.propertyIsEnumerable('constructor');         // returns false\n\n\tfunction firstConstructor() {\n\t  this.property = 'is not enumerable';\n\t}\n\n\tfirstConstructor.prototype.firstMethod = function () {};\n\n\tfunction secondConstructor() {\n\t  this.method = function method() { return 'is enumerable'; };\n\t}\n\n\tsecondConstructor.prototype = new firstConstructor;\n\tsecondConstructor.prototype.constructor = secondConstructor;\n\n\tvar o = new secondConstructor();\n\to.arbitraryProperty = 'is enumerable';\n\n\to.propertyIsEnumerable('arbitraryProperty');   // returns true\n\to.propertyIsEnumerable('method');              // returns true\n\to.propertyIsEnumerable('property');            // returns false\n\n\to.property = 'is enumerable';\n\n\to.propertyIsEnumerable('property');            // returns true\n\n\t// These return false as they are on the prototype which \n\t// propertyIsEnumerable does not consider (even though the last two\n\t// are iteratable with for-in)\n\to.propertyIsEnumerable('prototype');   // returns false (as of JS 1.8.1/FF3.6)\n\to.propertyIsEnumerable('constructor'); // returns false\n\to.propertyIsEnumerable('firstMethod'); // returns false",
                    "children": [
                        {
                            "annotation": "param",
                            "name": "prop",
                            "text": "The name of the property to test.",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        31237,
                        33680
                    ],
                    "fileName": "ALL.js"
                },
                "toLocaleString": {
                    "annotation": "method",
                    "name": "toLocaleString",
                    "text": "##Summary\nThe toLocaleString() method returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.\n\n##Syntax\nobj.toLocaleString();\n##Description\nObject's toLocaleString returns the result of calling toString().\n\nThis function is provided to give objects a generic toLocaleString method, even though not all may use it. See the list below.\n\n##Objects overriding toLocaleString\n\nArray: Array.prototype.toLocaleString()\nNumber: Number.prototype.toLocaleString()\nDate: Date.prototype.toLocaleString()",
                    "commentRange": [
                        33685,
                        34277
                    ],
                    "fileName": "ALL.js"
                },
                "toString": {
                    "annotation": "method",
                    "name": "toString",
                    "text": "##Summary\nThe toString() method returns a string representing object.\n\n##Syntax\nobj.toString()\n##Description\nEvery object has a toString() method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the toString() method is inherited by every object descended from Object. If this method is not overridden in a custom object, toString() returns \"[object type]\", where type is the object type. The following code illustrates this:\n\nvar o = new Object();\no.toString();           // returns [object Object]\nStarting in JavaScript 1.8.5 toString() called on null returns [object Null], and undefined returns [object Undefined], as defined in the 5th Edition of ECMAScript and a subsequent Errata. See Using toString to detect object type.\n##Examples\n###Overriding the default toString method\n\nYou can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object.\n\nThe following code defines the Dog object type and creates theDog, an object of type Dog:\n\n\tfunction Dog(name,breed,color,sex) {\n\t   this.name=name;\n\t   this.breed=breed;\n\t   this.color=color;\n\t   this.sex=sex;\n\t}\n\n\ttheDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\nIf you call the toString() method on this custom object, it returns the default value inherited from Object:\n\n\ttheDog.toString(); //returns [object Object]\n\tThe following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form \"property = value;\".\n\n\tDog.prototype.toString = function dogToString() {\n\t  var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n\t  return ret;\n\t}\nWith the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:\n\nDog Gabby is a female chocolate Lab\nUsing toString() to detect object class\n\ntoString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg.\n\n\tvar toString = Object.prototype.toString;\n\n\ttoString.call(new Date); // [object Date]\n\ttoString.call(new String); // [object String]\n\ttoString.call(Math); // [object Math]\n\n\t//Since JavaScript 1.8.5\n\ttoString.call(undefined); // [object Undefined]\n\ttoString.call(null); // [object Null]",
                    "commentRange": [
                        34283,
                        37135
                    ],
                    "fileName": "ALL.js"
                }
            }
        },
        "javascript.ObjectPrototype": {
            "annotation": "class",
            "name": "ObjectPrototype",
            "text": "Adapted from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\n\nThe Object.prototype property represents the Object prototype object.\n\nAll objects in JavaScript are descended from Object; all objects inherit methods and properties from Object.prototype, although they may be overridden (except an Object with a null prototype, i.e. Object.create(null)). For example, other constructors' prototypes override the constructor property and provide their own toString() methods. Changes to the Object prototype object are propagated to all objects unless the properties and methods subject to those changes are overridden further along the prototype chain.",
            "commentRange": [
                37137,
                37891
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "javascript",
                "text": "",
                "commentRange": [
                    37137,
                    37891
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "javascript.ObjectPrototype",
            "properties": {
                "constructor": {
                    "annotation": "property",
                    "type": "{Function}",
                    "name": "constructor",
                    "text": "Specifies the function that creates an object's prototype.\n\n##Summary\nReturns a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name. The value is only read-only for primitive values such as 1, true and \"test\".\n\n##Description\n\nAll objects inherit a constructor property from their prototype:\n\n\tvar o = {};\n\to.constructor === Object; // true\n\n\tvar a = [];\n\ta.constructor === Array; // true\n\n\tvar n = new Number(3);\n\tn.constructor === Number; // true\n\n##Examples\n\n###Example: Displaying the constructor of an object\n\nThe following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.\n\n\tfunction Tree(name) {\n\t  this.name = name;\n\t}\n\n\tvar theTree = new Tree('Redwood');\n\tconsole.log('theTree.constructor is ' + theTree.constructor);\n\tThis example displays the following output:\n\n\ttheTree.constructor is function Tree(name) {\n\t  this.name = name;\n\t}\n\n###Example: Changing the constructor of an object\n\nThe following example shows how to modify constructor value of generic objects. Only true, 1 and \"test\" will not be affected as they have read-only native constructors. This example shows that it is not always safe to rely on the constructor property of an object.\n\n\tfunction Type () {}\n\n\tvar types = [\n\t  new Array(),\n\t  [],\n\t  new Boolean(),\n\t  true,             // remains unchanged\n\t  new Date(),\n\t  new Error(),\n\t  new Function(),\n\t  function () {},\n\t  Math,\n\t  new Number(),\n\t  1,                // remains unchanged\n\t  new Object(),\n\t  {},\n\t  new RegExp(),\n\t  /(?:)/,\n\t  new String(),\n\t  'test'            // remains unchanged\n\t];\n\tfor (var i = 0; i < types.length; i++) {\n\t  types[i].constructor = Type;\n\t  types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n\t}\n\tconsole.log(types.join('\\n'));\n\tThis example displays the following output:\n\n\tfunction Type() {},false,\n\tfunction Type() {},false,\n\tfunction Type() {},false,false\n\tfunction Boolean() {\n\t    [native code]\n\t},false,true\n\tfunction Type() {},false,Mon Sep 01 2014 16:03:49 GMT+0600\n\tfunction Type() {},false,Error\n\tfunction Type() {},false,function anonymous() {\n\n\t}\n\tfunction Type() {},false,function () {}\n\tfunction Type() {},false,[object Math]\n\tfunction Type() {},false,0\n\tfunction Number() {\n\t    [native code]\n\t},false,1\n\tfunction Type() {},false,[object Object]\n\tfunction Type() {},false,[object Object]\n\tfunction Type() {},false,/(?:)/\n\tfunction Type() {},false,/(?:)/\n\tfunction Type() {},false,\n\tfunction String() {\n\t    [native code]\n\t},false,тест",
                    "commentRange": [
                        37895,
                        40623
                    ],
                    "fileName": "ALL.js"
                },
                "__noSuchMethod__": {
                    "annotation": "property",
                    "type": "{Function}",
                    "name": "__noSuchMethod__",
                    "text": "Allows a function to be defined that will be executed when an undefined object member is called as a method.",
                    "commentRange": [
                        40631,
                        40898
                    ],
                    "fileName": "ALL.js"
                }
            },
            "methods": {
                "__defineGetter__": {
                    "annotation": "method",
                    "name": "__defineGetter__",
                    "text": "()  \nAssociates a function with a property that, when accessed, executes that function and returns its return value.",
                    "commentRange": [
                        40904,
                        41050
                    ],
                    "fileName": "ALL.js"
                },
                "hasOwnProperty": {
                    "annotation": "method",
                    "name": "hasOwnProperty",
                    "text": "##Summary\nThe hasOwnProperty() method returns a boolean indicating whether the object has the specified property.\n\n##Syntax\nobj.hasOwnProperty(prop)\n\n##Examples\n###Example: Using hasOwnProperty to test for a property's existence\n\nThe following example determines whether the o object contains a property named prop:\n\n\to = new Object();\n\to.prop = 'exists';\n\n\tfunction changeO() {\n\t  o.newprop = o.prop;\n\t  delete o.prop;\n\t}\n\n\to.hasOwnProperty('prop');   // returns true\n\tchangeO();\n\to.hasOwnProperty('prop');   // returns false\n\n###Example: Direct versus inherited properties\n\nThe following example differentiates between direct properties and properties inherited through the prototype chain:\n\n\to = new Object();\n\to.prop = 'exists';\n\to.hasOwnProperty('prop');             // returns true\n\to.hasOwnProperty('toString');         // returns false\n\to.hasOwnProperty('hasOwnProperty');   // returns false\n\n##Example: Iterating over the properties of an object\n\nThe following example shows how to iterate over the properties of an object without executing on inherit properties. Note that the for..in loop is already only iterating enumerable items, so one should not assume based on the lack of non-enumerable properties shown in the loop that hasOwnProperty itself is confined strictly to enumerable items (as with Object.getOwnPropertyNames()).\n\n\tvar buz = {\n\t    fog: 'stack'\n\t};\n\n\tfor (var name in buz) {\n\t    if (buz.hasOwnProperty(name)) {\n\t        alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n\t    }\n\t    else {\n\t        alert(name); // toString or something else\n\t    }\n\t}\n\n###Example: hasOwnProperty as a property\n\nJavaScript does not protect the property name hasOwnProperty; thus, if the possibility exists that an object might have a property with this name, it is necessary to use an external hasOwnProperty to get correct results:\n\n\tvar foo = {\n\t    hasOwnProperty: function() {\n\t        return false;\n\t    },\n\t    bar: 'Here be dragons'\n\t};\n\n\tfoo.hasOwnProperty('bar'); // always returns false\n\n\t// Use another Object's hasOwnProperty and call it with 'this' set to foo\n\t({}).hasOwnProperty.call(foo, 'bar'); // true\n\n\t// It's also possible to use the hasOwnProperty property from the Object property for this purpose\n\tObject.prototype.hasOwnProperty.call(foo, 'bar'); // true\n\nNote that in the last case there are no newly created objects.",
                    "children": [
                        {
                            "annotation": "param",
                            "name": "param",
                            "text": "The name of the property to test.",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        41062,
                        43512
                    ],
                    "fileName": "ALL.js"
                },
                "isPrototypeOf": {
                    "annotation": "method",
                    "name": "isPrototypeOf",
                    "text": "##Summary\nThe isPrototypeOf() method tests for an object in another object's prototype chain.\n\n\tNote: isPrototypeOf differs from the instanceof operator. In the expression \"object instanceof AFunction\", the object prototype chain is checked against AFunction.prototype, not against AFunction itself.\n\nThe isPrototypeOf method allows you to check whether or not an object exists within another object's prototype chain.\n\nFor example, consider the following prototype chain:\n\n\tfunction Fee() {\n\t  // . . .\n\t}\n\n\tfunction Fi() {\n\t  // . . .\n\t}\n\tFi.prototype = new Fee();\n\n\tfunction Fo() {\n\t  // . . .\n\t}\n\tFo.prototype = new Fi();\n\n\tfunction Fum() {\n\t  // . . .\n\t}\n\tFum.prototype = new Fo();\n\nLater on down the road, if you instantiate Fum and need to check if Fi's prototype exists within the Fum prototype chain, you could do this:\n\n\tvar fum = new Fum();\n\t. . .\n\t\n\tif (Fi.prototype.isPrototypeOf(fum)) {\n\t  // do something safe\n\t}\nThis, along with the instanceof operator particularly comes in handy if you have code that can only function when dealing with objects descended from a specific prototype chain, e.g., to guarantee that certain methods or properties will be present on that object.",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{Object}",
                            "name": "obj",
                            "text": "the object whose prototype chain will be searched",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        43521,
                        44812
                    ],
                    "fileName": "ALL.js"
                },
                "propertyIsEnumerable": {
                    "annotation": "method",
                    "name": "propertyIsEnumerable",
                    "text": "##Summary\nThe propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable.\n\n##Description\nEvery object has a propertyIsEnumerable method. This method can determine whether the specified property in an object can be enumerated by a for...in loop, with the exception of properties inherited through the prototype chain. If the object does not have the specified property, this method returns false.\n\n##Examples\n###Example: A basic use of propertyIsEnumerable\n\nThe following example shows the use of propertyIsEnumerable on objects and arrays:\n\n\tvar o = {};\n\tvar a = [];\n\to.prop = 'is enumerable';\n\ta[0] = 'is enumerable';\n\n\to.propertyIsEnumerable('prop');   // returns true\n\ta.propertyIsEnumerable(0);        // returns true\n\n###Example: User-defined versus built-in objects\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n\tvar a = ['is enumerable'];\n\n\ta.propertyIsEnumerable(0);          // returns true\n\ta.propertyIsEnumerable('length');   // returns false\n\n\tMath.propertyIsEnumerable('random');   // returns false\n\tthis.propertyIsEnumerable('Math');     // returns false\n\tExample: Direct versus inherited properties\n\n\tvar a = [];\n\ta.propertyIsEnumerable('constructor');         // returns false\n\n\tfunction firstConstructor() {\n\t  this.property = 'is not enumerable';\n\t}\n\n\tfirstConstructor.prototype.firstMethod = function () {};\n\n\tfunction secondConstructor() {\n\t  this.method = function method() { return 'is enumerable'; };\n\t}\n\n\tsecondConstructor.prototype = new firstConstructor;\n\tsecondConstructor.prototype.constructor = secondConstructor;\n\n\tvar o = new secondConstructor();\n\to.arbitraryProperty = 'is enumerable';\n\n\to.propertyIsEnumerable('arbitraryProperty');   // returns true\n\to.propertyIsEnumerable('method');              // returns true\n\to.propertyIsEnumerable('property');            // returns false\n\n\to.property = 'is enumerable';\n\n\to.propertyIsEnumerable('property');            // returns true\n\n\t// These return false as they are on the prototype which \n\t// propertyIsEnumerable does not consider (even though the last two\n\t// are iteratable with for-in)\n\to.propertyIsEnumerable('prototype');   // returns false (as of JS 1.8.1/FF3.6)\n\to.propertyIsEnumerable('constructor'); // returns false\n\to.propertyIsEnumerable('firstMethod'); // returns false",
                    "children": [
                        {
                            "annotation": "param",
                            "name": "prop",
                            "text": "The name of the property to test.",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        44818,
                        47261
                    ],
                    "fileName": "ALL.js"
                },
                "toLocaleString": {
                    "annotation": "method",
                    "name": "toLocaleString",
                    "text": "##Summary\nThe toLocaleString() method returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.\n\n##Syntax\nobj.toLocaleString();\n##Description\nObject's toLocaleString returns the result of calling toString().\n\nThis function is provided to give objects a generic toLocaleString method, even though not all may use it. See the list below.\n\n##Objects overriding toLocaleString\n\nArray: Array.prototype.toLocaleString()\nNumber: Number.prototype.toLocaleString()\nDate: Date.prototype.toLocaleString()",
                    "commentRange": [
                        47266,
                        47858
                    ],
                    "fileName": "ALL.js"
                },
                "toString": {
                    "annotation": "method",
                    "name": "toString",
                    "text": "##Summary\nThe toString() method returns a string representing object.\n\n##Syntax\nobj.toString()\n##Description\nEvery object has a toString() method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the toString() method is inherited by every object descended from Object. If this method is not overridden in a custom object, toString() returns \"[object type]\", where type is the object type. The following code illustrates this:\n\nvar o = new Object();\no.toString();           // returns [object Object]\nStarting in JavaScript 1.8.5 toString() called on null returns [object Null], and undefined returns [object Undefined], as defined in the 5th Edition of ECMAScript and a subsequent Errata. See Using toString to detect object type.\n##Examples\n###Overriding the default toString method\n\nYou can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object.\n\nThe following code defines the Dog object type and creates theDog, an object of type Dog:\n\n\tfunction Dog(name,breed,color,sex) {\n\t   this.name=name;\n\t   this.breed=breed;\n\t   this.color=color;\n\t   this.sex=sex;\n\t}\n\n\ttheDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\nIf you call the toString() method on this custom object, it returns the default value inherited from Object:\n\n\ttheDog.toString(); //returns [object Object]\n\tThe following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form \"property = value;\".\n\n\tDog.prototype.toString = function dogToString() {\n\t  var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n\t  return ret;\n\t}\nWith the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:\n\nDog Gabby is a female chocolate Lab\nUsing toString() to detect object class\n\ntoString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg.\n\n\tvar toString = Object.prototype.toString;\n\n\ttoString.call(new Date); // [object Date]\n\ttoString.call(new String); // [object String]\n\ttoString.call(Math); // [object Math]\n\n\t//Since JavaScript 1.8.5\n\ttoString.call(undefined); // [object Undefined]\n\ttoString.call(null); // [object Null]",
                    "commentRange": [
                        47864,
                        50716
                    ],
                    "fileName": "ALL.js"
                }
            }
        }
    },
    "modules": {
        "ideal": {
            "annotation": "module",
            "name": "ideal",
            "text": "",
            "commentRange": [
                0,
                36
            ],
            "fileName": "ALL.js"
        },
        "Problems": {
            "annotation": "module",
            "name": "Problems",
            "text": "",
            "commentRange": [
                1450,
                1819
            ],
            "fileName": "ALL.js"
        },
        "life": {
            "annotation": "module",
            "name": "life",
            "text": "",
            "commentRange": [
                1450,
                1819
            ],
            "fileName": "ALL.js"
        },
        "problem1": {
            "annotation": "module",
            "name": "problem1",
            "text": "This is a description of planet earth city from the point of view of an alien observing us from a space ship.",
            "commentRange": [
                2211,
                2565
            ],
            "fileName": "ALL.js"
        },
        "shortjsdoc": {
            "annotation": "module",
            "name": "shortjsdoc",
            "text": "",
            "commentRange": [
                4254,
                4337
            ],
            "fileName": "ALL.js"
        },
        "Backbone": {
            "annotation": "module",
            "name": "Backbone",
            "text": "",
            "commentRange": [
                22953,
                23187
            ],
            "fileName": "ALL.js"
        },
        "jQuery": {
            "annotation": "module",
            "name": "jQuery",
            "text": "",
            "commentRange": [
                22953,
                23187
            ],
            "fileName": "ALL.js"
        },
        "javascript": {
            "annotation": "module",
            "name": "javascript",
            "text": "",
            "commentRange": [
                23189,
                23378
            ],
            "fileName": "ALL.js"
        }
    }
}
