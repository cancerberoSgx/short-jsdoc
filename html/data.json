{"source":"\n//@module Backbone\n\n/*\n@class BackboneEvents\n\nEvents is a module that can be mixed in to any object, giving the object the ability to bind and trigger custom named events. Events do not have to be declared before they are bound, and may take passed arguments. For example:\n\n\tvar object = {};\n\n\t_.extend(object, Backbone.Events);\n\n\tobject.on(\"alert\", function(msg) {\n\t  alert(\"Triggered \" + msg);\n\t});\n\n\tobject.trigger(\"alert\", \"an event\");\n\t\nFor example, to make a handy event dispatcher that can coordinate events among different areas of your application: var dispatcher = _.clone(Backbone.Events)\n\n\n#Catalog of Events \nHere's the complete list of built-in Backbone events, with arguments. You're also free to trigger your own events on Models, Collections and Views as you see fit. The Backbone object itself mixes in Events, and can be used to emit any global events that your application needs.\n\n\t\"add\" (model, collection, options) — when a model is added to a collection.\n\t\"remove\" (model, collection, options) — when a model is removed from a collection.\n\t\"reset\" (collection, options) — when the collection's entire contents have been replaced.\n\t\"sort\" (collection, options) — when the collection has been re-sorted.\n\t\"change\" (model, options) — when a model's attributes have changed.\n\t\"change:[attribute]\" (model, value, options) — when a specific attribute has been updated.\n\t\"destroy\" (model, collection, options) — when a model is destroyed.\n\t\"request\" (model_or_collection, xhr, options) — when a model or collection has started a request to the server.\n\t\"sync\" (model_or_collection, resp, options) — when a model or collection has been successfully synced with the server.\n\t\"error\" (model_or_collection, resp, options) — when model's or collection's request to remote server has failed.\n\t\"invalid\" (model, error, options) — when a model's validation fails on the client.\n\t\"route:[name]\" (params) — Fired by the router when a specific route is matched.\n\t\"route\" (route, params) — Fired by the router when any route has been matched.\n\t\"route\" (router, route, params) — Fired by history when any route has been matched.\n\t\"all\" — this special event fires for any triggered event, passing the event name as the first argument.\nGenerally speaking, when calling a function that emits an event (model.set, collection.add, and so on...), if you'd like to prevent the event from being triggered, you may pass {silent: true} as an option. Note that this is rarely, perhaps even never, a good idea. Passing through a specific flag in the options for your event callback to look at, and choose to ignore, will usually work out better.\n\n\n*/\n\n\n\n/*\n@method bind\n\nAlias on\n\nBind a callback function to an object. The callback will be invoked whenever the event is fired. If you have a large number of different events on a page, the convention is to use colons to namespace them: \"poll:start\", or \"change:selection\". The event string may also be a space-delimited list of several events...\n\n\tbook.on(\"change:title change:author\", ...);\n\nTo supply a context value for this when the callback is invoked, pass the optional third argument: model.on('change', this.render, this)\n\nCallbacks bound to the special \"all\" event will be triggered when any event occurs, and are passed the name of the event as the first argument. For example, to proxy all events from one object to another:\n\n\tproxy.on(\"all\", function(eventName) {\n\t  object.trigger(eventName);\n\t});\nAll Backbone event methods also support an event map syntax, as an alternative to positional arguments:\n\n\tbook.on({\n\t  \"change:title\": titleView.update,\n\t  \"change:author\": authorPane.update,\n\t  \"destroy\": bookView.remove\n\t});\n\n@param {String} event\n@param {Function} callback\n@param {Object} context optional\n*/\n\n\n\n/*\n@method off\nRemove a previously-bound callback function from an object. If no context is specified, all of the versions of the callback with different contexts will be removed. If no callback is specified, all callbacks for the event will be removed. If no event is specified, callbacks for all events will be removed.\n\n\t// Removes just the `onChange` callback.\n\tobject.off(\"change\", onChange);\n\n\t// Removes all \"change\" callbacks.\n\tobject.off(\"change\");\n\n\t// Removes the `onChange` callback for all events.\n\tobject.off(null, onChange);\n\n\t// Removes all callbacks for `context` for all events.\n\tobject.off(null, null, context);\n\n\t// Removes all callbacks on `object`.\n\tobject.off();\nNote that calling model.off(), for example, will indeed remove all events on the model — including events that Backbone uses for internal bookkeeping.\n*/\n\n\n\n/*@method trigger\nTrigger callbacks for the given event, or space-delimited list of events. Subsequent arguments to trigger will be passed along to the event callbacks.\n*/\n\n\n\n/*@method once\nJust like on, but causes the bound callback to only fire once before being removed. Handy for saying \"the next time that X happens, do this\".\n@param {String}event\n@param {Function} callback\n*/\n\n\n/*\n@method listenTo\n\nTell an object to listen to a particular event on an other object. The advantage of using this form, instead of other.on(event, callback, object), is that listenTo allows the object to keep track of the events, and they can be removed all at once later on. The callback will always be called with object as context.\n\n\tview.listenTo(model, 'change', view.render);\n\n@param {BackboneEvents} other\n@param {String} event\n@param {Function} calback\n*/\n\n\n\n/*\n@method stopListening\n\nTell an object to stop listening to events. Either call stopListening with no arguments to have the object remove all of its registered callbacks ... or be more precise by telling it to remove just the events it's listening to on a specific object, or a specific event, or just a specific callback.\n\n\tview.stopListening();\n\n\tview.stopListening(model);\n\n\n@param {BackboneEvents} other optional\n@param {String} event optional\n@param {Function} calback optional\n\n*/\n\n\n/*@method listenToOnce\nJust like listenTo, but causes the bound callback to only fire once before being removed.\n*/\n\n/*\n@module Backbone\n@class BackboneModel\n\n\nModels are the heart of any JavaScript application, containing the interactive data as well as a large part of the logic surrounding it: conversions, validations, computed properties, and access control. You extend Backbone.Model with your domain-specific methods, and Model provides a basic set of functionality for managing changes.\n\nThe following is a contrived example, but it demonstrates defining a model with a custom method, setting an attribute, and firing an event keyed to changes in that specific attribute. After running this code once, sidebar will be available in your browser's console, so you can play around with it.\n\n\tvar Sidebar = Backbone.Model.extend({\n\t  promptColor: function() {\n\t    var cssColor = prompt(\"Please enter a CSS color:\");\n\t    this.set({color: cssColor});\n\t  }\n\t});\n\n\twindow.sidebar = new Sidebar;\n\n\tsidebar.on('change:color', function(model, color) {\n\t  $('#sidebar').css({background: color});\n\t});\n\n\tsidebar.set({color: 'white'});\n\n\tsidebar.promptColor();\n\n*/\n\n\n\n\n/*\n@method extend\n\nTo create a Model class of your own, you extend Backbone.Model and provide instance properties, as well as optional classProperties to be attached directly to the constructor function.\n\nextend correctly sets up the prototype chain, so subclasses created with extend can be further extended and subclassed as far as you like.\n\n\tvar Note = Backbone.Model.extend({\n\n\t  initialize: function() { ... },\n\n\t  author: function() { ... },\n\n\t  coordinates: function() { ... },\n\n\t  allowedToEdit: function(account) {\n\t    return true;\n\t  }\n\n\t});\n\n\tvar PrivateNote = Note.extend({\n\n\t  allowedToEdit: function(account) {\n\t    return account.owns(this);\n\t  }\n\n\t});\n\n#super\n\nBrief aside on super: JavaScript does not provide a simple way to call super — the function of the same name defined higher on the prototype chain. If you override a core function like set, or save, and you want to invoke the parent object's implementation, you'll have to explicitly call it, along these lines:\n\n\tvar Note = Backbone.Model.extend({\n\t  set: function(attributes, options) {\n\t    Backbone.Model.prototype.set.apply(this, arguments);\n\t    ...\n\t  }\n\t});\n\n\n\n@static\n@param {Object} properties\n@param {Object} classProperties\n*/\n\n\n\n/*\n@method initialize\n\nUse like this:\n\n\tnew Model([attributes], [options]) \n\nWhen creating an instance of a model, you can pass in the initial values of the attributes, which will be set on the model. If you define an initialize function, it will be invoked when the model is created.\n\n\tnew Book({\n\t  title: \"One Thousand and One Nights\",\n\t  author: \"Scheherazade\"\n\t});\nIn rare cases, if you're looking to get fancy, you may want to override constructor, which allows you to replace the actual constructor function for your model.\n\n\tvar Library = Backbone.Model.extend({\n\t  constructor: function() {\n\t    this.books = new Books();\n\t    Backbone.Model.apply(this, arguments);\n\t  },\n\t  parse: function(data, options) {\n\t    this.books.reset(data.books);\n\t    return data.library;\n\t  }\n\t});\nIf you pass a {collection: ...} as the options, the model gains a collection property that will be used to indicate which collection the model belongs to, and is used to help compute the model's url. The model.collection property is normally created automatically when you first add a model to a collection. Note that the reverse is not true, as passing this option to the constructor will not automatically add the model to the collection. Useful, sometimes.\n\nIf {parse: true} is passed as an option, the attributes will first be converted by parse before being set on the model.\n\n*/\n\n\n\n/*@method get\nGet the current value of an attribute from the model. For example: note.get(\"title\")\n@param {String} name the property name to get\n@returns {Any} the value of the property\n*/\n\n/*\n@method set\n\nSet a hash of attributes (one or many) on the model. If any of the attributes change the model's state, a \"change\" event will be triggered on the model. Change events for specific attributes are also triggered, and you can bind to those as well, for example: change:title, and change:content. You may also pass individual keys and values.\n\n\tnote.set({title: \"March 20\", content: \"In his eyes she eclipses...\"});\n\n\tbook.set(\"title\", \"A Scandal in Bohemia\");\n\n@param {String} name\n@param {Any} value\n*/\n\n\n\n/*\n@method escape\n\nSimilar to get, but returns the HTML-escaped version of a model's attribute. If you're interpolating data from the model into HTML, using escape to retrieve attributes will prevent XSS attacks.\n\n\tvar hacker = new Backbone.Model({\n\t  name: \"<script>alert('xss')</script>\"\n\t});\n\n\talert(hacker.escape('name'));\n*/\n\n\n/*\n@method has\nReturns true if the attribute is set to a non-null or non-undefined value.\n\n\tif (note.has(\"title\")) {\n\t  ...\n\t}\n\n@param {String} name\n*/\n\n\n/*\n@method unset\nRemove an attribute by deleting it from the internal attributes hash. Fires a \"change\" event unless silent is passed as an option.\n@param {String}attribute\n*/\n\n\n\n/*\n@module Backbone\n\n#About\nBackbone.js gives structure to web applications by providing models with key-value binding and custom events, collections with a rich API of enumerable functions, views with declarative event handling, and connects it all to your existing API over a RESTful JSON interface.\n\nThe project is hosted on GitHub, and the annotated source code is available, as well as an online test suite, an example application, a list of tutorials and a long list of real-world projects that use Backbone. Backbone is available for use under the MIT software license.\n\nYou can report bugs and discuss features on the GitHub issues page, on Freenode IRC in the #documentcloud channel, post questions to the Google Group, add pages to the wiki or send tweets to @documentcloud.\n\nBackbone is an open-source component of DocumentCloud.\n\n#Dependencies\nBackbone's only hard dependency is Underscore.js ( >= 1.5.0). For RESTful persistence, history support via Backbone.Router and DOM manipulation with Backbone.View, include jQuery, and json2.js for older Internet Explorer support. (Mimics of the Underscore and jQuery APIs, such as Lo-Dash and Zepto, will also tend to work, with varying degrees of compatibility.)\n\n#Introduction\n\nWhen working on a web application that involves a lot of JavaScript, one of the first things you learn is to stop tying your data to the DOM. It's all too easy to create JavaScript applications that end up as tangled piles of jQuery selectors and callbacks, all trying frantically to keep data in sync between the HTML UI, your JavaScript logic, and the database on your server. For rich client-side applications, a more structured approach is often helpful.\n\nWith Backbone, you represent your data as Models, which can be created, validated, destroyed, and saved to the server. Whenever a UI action causes an attribute of a model to change, the model triggers a \"change\" event; all the Views that display the model's state can be notified of the change, so that they are able to respond accordingly, re-rendering themselves with the new information. In a finished Backbone app, you don't have to write the glue code that looks into the DOM to find an element with a specific id, and update the HTML manually — when the model changes, the views simply update themselves.\n\nPhilosophically, Backbone is an attempt to discover the minimal set of data-structuring (models and collections) and user interface (views and URLs) primitives that are generally useful when building web applications with JavaScript. In an ecosystem where overarching, decides-everything-for-you frameworks are commonplace, and many libraries require your site to be reorganized to suit their look, feel, and default behavior — Backbone should continue to be a tool that gives you the freedom to design the full experience of your web application.\n\nIf you're new here, and aren't yet quite sure what Backbone is for, start by browsing the list of Backbone-based projects.\n\n*/\n\n//@class BackboneView\n//@property {jQuery} $el\n//@property {jQuery} $\n//@property {HTMLElement} el\n//@method render\n\n//@class BackboneRouter\n//@class BackboneModel\n\n/*\n@module javascript\n@class Boolean\n\n#Summary\nThe Boolean object is an object wrapper for a boolean value.\n\n#Constructor\n\tnew Boolean(value)\n\n#Description\nThe value passed as the first parameter is converted to a boolean value, if necessary. If value is omitted or is 0, -0, null, false, NaN, undefined, or the empty string (\"\"), the object has an initial value of false. All other values, including any object or the string \"false\", create an object with an initial value of true.\n\nDo not confuse the primitive Boolean values true and false with the true and false values of the Boolean object.\n\nAny object whose value is not undefined or null, including a Boolean object whose value is false, evaluates to true when passed to a conditional statement. For example, the condition in the following if statement evaluates to true:\n\n\tx = new Boolean(false);\n\tif (x) {\n\t  // . . . this code is executed\n\t}\n\tThis behavior does not apply to Boolean primitives. For example, the condition in the following if statement evaluates to false:\n\n\tx = false;\n\tif (x) {\n\t  // . . . this code is not executed\n\t}\nDo not use a Boolean object to convert a non-boolean value to a boolean value. Instead, use Boolean as a function to perform this task:\n\n\tx = Boolean(expression);     // preferred\n\tx = new Boolean(expression); // don't use\n\tIf you specify any object, including a Boolean object whose value is false, as the initial value of a Boolean object, the new Boolean object has a value of true.\n\n\tmyFalse = new Boolean(false);   // initial value of false\n\tg = new Boolean(myFalse);       // initial value of true\n\tmyString = new String(\"Hello\"); // string object\n\ts = new Boolean(myString);      // initial value of true\n\tDo not use a Boolean object in place of a Boolean primitive.\n\n#Properties\nFor properties available on Boolean instances, see Properties of Boolean instances.\n\nBoolean.length\nLength property whose value is 1.\nBoolean.prototype\nRepresents the prototype for the Boolean constructor.\n#Properties inherited from Function:\narity, caller, constructor, length, name\n##Methods\nFor methods available on Boolean instances, see Methods of Boolean instances.\n\nThe global Boolean object contains no methods of its own, however, it does inherit some methods through the prototype chain:\n\n#Methods inherited from Function:\napply, call, toSource, toString\n\n#Boolean instances\nAll Boolean instances inherit from Boolean.prototype. As with all constructors, the prototype object dictates instances' inherited properties and methods.\n\n#Properties\n\nBoolean.prototype.constructor\nReturns the function that created an instance's prototype. This is the Boolean function by default.\nProperties inherited from Object:\n__parent__, __proto__\n#Methods\n\nBoolean.prototype.toSource() \nReturns a string containing the source of the Boolean object; you can use this string to create an equivalent object. Overrides the Object.prototype.toSource() method.\nBoolean.prototype.toString()\nReturns a string of either \"true\" or \"false\" depending upon the value of the object. Overrides the Object.prototype.toString() method.\nBoolean.prototype.valueOf()\nReturns the primitive value of the Boolean object. Overrides the Object.prototype.valueOf() method.\n\n\n#Examples\nCreating Boolean objects with an initial value of false\n\n\tvar bNoParam = new Boolean();\n\tvar bZero = new Boolean(0);\n\tvar bNull = new Boolean(null);\n\tvar bEmptyString = new Boolean(\"\");\n\tvar bfalse = new Boolean(false);\n\tCreating Boolean objects with an initial value of true\n\n\tvar btrue = new Boolean(true);\n\tvar btrueString = new Boolean(\"true\");\n\tvar bfalseString = new Boolean(\"false\");\n\tvar bSuLin = new Boolean(\"Su Lin\");\n\n\n*/\n\n\n/*\n@method valueOf\n#Summary\nThe valueOf() method returns the primitive value of a Boolean object.\n\n#Syntax\n\tbool.valueOf()\n\n#Description\nThe valueOf method of Boolean returns the primitive value of a Boolean object or literal Boolean as a Boolean data type.\n\nThis method is usually called internally by JavaScript and not explicitly in code.\n\n#Examples\n##Example: Using valueOf\n\n\tx = new Boolean();\n\tmyVar = x.valueOf()      // assigns false to myVar\n*/\n\n/*\n@module javascript\n@class Error\n\n#Summary\nThe Error constructor creates an error object. Instances of Error objects are thrown when runtime errors occur. The Error object can also be used as a base objects for user-defined exceptions. See below for standard built-in error types.\n\n#Syntax\n\tnew Error([message[, fileName[,lineNumber]]])\n#Description\nRuntime errors result in new Error objects being created and thrown.\n\nThis page documents the use of the Error object itself and its use as a constructor function. For a list of properties and methods inherited by Error instances, see Error.prototype.\n\n#Error types\n\nBesides the generic Error constructor, there are six other core error constructors in JavaScript. For client-side exceptions, see Exception Handling Statements.\n\n\tEvalError\n\tCreates an instance representing an error that occurs regarding the global function eval().\n\tInternalError \n\tCreates an instance representing an error that occurs when an internal error in the JavaScript engine is thrown. E.g. \"too much recursion\".\n\tRangeError\n\tCreates an instance representing an error that occurs when a numeric variable or parameter is outside of its valid range.\n\tReferenceError\n\tCreates an instance representing an error that occurs when de-referencing an invalid reference.\n\tSyntaxError\n\tCreates an instance representing a syntax error that occurs while parsing code in eval().\n\tTypeError\n\tCreates an instance representing an error that occurs when a variable or parameter is not of a valid type.\n\tURIError\n\tCreates an instance representing an error that occurs when encodeURI() or decodeURl() are passed invalid parameters.\n\n#Properties\nError.prototype\nAllows the addition of properties to Error instances.\n#Methods\nThe global Error object contains no methods of its own, however, it does inherit some methods through the prototype chain.\n\n#Error instances\nAll Error instances and instances of non-generic errors inherit from Error.prototype. As with all constructor functions, you can use the prototype of the constructor to add properties or methods to all instances created with that constructor.\n\n#Properties\n\n##Standard properties\n\nError.prototype.constructor\nSpecifies the function that created an instance's prototype.\n\tError.prototype.message\n\tError message.\n\tError.prototype.name\n\tError name.\n\n\n#Vendor-specific extensions\n\n##Non-standard\nThis feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n##Microsoft\n\n\tError.prototype.description\n\tError description. Similar to message.\n\tError.prototype.number\n\tError number.\n##Mozilla\n\n\tError.prototype.fileName\n\tPath to file that raised this error.\n\tError.prototype.lineNumber\n\tLine number in file that raised this error.\n\tError.prototype.columnNumber\n\tColumn number in line that raised this error.\n\tError.prototype.stack\n\tStack trace.\n\n#Examples\n##Example: Throwing a generic error\n\nUsually you create an Error object with the intention of raising it using the throw keyword. You can handle the error using the try...catch construct:\n\n\ttry {\n\t  throw new Error(\"Whoops!\");\n\t} catch (e) {\n\t  alert(e.name + \": \" + e.message);\n\t}\n\tExample: Handling a specific error\n\n\tYou can choose to handle only specific error types by testing the error type with the error's constructor property or, if you're writing for modern JavaScript engines, instanceof keyword:\n\n\ttry {\n\t  foo.bar();\n\t} catch (e) {\n\t  if (e instanceof EvalError) {\n\t    alert(e.name + \": \" + e.message);\n\t  } else if (e instanceof RangeError) {\n\t    alert(e.name + \": \" + e.message);\n\t  }\n\t  // ... etc\n\t}\n##Custom Error Types\n\nYou might want to define your own error types deriving from Error to be able to throw new MyError() and use instanceof MyError to check the kind of error in the exception handler. The common way to do this is demonstrated below.\n\nNote that the thrown MyError will report incorrect lineNumber and fileName at least in Firefox.\nSee also the \"What's a good way to extend Error in JavaScript?\" discussion on Stackoverflow.\n\n\t// Create a new object, that prototypally inherits from the Error constructor.\n\tfunction MyError(message) {\n\t  this.name = \"MyError\";\n\t  this.message = message || \"Default Message\";\n\t}\n\tMyError.prototype = new Error();\n\tMyError.prototype.constructor = MyError;\n\n\ttry {\n\t  throw new MyError();\n\t} catch (e) {\n\t  console.log(e.name);     // \"MyError\"\n\t  console.log(e.message);  // \"Default Message\"\n\t}\n\n\ttry {\n\t  throw new MyError(\"custom message\");\n\t} catch (e) {\n\t  console.log(e.name);     // \"MyError\"\n\t  console.log(e.message);  // \"custom message\"\n\t}\n\n*/\n\n/*\n\n@constructor Boolean\n@param {String} message Human-readable description of the error\n@param {String} fileName The value for the fileName property on the created Error object. Defaults to the name of the file containing the code that called the Error() constructor.\n@param {Number} lineNumber The value for the lineNumber property on the created Error object. Defaults to the line number containing the Error() constructor invocation.\n*/\n\n\n\n/*\n@property {String} message\n\n#Summary\nThe message property is a human-readable description of the error.\n\n#Description\nThis property contains a brief description of the error if one is available or has been set. SpiderMonkey makes extensive use of the message property for exceptions. The message property combined with the name property is used by the Error.prototype.toString() method to create a string representation of the Error.\n\nBy default, the message property is an empty string, but this behavior can be overridden for an instance by specifying a message as the first argument to the Error constructor.\n\n#Examples\n##Example: Throwing a custom error\n\n\tvar e = new Error(\"Could not parse input\"); // e.message is \"Could not parse input\"\n\tthrow e;\n*/\n\n\n\n\n\n/*\n@property {String} name\n#Summary\nThe name property represents a name for the type of error. The initial value is \"Error\".\n\n#Description\nBy default, Error instances are given the name \"Error\". The name property, in addition to the message property, is used by the Error.prototype.toString() method to create a string representation of the error.\n\n#Examples\n##Example: Throwing a custom error\n\n\tvar e = new Error(\"Malformed input\"); // e.name is \"Error\"\n\n\te.name = \"ParseError\"; \n\tthrow e;\n\t// e.toString() would return \"ParseError: Malformed input\"\n\n*/\n\n\n\n\n/*\n@class EvalError @extends Error\nThe EvalError object indicates an error regarding the global eval() function.\n*/\n\n/*\n@class RangeError @extends Error\n\nThe RangeError object indicates an error when a value is not in the set or range of allowed values.\n\nA RangeError is thrown when trying to pass a number as an argument to a function that does not allow a range that includes that number. This can be encountered when to create an array of an illegal length with the Array constructor, or when passing bad values to the numeric methods Number.toExponential(), Number.toFixed() or Number.toPrecision().\n*/\n\n\n/*\n@class ReferenceError @extends Error\n#Summary\nThe ReferenceError object represents an error when a non-existent variable is referenced.\n\n#Description\nA ReferenceError is thrown when trying to dereference a variable that has not been declared.\n*/\n\n\n\n/*\n@class SyntaxError @extends Error\n\n#Summary\nThe SyntaxError object represents an error when trying to interpret syntactically invalid code.\n\n#Description\nA SyntaxError is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.\n*/\n\n\n/*\n@class TypeError @extends Error\nThe TypeError object represents an error when a value is not of the expected type.\n*/\n\n/*\n@class URIError @extends Error\n\nThe URIError object represents an error when a global URI handling function was used in a wrong way.\n*/\n\n\n/*\n@module javascript\n\n@class Function\n\n#Summary\nThe Function.prototype property represents the Function prototype object.\n\n#Description\nFunction objects inherit from Function.prototype.  Function.prototype cannot be modified.\n*/\n\n\n/*\n@property {Number} length\n\n#Summary\nThe length property specifies the number of arguments expected by the function.\n\n#Description\nlength is a property of a function object, and indicates how many arguments the function expects, i.e. the number of formal parameters. This number does not include the rest parameter. By contrast, arguments.length is local to a function and provides the number of arguments actually passed to the function.\n\nData property of the Function constructor\n\nThe Function constructor is itself a Function object. It's length data property has a value of 1. The property attributes are: Writable: false, Enumerable: false, Configurable: true.\n\nProperty of the Function prototype object\n\nThe length property of the Function prototype object has a value of 0.\n\n#Examples\n\tconsole.log ( Function.length ); //1\n\n\tconsole.log( (function ()        {}).length ); //0\n\tconsole.log( (function (a)       {}).length ); //1\n\tconsole.log( (function (a, b)    {}).length ); //2 etc. \n\tconsole.log( (function (...args) {}).length ); //0, rest parameter is no\n\n*/\n\n\n/*\n@property {FunctionPrototype} prototype\n#Summary\nThe Function.prototype property represents the Function prototype object.\n\n#Description\nFunction objects inherit from Function.prototype.  Function.prototype cannot be modified.\n*/\n\n\n\n/*\n@method apply\n\nThe apply() method calls a function with a given this value and arguments provided as an array (or an array-like object).\n\nNote: While the syntax of this function is almost identical to that of call(), the fundamental difference is that call() accepts an argument list, while apply() accepts a single array of arguments.\n#Syntax\n\tfun.apply(thisArg, [argsArray])\n#Description\nYou can assign a different this object when calling an existing function. this refers to the current object, the calling object. With apply, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.\n\napply is very similar to call(), except for the type of arguments it supports. You can use an arguments array instead of a named set of parameters. With apply, you can use an array literal, for example, fun.apply(this, ['eat', 'bananas']), or an Array object, for example, fun.apply(this, new Array('eat', 'bananas')).\n\nYou can also use arguments for the argsArray parameter. arguments is a local variable of a function. It can be used for all unspecified arguments of the called object. Thus, you do not have to know the arguments of the called object when you use the apply method. You can use arguments to pass all the arguments to the called object. The called object is then responsible for handling the arguments.\n\nSince ECMAScript 5th Edition you can also use any kind of object which is array-like, so in practice this means it's going to have a property length and integer properties in the range [0...length). As an example you can now use a NodeList or a own custom object like {'length': 2, '0': 'eat', '1': 'bananas'}.\n\nNote: Most browsers, including Chrome 14 and Internet Explorer 9, still do not accept array-like objects and will throw an exception.\n#Examples\nUsing apply to chain constructors\n\nYou can use apply to chain constructors for an object, similar to Java. In the following example we will create a global Function method called construct, which will make you able to use an array-like object with a constructor instead of an arguments list.\n\n\tFunction.prototype.construct = function (aArgs) {\n\t    var fConstructor = this, fNewConstr = function () { fConstructor.apply(this, aArgs); };\n\t    fNewConstr.prototype = fConstructor.prototype;\n\t    return new fNewConstr();\n\t};\n\nExample usage:\n\n\tfunction MyConstructor () {\n\t    for (var nProp = 0; nProp < arguments.length; nProp++) {\n\t        this[\"property\" + nProp] = arguments[nProp];\n\t    }\n\t}\n\n\tvar myArray = [4, \"Hello world!\", false];\n\tvar myInstance = MyConstructor.construct(myArray);\n\n\talert(myInstance.property1); // alerts \"Hello world!\"\n\talert(myInstance instanceof MyConstructor); // alerts \"true\"\n\talert(myInstance.constructor); // alerts \"MyConstructor\"\n\nNote: This non-native Function.construct method will not work with some native constructors (like Date, for example). In these cases you have to use the Function.bind method (for example, imagine to have an array like the following, to be used with Date constructor: [2012, 11, 4]; in this case you have to write something like: new (Function.prototype.bind.apply(Date, [null].concat([2012, 11, 4])))() – anyhow this is not the best way to do things and probably should not be used in any production environment).\nUsing apply and built-in functions\n\nClever usage of apply allows you to use built-ins functions for some tasks that otherwise probably would have been written by looping over the array values. As an example here we are going to use Math.max/Math.min to find out the maximum/minimum value in an array.\n\n\t//min/max number in an array \n\tvar numbers = [5, 6, 2, 3, 7];\n\n\t//using Math.min/Math.max apply \n\tvar max = Math.max.apply(null, numbers); // This about equal to Math.max(numbers[0], ...) or Math.max(5, 6, ..) \n\tvar min = Math.min.apply(null, numbers);\n\n\t/ vs. simple loop based algorithm \n\tmax = -Infinity, min = +Infinity;\n\n\tfor (var i = 0; i < numbers.length; i++) {\n\t  if (numbers[i] > max)\n\t    max = numbers[i];\n\t  if (numbers[i] < min) \n\t    min = numbers[i];\n\t}\n\nBut beware: in using apply this way, you run the risk of exceeding the JavaScript engine's argument length limit. The consequences of applying a function with too many arguments (think more than tens of thousands of arguments) vary across engines (JavaScriptCore has hard-coded argument limit of 65536), because the limit (indeed even the nature of any excessively-large-stack behavior) is unspecified. Some engines will throw an exception. More perniciously, others will arbitrarily limit the number of arguments actually passed to the applied function. (To illustrate this latter case: if such an engine had a limit of four arguments [actual limits are of course significantly higher], it would be as if the arguments 5, 6, 2, 3 had been passed to apply in the examples above, rather than the full array.) If your value array might grow into the tens of thousands, use a hybrid strategy: apply your function to chunks of the array at a time:\n\n\tfunction minOfArray(arr) {\n\t  var min = Infinity;\n\t  var QUANTUM = 32768;\n\n\t  for (var i = 0, len = arr.length; i < len; i += QUANTUM) {\n\t    var submin = Math.min.apply(null, arr.slice(i, Math.min(i + QUANTUM, len)));\n\t    min = Math.min(submin, min);\n\t  }\n\n\t  return min;\n\t}\n\n\tvar min = minOfArray([5, 6, 2, 3, 7]);\nUsing apply in \"monkey-patching\"\n\nApply can be the best way to monkey-patch a builtin function of Firefox, or JS libraries. Given someobject.foo function, you can modify the function in a somewhat hacky way, like so:\n\n\tvar originalfoo = someobject.foo;\n\tsomeobject.foo = function() {\n\t  //Do stuff before calling function\n\t  console.log(arguments);\n\t  //Call the function as it would have been called normally:\n\t  originalfoo.apply(this,arguments);\n\t  //Run stuff after, here.\n\t}\n\nThis method is especially handy where you want to debug events, or interface with something that has no API like the various .on([event]... events, such as those usable on the Devtools Inspector).\n\n\n@param {Object}thisArg The value of this provided for the call to fun. Note that this may not be the actual value seen by the method: if the method is a function in non-strict mode code, null and undefined will be replaced with the global object, and primitive values will be boxed.\n@param {Array} argsArray An array-like object, specifying the arguments with which fun should be called, or null or undefined if no arguments should be provided to the function. Starting with ECMAScript 5 these arguments can be a generic array-like object instead of an array. See below for browser compatibility information.\n\n@returns the result of evaluating this function with given context and parameters\n*/\n\n\n\n\n\n\n\n/*\n@method bind\n\n#Summary\nThe bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.\n\n#Syntax\n\tfun.bind(thisArg[, arg1[, arg2[, ...]]])\n\n#Description\nThe bind() function creates a new function (a bound function) with the same function body (internal call property in ECMAScript 5 terms) as the function it is being called on (the bound function's target function) with the this value bound to the first argument of bind(), which cannot be overridden. bind() also accepts leading default arguments to provide to the target function when the bound function is called. A bound function may also be constructed using the new operator: doing so acts as though the target function had instead been constructed. The provided this value is ignored, while prepended arguments are provided to the emulated function.\n\n#Examples\nCreating a bound function\n\nThe simplest use of bind() is to make a function that, no matter how it is called, is called with a particular this value. A common mistake for new JavaScript programmers is to extract a method from an object, then to later call that function and expect it to use the original object as its this (e.g. by using that method in callback-based code). Without special care, however, the original object is usually lost. Creating a bound function from the function, using the original object, neatly solves this problem:\n\n\tthis.x = 9; \n\tvar module = {\n\t  x: 81,\n\t  getX: function() { return this.x; }\n\t};\n\n\tmodule.getX(); // 81\n\n\tvar getX = module.getX;\n\tgetX(); // 9, because in this case, \"this\" refers to the global object\n\n\t// create a new function with 'this' bound to module\n\tvar boundGetX = getX.bind(module);\n\tboundGetX(); // 81\n\n##Partial Functions\n\nThe next simplest use of bind() is to make a function with pre-specified initial arguments. These arguments (if any) follow the provided this value and are then inserted at the start of the arguments passed to the target function, followed by the arguments passed to the bound function, whenever the bound function is called.\n\n\tfunction list() {\n\t  return Array.prototype.slice.call(arguments);\n\t}\n\n\tvar list1 = list(1, 2, 3); // [1, 2, 3]\n\n\t//  Create a function with a preset leading argument\n\tvar leadingThirtysevenList = list.bind(undefined, 37);\n\n\tvar list2 = leadingThirtysevenList(); // [37]\n\tvar list3 = leadingThirtysevenList(1, 2, 3); // [37, 1, 2, 3]\n\n##With setTimeout\n\nBy default within window.setTimeout(), the this keyword will be set to the window (or global) object. When working with class methods that require this to refer to class instances, you may explicitly bind this to the callback function, in order to maintain the instance.\n\n\tfunction LateBloomer() {\n\t  this.petalCount = Math.ceil( Math.random() * 12 ) + 1;\n\t}\n\n\t// declare bloom after a delay of 1 second\n\tLateBloomer.prototype.bloom = function() {\n\t  window.setTimeout( this.declare.bind( this ), 1000 );\n\t};\n\n\tLateBloomer.prototype.declare = function() {\n\t  console.log('I am a beautiful flower with ' + \n\t    this.petalCount + ' petals!');\n\t};\n\n##Bound functions used as constructors\n\nWarning: This section demonstrates JavaScript capabilities and documents some edge cases of the bind() method. The methods shown below are not the best way to do things and probably should not be used in any production environment.\nBound functions are automatically suitable for use with the new operator to construct new instances created by the target function. When a bound function is used to construct a value, the provided this is ignored. However, provided arguments are still prepended to the constructor call:\n\n\tfunction Point(x, y) {\n\t  this.x = x;\n\t  this.y = y;\n\t}\n\n\tPoint.prototype.toString = function() { \n\t  return this.x + \",\" + this.y; \n\t};\n\n\tvar p = new Point(1, 2);\n\tp.toString(); // \"1,2\"\n\n\n\tvar emptyObj = {};\n\tvar YAxisPoint = Point.bind(emptyObj, 0);\n\t// not supported in the polyfill below, works fine with native bind:\n\tvar YAxisPoint = Point.bind(null,0 );\n\n\tvar axisPoint = new YAxisPoint(5);\n\taxisPoint.toString(); //  \"0,5\"\n\n\taxisPoint instanceof Point; // true\n\taxisPoint instanceof YAxisPoint; // true\n\tnew Point(17, 42) instanceof YAxisPoint; // false\nNote that you need do nothing special to create a bound function for use with new. The corollary is that you need do nothing special to create a bound function to be called plainly, even if you would rather require the bound function to only be called using new.\n\n\t// Example can be run directly in your JavaScript console\n\t// ...continuing from above\n\n\t// Can still be called as a normal function \n\t// (although usually this is undesired)\n\tYAxisPoint(13);\n\n\temptyObj.x + \",\" + emptyObj.y;\n\t// >  \"0,13\"\nIf you wish to support use of a bound function only using new, or only by calling it, the target function must enforce that restriction.\n\n##Creating shortcuts\n\nbind() is also helpful in cases where you want to create a shortcut to a function which requires a specific this value.\n\nTake Array.prototype.slice, for example, which you want to use for converting an array-like object to a real array. You could create a shortcut like this:\n\n\tvar slice = Array.prototype.slice;\n\n\t// ...\n\n\tslice.call(arguments);\n\tWith bind(), this can be simplified. In the following piece of code, slice is a bound function to the call() function of Function.prototype, with the this value set to the slice() function of Array.prototype. This means that additional call() calls can be eliminated:\n\n\t// same as \"slice\" in the previous example\n\tvar unboundSlice = Array.prototype.slice;\n\tvar slice = Function.prototype.call.bind(unboundSlice);\n\n\t// ...\n\n\tslice(arguments);\n#Polyfill\nThe bind function is a recent addition to ECMA-262, 5th edition; as such it may not be present in all browsers. You can partially work around this by inserting the following code at the beginning of your scripts, allowing use of much of the functionality of bind() in implementations that do not natively support it.\n\n\tif (!Function.prototype.bind) {\n\t  Function.prototype.bind = function (oThis) {\n\t    if (typeof this !== \"function\") {\n\t      // closest thing possible to the ECMAScript 5\n\t      // internal IsCallable function\n\t      throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n\t    }\n\n\t    var aArgs = Array.prototype.slice.call(arguments, 1), \n\t        fToBind = this, \n\t        fNOP = function () {},\n\t        fBound = function () {\n\t          return fToBind.apply(this instanceof fNOP && oThis\n\t                 ? this\n\t                 : oThis,\n\t                 aArgs.concat(Array.prototype.slice.call(arguments)));\n\t        };\n\n\t    fNOP.prototype = this.prototype;\n\t    fBound.prototype = new fNOP();\n\n\t    return fBound;\n\t  };\n\t}\n\nSome of the many differences (there may well be others, as this list does not seriously attempt to be exhaustive) between this algorithm and the specified algorithm are:\n\nThe partial implementation relies Array.prototype.slice, Array.prototype.concat, Function.prototype.call and Function.prototype.apply, built-in methods to have their original values.\nThe partial implementation creates functions that do not have immutable \"poison pill\" caller and arguments properties that throw a TypeError upon get, set, or deletion. (This could be added if the implementation supports Object.defineProperty, or partially implemented [without throw-on-delete behavior] if the implementation supports the __defineGetter__ and __defineSetter__ extensions.)\nThe partial implementation creates functions that have a prototype property. (Proper bound functions have none.)\nThe partial implementation creates bound functions whose length property does not agree with that mandated by ECMA-262: it creates functions with length 0, while a full implementation, depending on the length of the target function and the number of pre-specified arguments, may return a non-zero length.\nIf you choose to use this partial implementation, you must not rely on those cases where behavior deviates from ECMA-262, 5th edition! With some care, however (and perhaps with additional modification to suit specific needs), this partial implementation may be a reasonable bridge to the time when bind() is widely implemented according to the specification.\n\n@param thisArg The value to be passed as the this parameter to the target function when the bound function is called. The value is ignored if the bound function is constructed using the new operator.\n@param args Arguments to prepend to arguments provided to the bound function when invoking the target function.\n\n*/\n\n\n\n\n\n\n/*\n@method call\n\n#Summary\nThe call() method calls a function with a given this value and arguments provided individually.\n\nNOTE: While the syntax of this function is almost identical to that of apply(), the fundamental difference is that call() accepts an argument list, while apply() accepts a single array of arguments.\n#Syntax\n\tfun.call(thisArg[, arg1[, arg2[, ...]]])\n\n#Description\nYou can assign a different this object when calling an existing function. this refers to the current object, the calling object.\n\nWith call, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.\n\n#Examples\n##Using call to chain constructors for an object\n\nYou can use call to chain constructors for an object, similar to Java. In the following example, the constructor for the Product object is defined with two parameters, name and price. Two other functions Food and Toy invoke Product passing this and name and price. Product initializes the properties name and price, both specialized functions define the category.\n\n\tfunction Product(name, price) {\n\t  this.name = name;\n\t  this.price = price;\n\n\t  if (price < 0) {\n\t    throw RangeError('Cannot create product ' +\n\t                      this.name + ' with a negative price');\n\t  }\n\n\t  return this;\n\t}\n\n\tfunction Food(name, price) {\n\t  Product.call(this, name, price);\n\t  this.category = 'food';\n\t}\n\n\tFood.prototype = Object.create(Product.prototype);\n\n\tfunction Toy(name, price) {\n\t  Product.call(this, name, price);\n\t  this.category = 'toy';\n\t}\n\n\tToy.prototype = Object.create(Product.prototype);\n\n\tvar cheese = new Food('feta', 5);\n\tvar fun = new Toy('robot', 40);\n \n##Using call to invoke an anonymous function\n\nIn this purely constructed example, we create anonymous function and use call to invoke it on every object in an array. The main purpose of the anonymous function here is to add a print function to every object, which is able to print the right index of the object in the array. Passing the object as this value was not strictly necessary, but is done for explanatory purpose.\n\n\tvar animals = [\n\t  {species: 'Lion', name: 'King'},\n\t  {species: 'Whale', name: 'Fail'}\n\t];\n\n\tfor (var i = 0; i < animals.length; i++) {\n\t  (function (i) { \n\t    this.print = function () { \n\t      console.log('#' + i  + ' ' + this.species \n\t                  + ': ' + this.name); \n\t    } \n\t    this.print();\n\t  }).call(animals[i], i);\n\t}\n\n\n@param thisArg The value of this provided for the call to fun. Note that this may not be the actual value seen by the method: if the method is a function in non-strict mode code, null and undefined will be replaced with the global object, and primitive values will be boxed.\n@param arg1,arg2,... Arguments for the object.\n\n*/\n\n\n\n\n/*\n@method toString\n#Summary\nThe toString() method returns a string representing the source code of the function.\n\n#Syntax\n\tfunction.toString(indentation)\n#Description\nThe Function object overrides the toString method inherited from Object; it does not inherit Object.prototype.toString. For Function objects, the toString method returns a string representation of the object in the form of a function declaration. That is, toString decompiles the function, and the string returned includes the function keyword, the argument list, curly braces, and the source of the function body.\n\nJavaScript calls the toString method automatically when a Function is to be represented as a text value, e.g. when a function is concatenated with a string.\n\n@return {String}\n*/\n\n/*\n@module javascript\n@class Number\n\n#Summary\nThe Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor.\n\n#Constructor\n\tnew Number(value);\n\n#Description\nThe primary uses for the Number object are:\n\nIf the argument cannot be converted into a number, it returns NaN.\nIn a non-constructor context (i.e., without the new operator, Number can be used to perform a type conversion.\n\n\n#Examples\n##Example: Using the Number object to assign values to numeric variables\n\nThe following example uses the Number object's properties to assign values to several numeric variables:\n\n\tvar biggestNum = Number.MAX_VALUE;\n\tvar smallestNum = Number.MIN_VALUE;\n\tvar infiniteNum = Number.POSITIVE_INFINITY;\n\tvar negInfiniteNum = Number.NEGATIVE_INFINITY;\n\tvar notANum = Number.NaN;\n##Example: Integer range for Number\n\nThe following example shows minimum and maximum integer values that can be represented as Number object (for details, refer to EcmaScript standard, chapter 8.5 The Number Type):\n\n\tvar biggestInt = 9007199254740992;\n\tvar smallestInt = -9007199254740992;\n\nWhen parsing data that has been serialized to JSON, integer values falling out of this range can be expected to become corrupted when JSON parser coerces them to Number type. Using String instead is a possible workaround.\n\n##Example: Using Number to convert a Date object\n\nThe following example converts the Date object to a numerical value using Number as a function:\n\n\tvar d = new Date(\"December 17, 1995 03:24:00\");\n\tprint(Number(d));\n\nThis displays \"819199440000\".\n\n*/\n\n/*\n@constructor Number\n@param {Any}value The numeric value of the object being created.\n*/\n\n\n\n\n\n\n/*\n@property {Number} MAX_VALUE\n\n#Summary\nThe Number.MAX_VALUE property represents the maximum numeric value representable in JavaScript.\n\n#Description\nThe MAX_VALUE property has a value of approximately 1.79E+308. Values larger than MAX_VALUE are represented as \"Infinity\".\n\nBecause MAX_VALUE is a static property of Number, you always use it as Number.MAX_VALUE, rather than as a property of a Number object you created.\n\n#Examples\n##Example: Using MAX_VALUE\n\n\tThe following code multiplies two numeric values. If the result is less than or equal to MAX_VALUE, the func1 function is called; otherwise, the func2 function is called.\n\n\tif (num1 * num2 <= Number.MAX_VALUE) {\n\t   func1();\n\t} else {\n\t   func2();\n\t}\n\n@static\n\n*/\n\n\n\n/*\n@property {Number} MIN_VALUE\n\n#Summary\nThe Number.MIN_VALUE property represents the smallest positive numeric value representable in JavaScript.\n\n#Description\nThe MIN_VALUE property is the number closest to 0, not the most negative number, that JavaScript can represent.\n\nMIN_VALUE has a value of approximately 5e-324. Values smaller than MIN_VALUE (\"underflow values\") are converted to 0.\n\nBecause MIN_VALUE is a static property of Number, you always use it as Number.MIN_VALUE, rather than as a property of a Number object you created.\n\n#Examples\n##Example: Using MIN_VALUE\n\nThe following code divides two numeric values. If the result is greater than or equal to MIN_VALUE, the func1 function is called; otherwise, the func2 function is called.\n\n\tif (num1 / num2 >= Number.MIN_VALUE) {\n\t    func1();\n\t} else {\n\t    func2();\n\t}\n\n@static\n*/\n\n\n\n\n/*\n@property {Number}NEGATIVE_INFINITY\n\n#Summary\nThe Number.NEGATIVE_INFINITY property represents the negative Infinity value.\n\nYou do not have to create a Number object to access this static property (use Number.NEGATIVE_INFINITY).\n\n#Description\nThe value of Number.NEGATIVE_INFINITY is the same as the negative value of the global object's Infinity property.\n\nThis value behaves slightly differently than mathematical infinity:\n\n* Any positive value, including POSITIVE_INFINITY, multiplied by NEGATIVE_INFINITY is NEGATIVE_INFINITY.\n* Any negative value, including NEGATIVE_INFINITY, multiplied by NEGATIVE_INFINITY is POSITIVE_INFINITY.\n* Zero multiplied by NEGATIVE_INFINITY is NaN.\n* NaN multiplied by NEGATIVE_INFINITY is NaN.\n* NEGATIVE_INFINITY, divided by any negative value except NEGATIVE_INFINITY, is POSITIVE_INFINITY.\n* NEGATIVE_INFINITY, divided by any positive value except POSITIVE_INFINITY, is NEGATIVE_INFINITY.\n* NEGATIVE_INFINITY, divided by either NEGATIVE_INFINITY or POSITIVE_INFINITY, is NaN.\n* Any number divided by NEGATIVE_INFINITY is zero.\n\nYou might use the Number.NEGATIVE_INFINITY property to indicate an error condition that returns a finite number in case of success. Note, however, that isFinite would be more appropriate in such a case.\n\n#Example\nIn the following example, the variable smallNumber is assigned a value that is smaller than the minimum value. When the if statement executes, smallNumber has the value \"-Infinity\", so smallNumber is set to a more manageable value before continuing.\n\n\tvar smallNumber = (-Number.MAX_VALUE) * 2\n\n\tif (smallNumber == Number.NEGATIVE_INFINITY) {\n\t smallNumber = returnFinite();\n\t}\n\n@static\n*/\n\n\n\n/*\n@property {Number} NaN\n#Summary\nThe Number.NaN property represents Not-A-Number. Equivalent of NaN.\n\nYou do not have to create a Number object to access this static property (use Number.NaN).\n@static\n*/\n\n\n\n/*\n@property {Number}POSITIVE_INFINITY\n\n#Summary\nThe Number.POSITIVE_INFINITY property represents the positive Infinity value.\n\nYou do not have to create a Number object to access this static property (use Number.POSITIVE_INFINITY).\n\n#Description\nThe value of Number.POSITIVE_INFINITY is the same as the value of the global object's Infinity property.\n\nThis value behaves slightly differently than mathematical infinity:\n\n* Any positive value, including POSITIVE_INFINITY, multiplied by POSITIVE_INFINITY is POSITIVE_INFINITY.\n* Any negative value, including NEGATIVE_INFINITY, multiplied by POSITIVE_INFINITY is NEGATIVE_INFINITY.\n* Zero multiplied by POSITIVE_INFINITY is NaN.\n* NaN multiplied by POSITIVE_INFINITY is NaN.\n* POSITIVE_INFINITY, divided by any negative value except NEGATIVE_INFINITY, is NEGATIVE_INFINITY.\n* POSITIVE_INFINITY, divided by any positive value except POSITIVE_INFINITY, is POSITIVE_INFINITY.\n* POSITIVE_INFINITY, divided by either NEGATIVE_INFINITY or POSITIVE_INFINITY, is NaN.\n* Any number divided by POSITIVE_INFINITY is Zero.\n* You might use the Number.POSITIVE_INFINITY property to indicate an error condition that returns a finite number in case of success. Note, however, that isFinite would be more appropriate in such a case.\n\n#Example\nIn the following example, the variable bigNumber is assigned a value that is larger than the maximum value. When the if statement executes, bigNumber has the value \"Infinity\", so bigNumber is set to a more manageable value before continuing.\n\n\tvar bigNumber = Number.MAX_VALUE * 2\n\tif (bigNumber == Number.POSITIVE_INFINITY) {\n\t bigNumber = returnFinite();\n\t}\n\n@static \n*/\n\n/*\n@module javascript\n\n@class Object\nAdapted from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n#Description\nThe Object constructor creates an object wrapper for the given value. If the value is null or undefined, it will create and return an empty object, otherwise, it will return an object of a Type that corresponds to the given value. If the value is an object already, it will return the value.\n\nWhen called in a non-constructor context, Object behaves identically to new Object().\n\n#Object instances and Object prototype object\nAll objects in JavaScript are descended from Object; all objects inherit methods and properties from Object.prototype, although they may be overridden. For example, other constructors' prototypes override the constructor property and provide their own toString methods. Changes to the Object prototype object are propagated to all objects unless the properties and methods subject to those changes are overridden further along the prototype chain.\n\n#Examples\n##Example: Using Object given undefined and null types\n\nThe following examples store an empty Object object in o:\n\n\tvar o = new Object();\n\tvar o = new Object(undefined);\n\tvar o = new Object(null);\n##Example: Using Object to create Boolean objects\n\nThe following examples store Boolean objects in o:\n\n\t// equivalent to o = new Boolean(true);\n\tvar o = new Object(true);\n\t// equivalent to o = new Boolean(false);\n\tvar o = new Object(Boolean());\n\n\n@property {ObjectPrototype} prototype\n\n@static \n\n*/\n\n/*\n@constructor bla bla\n\n\t// Object initialiser or literal \n\t{ [ nameValuePair1 [, nameValuePair2 [, ...nameValuePairN] ] ] }  \n\t// Called as a constructor \n\tnew Object( [ value ] )\n\n@param nameValuePair1,nameValuePair2,...nameValuePairN Pairs of names (strings) and values (any value) where the name is separated from the value by a colon.\n@param value Any value.\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n@method __defineGetter__()  \nAssociates a function with a property that, when accessed, executes that function and returns its return value.\n*/\n\n\n\n\n\n\n\n\n\n\n\n/*\n@method hasOwnProperty\n##Summary\nThe hasOwnProperty() method returns a boolean indicating whether the object has the specified property.\n\n##Syntax\nobj.hasOwnProperty(prop)\n\n##Examples\n###Example: Using hasOwnProperty to test for a property's existence\n\nThe following example determines whether the o object contains a property named prop:\n\n\to = new Object();\n\to.prop = 'exists';\n\n\tfunction changeO() {\n\t  o.newprop = o.prop;\n\t  delete o.prop;\n\t}\n\n\to.hasOwnProperty('prop');   // returns true\n\tchangeO();\n\to.hasOwnProperty('prop');   // returns false\n\n###Example: Direct versus inherited properties\n\nThe following example differentiates between direct properties and properties inherited through the prototype chain:\n\n\to = new Object();\n\to.prop = 'exists';\n\to.hasOwnProperty('prop');             // returns true\n\to.hasOwnProperty('toString');         // returns false\n\to.hasOwnProperty('hasOwnProperty');   // returns false\n\n##Example: Iterating over the properties of an object\n\nThe following example shows how to iterate over the properties of an object without executing on inherit properties. Note that the for..in loop is already only iterating enumerable items, so one should not assume based on the lack of non-enumerable properties shown in the loop that hasOwnProperty itself is confined strictly to enumerable items (as with Object.getOwnPropertyNames()).\n\n\tvar buz = {\n\t    fog: 'stack'\n\t};\n\n\tfor (var name in buz) {\n\t    if (buz.hasOwnProperty(name)) {\n\t        alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n\t    }\n\t    else {\n\t        alert(name); // toString or something else\n\t    }\n\t}\n\n###Example: hasOwnProperty as a property\n\nJavaScript does not protect the property name hasOwnProperty; thus, if the possibility exists that an object might have a property with this name, it is necessary to use an external hasOwnProperty to get correct results:\n\n\tvar foo = {\n\t    hasOwnProperty: function() {\n\t        return false;\n\t    },\n\t    bar: 'Here be dragons'\n\t};\n\n\tfoo.hasOwnProperty('bar'); // always returns false\n\n\t// Use another Object's hasOwnProperty and call it with 'this' set to foo\n\t({}).hasOwnProperty.call(foo, 'bar'); // true\n\n\t// It's also possible to use the hasOwnProperty property from the Object property for this purpose\n\tObject.prototype.hasOwnProperty.call(foo, 'bar'); // true\n\nNote that in the last case there are no newly created objects.\n\n@param param The name of the property to test.\n\n*/\n\n\n\n\n\n\n\n\n/*\n@method isPrototypeOf\n##Summary\nThe isPrototypeOf() method tests for an object in another object's prototype chain.\n\n\tNote: isPrototypeOf differs from the instanceof operator. In the expression \"object instanceof AFunction\", the object prototype chain is checked against AFunction.prototype, not against AFunction itself.\n\nThe isPrototypeOf method allows you to check whether or not an object exists within another object's prototype chain.\n\nFor example, consider the following prototype chain:\n\n\tfunction Fee() {\n\t  // . . .\n\t}\n\n\tfunction Fi() {\n\t  // . . .\n\t}\n\tFi.prototype = new Fee();\n\n\tfunction Fo() {\n\t  // . . .\n\t}\n\tFo.prototype = new Fi();\n\n\tfunction Fum() {\n\t  // . . .\n\t}\n\tFum.prototype = new Fo();\n\nLater on down the road, if you instantiate Fum and need to check if Fi's prototype exists within the Fum prototype chain, you could do this:\n\n\tvar fum = new Fum();\n\t. . .\n\t\n\tif (Fi.prototype.isPrototypeOf(fum)) {\n\t  // do something safe\n\t}\nThis, along with the instanceof operator particularly comes in handy if you have code that can only function when dealing with objects descended from a specific prototype chain, e.g., to guarantee that certain methods or properties will be present on that object.\n\n\n@param {Object} obj the object whose prototype chain will be searched\n*/\n\n\n\n\n\n/*\n@method propertyIsEnumerable\n##Summary\nThe propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable.\n\n##Description\nEvery object has a propertyIsEnumerable method. This method can determine whether the specified property in an object can be enumerated by a for...in loop, with the exception of properties inherited through the prototype chain. If the object does not have the specified property, this method returns false.\n\n##Examples\n###Example: A basic use of propertyIsEnumerable\n\nThe following example shows the use of propertyIsEnumerable on objects and arrays:\n\n\tvar o = {};\n\tvar a = [];\n\to.prop = 'is enumerable';\n\ta[0] = 'is enumerable';\n\n\to.propertyIsEnumerable('prop');   // returns true\n\ta.propertyIsEnumerable(0);        // returns true\n\n###Example: User-defined versus built-in objects\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n\tvar a = ['is enumerable'];\n\n\ta.propertyIsEnumerable(0);          // returns true\n\ta.propertyIsEnumerable('length');   // returns false\n\n\tMath.propertyIsEnumerable('random');   // returns false\n\tthis.propertyIsEnumerable('Math');     // returns false\n\tExample: Direct versus inherited properties\n\n\tvar a = [];\n\ta.propertyIsEnumerable('constructor');         // returns false\n\n\tfunction firstConstructor() {\n\t  this.property = 'is not enumerable';\n\t}\n\n\tfirstConstructor.prototype.firstMethod = function () {};\n\n\tfunction secondConstructor() {\n\t  this.method = function method() { return 'is enumerable'; };\n\t}\n\n\tsecondConstructor.prototype = new firstConstructor;\n\tsecondConstructor.prototype.constructor = secondConstructor;\n\n\tvar o = new secondConstructor();\n\to.arbitraryProperty = 'is enumerable';\n\n\to.propertyIsEnumerable('arbitraryProperty');   // returns true\n\to.propertyIsEnumerable('method');              // returns true\n\to.propertyIsEnumerable('property');            // returns false\n\n\to.property = 'is enumerable';\n\n\to.propertyIsEnumerable('property');            // returns true\n\n\t// These return false as they are on the prototype which \n\t// propertyIsEnumerable does not consider (even though the last two\n\t// are iteratable with for-in)\n\to.propertyIsEnumerable('prototype');   // returns false (as of JS 1.8.1/FF3.6)\n\to.propertyIsEnumerable('constructor'); // returns false\n\to.propertyIsEnumerable('firstMethod'); // returns false\n\n@param prop\nThe name of the property to test.\n*/\n\n\n\n\n/*\n@method toLocaleString\n##Summary\nThe toLocaleString() method returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.\n\n##Syntax\nobj.toLocaleString();\n##Description\nObject's toLocaleString returns the result of calling toString().\n\nThis function is provided to give objects a generic toLocaleString method, even though not all may use it. See the list below.\n\n##Objects overriding toLocaleString\n\nArray: Array.prototype.toLocaleString()\nNumber: Number.prototype.toLocaleString()\nDate: Date.prototype.toLocaleString()\n*/\n\n\n\n\n\n/*\n@method toString\n##Summary\nThe toString() method returns a string representing object.\n\n##Syntax\nobj.toString()\n##Description\nEvery object has a toString() method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the toString() method is inherited by every object descended from Object. If this method is not overridden in a custom object, toString() returns \"[object type]\", where type is the object type. The following code illustrates this:\n\nvar o = new Object();\no.toString();           // returns [object Object]\nStarting in JavaScript 1.8.5 toString() called on null returns [object Null], and undefined returns [object Undefined], as defined in the 5th Edition of ECMAScript and a subsequent Errata. See Using toString to detect object type.\n##Examples\n###Overriding the default toString method\n\nYou can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object.\n\nThe following code defines the Dog object type and creates theDog, an object of type Dog:\n\n\tfunction Dog(name,breed,color,sex) {\n\t   this.name=name;\n\t   this.breed=breed;\n\t   this.color=color;\n\t   this.sex=sex;\n\t}\n\n\ttheDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\nIf you call the toString() method on this custom object, it returns the default value inherited from Object:\n\n\ttheDog.toString(); //returns [object Object]\n\tThe following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form \"property = value;\".\n\n\tDog.prototype.toString = function dogToString() {\n\t  var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n\t  return ret;\n\t}\nWith the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:\n\nDog Gabby is a female chocolate Lab\nUsing toString() to detect object class\n\ntoString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg.\n\n\tvar toString = Object.prototype.toString;\n\n\ttoString.call(new Date); // [object Date]\n\ttoString.call(new String); // [object String]\n\ttoString.call(Math); // [object Math]\n\n\t//Since JavaScript 1.8.5\n\ttoString.call(undefined); // [object Undefined]\n\ttoString.call(null); // [object Null]\n*/\n\n\n\n\n\n\n\n\n\n\n\n/*\n@method create\n\n#Summary\nThe Object.create() method creates a new object with the specified prototype object and properties.\n\n#Syntax\n\tObject.create(proto[, propertiesObject])\n\n#Examples\n\n##Example: Classical inheritance with Object.create\n\nBelow is an example of how to use Object.create to achieve classical inheritance. This is for single inheritance, which is all that Javascript supports.\n\n\t// Shape - superclass\n\tfunction Shape() {\n\t  this.x = 0;\n\t  this.y = 0;\n\t}\n\n\t// superclass method\n\tShape.prototype.move = function(x, y) {\n\t  this.x += x;\n\t  this.y += y;\n\t  console.info('Shape moved.');\n\t};\n\n\t// Rectangle - subclass\n\tfunction Rectangle() {\n\t  Shape.call(this); // call super constructor.\n\t}\n\n\t// subclass extends superclass\n\tRectangle.prototype = Object.create(Shape.prototype);\n\tRectangle.prototype.constructor = Rectangle;\n\n\tvar rect = new Rectangle();\n\n\trect instanceof Rectangle; // true\n\trect instanceof Shape; // true\n\n\trect.move(1, 1); // Outputs, 'Shape moved.'\n\tIf you wish to inherit from multiple objects, then mixins are a possibility.\n\n\tfunction MyClass() {\n\t  SuperClass.call(this);\n\t  OtherSuperClass.call(this);\n\t}\n\n\tMyClass.prototype = Object.create(SuperClass.prototype); // inherit\n\tmixin(MyClass.prototype, OtherSuperClass.prototype); // mixin\n\n\tMyClass.prototype.myMethod = function() {\n\t  // do a thing\n\t};\n\nThe mixin function would copy the functions from the superclass prototype to the subclass prototype, the mixin function needs to be supplied by the user. An example of a mixin like function would be jQuery.extend.\n\n##Example: Using propertiesObject argument with Object.create\n\n\tvar o;\n\n\t// create an object with null as prototype\n\to = Object.create(null);\n\n\n\to = {};\n\t// is equivalent to:\n\to = Object.create(Object.prototype);\n\n\n\t// Example where we create an object with a couple of sample properties.\n\t// (Note that the second parameter maps keys to *property descriptors*.)\n\to = Object.create(Object.prototype, {\n\t  // foo is a regular 'value property'\n\t  foo: { writable: true, configurable: true, value: 'hello' },\n\t  // bar is a getter-and-setter (accessor) property\n\t  bar: {\n\t    configurable: false,\n\t    get: function() { return 10; },\n\t    set: function(value) { console.log('Setting `o.bar` to', value); }\n\t  }\n\t});\n\n\n\tfunction Constructor() {}\n\to = new Constructor();\n\t// is equivalent to:\n\to = Object.create(Constructor.prototype);\n\t// Of course, if there is actual initialization code in the\n\t// Constructor function, the Object.create cannot reflect it\n\n\n\t// create a new object whose prototype is a new, empty object\n\t// and a adding single property 'p', with value 42\n\to = Object.create({}, { p: { value: 42 } });\n\n\t// by default properties ARE NOT writable, enumerable or configurable:\n\to.p = 24;\n\to.p;\n\t// 42\n\n\to.q = 12;\n\tfor (var prop in o) {\n\t  console.log(prop);\n\t}\n\t// 'q'\n\n\tdelete o.p;\n\t// false\n\n\t// to specify an ES3 property\n\to2 = Object.create({}, {\n\t  p: {\n\t    value: 42,\n\t    writable: true,\n\t    enumerable: true,\n\t    configurable: true\n\t  }\n\t});\n\n##Polyfill\nThis polyfill covers the main use case which is creating a new object for which the prototype has been chosen but doesn't take the second argument into account.\n\n\tif (typeof Object.create != 'function') {\n\t  Object.create = (function() {\n\t    var Object = function() {};\n\t    return function (prototype) {\n\t      if (arguments.length > 1) {\n\t        throw Error('Second argument not supported');\n\t      }\n\t      if (typeof prototype != 'object') {\n\t        throw TypeError('Argument must be an object');\n\t      }\n\t      Object.prototype = prototype;\n\t      var result = new Object();\n\t      Object.prototype = null;\n\t      return result;\n\t    };\n\t  })();\n\t}\n\n@static\n\n@param {Object} proto The object which should be the prototype of the newly-created object.\n\n@param {Object} propertiesObject If specified and not undefined, an object whose enumerable own properties (that is, those properties defined upon itself and not enumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of Object.defineProperties(). @optional\n\n@throws Throws a TypeError exception if the proto parameter isn't null or an object.\n\n*/\n\n\n\n\n\n\n\n\n/*\n@method defineProperties\n\n#Summary\nThe Object.defineProperties() method defines new or modifies existing properties directly on an object, returning the object.\n\n#Syntax\n\tObject.defineProperties(obj, props)\n\n#Description\nObject.defineProperties, in essence, defines all properties corresponding to the enumerable own properties of props on the object obj object.\n\n#Example\n\n\tObject.defineProperties(obj, {\n\t  \"property1\": {\n\t    value: true,\n\t    writable: true\n\t  },\n\t  \"property2\": {\n\t    value: \"Hello\",\n\t    writable: false\n\t  }\n\t  // etc. etc.\n\t});\n\n\n# Polyfill\n\nAssuming a pristine execution environment with all names and properties referring to their initial values, Object.defineProperties is almost completely equivalent (note the comment in isCallable) to the following reimplementation in JavaScript:\n\n\tfunction defineProperties(obj, properties) {\n\t  function convertToDescriptor(desc) {\n\t    function hasProperty(obj, prop) {\n\t      return Object.prototype.hasOwnProperty.call(obj, prop);\n\t    }\n\n\t    function isCallable(v) {\n\t      // NB: modify as necessary if other values than functions are callable.\n\t      return typeof v === \"function\";\n\t    }\n\n\t    if (typeof desc !== \"object\" || desc === null)\n\t      throw new TypeError(\"bad desc\");\n\n\t    var d = {};\n\n\t    if (hasProperty(desc, \"enumerable\"))\n\t      d.enumerable = !!obj.enumerable;\n\t    if (hasProperty(desc, \"configurable\"))\n\t      d.configurable = !!obj.configurable;\n\t    if (hasProperty(desc, \"value\"))\n\t      d.value = obj.value;\n\t    if (hasProperty(desc, \"writable\"))\n\t      d.writable = !!desc.writable;\n\t    if (hasProperty(desc, \"get\")) {\n\t      var g = desc.get;\n\n\t      if (!isCallable(g) && typeof g !== \"undefined\")\n\t        throw new TypeError(\"bad get\");\n\t      d.get = g;\n\t    }\n\t    if (hasProperty(desc, \"set\")) {\n\t      var s = desc.set;\n\t      if (!isCallable(s) && typeof s !== \"undefined\")\n\t        throw new TypeError(\"bad set\");\n\t      d.set = s;\n\t    }\n\n\t    if ((\"get\" in d || \"set\" in d) && (\"value\" in d || \"writable\" in d))\n\t      throw new TypeError(\"identity-confused descriptor\");\n\n\t    return d;\n\t  }\n\n\t  if (typeof obj !== \"object\" || obj === null)\n\t    throw new TypeError(\"bad obj\");\n\n\t  properties = Object(properties);\n\n\t  var keys = Object.keys(properties);\n\t  var descs = [];\n\n\t  for (var i = 0; i < keys.length; i++)\n\t    descs.push([keys[i], convertToDescriptor(properties[keys[i]])]);\n\n\t  for (var i = 0; i < descs.length; i++)\n\t    Object.defineProperty(obj, descs[i][0], descs[i][1]);\n\n\t  return obj;\n\t} \n\n\n@static \n\n@param {Object} obj The object on which to define or modify properties.\n@param {Object} props An object whose own enumerable properties constitute descriptors for the properties to be defined or modified.\n\n\n*/\n\n\n\n\n\n\n\n\n\n\n\n/*\n@method defineProperty\n\n#Summary\nThe Object.defineProperty() method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.\n\n#Syntax\nObject.defineProperty(obj, prop, descriptor)\n\n#Description\nThis method allows precise addition to or modification of a property on an object. Normal property addition through assignment creates properties which show up during property enumeration (for...in loop or Object.keys method), whose values may be changed, and which may be deleted. This method allows these extra details to be changed from their defaults.\n\nProperty descriptors present in objects come in two main flavors: data descriptors and accessor descriptors. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter pair of functions. A descriptor must be one of these two flavors; it cannot be both.\n\nBoth data and accessor descriptors are objects. They share the following optional keys:\n\n###configurable\ntrue if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.\nDefaults to false.\n\n###enumerable\ntrue if and only if this property shows up during enumeration of the properties on the corresponding object.\nDefaults to false.\nA data descriptor also has the following optional keys:\n\n###value\nThe value associated with the property. Can be any valid JavaScript value (number, object, function, etc).\nDefaults to undefined.\nwritable\ntrue if and only if the value associated with the property may be changed with an assignment operator.\nDefaults to false.\nAn accessor descriptor also has the following optional keys:\n\n###get\nA function which serves as a getter for the property, or undefined if there is no getter. The function return will be used as the value of property.\nDefaults to undefined.\n\n###set\nA function which serves as a setter for the property, or undefined if there is no setter. The function will receive as only argument the new value being assigned to the property.\nDefaults to undefined.\nBear in mind that these options are not necessarily own properties so, if inherited, will be considered too. In order to ensure these defaults are preserved you might freeze the Object.prototype upfront, specify all options explicitly, or point to null as __proto__ property.\n\n\t// using __proto__\n\tObject.defineProperty(obj, 'key', {\n\t  __proto__: null, // no inherited properties\n\t  value: 'static'  // not enumerable\n\t                   // not configurable\n\t                   // not writable\n\t                   // as defaults\n\t});\n\n\t// being explicit\n\tObject.defineProperty(obj, 'key', {\n\t  enumerable: false,\n\t  configurable: false,\n\t  writable: false,\n\t  value: 'static'\n\t});\n\n\t// recycling same object\n\tfunction withValue(value) {\n\t  var d = withValue.d || (\n\t    withValue.d = {\n\t      enumerable: false,\n\t      writable: false,\n\t      configurable: false,\n\t      value: null\n\t    }\n\t  );\n\t  d.value = value;\n\t  return d;\n\t}\n\t// ... and ...\n\tObject.defineProperty(obj, 'key', withValue('static'));\n\n\t// if freeze is available, prevents the code to add\n\t// value, get, set, enumerable, writable, configurable\n\t// to the Object prototype\n\t(Object.freeze || Object)(Object.prototype);\n\n#Examples\n\nIf you want to see how to use the Object.defineProperty method with a binary-flags-like syntax, see additional examples.\n\n##Example: Creating a property\n\nWhen the property specified doesn't exist in the object, Object.defineProperty() creates a new property as described. Fields may be omitted from the descriptor, and default values for those fields are imputed. All of the Boolean-valued fields default to false. The value, get, and set fields default to undefined. A property which is defined without get/set/value/writable is called “generic” and is “typed” as a data descriptor.\n\n\tvar o = {}; // Creates a new object\n\n\t// Example of an object property added with defineProperty with a data property descriptor\n\tObject.defineProperty(o, 'a', {\n\t  value: 37,\n\t  writable: true,\n\t  enumerable: true,\n\t  configurable: true\n\t});\n\t// 'a' property exists in the o object and its value is 37\n\n\t// Example of an object property added with defineProperty with an accessor property descriptor\n\tvar bValue = 38;\n\tObject.defineProperty(o, 'b', {\n\t  get: function() { return bValue; },\n\t  set: function(newValue) { bValue = newValue; },\n\t  enumerable: true,\n\t  configurable: true\n\t});\n\to.b; // 38\n\t// 'b' property exists in the o object and its value is 38\n\t// The value of o.b is now always identical to bValue, unless o.b is redefined\n\n\t// You cannot try to mix both:\n\tObject.defineProperty(o, 'conflict', {\n\t  value: 0x9f91102,\n\t  get: function() { return 0xdeadbeef; }\n\t});\n\t// throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors\n\n##Example: Modifying a property\n\nWhen the property already exists, Object.defineProperty() attempts to modify the property according to the values in the descriptor and the object's current configuration. If the old descriptor had its configurable attribute set to false (the property is said to be “non-configurable”), then no attribute besides writable can be changed. In that case, it is also not possible to switch back and forth between the data and accessor property types.\n\nIf a property is non-configurable, its writable attribute can only be changed to false.\n\nA TypeError is thrown when attempts are made to change non-configurable property attributes (besides the writable attribute) unless the current and new values are the same.\n\n##Writable attribute\n\nWhen the writable property attribute is set to false, the property is said to be “non-writable”. It cannot be reassigned.\n\n\tvar o = {}; // Creates a new object\n\n\tObject.defineProperty(o, 'a', {\n\t  value: 37,\n\t  writable: false\n\t});\n\n\tconsole.log(o.a); // logs 37\n\to.a = 25; // No error thrown (it would throw in strict mode, even if the value had been the same)\n\tconsole.log(o.a); // logs 37. The assignment didn't work.\n\nAs seen in the example, trying to write into the non-writable property doesn't change it but doesn't throw an error either.\n\n##Enumerable attribute\n\nThe enumerable property attribute defines whether the property shows up in a for...in loop and Object.keys() or not.\n\n\tvar o = {};\n\tObject.defineProperty(o, 'a', { value: 1, enumerable: true });\n\tObject.defineProperty(o, 'b', { value: 2, enumerable: false });\n\tObject.defineProperty(o, 'c', { value: 3 }); // enumerable defaults to false\n\to.d = 4; // enumerable defaults to true when creating a property by setting it\n\n\tfor (var i in o) {\n\t  console.log(i);\n\t}\n\t// logs 'a' and 'd' (in undefined order)\n\n\tObject.keys(o); // ['a', 'd']\n\n\to.propertyIsEnumerable('a'); // true\n\to.propertyIsEnumerable('b'); // false\n\to.propertyIsEnumerable('c'); // false\n\tConfigurable attribute\n\n\tThe configurable attribute controls at the same time whether the property can be deleted from the object and whether its attributes (other than writable) can be changed.\n\n\tvar o = {};\n\tObject.defineProperty(o, 'a', {\n\t  get: function() { return 1; },\n\t  configurable: false\n\t});\n\n\tObject.defineProperty(o, 'a', { configurable: true }); // throws a TypeError\n\tObject.defineProperty(o, 'a', { enumerable: true }); // throws a TypeError\n\tObject.defineProperty(o, 'a', { set: function() {} }); // throws a TypeError (set was undefined previously)\n\tObject.defineProperty(o, 'a', { get: function() { return 1; } }); // throws a TypeError (even though the new get does exactly the same thing)\n\tObject.defineProperty(o, 'a', { value: 12 }); // throws a TypeError\n\n\tconsole.log(o.a); // logs 1\n\tdelete o.a; // Nothing happens\n\tconsole.log(o.a); // logs 1\n\n\nIf the configurable attribute of o.a had been true, none of the errors would be thrown and the property would be deleted at the end.\n\n##Example: Adding properties and default values\n\nIt's important to consider the way default values of attributes are applied. There is often a difference between simply using dot notation to assign a value and using Object.defineProperty(), as shown in the example below.\n\n\tvar o = {};\n\n\to.a = 1;\n\t// is equivalent to:\n\tObject.defineProperty(o, 'a', {\n\t  value: 1,\n\t  writable: true,\n\t  configurable: true,\n\t  enumerable: true\n\t});\n\n\n\t// On the other hand,\n\tObject.defineProperty(o, 'a', { value: 1 });\n\t// is equivalent to:\n\tObject.defineProperty(o, 'a', {\n\t  value: 1,\n\t  writable: false,\n\t  configurable: false,\n\t  enumerable: false\n\t});\n\n\n##Example: Custom Setters and Getters\n\nExample below shows how to implement a self-archiving object. When temperature property is set, the archive array gets a log entry.\n\n\tfunction Archiver() {\n\t  var temperature = null;\n\t  var archive = [];\n\n\t  Object.defineProperty(this, 'temperature', {\n\t    get: function() {\n\t      console.log('get!');\n\t      return temperature;\n\t    },\n\t    set: function(value) {\n\t      temperature = value;\n\t      archive.push({ val: temperature });\n\t    }\n\t  });\n\n\t  this.getArchive = function() { return archive; };\n\t}\n\n\tvar arc = new Archiver();\n\tarc.temperature; // 'get!'\n\tarc.temperature = 11;\n\tarc.temperature = 13;\n\tarc.getArchive(); // [{ val: 11 }, { val: 13 }]\t\n\n\n@static\n@param {Object} obj The object on which to define the property.\n@param {String} prop The name of the property to be defined or modified.\n@param {Object} descriptor The descriptor for the property being defined or modified.\n\n*/\n\n\n\n\n\n\n\n\n\n\n/*\n@method freeze\n\n#Summary\nThe Object.freeze() method freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed. In essence the object is made effectively immutable. The method returns the object being frozen.\n\n#Syntax\nObject.freeze(obj)\n\n#Description\nNothing can be added to or removed from the properties set of a frozen object. Any attempt to do so will fail, either silently or by throwing a TypeError exception (most commonly, but not exclusively, when in strict mode).\n\nValues cannot be changed for data properties. Accessor properties (getters and setters) work the same (and still give the illusion that you are changing the value). Note that values that are objects can still be modified, unless they are also frozen.\n\n#Examples\n\tvar obj = {\n\t  prop: function() {},\n\t  foo: 'bar'\n\t};\n\n\t// New properties may be added, existing properties may be changed or removed\n\tobj.foo = 'baz';\n\tobj.lumpy = 'woof';\n\tdelete obj.prop;\n\n\tvar o = Object.freeze(obj);\n\n\tassert(Object.isFrozen(obj) === true);\n\n\t// Now any changes will fail\n\tobj.foo = 'quux'; // silently does nothing\n\tobj.quaxxor = 'the friendly duck'; // silently doesn't add the property\n\n\t// ...and in strict mode such attempts will throw TypeErrors\n\tfunction fail(){\n\t  'use strict';\n\t  obj.foo = 'sparky'; // throws a TypeError\n\t  delete obj.quaxxor; // throws a TypeError\n\t  obj.sparky = 'arf'; // throws a TypeError\n\t}\n\n\tfail();\n\n\t// Attempted changes through Object.defineProperty will also throw\n\tObject.defineProperty(obj, 'ohai', { value: 17 }); // throws a TypeError\n\tObject.defineProperty(obj, 'foo', { value: 'eit' }); // throws a TypeError\n\tThe following example shows that object values in a frozen object can be mutated (freeze is shallow).\n\n\tobj = {\n\t  internal: {}\n\t};\n\n\tObject.freeze(obj);\n\tobj.internal.a = 'aValue';\n\n\tobj.internal.a // 'aValue'\n\n\t// To make obj fully immutable, freeze each object in obj.\n\t// To do so, we use this function.\n\n\tfunction deepFreeze(o) {\n\t  var prop, propKey;\n\t  Object.freeze(o); // First freeze the object.\n\t  for (propKey in o) {\n\t    prop = o[propKey];\n\t    if (!o.hasOwnProperty(propKey) || !(typeof prop === 'object') || Object.isFrozen(prop)) {\n\t      // If the object is on the prototype, not an object, or is already frozen,\n\t      // skip it. Note that this might leave an unfrozen reference somewhere in the\n\t      // object if there is an already frozen object containing an unfrozen object.\n\t      continue;\n\t    }\n\n\t    deepFreeze(prop); // Recursively call deepFreeze.\n\t  }\n\t}\n\n\tobj2 = {\n\t  internal: {}\n\t};\n\n\tdeepFreeze(obj2);\n\tobj2.internal.a = 'anotherValue';\n\tobj2.internal.a; // undefined\n\n\n@static\n\n@param obj The object to freeze.\n\n*/\n\n\n\n\n\n\n\n\n\n\n/*\n@method getOwnPropertyDescriptor\n\n#Summary\nThe Object.getOwnPropertyDescriptor() method returns a property descriptor for an own property (that is, one directly present on an object, not present by dint of being along an object's prototype chain) of a given object.\n\n#Syntax\n\tObject.getOwnPropertyDescriptor(obj, prop)\n\n#Description\nThis method permits examination of the precise description of a property. A property in JavaScript consists of a string-valued name and a property descriptor. Further information about property descriptor types and their attributes can be found in Object.defineProperty().\n\nA property descriptor is a record with some of the following attributes:\n\n###value\nThe value associated with the property (data descriptors only).\n###writable\ntrue if and only if the value associated with the property may be changed (data descriptors only).\n###get\nA function which serves as a getter for the property, or undefined if there is no getter (accessor descriptors only).\n###set\nA function which serves as a setter for the property, or undefined if there is no setter (accessor descriptors only).\n###configurable\ntrue if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.\n###enumerable\ntrue if and only if this property shows up during enumeration of the properties on the corresponding object.\n\n#Examples\n\n\tvar o, d;\n\n\to = { get foo() { return 17; } };\n\td = Object.getOwnPropertyDescriptor(o, 'foo');\n\t// d is { configurable: true, enumerable: true, get: , set: undefined }\n\n\to = { bar: 42 };\n\td = Object.getOwnPropertyDescriptor(o, 'bar');\n\t// d is { configurable: true, enumerable: true, value: 42, writable: true }\n\n\to = {};\n\tObject.defineProperty(o, 'baz', { value: 8675309, writable: false, enumerable: false });\n\td = Object.getOwnPropertyDescriptor(o, 'baz');\n\t// d is { value: 8675309, writable: false, enumerable: false, configurable: false }\n\n\n@static \n@param {Object}obj The object in which to look for the property.\n@param {String}prop The name of the property whose description is to be retrieved.\n@returns A property descriptor of the given property if it exists on the object, undefined otherwise.\n*/\n\n\n\n\n\n\n\n\n\n\n/*\n@method getOwnPropertyNames\n\n#Summary\nThe Object.getOwnPropertyNames() method returns an array of all properties (enumerable or not) found directly upon a given object.\n\n#Syntax\nObject.getOwnPropertyNames(obj)\n\n#Description\nObject.getOwnPropertyNames returns an array whose elements are strings corresponding to the enumerable and non-enumerable properties found directly upon obj. The ordering of the enumerable properties in the array is consistent with the ordering exposed by a for...in loop (or by Object.keys) over the properties of the object. The ordering of the non-enumerable properties in the array, and among the enumerable properties, is not defined.\n\n#Examples\n##Example: Using getOwnPropertyNames\n\n\tvar arr = ['a', 'b', 'c'];\n\tprint(Object.getOwnPropertyNames(arr).sort()); // prints '0,1,2,length'\n\n\t// Array-like object\n\tvar obj = { 0: 'a', 1: 'b', 2: 'c' };\n\tprint(Object.getOwnPropertyNames(obj).sort()); // prints '0,1,2'\n\n\t// Printing property names and values using Array.forEach\n\tObject.getOwnPropertyNames(obj).forEach(function(val, idx, array) {\n\t  print(val + ' -> ' + obj[val]);\n\t});\n\t// prints\n\t// 0 -> a\n\t// 1 -> b\n\t// 2 -> c\n\n\t// non-enumerable property\n\tvar my_obj = Object.create({}, { getFoo: { value: function() { return this.foo; }, enumerable: false } });\n\tmy_obj.foo = 1;\n\n\tprint(Object.getOwnPropertyNames(my_obj).sort()); // prints 'foo,getFoo'\n\nIf you want only the enumerable properties, see Object.keys() or use a for...in loop (although note that this will return enumerable properties not found directly upon that object but also along the prototype chain for the object unless the latter is filtered with hasOwnProperty()).\n\nItems on the prototype chain are not listed:\n\n\tfunction ParentClass() {}\n\tParentClass.prototype.inheritedMethod = function() {};\n\n\tfunction ChildClass() {\n\t  this.prop = 5;\n\t  this.method = function() {};\n\t}\n\tChildClass.prototype = new ParentClass;\n\tChildClass.prototype.prototypeMethod = function() {};\n\n\talert(\n\t  Object.getOwnPropertyNames(\n\t    new ChildClass() // ['prop', 'method']\n\t  )\n\t);\n\n##Example: Get Non-Enumerable Only\n\nThis uses the Array.prototype.filter() function to remove the enumerable keys (obtained with Object.keys()) from a list of all keys (obtained with Object.getOwnPropertyNames) leaving only the non-enumerable keys.\n\n\tvar target = myObject;\n\tvar enum_and_nonenum = Object.getOwnPropertyNames(target);\n\tvar enum_only = Object.keys(target);\n\tvar nonenum_only = enum_and_nonenum.filter(function(key) {\n\t  var indexInEnum = enum_only.indexOf(key);\n\t  if (indexInEnum == -1) {\n\t    // not found in enum_only keys mean the key is non-enumerable,\n\t    // so return true so we keep this in the filter\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t});\n\n\tconsole.log(nonenum_only);\n\n@static\n@param {Object} obj The object whose enumerable and non-enumerable own properties are to be returned.\n\n*/\n\n\n\n\n\n\n\n\n\n\n/*\n@method isExtensible\n#Summary\nThe Object.isExtensible() method determines if an object is extensible (whether it can have new properties added to it).\n\n#Syntax\n\tObject.isExtensible(obj)\n\n#Description\nObjects are extensible by default: they can have new properties added to them, and (in engines that support __proto__  their __proto__ property) can be modified. An object can be marked as non-extensible using Object.preventExtensions(), Object.seal(), or Object.freeze().\n\n#Examples\n\t// New objects are extensible.\n\tvar empty = {};\n\tassert(Object.isExtensible(empty) === true);\n\n\t// ...but that can be changed.\n\tObject.preventExtensions(empty);\n\tassert(Object.isExtensible(empty) === false);\n\n\t// Sealed objects are by definition non-extensible.\n\tvar sealed = Object.seal({});\n\tassert(Object.isExtensible(sealed) === false);\n\n\t// Frozen objects are also by definition non-extensible.\n\tvar frozen = Object.freeze({});\n\tassert(Object.isExtensible(frozen) === false);\n\tNotes\n\tIn ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError. In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n\n\t> Object.isExtensible(1)\n\tTypeError: 1 is not an object // ES5 code\n\n\t> Object.isExtensible(1)\n\tfalse                \n\n@static \n\n@param {Object} obj The object which should be checked.\n@return {boolean}\n*/\n\n\n\n\n/*\n@method isFrozen\n\n#Summary\nThe Object.isFrozen() determines if an object is frozen.\n\n#Syntax\n\tObject.isFrozen(obj)\n\n#Description\nAn object is frozen if and only if it is not extensible, all its properties are non-configurable, and all its data properties (that is, properties which are not accessor properties with getter or setter components) are non-writable.\n\n#Examples\n\t// A new object is extensible, so it is not frozen.\n\tassert(Object.isFrozen({}) === false);\n\n\t// An empty object which is not extensible is vacuously frozen.\n\tvar vacuouslyFrozen = Object.preventExtensions({});\n\tassert(Object.isFrozen(vacuouslyFrozen) === true);\n\n\t// A new object with one property is also extensible, ergo not frozen.\n\tvar oneProp = { p: 42 };\n\tassert(Object.isFrozen(oneProp) === false);\n\n\t// Preventing extensions to the object still doesn't make it frozen,\n\t// because the property is still configurable (and writable).\n\tObject.preventExtensions(oneProp);\n\tassert(Object.isFrozen(oneProp) === false);\n\n\t// ...but then deleting that property makes the object vacuously frozen.\n\tdelete oneProp.p;\n\tassert(Object.isFrozen(oneProp) === true);\n\n\t// A non-extensible object with a non-writable but still configurable property is not frozen.\n\tvar nonWritable = { e: 'plep' };\n\tObject.preventExtensions(nonWritable);\n\tObject.defineProperty(nonWritable, 'e', { writable: false }); // make non-writable\n\tassert(Object.isFrozen(nonWritable) === false);\n\n\t// Changing that property to non-configurable then makes the object frozen.\n\tObject.defineProperty(nonWritable, 'e', { configurable: false }); // make non-configurable\n\tassert(Object.isFrozen(nonWritable) === true);\n\n\t// A non-extensible object with a non-configurable but still writable property also isn't frozen.\n\tvar nonConfigurable = { release: 'the kraken!' };\n\tObject.preventExtensions(nonConfigurable);\n\tObject.defineProperty(nonConfigurable, 'release', { configurable: false });\n\tassert(Object.isFrozen(nonConfigurable) === false);\n\n\t// Changing that property to non-writable then makes the object frozen.\n\tObject.defineProperty(nonConfigurable, 'release', { writable: false });\n\tassert(Object.isFrozen(nonConfigurable) === true);\n\n\t// A non-extensible object with a configurable accessor property isn't frozen.\n\tvar accessor = { get food() { return 'yum'; } };\n\tObject.preventExtensions(accessor);\n\tassert(Object.isFrozen(accessor) === false);\n\n\t// ...but make that property non-configurable and it becomes frozen.\n\tObject.defineProperty(accessor, 'food', { configurable: false });\n\tassert(Object.isFrozen(accessor) === true);\n\n\t// But the easiest way for an object to be frozen is if Object.freeze has been called on it.\n\tvar frozen = { 1: 81 };\n\tassert(Object.isFrozen(frozen) === false);\n\tObject.freeze(frozen);\n\tassert(Object.isFrozen(frozen) === true);\n\n\t// By definition, a frozen object is non-extensible.\n\tassert(Object.isExtensible(frozen) === false);\n\n\t// Also by definition, a frozen object is sealed.\n\tassert(Object.isSealed(frozen) === true);\n\n#Notes\nIn ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError. In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n\n\t> Object.isFrozen(1)\n\tTypeError: 1 is not an object // ES5 code\n\n\t> Object.isFrozen(1)\n\ttrue                          // ES6 code\n\n\n@static\n@param {Object}obj The object which should be checked.\n@returns boolean\n*/\n\n\n\n\n\n/*\n@method isSealed\n\n#Summary\nThe Object.isSealed() method determines if an object is sealed.\n\n#Syntax\n\tObject.isSealed(obj)\n#Description\nReturns true if the object is sealed, otherwise false. An object is sealed if it is not extensible and if all its properties are non-configurable and therefore not removable (but not necessarily non-writable).\n\n#Examples\n\t// Objects aren't sealed by default.\n\tvar empty = {};\n\tassert(Object.isSealed(empty) === false);\n\n\t// If you make an empty object non-extensible, it is vacuously sealed.\n\tObject.preventExtensions(empty);\n\tassert(Object.isSealed(empty) === true);\n\n\t// The same is not true of a non-empty object, unless its properties are all non-configurable.\n\tvar hasProp = { fee: 'fie foe fum' };\n\tObject.preventExtensions(hasProp);\n\tassert(Object.isSealed(hasProp) === false);\n\n\t// But make them all non-configurable and the object becomes sealed.\n\tObject.defineProperty(hasProp, 'fee', { configurable: false });\n\tassert(Object.isSealed(hasProp) === true);\n\n\t// The easiest way to seal an object, of course, is Object.seal.\n\tvar sealed = {};\n\tObject.seal(sealed);\n\tassert(Object.isSealed(sealed) === true);\n\n\t// A sealed object is, by definition, non-extensible.\n\tassert(Object.isExtensible(sealed) === false);\n\n\t// A sealed object might be frozen, but it doesn't have to be.\n\tassert(Object.isFrozen(sealed) === true); // all properties also non-writable\n\n\tvar s2 = Object.seal({ p: 3 });\n\tassert(Object.isFrozen(s2) === false); // 'p' is still writable\n\n\tvar s3 = Object.seal({ get p() { return 0; } });\n\tassert(Object.isFrozen(s3) === true); // only configurability matters for accessor properties\n\n#Notes\n\tIn ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError. In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n\n\t> Object.isSealed(1)\n\tTypeError: 1 is not an object // ES5 code\n\n\t> Object.isSealed(1)\n\ttrue                          // ES6 code\n\n\n@static\n@param {Object} obj The object which should be checked.\n@returns {boolean}\n*/\n\n\n\n\n\n\n\n/*\n@method keys\n#Summary\nThe Object.keys() method returns an array of a given object's own enumerable properties, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).\n\n#Syntax\n\tObject.keys(obj)\n\n#Examples\n\tvar arr = ['a', 'b', 'c'];\n\tconsole.log(Object.keys(arr)); // console: ['0', '1', '2']\n\n\t// array like object\n\tvar obj = { 0: 'a', 1: 'b', 2: 'c' };\n\tconsole.log(Object.keys(obj)); // console: ['0', '1', '2']\n\n\t// array like object with random key ordering\n\tvar an_obj = { 100: 'a', 2: 'b', 7: 'c' };\n\tconsole.log(Object.keys(an_obj)); // console: ['2', '7', '100']\n\n\t// getFoo is property which isn't enumerable\n\tvar my_obj = Object.create({}, { getFoo: { value: function() { return this.foo; } } });\n\tmy_obj.foo = 1;\n\n\tconsole.log(Object.keys(my_obj)); // console: ['foo']\nIf you want all properties, even not enumerables, see Object.getOwnPropertyNames().\n\n#Polyfill\nTo add compatible Object.keys support in older environments that do not natively support it, copy the following snippet:\n\n\t// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n\tif (!Object.keys) {\n\t  Object.keys = (function() {\n\t    'use strict';\n\t    var hasOwnProperty = Object.prototype.hasOwnProperty,\n\t        hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString'),\n\t        dontEnums = [\n\t          'toString',\n\t          'toLocaleString',\n\t          'valueOf',\n\t          'hasOwnProperty',\n\t          'isPrototypeOf',\n\t          'propertyIsEnumerable',\n\t          'constructor'\n\t        ],\n\t        dontEnumsLength = dontEnums.length;\n\n\t    return function(obj) {\n\t      if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {\n\t        throw new TypeError('Object.keys called on non-object');\n\t      }\n\n\t      var result = [], prop, i;\n\n\t      for (prop in obj) {\n\t        if (hasOwnProperty.call(obj, prop)) {\n\t          result.push(prop);\n\t        }\n\t      }\n\n\t      if (hasDontEnumBug) {\n\t        for (i = 0; i < dontEnumsLength; i++) {\n\t          if (hasOwnProperty.call(obj, dontEnums[i])) {\n\t            result.push(dontEnums[i]);\n\t          }\n\t        }\n\t      }\n\t      return result;\n\t    };\n\t  }());\n\t}\nPlease note that the above code includes non-enumerable keys in IE7 (and maybe IE8), when passing in an object from a different window.\n\nFor a simple browser polyfill, see Javascript - Object.keys Browser Compatibility.\n\n@static\n@param {Object} obj The object whose enumerable own properties are to be returned.\n@returns {Array<String>} method returns an array of a given object's own enumerable properties, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).\n\n*/\n\n\n\n\n\n\n\n\n/*\n@method preventExtensions\n\n#Summary\nThe Object.preventExtensions() method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).\n\n#Syntax\n\tObject.preventExtensions(obj)\n\n#Description\nAn object is extensible if new properties can be added to it. Object.preventExtensions() marks an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible. Note that the properties of a non-extensible object, in general, may still be deleted. Attempting to add new properties to a non-extensible object will fail, either silently or by throwing a TypeError (most commonly, but not exclusively, when in strict mode).\n\nObject.preventExtensions() only prevents addition of own properties. Properties can still be added to the object prototype. However, calling Object.preventExtensions() on an object will also prevent extensions on its __proto__  property.\n\nIf there is a way to turn an extensible object to a non-extensible one, there is no way to do the opposite in ECMAScript 5.\n\n#Examples\n\t// Object.preventExtensions returns the object being made non-extensible.\n\tvar obj = {};\n\tvar obj2 = Object.preventExtensions(obj);\n\tassert(obj === obj2);\n\n\t// Objects are extensible by default.\n\tvar empty = {};\n\tassert(Object.isExtensible(empty) === true);\n\n\t// ...but that can be changed.\n\tObject.preventExtensions(empty);\n\tassert(Object.isExtensible(empty) === false);\n\n\t// Object.defineProperty throws when adding a new property to a non-extensible object.\n\tvar nonExtensible = { removable: true };\n\tObject.preventExtensions(nonExtensible);\n\tObject.defineProperty(nonExtensible, 'new', { value: 8675309 }); // throws a TypeError\n\n\t// In strict mode, attempting to add new properties to a non-extensible object throws a TypeError.\n\tfunction fail() {\n\t  'use strict';\n\t  nonExtensible.newProperty = 'FAIL'; // throws a TypeError\n\t}\n\tfail();\n\n\t// EXTENSION (only works in engines supporting __proto__\n\t// (which is deprecated. Use Object.getPrototypeOf instead)):\n\t// A non-extensible object's prototype is immutable.\n\tvar fixed = Object.preventExtensions({});\n\tfixed.__proto__ = { oh: 'hai' }; // throws a TypeError\n\n#Notes\nIn ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError. In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return it.\n\n\t> Object.preventExtensions(1)\n\tTypeError: 1 is not an object // ES5 code\n\n\t> Object.preventExtensions(1)\n\t1                             // ES6 code\n\n@static\n@param {Object}obj The object which should be made non-extensible.\n\n*/\n\n\n\n\n\n\n\n/*\n@method hasOwnProperty\n\n#Summary\nThe hasOwnProperty() method returns a boolean indicating whether the object has the specified property.\n\n#Syntax\n\tobj.hasOwnProperty(prop)\n\n#Description\nEvery object descended from Object inherits the hasOwnProperty method. This method can be used to determine whether an object has the specified property as a direct property of that object; unlike the in operator, this method does not check down the object's prototype chain.\n\n#Examples\n##Example: Using hasOwnProperty to test for a property's existence\n\nThe following example determines whether the o object contains a property named prop:\n\n\to = new Object();\n\to.prop = 'exists';\n\n\tfunction changeO() {\n\t  o.newprop = o.prop;\n\t  delete o.prop;\n\t}\n\n\to.hasOwnProperty('prop');   // returns true\n\tchangeO();\n\to.hasOwnProperty('prop');   // returns false\n\tExample: Direct versus inherited properties\n\n\tThe following example differentiates between direct properties and properties inherited through the prototype chain:\n\n\to = new Object();\n\to.prop = 'exists';\n\to.hasOwnProperty('prop');             // returns true\n\to.hasOwnProperty('toString');         // returns false\n\to.hasOwnProperty('hasOwnProperty');   // returns false\n##Example: Iterating over the properties of an object\n\nThe following example shows how to iterate over the properties of an object without executing on inherit properties. Note that the for...in loop is already only iterating enumerable items, so one should not assume based on the lack of non-enumerable properties shown in the loop that hasOwnProperty itself is confined strictly to enumerable items (as with Object.getOwnPropertyNames()).\n\n\tvar buz = {\n\t  fog: 'stack'\n\t};\n\n\tfor (var name in buz) {\n\t  if (buz.hasOwnProperty(name)) {\n\t    alert('this is fog (' + name + ') for sure. Value: ' + buz[name]);\n\t  }\n\t  else {\n\t    alert(name); // toString or something else\n\t  }\n\t}\n##Example: hasOwnProperty as a property\n\nJavaScript does not protect the property name hasOwnProperty; thus, if the possibility exists that an object might have a property with this name, it is necessary to use an external hasOwnProperty to get correct results:\n\n\tvar foo = {\n\t  hasOwnProperty: function() {\n\t    return false;\n\t  },\n\t  bar: 'Here be dragons'\n\t};\n\n\tfoo.hasOwnProperty('bar'); // always returns false\n\n\t// Use another Object's hasOwnProperty and call it with 'this' set to foo\n\t({}).hasOwnProperty.call(foo, 'bar'); // true\n\n\t// It's also possible to use the hasOwnProperty property from the Object prototype for this purpose\n\tObject.prototype.hasOwnProperty.call(foo, 'bar'); // true\nNote that in the last case there are no newly created objects.\n\n@static \n@param {String}prop The name of the property to test.\n\n*/\n\n\n\n\n\n\n\n/*\n@method  isPrototypeOf\n\n\n#Summary\nThe isPrototypeOf() method tests for an object in another object's prototype chain.\n\nNote: isPrototypeOf differs from the instanceof operator. In the expression \"object instanceof AFunction\", the object prototype chain is checked against AFunction.prototype, not against AFunction itself.\n#Syntax\n\tprototypeObj.isPrototypeOf(obj)\n#Description\nThe isPrototypeOf method allows you to check whether or not an object exists within another object's prototype chain.\n\nFor example, consider the following prototype chain:\n\n\tfunction Fee() {\n\t  // ...\n\t}\n\n\tfunction Fi() {\n\t  // ...\n\t}\n\tFi.prototype = new Fee();\n\n\tfunction Fo() {\n\t  // ...\n\t}\n\tFo.prototype = new Fi();\n\n\tfunction Fum() {\n\t  // ...\n\t}\n\tFum.prototype = new Fo();\nLater on down the road, if you instantiate Fum and need to check if Fi's prototype exists within the Fum prototype chain, you could do this:\n\n\tvar fum = new Fum();\n\t// ...\n\n\tif (Fi.prototype.isPrototypeOf(fum)) {\n\t  // do something safe\n\t}\nThis, along with the instanceof operator particularly comes in handy if you have code that can only function when dealing with objects descended from a specific prototype chain, e.g., to guarantee that certain methods or properties will be present on that object.\n\n\n@static \n@param {Object} prototypeObj An object to be tested against each link in the prototype chain of the object argument.\n@param {Object}object The object whose prototype chain will be searched.\n@returns {boolean}\n*/\n\n\n\n\n\n\n/*\n\n@method propertyIsEnumerable\n\n#Summary\nThe propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable.\n#Syntax\n\tobj.propertyIsEnumerable(prop)\n\n#Description\nEvery object has a propertyIsEnumerable method. This method can determine whether the specified property in an object can be enumerated by a for...in loop, with the exception of properties inherited through the prototype chain. If the object does not have the specified property, this method returns false.\n\n#Examples\n##Example: A basic use of propertyIsEnumerable\n\nThe following example shows the use of propertyIsEnumerable on objects and arrays:\n\n\tvar o = {};\n\tvar a = [];\n\to.prop = 'is enumerable';\n\ta[0] = 'is enumerable';\n\n\to.propertyIsEnumerable('prop');   // returns true\n\ta.propertyIsEnumerable(0);        // returns true\n##Example: User-defined versus built-in objects\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n\tvar a = ['is enumerable'];\n\n\ta.propertyIsEnumerable(0);          // returns true\n\ta.propertyIsEnumerable('length');   // returns false\n\n\tMath.propertyIsEnumerable('random');   // returns false\n\tthis.propertyIsEnumerable('Math');     // returns false\n##Example: Direct versus inherited properties\n\n\tvar a = [];\n\ta.propertyIsEnumerable('constructor');         // returns false\n\n\tfunction firstConstructor() {\n\t  this.property = 'is not enumerable';\n\t}\n\n\tfirstConstructor.prototype.firstMethod = function() {};\n\n\tfunction secondConstructor() {\n\t  this.method = function method() { return 'is enumerable'; };\n\t}\n\n\tsecondConstructor.prototype = new firstConstructor;\n\tsecondConstructor.prototype.constructor = secondConstructor;\n\n\tvar o = new secondConstructor();\n\to.arbitraryProperty = 'is enumerable';\n\n\to.propertyIsEnumerable('arbitraryProperty');   // returns true\n\to.propertyIsEnumerable('method');              // returns true\n\to.propertyIsEnumerable('property');            // returns false\n\n\to.property = 'is enumerable';\n\n\to.propertyIsEnumerable('property');            // returns true\n\n\t// These return false as they are on the prototype which \n\t// propertyIsEnumerable does not consider (even though the last two\n\t// are iteratable with for-in)\n\to.propertyIsEnumerable('prototype');   // returns false (as of JS 1.8.1/FF3.6)\n\to.propertyIsEnumerable('constructor'); // returns false\n\to.propertyIsEnumerable('firstMethod'); // returns false\n\n\n@param {String}prop The name of the property to test.\n@return {boolean}\n\n*/\n\n\n\n/*\n@method toLocaleString\n#Summary\nThe toLocaleString() method returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.\n\n#Syntax\n\tobj.toLocaleString();\n#Description\nObject's toLocaleString returns the result of calling toString().\n\nThis function is provided to give objects a generic toLocaleString method, even though not all may use it. See the list below.\n\nObjects overriding toLocaleString\n\n\tArray: Array.prototype.toLocaleString()\n\tNumber: Number.prototype.toLocaleString()\n\tDate: Date.prototype.toLocaleString()\n*/\n\n\n\n/*\n@method toString\n\n#Summary\nThe toString() method returns a string representing object.\n\n#Syntax\n\tobj.toString()\n#Description\nEvery object has a toString() method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the toString() method is inherited by every object descended from Object. If this method is not overridden in a custom object, toString() returns \"[object type]\", where type is the object type. The following code illustrates this:\n\n\tvar o = new Object();\n\to.toString();           // returns [object Object]\nNote: Starting in JavaScript 1.8.5 toString() called on null returns [object Null], and undefined returns [object Undefined], as defined in the 5th Edition of ECMAScript and a subsequent Errata. See Using toString to detect object type.\n#Examples\n##Example: Overriding the default toString method\n\nYou can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object.\n\nThe following code defines the Dog object type and creates theDog, an object of type Dog:\n\n\tfunction Dog(name, breed, color, sex) {\n\t  this.name = name;\n\t  this.breed = breed;\n\t  this.color = color;\n\t  this.sex = sex;\n\t}\n\n\ttheDog = new Dog('Gabby', 'Lab', 'chocolate', 'female');\nIf you call the toString() method on this custom object, it returns the default value inherited from Object:\n\n\ttheDog.toString(); // returns [object Object]\nThe following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form \"property = value;\".\n\n\tDog.prototype.toString = function dogToString() {\n\t  var ret = 'Dog ' + this.name + ' is a ' + this.sex + ' ' + this.color + ' ' + this.breed;\n\t  return ret;\n\t}\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:\n\n\tDog Gabby is a female chocolate Lab\n\n##Example: Using toString() to detect object class\n\ntoString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg.\n\n\tvar toString = Object.prototype.toString;\n\n\ttoString.call(new Date);    // [object Date]\n\ttoString.call(new String);  // [object String]\n\ttoString.call(Math);        // [object Math]\n\n\t// Since JavaScript 1.8.5\n\ttoString.call(undefined);   // [object Undefined]\n\ttoString.call(null);        // [object Null]\n\n@return{String}returns a string representing object.\n*/\n\n\n\n\n\n/*\n@method valueOf\n#Summary\nThe valueOf() method returns the primitive value of the specified object.\n\n#Syntax\n\tobject.valueOf()\n#Description\nJavaScript calls the valueOf method to convert an object to a primitive value. You rarely need to invoke the valueOf method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.\n\nBy default, the valueOf method is inherited by every object descended from Object. Every built-in core object overrides this method to return an appropriate value. If an object has no primitive value, valueOf returns the object itself, which is displayed as:\n\n\t[object Object]\nYou can use valueOf within your own code to convert a built-in object into a primitive value. When you create a custom object, you can override Object.prototype.valueOf() to call a custom method instead of the default Object method.\n\n##Overriding valueOf for custom objects\n\nYou can create a function to be called in place of the default valueOf method. Your function must take no arguments.\n\nSuppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object's valueOf method:\n\n\tmyNumberType.prototype.valueOf = function() { return customPrimitiveValue; };\nWith the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code.\n\nAn object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:\n\n\tmyNumber.valueOf()\nNote: Objects in string contexts convert via the toString() method, which is different from String objects converting to string primitives using valueOf. All objects have a string conversion, if only \"[object type]\". But many objects do not convert to number, boolean, or function.\n#Examples\n##Example: Using valueOf\n\n\to = new Object();\n\tmyVar = o.valueOf();      // [object Object]\n*/\n\n\n\n\n/*\n@method seal\n#Summary\nThe Object.seal() method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.\n\n#Syntax\n\tObject.seal(obj)\n\n#Description\nBy default, objects are extensible (new properties can be added to them). Sealing an object prevents new properties from being added and marks all existing properties as non-configurable. This has the effect of making the set of properties on the object fixed and immutable. Making all properties non-configurable also prevents them from being converted from data properties to accessor properties and vice versa, but it does not prevent the values of data properties from being changed. Attempting to delete or add properties to a sealed object, or to convert a data property to accessor or vice versa, will fail, either silently or by throwing a TypeError (most commonly, although not exclusively, when in strict mode code).\n\nThe prototype chain remains untouched. However, the __proto__  property is sealed as well.\n\n#Examples\n\tvar obj = {\n\t  prop: function() {},\n\t  foo: 'bar'\n\t};\n\n\t// New properties may be added, existing properties may be changed or removed.\n\tobj.foo = 'baz';\n\tobj.lumpy = 'woof';\n\tdelete obj.prop;\n\n\tvar o = Object.seal(obj);\n\n\tassert(o === obj);\n\tassert(Object.isSealed(obj) === true);\n\n\t// Changing property values on a sealed object still works.\n\tobj.foo = 'quux';\n\n\t// But you can't convert data properties to accessors, or vice versa.\n\tObject.defineProperty(obj, 'foo', { get: function() { return 'g'; } }); // throws a TypeError\n\n\t// Now any changes, other than to property values, will fail.\n\tobj.quaxxor = 'the friendly duck'; // silently doesn't add the property\n\tdelete obj.foo; // silently doesn't delete the property\n\n\t// ...and in strict mode such attempts will throw TypeErrors.\n\tfunction fail() {\n\t  'use strict';\n\t  delete obj.foo; // throws a TypeError\n\t  obj.sparky = 'arf'; // throws a TypeError\n\t}\n\tfail();\n\n\t// Attempted additions through Object.defineProperty will also throw.\n\tObject.defineProperty(obj, 'ohai', { value: 17 }); // throws a TypeError\n\tObject.defineProperty(obj, 'foo', { value: 'eit' }); // changes existing property value\n\n@static \n\n@param  obj The object which should be sealed.\n*/\n\n\n\n\n\n/*\n@class Any\nThis is an artificial type that means 'any value is valid here'\n*/\n\n/*\n\n@module javascript \n\n\n\n@class ObjectPrototype\n\nAdapted from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\n\n#Description\nThe Object.prototype property represents the Object prototype object.\n\nAll objects in JavaScript are descended from Object; all objects inherit methods and properties from Object.prototype, although they may be overridden (except an Object with a null prototype, i.e. Object.create(null)). For example, other constructors' prototypes override the constructor property and provide their own toString() methods. Changes to the Object prototype object are propagated to all objects unless the properties and methods subject to those changes are overridden further along the prototype chain.\n\n#Examples\nSince Javascript doesn't exactly have sub-class objects, prototype is a useful workaround to make a “base class” object of certain functions that act as objects. For example:\n\n\tvar Person = function() {\n\t  this.canTalk = true;\n\t  this.greet = function() {\n\t    if (this.canTalk) {\n\t      console.log('Hi, I'm ' + this.name);\n\t    }\n\t  };\n\t};\n\n\tvar Employee = function(name, title) {\n\t  this.name = name;\n\t  this.title = title;\n\t  this.greet = function() {\n\t    if (this.canTalk) {\n\t      console.log(\"Hi, I'm \" + this.name + \", the \" + this.title);\n\t    }\n\t  };\n\t};\n\tEmployee.prototype = new Person();\n\n\tvar Customer = function(name) {\n\t  this.name = name;\n\t};\n\tCustomer.prototype = new Person();\n\n\tvar Mime = function(name) {\n\t  this.name = name;\n\t  this.canTalk = false;\n\t};\n\tMime.prototype = new Person();\n\n\tvar bob = new Employee('Bob', 'Builder');\n\tvar joe = new Customer('Joe');\n\tvar rg = new Employee('Red Green', 'Handyman');\n\tvar mike = new Customer('Mike');\n\tvar mime = new Mime('Mime');\n\tbob.greet();\n\tjoe.greet();\n\trg.greet();\n\tmike.greet();\n\tmime.greet();\n\nThis will output:\n\n\tHi, I'm Bob, the Builder\n\tHi, I'm Joe\n\tHi, I'm Red Green, the Handyman\n\tHi, I'm Mike\n\n*/\n\n\n\n/*\n\n\n\n@property {Function} constructor Specifies the function that creates an object's prototype.\n\n##Summary\nReturns a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name. The value is only read-only for primitive values such as 1, true and \"test\".\n\n##Description\n\nAll objects inherit a constructor property from their prototype:\n\n\tvar o = {};\n\to.constructor === Object; // true\n\n\tvar a = [];\n\ta.constructor === Array; // true\n\n\tvar n = new Number(3);\n\tn.constructor === Number; // true\n\n##Examples\n\n###Example: Displaying the constructor of an object\n\nThe following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.\n\n\tfunction Tree(name) {\n\t  this.name = name;\n\t}\n\n\tvar theTree = new Tree('Redwood');\n\tconsole.log('theTree.constructor is ' + theTree.constructor);\n\tThis example displays the following output:\n\n\ttheTree.constructor is function Tree(name) {\n\t  this.name = name;\n\t}\n\n###Example: Changing the constructor of an object\n\nThe following example shows how to modify constructor value of generic objects. Only true, 1 and \"test\" will not be affected as they have read-only native constructors. This example shows that it is not always safe to rely on the constructor property of an object.\n\n\tfunction Type () {}\n\n\tvar types = [\n\t  new Array(),\n\t  [],\n\t  new Boolean(),\n\t  true,             // remains unchanged\n\t  new Date(),\n\t  new Error(),\n\t  new Function(),\n\t  function () {},\n\t  Math,\n\t  new Number(),\n\t  1,                // remains unchanged\n\t  new Object(),\n\t  {},\n\t  new RegExp(),\n\t  /(?:)/,\n\t  new String(),\n\t  'test'            // remains unchanged\n\t];\n\tfor (var i = 0; i < types.length; i++) {\n\t  types[i].constructor = Type;\n\t  types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n\t}\n\tconsole.log(types.join('\\n'));\n\tThis example displays the following output:\n\n\tfunction Type() {},false,\n\tfunction Type() {},false,\n\tfunction Type() {},false,false\n\tfunction Boolean() {\n\t    [native code]\n\t},false,true\n\tfunction Type() {},false,Mon Sep 01 2014 16:03:49 GMT+0600\n\tfunction Type() {},false,Error\n\tfunction Type() {},false,function anonymous() {\n\n\t}\n\tfunction Type() {},false,function () {}\n\tfunction Type() {},false,[object Math]\n\tfunction Type() {},false,0\n\tfunction Number() {\n\t    [native code]\n\t},false,1\n\tfunction Type() {},false,[object Object]\n\tfunction Type() {},false,[object Object]\n\tfunction Type() {},false,/(?:)/\n\tfunction Type() {},false,/(?:)/\n\tfunction Type() {},false,\n\tfunction String() {\n\t    [native code]\n\t},false,тест\n\n*/\n\n\n\n\n\n\n\n/*\n@property {Object} __proto__ \nPoints to the object which was used as prototype when the object was instantiated.\n\n@property {Function} __noSuchMethod__ \nAllows a function to be defined that will be executed when an undefined object member is called as a method.\n*/\n\n\n\n/* \n@module javascript\n\n@class String\n\n#Summary\nThe String global object is a constructor for strings, or a sequence of characters.\n\n#Syntax\nString literals take the forms:\n\n\t'string text' \"string text\" \"中文 español English हिन्दी العربية português বাংলা русский 日本語 ਪੰਜਾਬੀ 한국어\"\n\nBeside regular, printable characters, special characters can be encoded using escape notation:\n\n\tCode\tOutput\n\t\\0\tthe NUL character\n\t\\'\tsingle quote\n\t\\\"\tdouble quote\n\t\\\\\tbackslash\n\t\\n\tnew line\n\t\\r\tcarriage return\n\t\\v\tvertical tab\n\t\\t\ttab\n\t\\b\tbackspace\n\t\\f\tform feed\n\t\\uXXXX\tunicode codepoint\n\t\\xXX\tthe Latin-1 character\n\nOr, using the String global object directly:\n\n\tString(thing) new String(thing)\n\n#Description\nStrings are useful for holding data that can be represented in text form. Some of the most-used operations on strings are to check their length, to build and concatenate them using the + and += string operators, checking for the existence or location of substrings with the indexOf method, or extracting substrings with the substring method.\n\n##Character access\n\nThere are two ways to access an individual character in a string. The first is the charAt method:\n\n\treturn 'cat'.charAt(1); // returns \"a\"\n\nThe other way (introduced in ECMAScript 5) is to treat the string as an array-like object, where individual characters correspond to a numerical index:\n\n\treturn 'cat'[1]; // returns \"a\"\n\nFor character access using bracket notation, attempting to delete or assign a value to these properties will not succeed. The properties involved are neither writable nor configurable. (See Object.defineProperty for more information.)\n\n##Comparing strings\n\nC developers have the strcmp() function for comparing strings. In JavaScript, you just use the less-than and greater-than operators:\n\n\tvar a = \"a\";\n\tvar b = \"b\";\n\tif (a < b) // true\n\t  print(a + \" is less than \" + b);\n\telse if (a > b)\n\t  print(a + \" is greater than \" + b);\n\telse\n\t  print(a + \" and \" + b + \" are equal.\");\n\nA similar result can be achieved using the localeCompare method inherited by String instances.\n\n##Distinction between string primitives and String objects\n\nNote that JavaScript distinguishes between String objects and primitive string values. (The same is true of Boolean and Numbers.)\n\nString literals (denoted by double or single quotes) and strings returned from String calls in a non-constructor context (i.e., without using the new keyword) are primitive strings. JavaScript automatically converts primitives to String objects, so that it's possible to use String object methods for primitive strings. In contexts where a method is to be invoked on a primitive string or a property lookup occurs, JavaScript will automatically wrap the string primitive and call the method or perform the property lookup.\n\n\tvar s_prim = \"foo\";\n\tvar s_obj = new String(s_prim);\n\n\tconsole.log(typeof s_prim); // Logs \"string\"\n\tconsole.log(typeof s_obj);  // Logs \"object\"\n\tString primitives and String objects also give different results when using eval. Primitives passed to eval are treated as source code; String objects are treated as all other objects are, by returning the object. For example:\n\n\ts1 = \"2 + 2\";               // creates a string primitive\n\ts2 = new String(\"2 + 2\");   // creates a String object\n\tconsole.log(eval(s1));      // returns the number 4\n\tconsole.log(eval(s2));      // returns the string \"2 + 2\"\n\nFor these reasons, code may break when it encounters String objects when it expects a primitive string instead, although generally authors need not worry about the distinction.\n\nA String object can always be converted to its primitive counterpart with the valueOf method.\n\n\tconsole.log(eval(s2.valueOf())); // returns the number 4\n\nNote: For another possible approach to strings in JavaScript, please read the article about StringView – a C-like representation of strings based on typed arrays.\n\n\n#String generic methods\nThe String instance methods are also available in Firefox as of JavaScript 1.6 (though not part of the ECMAScript standard) on the String object for applying String methods to any object:\n\n\tvar num = 15;\n\talert(String.replace(num, /5/, '2'));\n\nGenerics are also available on Array methods.\n\nThe following is a shim to provide support to non-supporting browsers:\n\n\t//globals define\n\t// Assumes all supplied String instance methods already present\n\t// (one may use shims for these if not available)\n\t(function () {\n\t    'use strict';\n\n\t    var i,\n\t        // We could also build the array of methods with the following, but the\n\t        //   getOwnPropertyNames() method is non-shimable:\n\t        // Object.getOwnPropertyNames(String).filter(function (methodName)\n\t        //  {return typeof String[methodName] === 'function'});\n\t        methods = [\n\t            'quote', 'substring', 'toLowerCase', 'toUpperCase', 'charAt',\n\t            'charCodeAt', 'indexOf', 'lastIndexOf', 'startsWith', 'endsWith',\n\t            'trim', 'trimLeft', 'trimRight', 'toLocaleLowerCase',\n\t            'toLocaleUpperCase', 'localeCompare', 'match', 'search',\n\t            'replace', 'split', 'substr', 'concat', 'slice'\n\t        ],\n\t        methodCount = methods.length,\n\t        assignStringGeneric = function (methodName) {\n\t            var method = String.prototype[methodName];\n\t            String[methodName] = function (arg1) {\n\t                return method.apply(arg1, Array.prototype.slice.call(arguments, 1));\n\t            };\n\t        };\n\n\t    for (i = 0; i < methodCount; i++) {\n\t        assignStringGeneric(methods[i]);\n\t    }\n\t}());\n\n#Examples\n##String conversion\n\nIt's possible to use String as a \"safer\" toString alternative, as although it still normally calls the underlying toString, it also works for null and undefined. For example:\n\n\tvar outputStrings = [];\n\tfor (let i = 0, n = inputValues.length; i < n; ++i) {\n\t  outputStrings.push(String(inputValues[i]));\n\t}\n\n*/\n\n\n\n\n\n\n/*\n@property {Number} length\n\n#Summary\nThe length property represents the length of a string.\n\n#Syntax\n\n\tstr.length\n\n#Description\n\nThis property returns the number of code units in the string. UTF-16, the string format used by JavaScript, uses a single 16-bit code unit to represent the most common characters, but needs to use two code units for less commonly-used characters, so it's possible for the value returned by length to not match the actual number of characters in the string.\n\nFor an empty string, length is 0.\n\nThe static property String.length returns the value 1.\n\n#Examples\n\n\tvar x = \"Mozilla\";\n\tvar empty = \"\";\n\n\tconsole.log(\"Mozilla is \" + x.length + \" code units long\");\n\t// \"Mozilla is 7 code units long\" \n\n\tconsole.log(\"The empty string is has a length of \" + empty.length);\n\t // \"The empty string is has a length of 0\" \n\n*/\n\n\n\n\n/*\n@method fromCharCode\n\n#Summary\nThe static String.fromCharCode() method returns a string created by using the specified sequence of Unicode values.\n\n#Syntax\nString.fromCharCode(num1, ..., numN)\n#Description\nThis method returns a string and not a String object.\n\nBecause fromCharCode is a static method of String, you always use it as String.fromCharCode(), rather than as a method of a String object you created.\n\n#Examples\nExample: Using fromCharCode\n\nThe following example returns the string \"ABC\".\n\n\tString.fromCharCode(65,66,67)\n\n#Getting it to work with higher values\nAlthough most common Unicode values can be represented with one 16-bit number (as expected early on during JavaScript standardization) and fromCharCode() can be used to return a single character for the most common values (i.e., UCS-2 values which are the subset of UTF-16 with the most common characters), in order to deal with ALL legal Unicode values (up to 21 bits), fromCharCode() alone is inadequate. Since the higher code point characters use two (lower value) \"surrogate\" numbers to form a single character, String.fromCodePoint() (part of the ES6 draft) can be used to return such a pair and thus adequately represent these higher valued characters.\n\n@return {String}  returns a string created by using the specified sequence of Unicode values.}\n\n@param p1,...pn A sequence of numbers that are Unicode values\n\n*/\n\n\n\n\n\n\n\n/*\n@method charAt\n\n\n#Summary\nThe charAt() method returns the specified character from a string.\n\n#Syntax\n\tstr.charAt(index)\n#Description\nCharacters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character in a string called stringName is stringName.length - 1. If the index you supply is out of range, JavaScript returns an empty string.\n\n#Examples\n##Example: Displaying characters at different locations in a string\n\nThe following example displays characters at different locations in the string \"Brave new world\":\n\n\tvar anyString = \"Brave new world\";\n\n\tconsole.log(\"The character at index 0   is '\" + anyString.charAt(0)   + \"'\");\n\tconsole.log(\"The character at index 1   is '\" + anyString.charAt(1)   + \"'\");\n\tconsole.log(\"The character at index 2   is '\" + anyString.charAt(2)   + \"'\");\n\tconsole.log(\"The character at index 3   is '\" + anyString.charAt(3)   + \"'\");\n\tconsole.log(\"The character at index 4   is '\" + anyString.charAt(4)   + \"'\");\n\tconsole.log(\"The character at index 999 is '\" + anyString.charAt(999) + \"'\");\n\nThese lines display the following:\n\n\tThe character at index 0 is 'B'\n\tThe character at index 1 is 'r'\n\tThe character at index 2 is 'a'\n\tThe character at index 3 is 'v'\n\tThe character at index 4 is 'e'\n\tThe character at index 999 is ''\n\n##Example: Getting whole characters\n\nThe following provides a means of ensuring that going through a string loop always provides a whole character, even if the string contains characters that are not in the Basic Multi-lingual Plane.\n\n\tvar str = 'A \\uD87E\\uDC04 Z'; // We could also use a non-BMP character directly\n\tfor (var i=0, chr; i < str.length; i++) {\n\t  if ((chr = getWholeChar(str, i)) === false) {\n\t    continue;\n\t  } // Adapt this line at the top of each loop, passing in the whole string and\n\t    // the current iteration and returning a variable to represent the \n\t    // individual character\n\n\t  alert(chr);\n\t}\n\n\tfunction getWholeChar (str, i) {\n\t  var code = str.charCodeAt(i);     \n\t \n\t  if (isNaN(code)) {\n\t    return ''; // Position not found\n\t  }\n\t  if (code < 0xD800 || code > 0xDFFF) {\n\t    return str.charAt(i);\n\t  }\n\n\t  // High surrogate (could change last hex to 0xDB7F to treat high private\n\t  // surrogates as single characters)\n\t  if (0xD800 <= code && code <= 0xDBFF) { \n\t    if (str.length <= (i+1))  {\n\t      throw 'High surrogate without following low surrogate';\n\t    }\n\t    var next = str.charCodeAt(i+1);\n\t      if (0xDC00 > next || next > 0xDFFF) {\n\t        throw 'High surrogate without following low surrogate';\n\t      }\n\t      return str.charAt(i)+str.charAt(i+1);\n\t  }\n\t  // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n\t  if (i === 0) {\n\t    throw 'Low surrogate without preceding high surrogate';\n\t  }\n\t  var prev = str.charCodeAt(i-1);\n\t  \n\t  // (could change last hex to 0xDB7F to treat high private\n\t  // surrogates as single characters)\n\t  if (0xD800 > prev || prev > 0xDBFF) { \n\t    throw 'Low surrogate without preceding high surrogate';\n\t  }\n\t  // We can pass over low surrogates now as the second component\n\t  // in a pair which we have already processed\n\t  return false; \n\t}\n\nIn an exclusive JavaScript 1.7+ environment (such as Firefox) which allows destructured assignment, the following is a more succinct and somewhat more flexible alternative in that it does incrementing for an incrementing variable automatically (if the character warrants it in being a surrogate pair).\n\n\tvar str = 'A\\uD87E\\uDC04Z'; // We could also use a non-BMP character directly\n\tfor (var i=0, chr; i < str.length; i++) {\n\t  [chr, i] = getWholeCharAndI(str, i);\n\t  // Adapt this line at the top of each loop, passing in the whole string and\n\t  // the current iteration and returning an array with the individual character\n\t  // and 'i' value (only changed if a surrogate pair)\n\n\t  alert(chr);\n\t}\n\n\tfunction getWholeCharAndI (str, i) {\n\t  var code = str.charCodeAt(i);\n\n\t  if (isNaN(code)) {\n\t    return ''; // Position not found\n\t  }\n\t  if (code < 0xD800 || code > 0xDFFF) {\n\t    return [str.charAt(i), i]; // Normal character, keeping 'i' the same\n\t  }\n\n\t  // High surrogate (could change last hex to 0xDB7F to treat high private \n\t  // surrogates as single characters)\n\t  if (0xD800 <= code && code <= 0xDBFF) { \n\t    if (str.length <= (i+1))  {\n\t      throw 'High surrogate without following low surrogate';\n\t    }\n\t    var next = str.charCodeAt(i+1);\n\t      if (0xDC00 > next || next > 0xDFFF) {\n\t        throw 'High surrogate without following low surrogate';\n\t      }\n\t      return [str.charAt(i)+str.charAt(i+1), i+1];\n\t  }\n\t  // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n\t  if (i === 0) {\n\t    throw 'Low surrogate without preceding high surrogate';\n\t  }\n\t  var prev = str.charCodeAt(i-1);\n\n\t  // (could change last hex to 0xDB7F to treat high private surrogates\n\t  // as single characters)\n\t  if (0xD800 > prev || prev > 0xDBFF) { \n\t    throw 'Low surrogate without preceding high surrogate';\n\t  }\n\t  // Return the next character instead (and increment)\n\t  return [str.charAt(i+1), i+1]; \n\t}\n\n\n##Example: Fixing charAt to support non-Basic-Multilingual-Plane (BMP) characters\n\nWhile the example above may be more frequently useful for those wishing to support non-BMP characters (since it does not require the caller to know where any non-BMP character might appear), in the event that one does wish, in choosing a character by index, to treat the surrogate pairs within a string as the single characters they represent, one can use the following:\n\n\tfunction fixedCharAt (str, idx) {\n\t  var ret = '';\n\t  str += '';\n\t  var end = str.length;\n\n\t  var surrogatePairs = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n\t  while ((surrogatePairs.exec(str)) != null) {\n\t    var li = surrogatePairs.lastIndex;\n\t    if (li - 2 < idx) {\n\t      idx++;\n\t    } else {\n\t      break;\n\t    }\n\t  }\n\n\t  if (idx >= end || idx < 0) {\n\t    return '';\n\t  }\n\n\t  ret += str.charAt(idx);\n\n\t  if (/[\\uD800-\\uDBFF]/.test(ret) && /[\\uDC00-\\uDFFF]/.test(str.charAt(idx+1))) {\n\t    // Go one further, since one of the \"characters\" is part of a surrogate pair\n\t    ret += str.charAt(idx+1); \n\t  }\n\t  return ret;\n\t}\n\n\n@param {Number} index An integer between 0 and 1-less-than the length of the string.\n@return {String} the specified character from a string.\n\n*/\n\n\n\n\n/*\n@method charCodeAt\n\n#Summary\nThe charCodeAt() method returns the numeric Unicode value of the character at the given index (except for unicode codepoints > 0x10000).\n\n#Syntax\n\tstr.charCodeAt(index)\n#Description\nUnicode code points range from 0 to 1,114,111. The first 128 Unicode code points are a direct match of the ASCII character encoding. For information on Unicode, see the JavaScript Guide.\n\nNote that charCodeAt will always return a value that is less than 65,536. This is because the higher code points are represented by a pair of (lower valued) \"surrogate\" pseudo-characters which are used to comprise the real character. Because of this, in order to examine or reproduce the full character for individual characters of value 65,536 and above, for such characters, it is necessary to retrieve not only charCodeAt(i), but also charCodeAt(i+1) (as if examining/reproducing a string with two letters). See example 2 and 3 below.\n\ncharCodeAt returns NaN if the given index is not greater than 0 or is greater than the length of the string.\n\nBackward compatibilty: In historic versions (like JavaScript 1.2) the charCodeAt method returns a number indicating the ISO-Latin-1 codeset value of the character at the given index. The ISO-Latin-1 codeset ranges from 0 to 255. The first 0 to 127 are a direct match of the ASCII character set.\n\n#Examples\n##Example: Using charCodeAt\n\nThe following example returns 65, the Unicode value for A.\n\n\t\"ABC\".charCodeAt(0) // returns 65\n\n#Example: Fixing charCodeAt to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is unknown\n\nThis version might be used in for loops and the like when it is unknown whether non-BMP characters exist before the specified index position.\n\n\tfunction fixedCharCodeAt (str, idx) {\n\t    // ex. fixedCharCodeAt ('\\uD800\\uDC00', 0); // 65536\n\t    // ex. fixedCharCodeAt ('\\uD800\\uDC00', 1); // false\n\t    idx = idx || 0;\n\t    var code = str.charCodeAt(idx);\n\t    var hi, low;\n\t    \n\t    // High surrogate (could change last hex to 0xDB7F to treat high\n\t    // private surrogates as single characters)\n\t    if (0xD800 <= code && code <= 0xDBFF) {\n\t        hi = code;\n\t        low = str.charCodeAt(idx+1);\n\t        if (isNaN(low)) {\n\t            throw 'High surrogate not followed by low surrogate in fixedCharCodeAt()';\n\t        }\n\t        return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n\t    }\n\t    if (0xDC00 <= code && code <= 0xDFFF) { // Low surrogate\n\t        // We return false to allow loops to skip this iteration since should have\n\t        // already handled high surrogate above in the previous iteration\n\t        return false;\n\t        //hi = str.charCodeAt(idx-1);\n\t        //low = code;\n\t        //return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n\t    }\n\t    return code;\n\t}\n\n##Example: Fixing charCodeAt to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is known\n\n\tfunction knownCharCodeAt (str, idx) {\n\t    str += '';\n\t    var code,\n\t        end = str.length;\n\n\t    var surrogatePairs = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n\t    while ((surrogatePairs.exec(str)) != null) {\n\t        var li = surrogatePairs.lastIndex;\n\t        if (li - 2 < idx) {\n\t            idx++;\n\t        }\n\t        else {\n\t            break;\n\t        }\n\t    }\n\n\t    if (idx >= end || idx < 0) {\n\t        return NaN;\n\t    }\n\n\t    code = str.charCodeAt(idx);\n\n\t    var hi, low;\n\t    if (0xD800 <= code && code <= 0xDBFF) {\n\t        hi = code;\n\t        low = str.charCodeAt(idx+1);\n\t        // Go one further, since one of the \"characters\" is part of a surrogate pair\n\t        return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n\t    }\n\t    return code;\n\t}\n\n\n@param {Number} index\nAn integer greater than or equal to 0 and less than the length of the string; if it is not a number, it defaults to 0.\n\n@returns {Number}returns the numeric Unicode value of the character at the given index (except for unicode codepoints > 0x10000).\n\n*/\n\n\n\n\n\n/*\n@method concat\n\n\n#Summary\nThe concat() method combines the text of two or more strings and returns a new string.\n\n#Syntax\n\tstr.concat(string2, string3[, ..., stringN])\n\n#Description\nThe concat function combines the text from one or more strings and returns a new string. Changes to the text in one string do not affect the other string.\n\n#Examples\n##Example: Using concat\n\nThe following example combines strings into a new string.\n\n\tvar hello = \"Hello, \";\n\tconsole.log(hello.concat(\"Kevin\", \" have a nice day.\")); \n\n\t// Hello, Kevin have a nice day. \n\n#Performance\nIt is strongly recommended that assignment operators (+, +=) are used instead of the concat method. See this perfomance test.\n\n@param string2...stringN Strings to concatenate to this string.\n\n@return {String}\n*/\n\n\n\n\n/*\n@method indexOf\n\n#Summary\nThe indexOf() method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found.\n\n#Syntax\n\tstr.indexOf(searchValue[, fromIndex])\n#Description\nCharacters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character of a string called stringName is stringName.length - 1.\n\n\t\"Blue Whale\".indexOf(\"Blue\");     // returns  0\n\t\"Blue Whale\".indexOf(\"Blute\");    // returns -1\n\t\"Blue Whale\".indexOf(\"Whale\", 0); // returns  5\n\t\"Blue Whale\".indexOf(\"Whale\", 5); // returns  5\n\t\"Blue Whale\".indexOf(\"\", 9);      // returns  9\n\t\"Blue Whale\".indexOf(\"\", 10);     // returns 10\n\t\"Blue Whale\".indexOf(\"\", 11);     // returns 10\n\n##Case-sensitivity\n\nThe indexOf method is case sensitive. For example, the following expression returns -1:\n\n\"Blue Whale\".indexOf(\"blue\") // returns -1\n##Checking occurrences\n\nNote that '0' doesn't evaluate to true and '-1' doesn't evaluate to false. Therefore, when checking if a specific string exists within another string the correct way to check would be:\n\n\"Blue Whale\".indexOf(\"Blue\") != -1; // true\n\"Blue Whale\".indexOf(\"Bloe\") != -1; // false\n\n#Examples\n##Example: Using indexOf and lastIndexOf\n\nThe following example uses indexOf and lastIndexOf to locate values in the string \"Brave new world\".\n\n\tvar anyString = \"Brave new world\";\n\n\tconsole.log(\"The index of the first w from the beginning is \" + anyString.indexOf(\"w\"));\n\t// Displays 8\n\tconsole.log(\"The index of the first w from the end is \" + anyString.lastIndexOf(\"w\")); \n\t// Displays 10\n\n\tconsole.log(\"The index of 'new' from the beginning is \" + anyString.indexOf(\"new\"));   \n\t// Displays 6\n\tconsole.log(\"The index of 'new' from the end is \" + anyString.lastIndexOf(\"new\"));\n\t// Displays 6\n##Example: indexOf and case-sensitivity\n\nThe following example defines two string variables. The variables contain the same string except that the second string contains uppercase letters. The first log method displays 19. But because the indexOf method is case sensitive, the string \"cheddar\" is not found in myCapString, so the second log method displays -1.\n\n\tvar myString    = \"brie, pepper jack, cheddar\";\n\tvar myCapString = \"Brie, Pepper Jack, Cheddar\";\n\n\tconsole.log('myString.indexOf(\"cheddar\") is ' + myString.indexOf(\"cheddar\"));    \n\t// Displays 19\n\tconsole.log('myCapString.indexOf(\"cheddar\") is ' + myCapString.indexOf(\"cheddar\")); \n\t// Displays -1\n##Example: Using indexOf to count occurrences of a letter in a string\n\nThe following example sets count to the number of occurrences of the letter x in the string str:\n\n\tcount = 0;\n\tpos = str.indexOf(\"x\");\n\n\twhile ( pos != -1 ) {\n\t   count++;\n\t   pos = str.indexOf( \"x\",pos + 1 );\n\t}\n\n\n@param {String} searchValue A string representing the value to search for.\n@param {Number} fromIndex The location within the calling string to start the search from. It can be any integer. The default value is 0. If fromIndex < 0 the entire string is searched (same as passing 0). If fromIndex >= str.length, the method will return -1 unless searchValue is an empty string in which case str.length is returned. \n@optional\n@returns {Number} the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found.\n*/\n\n/*!\n* Description: SuiteCommerce Reference ShopFlow\n*\n* @copyright (c) 2000-2013, NetSuite Inc.\n* @version 1.0\n*/\n\n// Application.js\n// --------------\n// Extends the application with Shopping specific core methods\n\n/*global _:true, SC:true, jQuery:true, Backbone:true*/\n\n(function (Shopping)\n{\n\t'use strict';\n\n\t// Get the layout from the application\n\tvar Layout = Shopping.getLayout();\n\n\t// This will change the url when a \"select\" DOM element\n\t// of the type \"navigator\" is changed\n\t_.extend(Layout, {\n\n\t\tchangeUrl: function (e)\n\t\t{\n\t\t\t// Disable other navigation links before redirection\n            this.$('select[data-type=\"navigator\"], .pagination-links a').attr('disabled','disabled');\n            \n            // Get the value of the select and navigate to it\n\t\t\t// http://backbonejs.org/#Router-navigate\n\t\t\tBackbone.history.navigate(this.$(e.target).val(), {trigger: true});\n\t\t}\n\t\t\n\t});\n\n\t_.extend(Layout.events, {\n\t\t'change select[data-type=\"navigator\"]': 'changeUrl'\n\t});\n\n\t// Wraps the SC.Utils.resizeImage and passes in the settings it needs\n\t_.extend(Shopping, {\n\n\t\tresizeImage: function (url, size)\n\t\t{\n\t\t\tvar mapped_size = Shopping.getConfig('imageSizeMapping.' + size, size);\n\t\t\treturn SC.Utils.resizeImage(Shopping.getConfig('siteSettings.imagesizes', []), url, mapped_size);\n\t\t}\t\n\t});\n\n\t// This is necessary for showing Cases menu option in header_profile_macro menu. Cases should only be available in My Account application.\n\t// By doing so, we are avoiding copying the entire module to ShopFlow but we preserve the same logic. We need to check if backend \n\t// configuration is present and if the feature is enabled, keeping the same behavior My Account currently has.\n\t_.extend(Shopping, {\n\t\t\n\t\tCaseModule: {\n\t\t\t\n\t\t\t// Is Case functionality available for this application?\n\t\t\tisEnabled: function () \n\t\t\t{\n\t\t\t\treturn !_.isUndefined(SC.ENVIRONMENT.CASES) && !_.isUndefined(SC.ENVIRONMENT.CASES.CONFIG) && SC.ENVIRONMENT.CASES.enabled;\n\t\t\t}\n\t\t}\n\t});\n\n\t// Setup global cache for this application\n\tjQuery.ajaxSetup({cache:true});\n\n\tjQuery.ajaxPrefilter(function(options)\n\t{\n\t\tif (options.url)\n\t\t{\n\t\t\tif (options.type === 'GET' && options.data)\n\t\t\t{\n\t\t\t\tvar join_string = ~options.url.indexOf('?') ? '&' : '?';\n\t\t\t\toptions.url = options.url + join_string + options.data;\n\t\t\t\toptions.data = '';\n\t\t\t}\n\n\t\t\toptions.url = SC.Utils.reorderUrlParams(options.url);\n\t\t}\n\n\t\tif (options.pageGeneratorPreload && SC.ENVIRONMENT.jsEnvironment === 'server')\n\t\t{\n\t\t\tjQuery('<img />', { src: options.url }).prependTo('head').hide();\n\t\t}\n\t});\n\n\t//It triggers main nav collapse when any navigation occurs\n\tBackbone.history.on('all', function()\n\t{\n\t\tjQuery('.main-nav.in').collapse('hide');\n\t});\n\n\n})(SC.Application('Shopping'));\n\n\n// Configuration.js\n// ----------------\n// All of the applications configurable defaults\n(function (application)\n{\n\t'use strict';\n\n\tapplication.Configuration = {};\n\n\t_.extend(application.Configuration, {\n\n\t\t// header_macro will show an image with the url you set here\n\t\tlogoUrl: ''\n\n\t\t// depending on the application we are configuring, used by the NavigationHelper.js\n\t,\tcurrentTouchpoint: 'home'\n\t\t// list of the applications required modules to be loaded\n\t\t// de dependencies to be loaded for each module are handled by\n\t\t// [require.js](http://requirejs.org/)\n\t,\tmodules: [\n\t\t\t// ItemDetails should always be the 1st to be added\n\t\t\t// there will be routing problmes if you change it\n\t\t\t['ItemDetails',  {startRouter: true}]\n\t\t,\t'Profile'\n\t\t,\t'NavigationHelper'\n\t\t,\t'BackToTop'\n\t\t,\t['Cart',  {startRouter: true, saveForLater: true}]\n\t\t,\t'Content'\n\t\t,\t'Facets'\n\t\t,\t'GoogleAnalytics'\n\t\t,\t'GoogleUniversalAnalytics'\n\t\t,\t'Home'\n\t\t,\t'MultiCurrencySupport'\n\t\t,\t'MultiHostSupport'\n\t\t,\t'PromocodeSupport'\n\t\t,\t'SiteSearch'\n\t\t,\t'SocialSharing'\n\t\t,\t'ProductReviews'\n\t\t,\t'AjaxRequestsKiller'\n\t\t,\t'CookieWarningBanner'\n\t\t,\t'ImageNotAvailable'\n\t\t,\t'ItemImageGallery'\n\t\t,\t'ErrorManagement'\n\t\t,\t'Merchandising'\n\t\t,\t'Merchandising.Context.DefaultHandlers'\n\t\t// ,\t['Categories',  {addToNavigationTabs: true}]\n\t\t,\t'ProductList'\n\t\t,\t'ItemRelations'\n\t\t,\t'ImageLoader'\n\t\t,\t'UrlHelper'\n\t\t]\n\n\t\t// Default url for the item list\n\t,\tdefaultSearchUrl: 'search'\n\n\t\t// Search preferences\n\t,\tsearchPrefs:\n\t\t{\n\t\t\t// keyword maximum string length - user won't be able to write more than 'maxLength' chars in the search box\n\t\t\tmaxLength: 40\n\n\t\t\t// keyword formatter function will format the text entered by the user in the search box. This default implementation will remove invalid keyword characters like *()+-=\"\n\t\t,\tkeywordsFormatter: function (keywords)\n\t\t\t{\n\t\t\t\tif (keywords === '||')\n\t\t\t\t{\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\n\t\t\t\tvar anyLocationRegex = /[\\(\\)\\[\\]\\{\\~\\}\\!\\\"\\:\\/]{1}/g // characters that cannot appear at any location\n\t\t\t\t,\tbeginingRegex = /^[\\*\\-\\+]{1}/g // characters that cannot appear at the begining\n\t\t\t\t,\treplaceWith = ''; // replacement for invalid chars\n\n\t\t\t\treturn keywords.replace(anyLocationRegex, replaceWith).replace(beginingRegex, replaceWith);\n\t\t\t}\n\t\t}\n\n\t\t// flag for showing or not, \"add to cart\" button in facet views\n\t,\taddToCartFromFacetsView: false\n\t\t// url for the not available image\n\t,\timageNotAvailable: _.getAbsoluteUrl('img/no_image_available.jpeg')\n\t\t// default macros\n\t,\tmacros: {\n\t\t\tfacet: 'facetList'\n\n\t\t,\titemOptions: {\n\t\t\t\t// each apply to specific item option types\n\t\t\t\tselectorByType:\n\t\t\t\t{\n\t\t\t\t\tselect: 'itemDetailsOptionTile'\n\t\t\t\t,\t'default': 'itemDetailsOptionText'\n\t\t\t\t}\n\t\t\t\t// for rendering selected options in the shopping cart\n\t\t\t,\tselectedByType: {\n\t\t\t\t\t'default': 'shoppingCartOptionDefault'\n\t\t\t\t}\n\t\t\t}\n\n\t\t,\titemDetailsImage: 'itemImageGallery'\n\n\t\t\t// default merchandising zone template\n\t\t,\tmerchandisingZone: 'merchandisingZone'\n\t\t}\n\t\t// array of links to be added to the header\n\t\t// this can also contain subcategories\n\t,\tnavigationTabs: [\n\t\t\t{\n\t\t\t\ttext: _('Home').translate()\n\t\t\t,\thref: '/'\n\t\t\t,\t'class': 'tab home-tab'\n\t\t\t,\tdata: {\n\t\t\t\t\ttouchpoint: 'home'\n\t\t\t\t,\thashtag: '#'\n\t\t\t\t}\n\t\t\t}\n\t\t,\t{\n\t\t\t\ttext: _('Shop').translate()\n\t\t\t,\thref: '/search'\n\t\t\t,\t'class': 'tab search-tab'\n\t\t\t,\tdata: {\n\t\t\t\t\ttouchpoint: 'home'\n\t\t\t\t,\thashtag: '#search'\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\n\t,\tfooterNavigation: [{text: 'Link a', href:'#'}, {text: 'Link b', href:'#'}, {text: 'Link c', href:'#'}]\n\n\t\t// Macro to be rendered in the header, showing your name and nav links\n\t\t// by default, we provide 'headerProfile' or 'headerSimpleProfile'\n\t,\tprofileMacro: 'headerProfile'\n\n\t\t// settings for the cookie warning message (mandatory for UK stores)\n\t,\tcookieWarningBanner: {\n\t\t\tclosable: true\n\t\t,\tsaveInCookie: true\n\t\t,\tanchorText: _('Learn More').translate()\n\t\t,\tmessage: _('To provide a better shopping experience, our website uses cookies. Continuing use of the site implies consent.').translate()\n\t\t}\n\n\t\t// options to be passed when querying the Search API\n\t,\tsearchApiMasterOptions: {\n\n\t\t\tFacets: {\n\t\t\t\tinclude: 'facets'\n\t\t\t,\tfieldset: 'search'\n\t\t\t}\n\n\t\t,\titemDetails: {\n\t\t\t\tinclude: 'facets'\n\t\t\t,\tfieldset: 'details'\n\t\t\t}\n\t\t,\trelatedItems: {\n\t\t\t\tfieldset: 'relateditems_details'\n\t\t\t}\n\t\t,\tcorrelatedItems: {\n\t\t\t\tfieldset: 'correlateditems_details'\n\t\t}\n\n\t\t\t// don't remove, get extended\n\t\t,\tmerchandisingZone: {}\n\n\t\t,\ttypeAhead: {\n\t\t\t\tfieldset: 'typeahead'\n\t\t\t}\n\t\t}\n\n\t\t// Analytics Settings\n\t\t// You need to set up both popertyID and domainName to make the default trackers work\n\t,\ttracking: {\n\t\t\t// [Google Universal Analytics](https://developers.google.com/analytics/devguides/collection/analyticsjs/)\n\t\t\tgoogleUniversalAnalytics: {\n\t\t\t\tpropertyID: ''\n\t\t\t,\tdomainName: ''\n\t\t\t}\n\t\t\t// [Google Analytics](https://developers.google.com/analytics/devguides/collection/gajs/)\n\t\t,\tgoogle: {\n\t\t\t\tpropertyID: ''\n\t\t\t,\tdomainName: ''\n\t\t\t}\n\t\t}\n\n\t\t// Typeahead Settings\n\t,\ttypeahead: {\n\t\t\tminLength: 3\n\t\t,\tmaxResults: 8\n\t\t,\tmacro: 'typeahead'\n\t\t,\tsort: 'relevance:asc'\n\t\t}\n\n\t\t// setting it to false will search in the current results\n\t\t// if on facet list page\n\t,\tisSearchGlobal: true\n\n\t\t// available values are: goToCart, showMiniCart or showCartConfirmationModal\n\t,\taddToCartBehavior: 'showCartConfirmationModal'\n\n\t,\thomeTemplate: 'home'\n\n\t\t// settings on how each facet should display in the \"narrow your results\" section. Properties:\n\t\t// * name: internationalized facet name,\n\t\t// * url: hash fragment that identified the facet in the url\n\t\t// * priority: an integer grater than zero indicating for ordering facets editors. Facets with greater priority numbers will appear above others.\n\t\t// * macro: name of installed macro that renders the facet editor. Some available macros are facetRange, facetColor\n\t\t// * uncollapsible: if true the user won't be able to collapse the facet editor\n\t\t// * behavior: can be one of \"range\", \"multi\". If \"range\", a double slider will be showed as the editor. If \"multi\", multiple facet value selection will be available\n\t\t// * titleToken: format for the facet on the document title's when it is selected. Can be a string like \"from $(0) to $(1)\" for range behaviour or \"foo $(0) bar\" for others. Also it can be a function that accept the facet object as the one parameter.\n\t\t// * titleSeparator: a string separator between facets in the document's title.\n\t,\tfacets: [\n\t\t\t/*{\n\t\t\t\tid: 'category'\n\t\t\t,\tname: _('Category').translate()\n\t\t\t,\tpriority: 10\n\t\t\t,\tbehavior: 'hierarchical'\n\t\t\t,\tmacro: 'facetCategories'\n\t\t\t,\tuncollapsible: true\n\t\t\t,\ttitleToken: '$(0)'\n\t\t\t,\ttitleSeparator: ', '\n\t\t\t}\n\t\t,\t*/\n\t\t\t{\n\t\t\t\tid: 'onlinecustomerprice'\n\t\t\t,\tname: _('Price').translate()\n\t\t\t,\turl: 'price'\n\t\t\t,\tpriority: 0\n\t\t\t,\tbehavior: 'range'\n\t\t\t,\tmacro: 'facetRange'\n\t\t\t,\tuncollapsible: true\n\t\t\t,\ttitleToken: 'Price $(0) - $(1)'\n\t\t\t,\ttitleSeparator: ', '\n\t\t\t,\tparser: function (value)\n\t\t\t\t{\n\t\t\t\t\treturn _.formatCurrency(value);\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t\t// This options set the title for the facet browse view.\n\t,\tdefaultSearchTitle: _('Products').translate()\n\t,\tsearchTitlePrefix: _('').translate()\n\t,\tsearchTitleSufix: _('').translate()\n\n\t\t// Limits for the SEO generated links in the facets browser\n\t\t// Once the limits are hitted the url is replaced with # in the links\n\t,\tfacetsSeoLimits: {\n\t\t\t// how many facets groups will be indexed\n\t\t\tnumberOfFacetsGroups: 2\n\t\t\t// for multi value facet groups how many facets values together\n\t\t,\tnumberOfFacetsValues: 2\n\t\t\t// Which options will be indexed,\n\t\t\t// if you omit one here, and it's present in the url it will not be indexed\n\t\t,\toptions: ['page', 'keywords'] // order, page, show, display, keywords\n\t\t}\n\n\t,\tfacetDelimiters: {\n\t\t\tbetweenFacetNameAndValue: '/'\n\t\t,\tbetweenDifferentFacets: '/'\n\t\t,\tbetweenDifferentFacetsValues: ','\n\t\t,\tbetweenRangeFacetsValues: 'to'\n\t\t,\tbetweenFacetsAndOptions: '?'\n\t\t,\tbetweenOptionNameAndValue: '='\n\t\t,\tbetweenDifferentOptions: '&'\n\t\t}\n\t\t// Output example: /brand/GT/style/Race,Street?display=table\n\n\t\t// eg: a different set of delimiters\n\t\t/*\n\t\t,\tfacetDelimiters: {\n\t\t\t\tbetweenFacetNameAndValue: '-'\n\t\t\t,\tbetweenDifferentFacets: '/'\n\t\t\t,\tbetweenDifferentFacetsValues: '|'\n\t\t\t,\tbetweenRangeFacetsValues: '>'\n\t\t\t,\tbetweenFacetsAndOptions: '~'\n\t\t\t,\tbetweenOptionNameAndValue: '/'\n\t\t\t,\tbetweenDifferentOptions: '/'\n\t\t}\n\t\t*/\n\t\t// Output example: brand-GT/style-Race|Street~display/table\n\n\t\t// map of image custom image sizes\n\t\t// usefull to be customized for smaller screens\n\t,\timageSizeMapping: {\n\t\t\tthumbnail: 'thumbnail' // 175 * 175\n\t\t,\tmain: 'main' // 600 * 600\n\t\t,\ttinythumb: 'tinythumb' // 50 * 50\n\t\t,\tzoom: 'zoom' // 1200 * 1200\n\t\t,\tfullscreen: 'fullscreen' // 1600 * 1600\n\t\t}\n\t\t// available options for the Results per Page dropdown\n\t,\tresultsPerPage: [\n\t\t\t{items: 12, name: _('Show $(0) products per page').translate('12')}\n\t\t,\t{items: 24, name: _('Show $(0) products per page').translate('24'), isDefault: true}\n\t\t,\t{items: 48, name: _('Show $(0) products per page').translate('48')}\n\t\t]\n\t\t// available views for the item list by selecting the macros\n\t,\titemsDisplayOptions: [\n\t\t\t{id: 'list', name: _('List').translate(), macro: 'itemCellList', columns: 1, icon: 'icon-th-list'}\n\t\t,\t{id: 'table', name: _('Table').translate(), macro: 'itemCellTable', columns: 2, icon: 'icon-th-large'}\n\t\t,\t{id: 'grid', name: _('Grid').translate(), macro: 'itemCellGrid', columns: 4, icon: 'icon-th', isDefault: true}\n\t\t]\n\t\t// available sorting options for the Sort By dropdown\n\t,\tsortOptions: [\n\t\t\t{id: 'relevance:asc', name: _('Sort by relevance').translate(), isDefault: true}\n\t\t,\t{id: 'onlinecustomerprice:asc', name: _('Sort by price, Low to High').translate()}\n\t\t,\t{id: 'onlinecustomerprice:desc', name: _('Sort by price, High to Low ').translate()}\n\t\t]\n\n\t,\trecentlyViewedItems: {\n\t\t\tuseCookie: true\n\t\t,\tnumberOfItemsDisplayed: 6\n\t\t}\n\n\t\t// Settings for displaying each of the item options in the Detailed Page\n\t\t// Each of the item options are objects that extend whats comming of the api\n\t\t// This options should have (but not limited to) this keys\n\t\t// * itemOptionId: The id of an option in the item\n\t\t// * cartOptionId: The id of an option in the cart (!required, is the primary key for the mapping)\n\t\t// * label: The label that the option will be shown\n\t\t// * url: the key of the option when its stored in the url\n\t\t// * macros: An object that contains\n\t\t//    * selector: Macro that will be rendered for selecting the options (Item list and PDP)\n\t\t//    * selected: Macro that will be rendered for the item in the cart (Cart and Cart confirmation)\n\t\t// * showSelectorInList: if true the selector will be rendered in the item list\n\t\t// Be aware that some marcos may require you to configure some exrta options in order to work properly:\n\t\t// * colors: an map of the label of the color as they key and hexa or an object as the value is required by the itemDetailsOptionColor\n\t\t// We have provided some macros for you to use but you are encouraged to create your own:\n\t\t// For the selector we have created:\n\t\t// * itemDetailsOptionColor\n\t\t// * itemDetailsOptionDropdown\n\t\t// * itemDetailsOptionRadio\n\t\t// * itemDetailsOptionText\n\t\t// * itemDetailsOptionTile\n\t\t// and for the selected we have created:\n\t\t// * shoppingCartOptionDefault\n\t\t// * shoppingCartOptionColor\n\t,\titemOptions: [\n\t\t// Here are some examples:\n\t\t// configure a color option to use color macro\n\t\t//\t{\n\t\t//\t,\tcartOptionId: 'custcol_color_option'\n\t\t//\t,\tlabel: 'Color'\n\t\t//\t,\turl: 'color'\n\t\t//\t,\tcolors: {\n\t\t//\t\t\t'Red': 'red'\n\t\t//\t\t,\t'Black': { type: 'image', src: 'img/black.gif', width: 22, height: 22 }\n\t\t//\t\t}\n\t\t//\t,\tmacros: {\n\t\t//\t\t\tselector: 'itemDetailsOptionColor'\n\t\t//\t\t,\tselected: 'shoppingCartOptionColor'\n\t\t//\t\t}\n\t\t//\t}\n\t\t//\n\t\t// configure Gift Certificates options to change the value on the url\n\t\t// when the user is filling the values\n\t\t//\t{\n\t\t//\t\tcartOptionId: 'GIFTCERTFROM'\n\t\t//\t,\turl: 'from'\n\t\t//\t}\n\t\t// ,\t{\n\t\t//\t\tcartOptionId: 'GIFTCERTRECIPIENTNAME'\n\t\t//\t,\turl: 'to'\n\t\t//\t}\n\t\t// ,\t{\n\t\t//\t\tcartOptionId: 'GIFTCERTRECIPIENTEMAIL'\n\t\t//\t,\turl: 'to-email'\n\t\t//\t}\n\t\t// ,\t{\n\t\t//\t\tcartOptionId: 'GIFTCERTMESSAGE'\n\t\t//\t,\turl: 'message'\n\t\t//\t}\n\t\t]\n\n\t\t// for multi images, option that determines the id of the option\n\t\t// that handles the image change. eg: custcol_color\n\t,\tmultiImageOption: ''\n\t\t// details fields to be displayed on a stacked list on the PDP\n\t,\titemDetails: [\n\t\t\t{\n\t\t\t\tname: _('Details').translate()\n\t\t\t,\tcontentFromKey: 'storedetaileddescription'\n\t\t\t,\topened: true\n\t\t\t,\titemprop: 'description'\n\t\t\t}\n\t\t]\n\n\t\t// This object will be merged with specific pagination settings for each of the pagination calls\n\t\t// You can use it here to toggle settings for all pagination components\n\t\t// For information on the valid options check the pagination_macro.txt\n\t,\tdefaultPaginationSettings: {\n\t\t\tshowPageList: true\n\t\t,\tpagesToShow: 9\n\t\t,\tshowPageIndicator: false\n\t\t}\n\n\t\t// Product Reviews Configuration\n\t\t// -----------------------------\n\t,\tproductReviews: {\n\t\t\tmaxRate: 5\n\t\t,\tcomputeOverall: true\n\t\t,\treviewMacro: 'showReview'\n\t\t,\tloginRequired: false\n\t\t,\tfilterOptions: [\n\t\t\t\t{id: 'all', name: _('All Reviews').translate(), params: {}, isDefault: true}\n\t\t\t,\t{id: '5star', name: _('$(0) Star Reviews').translate('5'), params: {rating: 5}}\n\t\t\t,\t{id: '4star', name: _('$(0) Star Reviews').translate('4'), params: {rating: 4}}\n\t\t\t,\t{id: '3star', name: _('$(0) Star Reviews').translate('3'), params: {rating: 3}}\n\t\t\t,\t{id: '2star', name: _('$(0) Star Reviews').translate('2'), params: {rating: 2}}\n\t\t\t,\t{id: '1star', name: _('$(0) Star Reviews').translate('1'), params: {rating: 1}}\n\t\t\t]\n\t\t,\tsortOptions: [\n\t\t\t\t{id: 'recent', name: _('Most Recent').translate(), params: {order: 'created_on:DESC'}, isDefault: true}\n\t\t\t,\t{id: 'oldest', name: _('Oldest').translate(), params: {order: 'created_on:ASC'}}\n\t\t\t,\t{id: 'best', name: _('Better Rated').translate(), params: {order: 'rating:DESC'}}\n\t\t\t,\t{id: 'worst', name: _('Worst Rated').translate(), params: {order: 'rating:ASC'}}\n\t\t\t]\n\t\t}\n\n\t,\tcache: {\n\t\t\t// cdn cache duration for content pages. Valid values are 'SHORT', 'MEDIUM', 'LONG'\n\t\t\tcontentPageCdn: 'MEDIUM'\n\n\t\t\t// application cache for content pages - value in seconds and must be between 5 minutes and 2 hours\n\t\t,\tcontentPageTtl: 2 * 60 * 60\n\t\t}\n\n\t,\tperformance:\n\t\t{\n\t\t\twaitForUserProfile: true\n\t\t}\n\n\t,\thomePage:\n\t\t{\n\t\t\tcarouselImages: [\n\t\t\t\t_.getAbsoluteUrl('img/homepage/carousel-1.jpg')\n\t\t\t,\t_.getAbsoluteUrl('img/homepage/carousel-2.jpg')\n\t\t\t,\t_.getAbsoluteUrl('img/homepage/carousel-3.jpg')\n\t\t\t]\n\t\t\t// the bottom banner images will display by default as a row, so based on bootstrap grid system, there should be a count divisible\n\t\t,\tbottomBannerImages: [\n\t\t\t\t_.getAbsoluteUrl('img/homepage/banner-bottom-1.jpg')\n\t\t\t,\t_.getAbsoluteUrl('img/homepage/banner-bottom-2.jpg')\n\t\t\t,\t_.getAbsoluteUrl('img/homepage/banner-bottom-3.jpg')\n\t\t\t]\n\t\t}\n\n\t});\n\n\t// Device Specific Settings\n\t// ------------------------\n\t// Calculates the width of the device, it will try to use the real screen size.\n\tvar screen_width = window.screen ? window.screen.availWidth : window.outerWidth || window.innerWidth;\n\t//var screen_width = jQuery('body').width();\n\n\tSC.ENVIRONMENT.screenWidth = screen_width;\n\n\tif (!SC.isPageGenerator())\n\t{\n\t\t// Phone Specific\n\t\tif (screen_width < 768)\n\t\t{\n\t\t\t_.extend(application.Configuration, {\n\n\t\t\t\titemsDisplayOptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'list'\n\t\t\t\t\t,\tname: _('List').translate()\n\t\t\t\t\t,\tmacro: 'itemCellList'\n\t\t\t\t\t,\tcolumns: 1\n\t\t\t\t\t,\ticon: 'icon-th-list'\n\t\t\t\t\t,\tisDefault: true\n\t\t\t\t\t}\n\t\t\t\t,\t{\n\t\t\t\t\t\tid: 'table'\n\t\t\t\t\t,\tname: _('Table').translate()\n\t\t\t\t\t,\tmacro: 'itemCellTable'\n\t\t\t\t\t,\tcolumns: 2\n\t\t\t\t\t,\ticon: 'icon-th-large'\n\t\t\t\t\t,\tisDefault: false\n\t\t\t\t\t}\n\t\t\t\t]\n\n\t\t\t,\tsortOptions: [{\n\t\t\t\t\tid: 'relevance:asc'\n\t\t\t\t,\tname: _('Relevance').translate()\n\t\t\t\t,\tisDefault: true\n\t\t\t\t}]\n\n\t\t\t,\tdefaultPaginationSettings: {\n\t\t\t\t\tshowPageList: false\n\t\t\t\t,\tshowPageIndicator: true\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t// Tablet Specific\n\t\telse if (screen_width >= 768 && screen_width < 980)\n\t\t{\n\t\t\t_.extend(application.Configuration, {\n\n\t\t\t\titemsDisplayOptions: [\n\t\t\t\t\t{id: 'list', name: _('List').translate(), macro: 'itemCellList', columns: 1, icon: 'icon-th-list' , isDefault: true}\n\t\t\t\t,\t{id: 'table', name: _('Table').translate(), macro: 'itemCellTable', columns: 2, icon: 'icon-th-large'}\n\t\t\t\t]\n\n\t\t\t,\tsortOptions: [\n\t\t\t\t\t{id: 'relevance:asc', name: _('Relevance').translate(), isDefault: true}\n\t\t\t\t,\t{id: 'onlinecustomerprice:asc', name: _('Price, Low to High').translate()}\n\t\t\t\t,\t{id: 'onlinecustomerprice:desc', name: _('Price, High to Low ').translate()}\n\t\t\t\t]\n\n\t\t\t,\tdefaultPaginationSettings: {\n\t\t\t\t\tshowPageList: true\n\t\t\t\t,\tpagesToShow: 4\n\t\t\t\t,\tshowPageIndicator: false\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\n\t/**\n\t * SEO related configuration\n\t * Search Engine Optimization\n\t */\n\tvar seo_title = function (layout)\n\t\t{\n\t\t\tvar title = layout.$('[itemprop=\"name\"]:eq(0)').text();\n\t\t\treturn title && title.length ? jQuery.trim(title) : '';\n\t\t}\n\n\t,\tseo_url = function ()\n\t\t{\n\t\t\treturn window.location.protocol + '//' + window.location.hostname + '/' + Backbone.history.fragment;\n\t\t}\n\n\t,\tseo_domain = function (layout)\n\t\t{\n\t\t\treturn layout.application.getConfig('siteSettings.touchpoints.home');\n\t\t}\n\n\t,\tseo_image =  function (layout, number)\n\t\t{\n\t\t\tvar $image = layout.$('[data-type=\"social-image\"], [itemprop=\"image\"]')\n\t\t\t,\tmy_number = typeof number === 'undefined' ? 0 : number\n\t\t\t,\tresized_image = $image.get(my_number) ? $image.get(my_number).src : application.Configuration.imageNotAvailable\n\t\t\t,\tresized_id = 0 === my_number ? 'main' : 'thumbnail';\n\n\t\t\tresized_image = application.resizeImage(resized_image.split('?')[0], resized_id);\n\n\t\t\treturn resized_image;\n\t\t}\n\n\t,\tseo_site_name = function ()\n\t\t{\n\t\t\treturn SC.ENVIRONMENT.siteSettings.displayname;\n\t\t}\n\n\t,\tseo_description = function (layout)\n\t\t{\n\t\t\tvar social_description = layout.$('[data-type=\"social-description\"], [itemprop=\"description\"]').first().text();\n\t\t\tsocial_description = jQuery.trim( social_description ).replace(/\\s+/g, ' ');\n\n\t\t\treturn social_description && social_description.length ? social_description : '';\n\t\t}\n\n\t,\tseo_twitter_description = function (layout)\n\t\t{\n\t\t\tvar description = seo_description(layout);\n\n\t\t\t// Twitter cards requires a description less than 200 characters\n\t\t\treturn description && description.length ? description.substring(0, 200) : '';\n\t\t}\n\n\t,\tseo_provider_name = function ()\n\t\t{\n\t\t\treturn SC.ENVIRONMENT.siteSettings.displayname;\n\t\t}\n\n\t,\tseo_price = function (layout)\n\t\t{\n\t\t\tvar price = layout.$('[itemprop=\"price\"]:eq(0)').text();\n\t\t\tprice = jQuery.trim( price );\n\n\t\t\treturn price && price.length ? price : '';\n\t\t}\n\n\t,\tseo_price_standard_amount = function (layout)\n\t\t{\n\t\t\tvar the_num = seo_price(layout);\n\t\t\treturn the_num && the_num.length ? the_num.replace( /^\\D+/g, '') : '';\n\t\t}\n\n\t,\tseo_price_currency = function (layout)\n\t\t{\n\t\t\tvar price_currency = layout.$('[itemprop=\"priceCurrency\"]').attr('content');\n\t\t\tprice_currency = jQuery.trim( price_currency );\n\n\t\t\treturn price_currency && price_currency.length ? price_currency : '';\n\t\t}\n\n\t,\tseo_availability = function (layout)\n\t\t{\n\t\t\tvar $availability_href = layout.$('[itemprop=\"availability\"]')\n\t\t\t,\tresult = ''\n\t\t\t,\tparam = '';\n\n\t\t\t$availability_href = jQuery.trim( $availability_href.attr('href') );\n\n\t\t\tresult= $availability_href.split('/');\n\t\t\tparam = result[result.length - 1];\n\n\t\t\treturn param && param.length ? param : '';\n\t\t}\n\n\t,\tseo_rating = function (layout)\n\t\t{\n\t\t\tvar rating = layout.$('[itemprop=\"ratingValue\"]:eq(0)').attr('content');\n\t\t\treturn rating && rating.length ? rating : '';\n\t\t}\n\n\t,\tseo_rating_scale = function (layout)\n\t\t{\n\t\t\tvar rating_scale = layout.$('[itemprop=\"bestRating\"]:eq(0)').attr('content');\n\t\t\treturn rating_scale && rating_scale.length ? rating_scale : '';\n\t\t}\n\n\t,\tseo_rating_count = function (layout)\n\t\t{\n\t\t\tvar rating_count = layout.$('[itemprop=\"reviewCount\"]:eq(0)').text();\n\t\t\treturn rating_count && rating_count.length ? jQuery.trim(rating_count) : '';\n\t\t}\n\n\t,\tseo_twitter_site = function ()\n\t\t{\n\t\t\treturn '@YourAthleticSho';\n\t\t}\n\n\t,\tseo_twitter_creator = function ()\n\t\t{\n\t\t\treturn '@fedmun';\n\t\t}\n\n\t,\tseo_twitter_label_one = function ()\n\t\t{\n\t\t\treturn 'PRICE';\n\t\t}\n\n\t,\tseo_twitter_price = function (layout)\n\t\t{\n\t\t\treturn jQuery.trim( seo_price(layout) + ' ' + seo_price_currency(layout) );\n\t\t}\n\n\t,\tseo_twitter_label_two = function ()\n\t\t{\n\t\t\treturn 'AVAILABILITY';\n\t\t}\n\n\t,\tseo_twitter_image_cero = function (layout)\n\t\t{\n\t\t\treturn seo_image(layout, 0);\n\t\t}\n\n\t,\tseo_twitter_image_one = function (layout)\n\t\t{\n\t\t\treturn seo_image(layout, 1);\n\t\t}\n\n\t,\tseo_twitter_image_two = function (layout)\n\t\t{\n\t\t\treturn seo_image(layout, 2);\n\t\t}\n\n\t,\tseo_twitter_image_three = function (layout)\n\t\t{\n\t\t\treturn seo_image(layout, 3);\n\t\t}\n\t;\n\n\t_.extend(application.Configuration, {\n\n\t\tmetaTagMappingOg: {\n\t\t\t// [Open Graph](http://ogp.me/)\n\t\t\t'og:title': seo_title\n\n\t\t,\t'og:type': function ()\n\t\t\t{\n\t\t\t\treturn 'product';\n\t\t\t}\n\n\t\t,\t'og:url': seo_url\n\n\t\t,\t'og:image': seo_image\n\n\t\t,\t'og:site_name': seo_site_name\n\n\t\t,\t'og:description': seo_description\n\n\t\t,\t'og:provider_name': seo_provider_name\n\n\t\t,\t'og:price:standard_amount': seo_price_standard_amount\n\n\t\t,\t'og:price:currency': seo_price_currency\n\n\t\t,\t'og:availability': seo_availability\n\n\t\t,\t'og:rating': seo_rating\n\n\t\t,\t'og:rating_scale': seo_rating_scale\n\n\t\t,\t'og:rating_count': seo_rating_count\n\t\t}\n\n\t,\tmetaTagMappingTwitterProductCard: {\n\t\t\t// [Twitter Product Card](https://dev.twitter.com/docs/cards/types/product-card)\n\t\t\t'twitter:card': function ()\n\t\t\t{\n\t\t\t\treturn 'product';\n\t\t\t}\n\n\t\t,\t'twitter:site': seo_twitter_site\n\n\t\t,\t'twitter:creator': seo_twitter_creator\n\n\t\t,\t'twitter:title': seo_title\n\n\t\t,\t'twitter:description': seo_twitter_description\n\n\t\t,\t'twitter:image:src': seo_image\n\n\t\t,\t'twitter:domain': seo_domain\n\n\t\t,\t'twitter:data1': seo_twitter_price\n\n\t\t,\t'twitter:label1': seo_twitter_label_one\n\n\t\t,\t'twitter:data2': seo_availability\n\n\t\t,\t'twitter:label2': seo_twitter_label_two\n\t\t}\n\n\t,\tmetaTagMappingTwitterGalleryCard: {\n\t\t\t// [Twitter Gallery Card](https://dev.twitter.com/docs/cards/types/gallery-card)\n\t\t\t'twitter:card': function ()\n\t\t\t{\n\t\t\t\treturn 'gallery';\n\t\t\t}\n\n\t\t,\t'twitter:title': seo_title\n\n\t\t,\t'twitter:description': seo_twitter_description\n\n\t\t,\t'twitter:image0:src': seo_twitter_image_cero\n\n\t\t,\t'twitter:image1:src': seo_twitter_image_one\n\n\t\t,\t'twitter:image2:src': seo_twitter_image_two\n\n\t\t,\t'twitter:image3:src': seo_twitter_image_three\n\t\t}\n\n\t\t// Social Sharing Services\n\t\t// -----------------------\n\t\t// Setup for Social Sharing\n\t,\tsocialSharingIconsMacro: 'socialSharingIcons'\n\n\t\t// hover_pin_it_buttons\n\t,\thover_pin_it_button: {\n\t\t\tenable_pin_it_hover: true\n\t\t,\tenable_pin_it_button: true\n\t\t,\timage_size: 'main' // Select resize id to show on Pintrest\n\t\t,\tpopupOptions: {\n\t\t\t\tstatus: 'no'\n\t\t\t,\tresizable: 'yes'\n\t\t\t,\tscrollbars: 'yes'\n\t\t\t,\tpersonalbar: 'no'\n\t\t\t,\tdirectories: 'no'\n\t\t\t,\tlocation: 'no'\n\t\t\t,\ttoolbar: 'no'\n\t\t\t,\tmenubar: 'no'\n\t\t\t,\twidth: '680'\n\t\t\t,\theight: '300'\n\t\t\t,\tleft: '0'\n\t\t\t,\ttop: '0'\n\t\t\t}\n\t\t}\n\n\t\t// Pinterest\n\t,\tpinterest: {\n\t\t\tenable: false\n\t\t,\tpopupOptions: {\n\t\t\t\tstatus: 'no'\n\t\t\t,\tresizable: 'yes'\n\t\t\t,\tscrollbars: 'yes'\n\t\t\t,\tpersonalbar: 'no'\n\t\t\t,\tdirectories: 'no'\n\t\t\t,\tlocation: 'no'\n\t\t\t,\ttoolbar: 'no'\n\t\t\t,\tmenubar: 'no'\n\t\t\t,\twidth: '632'\n\t\t\t,\theight: '270'\n\t\t\t,\tleft: '0'\n\t\t\t,\ttop: '0'\n\t\t\t}\n\t\t}\n\n\t,\tfacebook: {\n\t\t\tenable: true\n\t\t,\tappId: '237518639652564'\n\t\t,\tpluginOptions: {\n\t\t\t\t'send': 'false'\n\t\t\t,\t'layout': 'button_count'\n\t\t\t,\t'width': '450'\n\t\t\t,\t'show-faces': 'false'\n\t\t\t}\n\t\t}\n\n\t\t// Twitter\n\t,\ttwitter: {\n\t\t\tenable: true\n\t\t,\tpopupOptions: {\n\t\t\t\tstatus: 'no'\n\t\t\t,\tresizable: 'yes'\n\t\t\t,\tscrollbars: 'yes'\n\t\t\t,\tpersonalbar: 'no'\n\t\t\t,\tdirectories: 'no'\n\t\t\t,\tlocation: 'no'\n\t\t\t,\ttoolbar: 'no'\n\t\t\t,\tmenubar: 'no'\n\t\t\t,\twidth: '632'\n\t\t\t,\theight: '250'\n\t\t\t,\tleft: '0'\n\t\t\t,\ttop: '0'\n\t\t\t}\n\t\t,\tvia: ''\n\t\t}\n\n\t,\tgooglePlus: {\n\t\t\tenable: true\n\t\t,\tpopupOptions: {\n\t\t\t\tmenubar: 'no'\n\t\t\t,\ttoolbar: 'no'\n\t\t\t,\tresizable: 'yes'\n\t\t\t,\tscrollbars: 'yes'\n\t\t\t,\theight: '600'\n\t\t\t,\twidth: '600'\n\t\t\t}\n\t\t}\n\n\t,\taddThis: {\n\t\t\tenable: false\n\t\t,\tpubId: 'ra-50abc2544eed5fa5'\n\t\t,\ttoolboxClass: 'addthis_default_style addthis_toolbox addthis_button_compact'\n\t\t,\tservicesToShow: {\n\t\t\t\t// pinterest: 'Pinterest'\n\t\t\t\tfacebook: 'Facebook'\n\t\t\t,\ttwitter: 'Twitter'\n\t\t\t,\tgoogle_plusone: ''\n\t\t\t// ,\tprint: _('Print').translate()\n\t\t\t,\temail: _('Email').translate()\n\t\t\t,\texpanded: _('More').translate()\n\t\t\t}\n\n\t\t\t// http://support.addthis.com/customer/portal/articles/381263-addthis-client-api#configuration-ui\n\t\t,\toptions: {\n\t\t\t\tusername: ''\n\t\t\t,\tdata_track_addressbar: true\n\t\t\t// ,\tservices_exclude: '',\n\t\t\t// ,\tservices_compact: '',\n\t\t\t// ,\tservices_expanded: '',\n\t\t\t// ,\tservices_custom: '',\n\t\t\t// ,\tui_click: '',\n\t\t\t// ,\tui_delay: '',\n\t\t\t// ,\tui_hover_direction: '',\n\t\t\t// ,\tui_language: '',\n\t\t\t// ,\tui_offset_top: '',\n\t\t\t// ,\tui_offset_left: '',\n\t\t\t// ,\tui_header_color: '',\n\t\t\t// ,\tui_header_background: '',\n\t\t\t// ,\tui_cobrand: '',\n\t\t\t// ,\tui_use_css: '',\n\t\t\t// ,\tui_use_addressbook: '',\n\t\t\t// ,\tui_508_compliant: '',\n\t\t\t// ,\tdata_track_clickback: '',\n\t\t\t// ,\tdata_ga_tracker: '',\n\t\t\t}\n\t\t}\n\t});\n\n})(SC.Application('Shopping'));\n\n\n// ItemsKeyMapping.js\n// ------------------\n// Holds the mapping of whats retuned by the search api / Commerce api for items\n// to what is used all across the application.\n// The main reason behind this file is that you may eventually want to change were an attribute of the item is comming from,\n// for example you may want to set that the name of the items are store in a custom item field instead of the display name field,\n// then you just change the mapping here instead of looking for that attribute in all templates and js files\n(function ()\n{\n\t'use strict';\n\n\t// itemImageFlatten:\n\t// helper function that receives the itemimages_detail (returned by the search api)\n\t// and flatens it into an array of objects containing url and altimagetext\n\tfunction itemImageFlatten (images)\n\t{\n\t\tif ('url' in images && 'altimagetext' in images)\n\t\t{\n\t\t\treturn [images];\n\t\t}\n\n\t\treturn _.flatten(_.map(images, function (item)\n\t\t{\n\t\t\tif (_.isArray(item))\n\t\t\t{\n\t\t\t\treturn item;\n\t\t\t}\n\n\t\t\treturn itemImageFlatten(item);\n\t\t}));\n\t}\n\n\tfunction getKeyMapping (application)\n\t{\n\t\treturn {\n\t\t\t// Item Internal Id: used as a fallback to the url and to add to cart\n\t\t\t// You should not need to change this tho\n\t\t\t_id: 'internalid'\n\n\t\t\t// Item SKU number\n\t\t,   _sku: function (item)\n\t\t\t{\n\t\t\t\tvar childs = item.getSelectedMatrixChilds()\n\t\t\t\t,\tsku = item.get('itemid') || '';\n\n\t\t\t\tif (childs && childs.length === 1)\n\t\t\t\t{\n\t\t\t\t\tsku = childs[0].get('itemid') || sku;\n\t\t\t\t}\n\n\t\t\t\treturn sku;\n\t\t\t}\n\n\t\t\t// Name of the item, some times displayname is empty but storedisplayname2 tends to be set always\n\t\t,   _name: function (item)\n\t\t\t{\n\t\t\t\t// If its a matrix child it will use the name of the parent\n\t\t\t\tif (item.get('_matrixParent').get('internalid'))\n\t\t\t\t{\n\t\t\t\t\treturn item.get('_matrixParent').get('storedisplayname2') || item.get('_matrixParent').get('displayname');\n\t\t\t\t}\n\n\t\t\t\t// Otherways return its own name\n\t\t\t\treturn item.get('storedisplayname2') || item.get('displayname');\n\t\t\t}\n\n\t\t\t// Page Title of the PDP\n\t\t,   _pageTitle: ['pagetitle', 'storedisplayname2', 'displayname']\n\n\t\t\t// h1 of the PDP and also the title of the modal\n\t\t,   _pageHeader: ['storedisplayname2', 'displayname']\n\n\t\t,\t_keywords: 'searchkeywords'\n\n\t\t,\t_metaTags: 'metataghtml'\n\n\t\t\t// This retuns the breadcrum json obj for the PDP\n\t\t,   _breadcrumb: function (item)\n\t\t\t{\n\t\t\t\tvar breadcrumb = [{\n\t\t\t\t\thref: '/'\n\t\t\t\t,   text: _('Home').translate()\n\t\t\t\t}];\n\n\t\t\t\t// defaultcategory_detail attribute of the item is not consistent with the facets values,\n\t\t\t\t// so we are going to use the facet values instead\n\t\t\t\t/*var categories = _.findWhere(item.get('facets'), {id: 'category'})\n\t\t\t\t,\twalkCategories = function walkCategories(category)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreadcrumb.push({\n\t\t\t\t\t\t\thref: '/' + category.id\n\t\t\t\t\t\t,   text: category.url\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tcategory.values && category.values.length && walkCategories(category.values[0]);\n\t\t\t\t\t};\n\n\t\t\t\tif (categories)\n\t\t\t\t{\n\t\t\t\t\tcategories.values && categories.values.length && walkCategories(categories.values[0]);\n\t\t\t\t}*/\n\n\t\t\t\tbreadcrumb.push({\n\t\t\t\t\thref: item.get('_url')\n\t\t\t\t,   text: item.get('_name')\n\t\t\t\t});\n\n\t\t\t\treturn breadcrumb;\n\t\t\t}\n\n\t\t\t// Url of the item\n\t\t,   _url: function (item)\n\t\t\t{\n\n\t\t\t\t// If this item is a child of a matrix return the url of the parent\n\t\t\t\tif (item.get('_matrixParent') && item.get('_matrixParent').get('internalid'))\n\t\t\t\t{\n\t\t\t\t\treturn item.get('_matrixParent').get('_url');\n\t\t\t\t}\n\t\t\t\t// if its a standar version we need to send it to the canonical url\n\t\t\t\telse if (SC.ENVIRONMENT.siteType && SC.ENVIRONMENT.siteType === 'STANDARD')\n\t\t\t\t{\n\t\t\t\t\treturn item.get('canonicalurl');\n\t\t\t\t}\n\t\t\t\t// Other ways it will use the url component or a default /product/ID\n\t\t\t\treturn item.get('urlcomponent') ? '/'+ item.get('urlcomponent') : '/product/'+ item.get('internalid');\n\t\t\t}\n\n\t\t\t// For an item in the cart it returns the url for you to edit the item\n\t\t,\t_editUrl: function (item)\n\t\t\t{\n\t\t\t\tvar url = (item.get('_matrixParent').get('_id')) ? item.get('_matrixParent').get('_url') : item.get('_url');\n\n\t\t\t\t// Appends the options you have configured in your item to the url\n\t\t\t\turl += item.getQueryString();\n\n\t\t\t\t// adds the order item id, the view will update the item in the cart instead of adding it\n\t\t\t\tif (item.get('line_id'))\n\t\t\t\t{\n\t\t\t\t\turl += '&cartitemid='+ item.get('line_id');\n\t\t\t\t}\n\n\t\t\t\treturn url;\n\t\t\t}\n\n\t\t\t// Object containing the url and the altimagetext of the thumbnail\n\t\t,   _thumbnail: function (item)\n\t\t\t{\n\t\t\t\tvar item_images_detail = item.get('itemimages_detail') || {};\n\n\t\t\t\t// If you generate a thumbnail position in the itemimages_detail it will be used\n\t\t\t\tif (item_images_detail.thumbnail)\n\t\t\t\t{\n\t\t\t\t\treturn item_images_detail.thumbnail;\n\t\t\t\t}\n\n\t\t\t\t// otherwise it will try to use the storedisplaythumbnail\n\t\t\t\tif (SC.ENVIRONMENT.siteType && SC.ENVIRONMENT.siteType === 'STANDARD' && item.get('storedisplaythumbnail'))\n\t\t\t\t{\n\t\t\t\t\treturn {\n\t\t\t\t\t\turl: item.get('storedisplaythumbnail')\n\t\t\t\t\t,\taltimagetext: item.get('_name')\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t// No images huh? carry on\n\n\t\t\t\tvar parent_item = item.get('_matrixParent');\n\t\t\t\t// If the item is a matrix child, it will return the thumbnail of the parent\n\t\t\t\tif (parent_item && parent_item.get('internalid'))\n\t\t\t\t{\n\t\t\t\t\treturn parent_item.get('_thumbnail');\n\t\t\t\t}\n\n\t\t\t\tvar images = itemImageFlatten(item_images_detail);\n\t\t\t\t// If you using the advance images features it will grab the 1st one\n\t\t\t\tif (images.length)\n\t\t\t\t{\n\t\t\t\t\treturn images[0];\n\t\t\t\t}\n\n\t\t\t\t// still nothing? image the not available\n\t\t\t\treturn {\n\t\t\t\t\turl: application.Configuration.imageNotAvailable\n\t\t\t\t,\taltimagetext: item.get('_name')\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Array of objects containing the url and the altimagetext of the images of the item\n\t\t,\t_images: function (item)\n\t\t\t{\n\t\t\t\tvar result = []\n\t\t\t\t,\tselected_options = item.itemOptions\n\t\t\t\t,\titem_images_detail = item.get('itemimages_detail') || {}\n\t\t\t\t,   swatch = selected_options && selected_options[application.getConfig('multiImageOption')] || null;\n\n\t\t\t\titem_images_detail = item_images_detail.media || item_images_detail;\n\n\t\t\t\tif (swatch && item_images_detail[swatch.label])\n\t\t\t\t{\n\t\t\t\t\tresult = itemImageFlatten(item_images_detail[swatch.label]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = itemImageFlatten(item_images_detail);\n\t\t\t\t}\n\n\t\t\t\treturn result.length ? result : [{\n\t\t\t\t\turl: item.get('storedisplayimage') || application.Configuration.imageNotAvailable\n\t\t\t\t,\taltimagetext: item.get('_name')\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\t// For matrix child items in the cart we generate this position so we have a link to the parent\n\t\t,\t_matrixParent: 'matrix_parent'\n\n\t\t\t// For matrix parent items, where are the attribures of the children\n\t\t,   _matrixChilds: 'matrixchilditems_detail'\n\n\t\t\t// The definition of the options of items with options\n\t\t,   _optionsDetails: 'itemoptions_detail'\n\n\t\t\t// Related items\n\t\t,   _relatedItems: 'related_items'\n\n\t\t\t// Related items in the PDP.\n\t\t,\t_relatedItemsDetail: 'relateditems_detail'\n\n\t\t\t// Correlated (Upsell) items in the PDP.\n\t\t,\t_correlatedItemsDetail: 'correlateditems_detail'\n\n\t\t\t// Item price information\n\t\t,   _priceDetails: 'onlinecustomerprice_detail'\n\t\t,\t_price: function (item)\n\t\t\t{\n\t\t\t\treturn (item.get('onlinecustomerprice_detail') && item.get('onlinecustomerprice_detail').onlinecustomerprice) || '';\n\t\t\t}\n\n\t\t,\t_price_formatted: function (item)\n\t\t\t{\n\t\t\t\treturn (item.get('onlinecustomerprice_detail') && item.get('onlinecustomerprice_detail').onlinecustomerprice_formatted) || '';\n\t\t\t}\n\n\t\t,   _comparePriceAgainst: 'pricelevel1'\n\t\t,   _comparePriceAgainstFormated: 'pricelevel1_formatted'\n\n\t\t\t// Item Type\n\t\t,   _itemType: 'itemtype'\n\n\t\t\t// Stock, the number of items you have available\n\t\t,   _stock: 'quantityavailable'\n\n\t\t,\t_minimumQuantity: function (item)\n\t\t\t{\n\t\t\t\t// if there is an unique child selected then we show its message. Otherwise we show the parent's\n\t\t\t\tvar childs = item.getSelectedMatrixChilds();\n\t\t\t\tif (childs && childs.length === 1)\n\t\t\t\t{\n\t\t\t\t\treturn childs[0].get('minimumquantity') || 1;\n\t\t\t\t}\n\t\t\t\treturn item.get('minimumquantity') || 1;\n\t\t\t}\n\n\t\t,\t_isReturnable: function (item)\n\t\t\t{\n\t\t\t\tvar type = item.get('itemtype');\n\n\t\t\t\treturn type === 'InvtPart' || type === 'NonInvtPart' || type === 'Kit';\n\t\t\t}\n\n\t\t,\t_isInStock: 'isinstock'\n\t\t,\t_isPurchasable: 'ispurchasable'\n\t\t,\t_isBackorderable: 'isbackorderable'\n\t\t,\t_showOutOfStockMessage: 'showoutofstockmessage'\n\n\t\t\t// Show the IN STOCK label, this can be configured in a per item basis\n\t\t,   _showInStockMessage: function ()\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Should we show the stock description?\n\t\t,   _showStockDescription: function ()\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Stock Description, some times used to display messages like New Arrival, Ships in 3 days or Refubrished\n\t\t,   _stockDescription: 'stockdescription'\n\n\t\t\t// Stock Description class, we use this to add a class to the html element containig the _stockDescription so you can easily style it.\n\t\t\t// This implementation will strip spaces and other punctuations from the _stockDescription and prepend stock-description-\n\t\t\t// so if your _stockDescription is Ships in 3 days your _stockDescriptionClass will be stock-description-ships-in-3-days\n\t\t,   _stockDescriptionClass: function (item)\n\t\t\t{\n\t\t\t\treturn 'stock-description-'+ (item.get('_stockDescription') || '').toLowerCase().replace(/[\\W\\\"]+/g,'-').replace(/\\-+/g,'-');\n\t\t\t}\n\n\t\t\t// What to write when the item is out of stock\n\t\t,   _outOfStockMessage: function (item)\n\t\t\t{\n\t\t\t\treturn item.get('outofstockmessage2') || item.get('outofstockmessage');\n\t\t\t}\n\n\t\t\t// What to write when the item is in stock\n\t\t,   _inStockMessage: function ()\n\t\t\t{\n\t\t\t\treturn _('In Stock').translate();\n\t\t\t}\n\n\t\t\t// Reviews related item attributes\n\n\t\t\t// Overal item rating\n\t\t,   _rating: function (item)\n\t\t\t{\n\t\t\t\treturn Math.round(item.get('custitem_ns_pr_rating') * 10) / 10 || 0;\n\t\t\t}\n\n\t\t\t// How many times this item was reviewd\n\t\t,   _ratingsCount: function (item)\n\t\t\t{\n\t\t\t\treturn item.get('custitem_ns_pr_count') || 0;\n\t\t\t}\n\n\t\t\t// What are the posible attributes I want this item to be rated on\n\t\t,   _attributesToRateOn: function (item)\n\t\t\t{\n\t\t\t\tvar attributes = item.get('custitem_ns_pr_item_attributes') || '';\n\n\t\t\t\treturn _.reject(attributes.split(', '), function (attribute)\n\t\t\t\t{\n\t\t\t\t\treturn !attribute || attribute === '&nbsp;';\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// returns a object containing the average rating per atribute\n\t\t,   _attributesRating: function (item)\n\t\t\t{\n\t\t\t\treturn JSON.parse(item.get('custitem_ns_pr_attributes_rating'));\n\t\t\t}\n\n\t\t\t// returns an object containig how many reviews it the item has for each particular rating\n\t\t,   _ratingsCountsByRate: function (item)\n\t\t\t{\n\t\t\t\treturn item.get('custitem_ns_pr_rating_by_rate') && JSON.parse(item.get('custitem_ns_pr_rating_by_rate')) || {};\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction mapAllApplications ()\n\t{\n\t\t// This file can be used for multiple applications, so we avoided making it application specific\n\t\t// by iterating the collection of defined applications.\n\t\t_.each(SC._applications, function (application)\n\t\t{\n\t\t\t// Makes double sure that the Configuration is there\n\t\t\tapplication.Configuration = application.Configuration || {};\n\n\t\t\t// Extends the itemKeyMapping configuration\n\t\t\t// The key mapping object is simple object were object keys define how the application is going to call it\n\t\t\t// and values define from which key to read in the result of the search api\n\t\t\t// There are three posible ways to define a key mapping:\n\t\t\t//   - _key: \"search_api_key\" -- This means, Whenever I ask you for the _key returned anythig that you have in the search_api_key key of the item object\n\t\t\t//   - _key: [\"search_api_key\", \"second_options\"] -- similar as avobe, but if the 1st key in the array is falsy go and try the next one, it will retun the 1st truthful value\n\t\t\t//   - _key: function (item){ return \"something you want\"; } -- you can also set up a function that will recive the item model as argument and you can set what to return.\n\t\t\tapplication.Configuration.itemKeyMapping = _.defaults(application.Configuration.itemKeyMapping || {}, getKeyMapping(application));\n\t\t});\n\t}\n\n\tif (typeof require !== 'undefined')\n\t{\n\t\tdefine('ItemsKeyMapping', [], function ()\n\t\t{\n\t\t\treturn {\n\t\t\t\tgetKeyMapping: getKeyMapping\n\t\t\t,\tmapAllApplications: mapAllApplications\n\t\t\t};\n\t\t});\n\t}\n\n\tmapAllApplications();\n})();\n\n\n// Address.Collection.js\n// -----------------------\n// Addresses collection\ndefine('Address.Collection', ['Address.Model'], function (Model)\n{\n\t'use strict';\n\t\n\treturn Backbone.Collection.extend(\n\t{\n\t\tmodel: Model\n\t,\turl: 'services/address.ss'\n\n\t});\n});\n\n\n// Address.Model.js\n// -----------------------\n// Model for handling addresses (CRUD)\ndefine('Address.Model', function ()\n{\n\t'use strict';\n\n\tfunction isCompanyRequired()\n\t{\n\t\treturn\tSC.ENVIRONMENT.siteSettings &&\n\t\t\t\tSC.ENVIRONMENT.siteSettings.registration &&\n\t\t\t\tSC.ENVIRONMENT.siteSettings.registration.companyfieldmandatory === 'T';\n\t}\n\n\treturn Backbone.Model.extend(\n\t{\n\t\turlRoot: 'services/address.ss'\n\n\t,\tvalidation: {\n\t\t\tfullname: { required: true, msg: _('Full Name is required').translate() }\n\t\t,\taddr1: { required: true, msg: _('Address is required').translate() }\n\t\t,\tcompany: { required: isCompanyRequired(), msg: _('Company is required').translate() }\n\t\t,\tcountry: { required: true, msg: _('Country is required').translate() }\n\t\t,\tstate: { fn: _.validateState }\n\t\t,\tcity: { required: true, msg: _('City is required').translate() }\n\t\t,\tzip: { fn: _.validateZipCode }\n\t\t,\tphone: { fn: _.validatePhone }\n\t\t}\n\n\t\t// Returns an array of localized attributes that are invalid for the current address\n\t,\tgetInvalidAttributes: function ()\n\t\t{\n\t\t\t//As this model is not always used inside a model's view, we need to check that the validation is attached\n\t\t\tvar attributes_to_validate = _.keys(this.validation)\n\t\t\t,\tattribute_name\n\t\t\t,\tinvalid_attributes = [];\n\n\t\t\tthis.get('isvalid') !== 'T' && this.isValid(true) && _.extend(this, Backbone.Validation.mixin);\n\n\t\t\t_.each(attributes_to_validate, function (attribute)\n\t\t\t{\n\t\t\t\tif (!this.isValid(attribute))\n\t\t\t\t{\n\t\t\t\t\tswitch (attribute)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase 'fullname':\n\t\t\t\t\t\t\tattribute_name = _('Full Name').translate();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'addr1':\n\t\t\t\t\t\t\tattribute_name = _('Address').translate();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'city':\n\t\t\t\t\t\t\tattribute_name = _('City').translate();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'zip':\n\t\t\t\t\t\t\tattribute_name = _('Zip Code').translate();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'country':\n\t\t\t\t\t\t\tattribute_name = _('Country').translate();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'phone':\n\t\t\t\t\t\t\tattribute_name = _('Phone Number').translate();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tinvalid_attributes.push(attribute_name);\n\t\t\t\t}\n\t\t\t},this);\n\n\t\t\treturn invalid_attributes;\n\t\t}\n\n\t});\n});\n\n\n// AjaxRequestsKiller.js\n// ---------------------\n// Keeps trak of ongoing ajax requests and of url (or hash) changes,\n// so when the url changes it kills all pending ajax requests that other routers may have initiated.\n// It's important to note that not all ajax request are opened by the change of the url,\n// for that reason it's important that you tag thouse who do by adding a killerId: this.application.killerId to the request (collection.fetch and model.fetch may trigger a request)\ndefine('AjaxRequestsKiller', function ()\n{\n\t'use strict';\n\n\treturn {\n\t\tmountToApp: function (application)\n\t\t{\n\t\t\t// Sets the first Killer ID\n\t\t\t// Every time the url changes this will be reseted,\n\t\t\t// but as we are the last listening to the url change event\n\t\t\t// this only happends after all request are made\n\t\t\tapplication.killerId = _.uniqueId('ajax_killer_');\n\n\t\t\t// Every time a request is made, a ref to it will be store in this collection.\n\t\t\tapplication.lambsToBeKilled = [];\n\n\t\t\t// Wraps the beforeSend function of the jQuery.ajaxSettings\n\t\t\tjQuery.ajaxSettings.beforeSend = _.wrap(jQuery.ajaxSettings.beforeSend, function (fn, jqXhr, options)\n\t\t\t{\n\t\t\t\t// If the killerId is set we add it to the collection\n\t\t\t\tif (options.killerId)\n\t\t\t\t{\n\n\t\t\t\t\tjqXhr.killerId = options.killerId;\n\t\t\t\t\tapplication.lambsToBeKilled.push(jqXhr);\n\t\t\t\t}\n\n\t\t\t\t// Finnaly we call the original jQuery.ajaxSettings.beforeSend\n\t\t\t\tfn.apply(this, _.toArray(arguments).slice(1));\n\t\t\t});\n\n\t\t\t// We listen to the afterStart because Backbone.history is *potentialy* not ready untill after that\n\t\t\tapplication.on('afterStart', function ()\n\t\t\t{\n\t\t\t\t// There is a timinig issue involved,\n\t\t\t\t// the on all event happends after the 2nd requests is done\n\t\t\t\tBackbone.history.on('all', function ()\n\t\t\t\t{\n\t\t\t\t\t// Check previous ongoing requests\n\t\t\t\t\t_.each(application.lambsToBeKilled, function (prev_jqXhr)\n\t\t\t\t\t{\n\t\t\t\t\t\t// if the new id is different than the old one, it means that there is a new killer id,\n\t\t\t\t\t\t// so we kill the old one if its still ongoing\n\t\t\t\t\t\tif (application.killerId && application.killerId !== prev_jqXhr.killerId)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (prev_jqXhr.readyState !== 4)\n\t\t\t\t\t\t\t{\n\t\n\t\t\t\t\t\t\t\t// If we are killing this request we dont want the ErrorHandling.js to handle it\n\t\t\t\t\t\t\t\tprev_jqXhr.preventDefault = true;\n\t\t\t\t\t\t\t\tprev_jqXhr.abort();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// we take it off the lambsToBeKilled collection to free some space and processing.\n\t\t\t\t\t\t\tapplication.lambsToBeKilled = _.without(application.lambsToBeKilled, prev_jqXhr);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Generates a new id for the **next** request\n\t\t\t\t\tapplication.killerId = _.uniqueId('ajax_killer_');\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n});\n\n\n// BackToTop.js\n// ------------\n// Adds a back to top functionality to any element that has data-action=\"back-to-top\"\ndefine('BackToTop', function () \n{\n\t'use strict';\n\n\treturn {\n\t\tmountToApp: function (Application)\n\t\t{\n\t\t\tvar Layout = Application.getLayout();\n\t\t\t\n\t\t\t// adding BackToTop function in Layout \n\t\t\t_.extend(Layout, {\n\t\t\t\tbackToTop: function ()\n\t\t\t\t{\n\t\t\t\t\tjQuery('html, body').animate({scrollTop: '0px'}, 300);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// adding events for elements of DOM with data-action=\"back-to-top\" as parameter.\n\t\t\t_.extend(Layout.events, {\n\t\t\t\t'click [data-action=\"back-to-top\"]': 'backToTop'\n\t\t\t});\n\t\t}\n\t};\n});\n\n// Cart.Router.js\n// --------------\n// Creates the cart route\ndefine('Cart.Router', ['Cart.Views'], function (Views)\n{\n\t'use strict';\n\n\treturn Backbone.Router.extend({\n\n\t\troutes: {\n\t\t\t'cart': 'showCart'\n\t\t,\t'cart?*options': 'showCart'\n\t\t}\n\n\t,\tinitialize: function (Application, isSaveForLater)\n\t\t{\n\t\t\tthis.isSaveForLater = isSaveForLater;\n\t\t\tthis.application = Application;\n\t\t}\n\n\t,\tshowCart: function ()\n\t\t{\n\t\t\tif (this.application.ProductListModule && this.application.ProductListModule.isProductListEnabled() && this.isSaveForLater)\n\t\t\t{\n\t\t\t\tvar self = this;\n\n\t\t\t\trequire(['Cart.SaveForLater.View'], function (saveForLaterCartView)\n\t\t\t\t{\n\t\t\t\t\tself.renderView(saveForLaterCartView);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.renderView(Views);\n\t\t\t}\n\t\t}\n\n\t,\trenderView: function (CartView)\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\toptimistic_promise = self.application.getCart().optimistic && self.application.getCart().optimistic.promise\n\t\t\t,\tcart_promise = self.application.loadCart();\n\n\t\t\tjQuery.when(optimistic_promise || jQuery.Deferred().resolve(), cart_promise).done(function ()\n\t\t\t{\n\t\t\t\tvar view = new CartView.Detailed({\n\t\t\t\t\tmodel: self.application.getCart()\n\t\t\t\t,\tapplication: self.application\n\t\t\t\t});\n\n\t\t\t\tview.showContent();\n\t\t\t});\n\t\t}\n\t});\n});\n\n\ndefine('Cart.SaveForLater.View', ['ErrorManagement', 'ProductListDetails.View', 'ProductList.Model', 'ProductListItem.Model', 'Cart.Views', 'Session'], function (ErrorManagement, ProductListDetailsView, ProductListModel, ProductListItemModel, CartViews, Session)\n{\n\t'use strict';\n\n\tvar view = CartViews.Detailed.extend({\n\n\t\trender : function()\n\t\t{\n\t\t\tCartViews.Detailed.prototype.render.apply(this, arguments);\n\n\t\t\tthis.renderSaveForLaterSection();\n\t\t}\n\n    ,\trenderSaveForLaterSection: function()\n\t\t{\n\t\t\tvar application = this.model.application;\n\t\t\t\n\t\t\tif (application.getUser().get('isLoggedIn') !== 'T')\n\t\t\t{\t\t\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar self = this;\n\n\t\t\tapplication.getSavedForLaterProductList().done(function(json)\n\t\t\t{\n\t\t\t\tself.renderSaveForLaterSectionHelper(new ProductListModel(json));\n\t\t\t});\t\t\n\t\t}\n\n\t,\trenderSaveForLaterSectionHelper: function(pl_model)\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\tapplication = this.model.application;\n\t\t\t\n\t\t\tthis.product_list_details_view = new application.ProductListModule.Views.Details({ application: application, model: pl_model, sflMode:true, addToCartCallback:function() {self.addToCart(); } } );\n\t\t\tthis.product_list_details_view.template = 'product_list_details_later';\n\t\t\t\n\t\t\tthis.$('[data-type=saved-for-later-placeholder]').empty();\n\t\t\tthis.$('[data-type=saved-for-later-placeholder]').append(this.product_list_details_view.render().el);\n\t\t}\n\n\t,\taddToCart: function()\n\t\t{\n\t\t\tthis.showContent();\n\t\t}\n\n\t\t// save for later: \n\t\t// handles the click event of the save for later button\n\t\t// removes the item from the cart and adds it to the saved for later list\n\t,\tsaveForLaterItem: function (e)\n\t\t{\n\t\t\te.preventDefault();\n\n\t\t\tif (!this.validateLogin())\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tthis.storeColapsiblesState();\n\n\t\t\tvar product = this.model.get('lines').get(jQuery(e.target).data('internalid'))\n\t\t\t,\tinternalid = product.get('internalid')\n\t\t\t,\twhole_promise = jQuery.Deferred()\n\t\t\t,\tself = this;\n\n\t\t\tif (product.ongoingPromise)\n\t\t\t{\n\t\t\t\tproduct.ongoingPromise.then(function (new_line)\n\t\t\t\t{\n\t\t\t\t\tproduct = self.model.get('lines').get(new_line.latest_addition);\n\n\t\t\t\t\tself.saveForLaterItemHelper(whole_promise, product);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.saveForLaterItemHelper(whole_promise, product);\n\t\t\t}\t\n\n\t\t\tthis.disableElementsOnPromise(whole_promise, 'article[id=\"' + internalid + '\"] a, article[id=\"' + internalid + '\"] button');\n\t\t}\n\n\t,\tsaveForLaterItemHelper: function (whole_promise, product)\n\t\t{\n\t\t\tvar self = this;\n\n\t\t\tjQuery.when(this.model.removeLine(product), self.addItemToList(product.get('item'))).then(function() \n\t\t\t{\n\t\t\t\tself.showContent();\n\n\t\t\t\tself.showConfirmationMessage(_('Good! You saved the item for later. If you want to add it back to your cart, see below in <b>\"Saved for later\"</b>').translate());\n\n\t\t\t\twhole_promise.resolve();\n\t\t\t});\n\t\t}\n\t\t\n\t\t// Add a new product list item into a product list\t\t\n\t,\taddItemToList: function (product)\n\t\t{\n\t\t\tvar defer = jQuery.Deferred();\n\n\t\t\tif (this.validateGiftCertificate(product))\n\t\t\t{\n\t\t\t\tvar self = this\n\t\t\t\t,\tapplication = this.model.application;\n\n\t\t\t\tapplication.getSavedForLaterProductList().done(function(pl_json)\n\t\t\t\t{\n\t\t\t\t\tif (!pl_json.internalid)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pl_model = new ProductListModel(pl_json);\n\n\t\t\t\t\t\tpl_model.save().done(function (pl_json)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tself.doAddItemToList(pl_json.internalid, product, defer);\t\t\t\t\t\t\n\t\t\t\t\t\t});\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tself.doAddItemToList(pl_json.internalid, product, defer);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\t\t\t\n\t\t\telse\n\t\t\t{\n\t\t\t\tdefer.resolve();\n\t\t\t}\t\t\t\n\n\t\t\treturn defer.promise();\n\t\t}\n\n\t,\tgetItemOptions: function (itemOptions)\n\t\t{\n\t\t\tvar result = {};\n\n\t\t\t_.each(itemOptions, function (value, name)\n\t\t\t{\n\t\t\t\tresult[name] = { value: value.internalid, displayvalue: value.label };\n\t\t\t});\n\n\t\t\treturn result;\n\t\t}\n\n\t\t// Adds the new item to the collection\n\t,\tdoAddItemToList: function (pl_internalid, product, internal_promise)\n\t\t{\n\t\t\tvar application = this.model.application\n\t\t\t,\tproduct_list_item = {\n\t\t\t\t\tdescription: ''\n\t\t\t\t,\toptions: this.getItemOptions(product.itemOptions)\n\t\t\t\t,\tquantity: product.get('quantity')\n\t\t\t\t,\tproductList: {\n\t\t\t\t\t\tid: pl_internalid\n\t\t\t\t\t}\n\t\t\t\t,\titem: {\n\t\t\t\t\t\tinternalid: application.ProductListModule.internalGetProductId(product)\n\t\t\t\t\t}\n\t\t\t}\n\t\t\t,\tproduct_list_item_model = new ProductListItemModel(product_list_item);\n\n\t\t\tproduct_list_item_model.save().done(function () \n\t\t\t{\t\t\t\t\n\t\t\t\tinternal_promise.resolve();\n\t\t\t});\n\t\t}\n\n\t,\tvalidateLogin: function ()\n\t\t{\n\t\t\tvar application = this.model.application;\n\n\t\t\tif (application.getUser().get('isLoggedIn') === 'F')\n\t\t\t{\n\t\t\t\tvar login = Session.get('touchpoints.login');\n\t\t\t\t\n\t\t\t\tlogin += '&origin=' + application.getConfig('currentTouchpoint');\n\t\t\t\tlogin += '&origin_hash=' + Backbone.history.fragment;\n\t\t\t\twindow.location.href = login;\n\t\t\t\t\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t});\n\n\t_.extend(view.prototype.events, \n\t{\n\t\t'click [data-action=\"save-for-later-item\"]': 'saveForLaterItem'\n\t});\n\n\treturn { Detailed: view };\n});\n\n\n// Cart.Views.js\n// -------------\n// Cart and Cart Confirmation views\ndefine('Cart.Views', ['ErrorManagement'], function (ErrorManagement)\n{\n\t'use strict';\n\n\tvar Views = {}\n\t,\tcolapsibles_states = {};\n\n\t// Views.Detailed:\n\t// This is the Shopping Cart view\n\tViews.Detailed = Backbone.View.extend({\n\n\t\ttemplate: 'shopping_cart'\n\n\t,\ttitle: _('Shopping Cart').translate()\n\n\t,\tpage_header: _('Shopping Cart').translate()\n\n\t,\tattributes: {\n\t\t\t'id': 'shopping-cart'\n\t\t,\t'class': 'view shopping-cart'\n\t\t}\n\n\t,\tevents: {\n\t\t\t'change [name=\"quantity\"]': 'updateItemQuantity'\n\t\t,\t'keyup [name=\"quantity\"]': 'updateItemQuantity'\n\t\t,\t'blur [name=\"quantity\"]': 'updateItemQuantityBlur'\n\t\t,\t'submit [data-action=\"update-quantity\"]': 'updateItemQuantityFormSubmit'\n\n\t\t,\t'click [data-action=\"remove-item\"]': 'removeItem'\n\n\t\t,\t'submit form[data-action=\"apply-promocode\"]': 'applyPromocode'\n\t\t,\t'click [data-action=\"remove-promocode\"]': 'removePromocode'\n\n\t\t,\t'submit form[data-action=\"estimate-tax-ship\"]': 'estimateTaxShip'\n\t\t,\t'click [data-action=\"remove-shipping-address\"]': 'removeShippingAddress'\n\t\t,\t'change [data-action=\"estimate-tax-ship-country\"]': 'changeCountry'\n\t\t}\n\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tthis.application = options.application;\n\t\t}\n\n\t\t// showContent:\n\t\t// calls the layout's default show content method\n\t,\tshowContent: function ()\n\t\t{\n\t\t\tvar self = this;\n\n\t\t\treturn this.application.getLayout().showContent(this, true).done(function (view)\n\t\t\t{\n\t\t\t\tself.renderRelatedAndCorrelatedItemsHelper(view);\n\t\t\t});\n\t\t}\n\n\t,\trenderRelatedAndCorrelatedItemsHelper: function (view)\n\t\t{\n\t\t\t// related items\n\t\t\tvar related_items_placeholder = view.$('[data-type=\"related-items-placeholder\"]')\n\t\t\t,\tapplication = this.application;\n\n\t\t\t// check if there is a related items placeholders\n\t\t\tif (related_items_placeholder.length)\n\t\t\t{\n\t\t\t\tapplication.showRelatedItems && application.showRelatedItems(view.model.getItemsIds(), related_items_placeholder);\n\t\t\t}\n\n\t\t\t// correlated items\n\t\t\tvar correlated_items_placeholder = view.$('[data-type=\"correlated-items-placeholder\"]');\n\t\t\t// check if there is a related items placeholders\n\t\t\tif (correlated_items_placeholder.length)\n\t\t\t{\n\t\t\t\tapplication.showRelatedItems && application.showCorrelatedItems(view.model.getItemsIds(), correlated_items_placeholder);\n\t\t\t}\n\t\t}\n\n\t,\thideError: function (selector)\n\t\t{\n\t\t\tvar el = (selector)? selector.find('[data-type=\"alert-placeholder\"]') : this.$('[data-type=\"alert-placeholder\"]');\n\t\t\tel.empty();\n\t\t}\n\n\t,\tshowError: function (message, line, error_details)\n\t\t{\n\t\t\tvar placeholder;\n\n\t\t\tthis.hideError();\n\n\t\t\tif (line)\n\t\t\t{\n\t\t\t\t// if we detect its a rolled back item, (this i an item that was deleted\n\t\t\t\t// but the new options were not valid and was added back to it original state)\n\t\t\t\t// We will move all the references to the new line id\n\t\t\t\tif (error_details && error_details.status === 'LINE_ROLLBACK')\n\t\t\t\t{\n\t\t\t\t\tvar new_line_id = error_details.newLineId;\n\n\t\t\t\t\tline.attr('id', new_line_id);\n\n\t\t\t\t\tline.find('[name=\"internalid\"]').attr({\n\t\t\t\t\t\tid: 'update-internalid-' + new_line_id\n\t\t\t\t\t,\tvalue: new_line_id\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tplaceholder = line.find('[data-type=\"alert-placeholder\"]');\n\t\t\t\tthis.hideError(line);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tplaceholder = this.$('[data-type=\"alert-placeholder\"]');\n\t\t\t\tthis.hideError();\n\t\t\t}\n\n\t\t\t// Finds or create the placeholder for the error message\n\t\t\tif (!placeholder.length)\n\t\t\t{\n\t\t\t\tplaceholder = jQuery('<div/>', {'data-type': 'alert-placeholder'});\n\t\t\t\tthis.$el.prepend(placeholder);\n\t\t\t}\n\n\t\t\t// Renders the error message and into the placeholder\n\t\t\tplaceholder.append(\n\t\t\t\tSC.macros.message(message, 'error', true)\n\t\t\t);\n\n\t\t\t// Re Enables all posible disableded buttons of the line or the entire view\n\t\t\tif (line)\n\t\t\t{\n\t\t\t\tline.find(':disabled').attr('disabled', false);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.$(':disabled').attr('disabled', false);\n\t\t\t}\n\t\t}\n\n\t,\tupdateItemQuantityBlur: function(e)\n\t\t{\n\t\t\te.preventDefault();\n\t\t\tvar $form = jQuery(e.target).closest('form')\n\t\t\t,\toptions = $form.serializeObject()\n\t\t\t,\tinternalid = options.internalid\n\t\t\t,\tline = this.model.get('lines').get(internalid)\n\t\t\t,\t$input = $form.find('[name=\"quantity\"]')\n\t\t\t,\tvalidInput = this.validInputValue($input[0]);\n\n\t\t\tif (!$input.prop('disabled') && validInput && !options.quantity)\n\t\t\t{\n\t\t\t\t$input.val(parseInt(line.get('quantity'), 10));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.updateItemQuantity(e);\n\t\t\t}\n\t\t}\n\n\t\t// Check if the input[type=\"number\"] has empty string or NaN value\n\t\t// input.val() == '' && validInput == false: NaN\n\t\t// input.val() == '' && validInput == true: empty string\n\t,\tvalidInputValue: function(input)\n\t\t{\n\t\t\t// if html5 validation says it's bad: it's bad\n\t\t\tif ((input.validity) && (!input.validity.valid))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\n\t\t\t// Fallback to browsers that don't yet support html5 input validation\n\t\t\tif (isNaN(input.value))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// updateItemQuantity:\n\t\t// executes on blur of the quantity input\n\t\t// Finds the item in the cart model, updates its quantity and saves the cart model\n\t,\tupdateItemQuantity: _.debounce(function (e)\n\t\t{\n\t\t\te.preventDefault();\n\n\t\t\tvar self = this\n\t\t\t,\t$line = null\n\t\t\t,\t$form = jQuery(e.target).closest('form')\n\t\t\t,\toptions = $form.serializeObject()\n\t\t\t,\tinternalid = options.internalid\n\t\t\t,\tline = this.model.get('lines').get(internalid)\n\t\t\t,\t$input = $form.find('[name=\"quantity\"]')\n\t\t\t,\tvalidInput = this.validInputValue($input[0]);\n\n\t\t\tif (!line || this.isRemoving)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!validInput || options.quantity)\n\t\t\t{\n\t\t\t\tvar\tnew_quantity = parseInt(options.quantity, 10)\n\t\t\t\t,\tcurrent_quantity = parseInt(line.get('quantity'), 10);\n\n\t\t\t\tnew_quantity = (new_quantity > 0) ? new_quantity : current_quantity;\n\n\t\t\t\t$input.val(new_quantity);\n\n\t\t\t\tthis.storeColapsiblesState();\n\n\t\t\t\tif (new_quantity !==  current_quantity)\n\t\t\t\t{\n\n\t\t\t\t\t$line = this.$('#' + internalid);\n\t\t\t\t\t$input.val(new_quantity).prop('disabled', true);\n\t\t\t\t\tline.set('quantity', new_quantity);\n\n\t\t\t\t\tvar invalid = line.validate();\n\n\t\t\t\t\tif (!invalid)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar update_promise = this.model.updateLine(line);\n\n\t\t\t\t\t\tthis.disableElementsOnPromise(update_promise, 'article[id=\"' + internalid + '\"] a, article[id=\"' + internalid + '\"] button');\n\n\t\t\t\t\t\tupdate_promise.done(function ()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tself.showContent().done(function (view)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tview.resetColapsiblesState();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}).fail(function (jqXhr)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tjqXhr.preventDefault = true;\n\t\t\t\t\t\t\tvar result = JSON.parse(jqXhr.responseText);\n\n\t\t\t\t\t\t\tself.showError(result.errorMessage, $line, result.errorDetails);\n\t\t\t\t\t\t\tline.set('quantity', current_quantity);\n\t\t\t\t\t\t}).always(function ()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$input.prop('disabled', false);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar placeholder = this.$('#' + internalid + ' [data-type=\"alert-placeholder\"]');\n\t\t\t\t\t\tplaceholder.empty();\n\n\t\t\t\t\t\t_.each(invalid, function(value) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tplaceholder.append(\n\t\t\t\t\t\t\t\tSC.macros.message(value, 'error', true)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t$input.prop('disabled', false);\n\t\t\t\t\t\tline.set('quantity', current_quantity);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, 400)\n\n\t,\tupdateItemQuantityFormSubmit: function (e)\n\t\t{\n\t\t\te.preventDefault();\n\t\t\tthis.updateItemQuantity(e);\n\t\t}\n\n\t\t// removeItem:\n\t\t// handles the click event of the remove button\n\t\t// removes the item from the cart model and saves it.\n\t,\tremoveItem: function (e)\n\t\t{\n\t\t\tthis.storeColapsiblesState();\n\n\t\t\tvar self = this\n\t\t\t,\tproduct = this.model.get('lines').get(jQuery(e.target).data('internalid'))\n\t\t\t,\tremove_promise = this.model.removeLine(product)\n\t\t\t,\tinternalid = product.get('internalid');\n\n\t\t\tthis.isRemoving = true;\n\n\t\t\tthis.disableElementsOnPromise(remove_promise, 'article[id=\"' + internalid + '\"] a, article[id=\"' + internalid + '\"] button');\n\n\t\t\tremove_promise\n\t\t\t\t.done(function ()\n\t\t\t\t{\n\t\t\t\t\tself.showContent().done(function (view)\n\t\t\t\t\t{\n\t\t\t\t\t\tview.resetColapsiblesState();\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.always(function ()\n\t\t\t\t{\n\t\t\t\t\tthis.isRemoving = false;\n\t\t\t\t});\n\n\t\t\treturn remove_promise;\n\t\t}\n\n\t\t// validates the passed gift cert item and return false and render an error message if invalid.\n\t,\tvalidateGiftCertificate: function (item)\n\t\t{\n\t\t\tif (item.itemOptions && item.itemOptions.GIFTCERTRECIPIENTEMAIL)\n\t\t\t{\n\t\t\t\tif (!Backbone.Validation.patterns.email.test(item.itemOptions.GIFTCERTRECIPIENTEMAIL.label))\n\t\t\t\t{\n\t\t\t\t\tthis.render(); //for unchecking the just checked checkbox\n\t\t\t\t\tthis.showError(_('Recipient email is invalid').translate());\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\t// applyPromocode:\n\t\t// Handles the submit of the apply promo code form\n\t,\tapplyPromocode: function (e)\n\t\t{\n\t\t\te.preventDefault();\n\n\t\t\tthis.$('[data-type=promocode-error-placeholder]').empty();\n\n\t\t\tvar self = this\n\t\t\t,\t$target = jQuery(e.target)\n\t\t\t,\toptions = $target.serializeObject();\n\n\t\t\t// disable inputs and buttons\n\t\t\t$target.find('input, button').prop('disabled', true);\n\n\t\t\tthis.model.save({\n\t\t\t\tpromocode: {\n\t\t\t\t\tcode: options.promocode\n\t\t\t\t}\n\t\t\t}).done(function ()\n\t\t\t{\n\t\t\t\tself.showContent();\n\t\t\t}).fail(function (jqXhr)\n\t\t\t{\n\t\t\t\tself.model.unset('promocode');\n\t\t\t\tjqXhr.preventDefault = true;\n\t\t\t\tvar message = ErrorManagement.parseErrorMessage(jqXhr, self.options.application.getLayout().errorMessageKeys);\n\t\t\t\tself.$('[data-type=promocode-error-placeholder]').html(SC.macros.message(message,'error',true));\n\t\t\t\t$target.find('input[name=promocode]').val('').focus();\n\t\t\t}).always(function ()\n\t\t\t{\n\t\t\t\t// enable inputs and buttons\n\t\t\t\t$target.find('input, button').prop('disabled', false);\n\t\t\t});\n\t\t}\n\n\t\t// removePromocode:\n\t\t// Handles the remove promocode button\n\t,\tremovePromocode: function (e)\n\t\t{\n\t\t\te.preventDefault();\n\n\t\t\tvar self = this;\n\n\t\t\tthis.model.save({promocode: null}).done(function ()\n\t\t\t{\n\t\t\t\tself.showContent();\n\t\t\t});\n\t\t}\n\n\t\t// estimateTaxShip\n\t\t// Sets a fake address with country and zip code based on the options.\n\t,\testimateTaxShip: function (e)\n\t\t{\n\t\t\tvar model = this.model\n\t\t\t,\toptions = jQuery(e.target).serializeObject()\n\t\t\t,\taddress_internalid = options.zip + '-' + options.country + '-null';\n\n\t\t\te.preventDefault();\n\n\t\t\tif (!options.zip)\n\t\t\t{\n\t\t\t\treturn this.showError(_('Zip code is required.').translate());\n\t\t\t}\n\n\t\t\tmodel.get('addresses').push({\n\t\t\t\tinternalid: address_internalid\n\t\t\t,\tzip: options.zip\n\t\t\t,\tcountry: options.country\n\t\t\t});\n\n\t\t\tmodel.set('shipaddress', address_internalid);\n\n\t\t\tmodel.save().done(jQuery.proxy(this, 'showContent'));\n\t\t}\n\n\t\t// removeShippingAddress:\n\t\t// sets a fake null address so it gets removed by the backend\n\t,\tremoveShippingAddress: function (e)\n\t\t{\n\t\t\te.preventDefault();\n\n\t\t\tvar self = this;\n\n\t\t\tthis.model.save({\n\t\t\t\tshipmethod: null\n\t\t\t,\tshipaddress: null\n\t\t\t}).done(function ()\n\t\t\t{\n\t\t\t\tself.showContent();\n\t\t\t});\n\t\t}\n\n\t,\tchangeCountry: function (e)\n\t\t{\n\t\t\te.preventDefault();\n\t\t\tthis.storeColapsiblesState();\n\t\t\tvar options = jQuery(e.target).serializeObject();\n\n\t\t\tvar AddressModel = this.model.get('addresses').model;\n\t\t\tthis.model.get('addresses').add(new AddressModel({ country: options.country, internalid: options.country }));\n\t\t\tthis.model.set({ shipaddress: options.country });\n\n\t\t\tthis.showContent().done(function (view)\n\t\t\t{\n\t\t\t\tview.resetColapsiblesState();\n\t\t\t});\n\n\t\t}\n\n\t,\tresetColapsiblesState: function ()\n\t\t{\n\t\t\tvar self = this;\n\t\t\t_.each(colapsibles_states, function (is_in, element_selector)\n\t\t\t{\n\t\t\t\tself.$(element_selector)[ is_in ? 'addClass' : 'removeClass' ]('in').css('height',  is_in ? 'auto' : '0');\n\t\t\t});\n\t\t}\n\n\t,\tstoreColapsiblesState: function ()\n\t\t{\n\t\t\tthis.storeColapsiblesStateCalled = true;\n\t\t\tthis.$('.collapse').each(function (index, element)\n\t\t\t{\n\t\t\t\tcolapsibles_states[SC.Utils.getFullPathForElement(element)] = jQuery(element).hasClass('in');\n\t\t\t});\n\t\t}\n\t});\n\n\t// Views.Confirmation:\n\t// Cart Confirmation Modal\n\tViews.Confirmation = Backbone.View.extend({\n\n\t\ttemplate: 'shopping_cart_confirmation_modal'\n\n\t,\ttitle: _('Added to Cart').translate()\n\n\t,\tpage_header: _('Added to Cart').translate()\n\n\t,\tattributes: {\n\t\t\t'id': 'shopping-cart'\n\t\t,\t'class': 'cart-confirmation-modal shopping-cart'\n\t\t}\n\n\t,\tevents: {\n\t\t\t'click [data-trigger=go-to-cart]': 'dismisAndGoToCart'\n\t\t}\n\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tthis.line = options.model.getLatestAddition();\n\n\t\t\tvar self = this\n\t\t\t,\toptimistic = this.options.application.getCart().optimistic;\n\t\t\t\n\t\t\tif (optimistic && optimistic.promise && optimistic.promise.state() === 'pending')\n\t\t\t{\n\t\t\t\tthis.line = options.model.optimisticLine;\n\t\t\t\tdelete options.model.optimisticLine;\n\t\t\t\toptimistic.promise.done(function ()\n\t\t\t\t{\n\t\t\t\t\tself.line = options.model.getLatestAddition();\n\t\t\t\t\tself.render();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\n\t\t// dismisAndGoToCart\n\t\t// Closes the modal and calls the goToCart\n\t,\tdismisAndGoToCart: function (e)\n\t\t{\n\t\t\te.preventDefault();\n\n\t\t\tthis.$containerModal.modal('hide');\n\t\t\tthis.options.layout.goToCart();\n\t\t}\n\t});\n\n\treturn Views;\n});\n\n\n// Cart.js\n// -------\n// Defines the Cart module (Model, Collection, Views, Router)\n// mountToApp handles some environment issues\n// Add some function to the application\n// * getCart()\n// * loadCart()\n// and to the layout\n// * updateMiniCart()\n// * showMiniCart()\n// * showCartConfirmationModal()\n// * goToCart()\n// * showCartConfirmation()\ndefine('Cart'\n,\t['LiveOrder.Model', 'Cart.Views', 'Cart.Router']\n,\tfunction (LiveOrderModel, Views, Router)\n{\n\t'use strict';\n\n\treturn {\n\t\tViews: Views\n\t,\tRouter: Router\n\t,\tmountToApp: function (application, options)\n\t\t{\n\t\t\tvar layout = application.getLayout();\n\n\t\t\t// application.getCart():\n\t\t\t// Use it to acuire the cart model instance\n\t\t\tapplication.getCart = function ()\n\t\t\t{\n\t\t\t\tif (!application.cartInstance)\n\t\t\t\t{\n\t\t\t\t\t//In cases were the cart is bootstrapped (Checkout) the Starter.js is the responsible for set each attribute from the SC.ENVIRONMENT\n\t\t\t\t\tapplication.cartInstance = new LiveOrderModel({internalid: 'cart'});\n\t\t\t\t\tapplication.cartInstance.application = application;\n\t\t\t\t\tapplication.cartInstance.bootstraped = SC.ENVIRONMENT.CART_BOOTSTRAPED;\n\t\t\t\t\tapplication.cartInstance.isLoading = !SC.ENVIRONMENT.CART_BOOTSTRAPED;\n\t\t\t\t}\n\n\t\t\t\treturn application.cartInstance;\n\t\t\t};\n\n\t\t\t// Get the cart fetch promise\n\t\t\tapplication.loadCart = function ()\n\t\t\t{\n\t\t\t\t// if the Page Generator is on, do not fetch the cart. Instead, return an empty solved promise\n\t\t\t\tif(SC.isPageGenerator())\n\t\t\t\t{\n\t\t\t\t\treturn jQuery.Deferred().resolve();\n\t\t\t\t}\n\n\t\t\t\tvar self = this;\n\t\t\t\tif (this.cartLoad)\n\t\t\t\t{\n\t\t\t\t\tif (application.cartInstance.isLoading)\n\t\t\t\t\t{\n\t\t\t\t\t\tapplication.cartInstance.isLoading = false;\n\t\t\t\t\t\tlayout.updateMiniCart();\n\t\t\t\t\t}\n\t\t\t\t\treturn this.cartLoad;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.cartLoad = jQuery.Deferred();\n\t\t\t\t\tapplication.getUserPromise().done(function ()\n\t\t\t\t\t{\n\t\t\t\t\t\tself.getCart().fetch()\n\t\t\t\t\t\t\t.done(function ()\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tself.cartLoad.resolve.apply(this, arguments);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.fail(function ()\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tself.cartLoad.reject.apply(this, arguments);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.always(function ()\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (application.cartInstance.isLoading)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tapplication.cartInstance.isLoading = false;\n\t\t\t\t\t\t\t\t\tlayout.updateMiniCart();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn this.cartLoad;\n\t\t\t};\n\n\t\t\t_.extend(layout.key_elements, {\n\t\t\t\tminiCart: '#mini-cart-container'\n\t\t\t,\tminiCartSummary: '.mini-cart-summary'\n\t\t\t});\n\n\t\t\t// layout.updateMiniCart()\n\t\t\t// Updates the minicart by running the macro and updating the miniCart key Element\n\t\t\tlayout.updateMiniCart = function ()\n\t\t\t{\n\t\t\t\tif (application.getConfig('siteSettings.sitetype') === 'ADVANCED')\n\t\t\t\t{\n\t\t\t\t\tvar cart = application.getCart();\n\t\t\t\t\tthis.$miniCart.html(SC.macros.miniCart(cart, application));\n\t\t\t\t\tthis.$miniCartSummary.html(SC.macros.miniCartSummary(cart.getTotalItemCount(), application.cartInstance.isLoading));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// layout.showMiniCart()\n\t\t\tlayout.showMiniCart = function ()\n\t\t\t{\n\t\t\t\tjQuery(document).scrollTop(0);\n\t\t\t\t// Hide the modal\n\t\t\t\tlayout.$containerModal && layout.$containerModal.length && layout.$containerModal.modal('hide');\n\t\t\t\tthis.$(layout.key_elements.miniCart + ' .dropdown-toggle').parent().addClass('open');\n\t\t\t};\n\n\t\t\t// layout.showCartConfirmationModal()\n\t\t\tlayout.showCartConfirmationModal = function ()\n\t\t\t{\n\t\t\t\tthis.showInModal(new Views.Confirmation({\n\t\t\t\t\tlayout: this\n\t\t\t\t,\tapplication: application\n\t\t\t\t,\tmodel: application.getCart()\n\t\t\t\t}));\n\t\t\t};\n\n\t\t\t// layout.goToCart()\n\t\t\tlayout.goToCart = function ()\n\t\t\t{\n\t\t\t\tBackbone.history.navigate('cart', { trigger: true });\n\t\t\t};\n\n\t\t\t// layout.showCartConfirmation()\n\t\t\t// This reads the configuration object and execs one of the fuctions avome\n\t\t\tlayout.showCartConfirmation = function ()\n\t\t\t{\n\t\t\t\t// Available values are: goToCart, showMiniCart and showCartConfirmationModal\n\t\t\t\tlayout[application.getConfig('addToCartBehavior')]();\n\t\t\t};\n\n\t\t\t// Every time the cart changes the mini cart gets updated\n\t\t\tlayout.on('afterRender', function ()\n\t\t\t{\n\t\t\t\tapplication.getCart().on('change', function ()\n\t\t\t\t{\n\t\t\t\t\tlayout.updateMiniCart();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Check if cart was bootstrapped\n\t\t\tvar cart_bootstrap = application.getCart().bootstraped;\n\t\t\tif(!cart_bootstrap)\n\t\t\t{\n\t\t\t\t// Load the cart information\n\t\t\t\tapplication.loadCart();\n\t\t\t}\n\n\t\t\t// Initializes the router\n\t\t\tif (options && options.startRouter)\n\t\t\t{\n\t\t\t\treturn new Router(application, options.saveForLater);\n\t\t\t}\n\t\t}\n\t};\n});\n\n\n// Categories.js\n// -------------\n// Utility Class to handle the Categories tree \ndefine('Categories', function ()\n{\n\t'use strict';\n\t\n\treturn {\n\t\t\n\t\ttree: {}\n\t\t\n\t\t// Categories.reset: \n\t\t// Refreshes the tree\n\t,\treset: function (tree)\n\t\t{\n\t\t\tthis.tree = tree;\n\t\t}\n\t\n\t\t// Categories.getTree: \n\t\t// Returns a deep copy of the category tree\n\t,\tgetTree: function ()\n\t\t{\n\t\t\treturn jQuery.extend(true, {}, this.tree);\n\t\t}\n\t\t\n\t\t// Categories.getBranchLineFromPath:\n\t\t// given a path retuns the branch that fullfil that path,\n\t,\tgetBranchLineFromPath: function (path)\n\t\t{\n\t\t\tvar tokens = path && path.split('/') || [];\n\n\t\t\tif (tokens.length && tokens[0] === '')\n\t\t\t{\n\t\t\t\ttokens.shift();\n\t\t\t}\n\t\t\t\n\t\t\treturn this.getBranchLineFromArray(tokens);\n\t\t}\n\t\t\n\t\t// Categories.getBranchLineFromArray:\n\t\t// given an array of categories it retuns the branch that fullfil that array.\n\t\t// Array will be walked from start to bottom and the expectation is that its in the correct order\n\t,\tgetBranchLineFromArray: function (array)\n\t\t{\n\t\t\tvar branch = []\n\t\t\t,\tslice = {categories: this.tree};\n\t\t\t\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tvar current_token = array[i];\n\t\t\t\t\n\t\t\t\tif (slice.categories && slice.categories[current_token])\n\t\t\t\t{\n\t\t\t\t\tbranch.push(slice.categories[current_token]);\n\t\t\t\t\tslice = slice.categories[current_token];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn branch;\n\t\t}\n\t\t\n\t\t// Categories.getTopLevelCategoriesUrlComponent\n\t\t// returns the id of the top level categories\n\t,\tgetTopLevelCategoriesUrlComponent: function ()\n\t\t{\n\t\t\treturn _.pluck(_.values(this.tree), 'urlcomponent');\n\t\t}\t\n\n\t,\tmakeNavigationTab: function (categories, memo)\n\t\t{\n\t\t\tvar result = []\n\t\t\t,\tself = this;\n\n\t\t\t_.each(categories, function (category)\n\t\t\t{\n\t\t\t\tvar href = (memo ? memo + '/' : '') + category.urlcomponent\n\n\t\t\t\t,\ttab = {\n\t\t\t\t\t\thref: '/' + href\n\t\t\t\t\t,\ttext: category.itemid\n\t\t\t\t\t,\tdata: \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\thashtag: '#' + href\n\t\t\t\t\t\t,\ttouchpoint: 'home'\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\tif (category.categories)\n\t\t\t\t{\n\t\t\t\t\ttab.categories = self.makeNavigationTab(category.categories, href);\n\t\t\t\t}\n\n\t\t\t\tresult.push(tab);\n\t\t\t});\n\n\t\t\treturn result;\n\t\t}\n\n\t,\taddToNavigationTabs: function (application)\n\t\t{\n\t\t\tvar tabs = this.makeNavigationTab(this.getTree());\n\n\t\t\tapplication.Configuration.navigationTabs = _.union(application.Configuration.navigationTabs, tabs);\n\n\t\t\treturn;\n\t\t}\n\n\t,\tmountToApp: function (application, options)\n\t\t{\n\t\t\tif (options && options.addToNavigationTabs)\n\t\t\t{\n\t\t\t\tthis.addToNavigationTabs(application);\n\t\t\t}\n\t\t}\n\t};\n});\n\n// Content.DataModels.js\n// ---------------------\n// Defines the Models, Collections and functions that interact with the Content Delivery Service\n// BEWARE: If you change the URL Root of your \"Content Delivery Service\" SSP Application \n// you need to update all the routes of the models \ndefine('Content.DataModels', function () \n{\n\t'use strict';\n\n\t// Pages:\n\tvar Pages = {};\n\n\t// Pages.Model:\n\t// Represents the definition of a page\n\tPages.Model = Backbone.CachedModel.extend({\n\t\turlRoot: '../cds/services/page.ss'\n\t});\n\n\t// Pages.Collection:\n\t// Singleton containing a reference of all pages already loaded\n\tPages.Collection = Backbone.CachedCollection.extend({\n\t\turl: '../cds/services/page.ss'\n\n\t,\tmodel: Pages.Model\n\t}, SC.Singleton);\n\t\n\t// Urls:\n\tvar Urls = {};\n\n\t// Urls.Model:\n\t// Represents a single url and the page definition they point to\n\tUrls.Model = Backbone.Model.extend({\n\t\turlRoot: '../cds/services/url.ss'\n\t});\n\t\n\t// Urls.Collection:\n\t// Implements the url matching logic  \n\tUrls.Collection = Backbone.Collection.extend({\n\n\t\turl: '../cds/services/url.ss'\n\n\t,\tmodel: Urls.Model\n\t\t\n\t,\tinitialize: function ()\n\t\t{\n\t\t\tthis.regExpGraphRoot = new Urls.Model({ childs: [] });\n\t\t\tthis.regExpGraphHelper = [];\n\t\t\tthis.landingPages = [];\n\t\t\tthis.exactMatchHash = {};\n\t\t\t\n\t\t\tthis.on('reset', this.reseter);\n\t\t}\n\n\t\t// Urls.Collection.reseter:\n\t\t// Everytime this collection is reseted, this function generates a couple of helper structures:\n\t\t// * Urls.Collection.landingPages: Array of all url pointing to a landing page\n\t\t// * Urls.Collection.exactMatchHash: Hash table of all url that does not have * in it\n\t\t// * Urls.Collection.regExpGraphRoot: Graph were urls are farther from the root when they are more specific. \n\t,\treseter: function ()\n\t\t{\n\t\t\tthis.regExpGraphRoot = new Urls.Model({ childs: [] });\n\t\t\tthis.regExpGraphHelper = [];\n\t\t\tthis.landingPages = [];\n\t\t\tthis.exactMatchHash = {};\n\t\t\t\n\t\t\tvar self = this;\n\t\t\t\n\t\t\t// Iteates all urls\n\t\t\tthis.each(function (model)\n\t\t\t{\n\t\t\t\t// If the url is * and its and its not a Landing page, it will be set as Urls.Collection.defaultModel\n\t\t\t\tif (model.get('query') === '*' && model.get('type') !== '1')\n\t\t\t\t{\n\t\t\t\t\tif (!Urls.Collection.defaultModel)\n\t\t\t\t\t{\n\t\t\t\t\t\tUrls.Collection.defaultModel = model;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// If the url contains * and its and its not a Landing page, \n\t\t\t\t// It gets translated to a regular expresion and injected into the this.regExpGraphRoot\n\t\t\t\t// By compareing one another with other regular expressions (this.insertInGraph)\n\t\t\t\telse if (~model.get('query').indexOf('*') && model.get('type') !== '1')\n\t\t\t\t{\n\t\t\t\t\t// Creates the Regular Expresion to match urls against \n\t\t\t\t\tvar regular_expresion = new RegExp('^' + _.map(model.get('query').split('*'), function (token)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn token.replace(/\\//ig, '\\\\/').replace(/\\?/ig, '\\\\?');\n\t\t\t\t\t}).join('(.*?)') + '$');\n\t\t\t\t\t\n\t\t\t\t\t// Sets the proper attributess \n\t\t\t\t\tmodel.set({\n\t\t\t\t\t\tregexp: regular_expresion,\n\t\t\t\t\t\tchilds: []\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t// Now we insert it in the graph\n\t\t\t\t\tself.insertInGraph(model, self.regExpGraphRoot);\n\t\t\t\t\t\n\t\t\t\t\t/// We will just check if the new node is parent of a previously added node\n\t\t\t\t\t_.each(self.regExpGraphHelper, function (currentNode)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!_.contains(model.get('childs'), currentNode) && model.get('regexp').test(currentNode.get('query')))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmodel.get('childs').push(currentNode);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tself.regExpGraphHelper.push(model);\n\t\t\t\t}\n\t\t\t\t// Otherways its an exact match then we add it to this.exactMatchHash\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tself.exactMatchHash[model.get('query')] = model;\n\t\t\t\t\t\n\t\t\t\t\t// if it's a landing page we should add it to the colection of url we will be adding to the router\n\t\t\t\t\tif (model.get('type') === '1')\n\t\t\t\t\t{\n\t\t\t\t\t\tself.landingPages.push(model);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\t// Urls.Collection.insertInGraph:\n\t\t// Given a node it tries to injected into the graph\n\t,\tinsertInGraph: function (node, root)\n\t\t{\n\t\t\tvar isParent = true,\n\t\t\t\tself = this;\n\n\t\t\t// walks all child nodes\n\t\t\t_.each(root.get('childs'), function (branch)\n\t\t\t{\n\t\t\t\tif (branch.get('query') !== node.get('query'))\n\t\t\t\t{\n\t\t\t\t\t// is it covered by a more broad expresion?\n\t\t\t\t\tif (branch.get('regexp').test(node.get('query')))\n\t\t\t\t\t{\n\t\t\t\t\t\tisParent = false;\n\t\t\t\t\t\tself.insertInGraph(node, branch);\n\t\t\t\t\t}\n\t\t\t\t\t// Is it broader than then current branch\n\t\t\t\t\telse if (node.get('regexp').test(branch.get('query')))\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.get('childs').push(branch);\n\t\t\t\t\t\troot.set('childs', _.without(root.get('childs'), branch));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// the node is not a child nor a parent is a broder\n\t\t\tif (isParent && !~_.indexOf(root.get('childs'), node))\n\t\t\t{\n\t\t\t\troot.get('childs').push(node);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Urls.Collection.findUrl:\n\t\t// For the passed in url looks for the most apropiate url model to return\n\t,\tfindUrl: function (url)\n\t\t{\n\t\t\t// Here we do a table hash lookup (Super fast!)\n\t\t\tvar exact_match = this.exactMatchHash[url];\n\t\t\t\n\t\t\tif (exact_match)\n\t\t\t{\n\t\t\t\treturn exact_match;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// lets do a lookup in our regexp graph\n\t\t\t\tthis.candidates = {}; // Here we will store URL_ID : Number of edges\n\t\t\t\tthis.walkRegExpGraph(url, this.regExpGraphRoot, 1);\n\n\t\t\t\tvar result = _.max(_.pairs(this.candidates), function (candidate)\n\t\t\t\t{\n\t\t\t\t\treturn candidate[1];\n\t\t\t\t});\n\n\t\t\t\treturn result && typeof result === 'object' ? this.get(result[0]) : false;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Urls.Collection.walkRegExpGraph:\n\t\t// Recursive function used by the findUrl to traverse the url graph\n\t,\twalkRegExpGraph: function (url, branch, deepth)\n\t\t{\n\t\t\tvar self = this;\n\t\t\t// Walks all the childs of the current branch\n\t\t\t_.each(branch.get('childs'), function (new_branch)\n\t\t\t{\n\t\t\t\tif (new_branch.get('regexp').test(url))\n\t\t\t\t{\n\t\t\t\t\t// if the current child (which is also a branch) passes the test it will go down the line \n\t\t\t\t\t// and it adds 1 edge to the candidates object\n\t\t\t\t\tself.candidates[new_branch.cid] = (self.candidates[new_branch.cid]) ? self.candidates[new_branch.cid] + deepth : deepth;\n\t\t\t\t\tself.walkRegExpGraph(url, new_branch, deepth + 1);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t}, SC.Singleton);\n\t\n\t// This is a private variable that will holds all the requests we have made, tho it's public you should try to avoid using it, and call Content.load instead\n\tvar currentRequests = []; \n\n\t// loadPage:\n\t// This Function takes care of loading the content for the passed url. \n\t// if a done function is passed it will be called whenever we have content, \n\t// if no content is provided for the current url, \n\t// the done function will be called wirght away with false as a parameter \n\tfunction loadPage (url, donefn)\n\t{\n\t\t/*jshint validthis:true*/\n\t\tdonefn = donefn || jQuery.noop;\n\n\t\tif (url)\n\t\t{\n\t\t\t// Looks in the array of registered urls\n\t\t\tvar foundUrl = Urls.Collection.getInstance().findUrl(url);\n\n\t\t\t// The url is registered in the collection\n\t\t\tif (foundUrl)\n\t\t\t{\n\t\t\t\t// Gets the page for the url \n\t\t\t\tvar page = Pages.Collection.getInstance().get(foundUrl.get('pageid'));\n\n\t\t\t\tif (page)\n\t\t\t\t{\n\t\t\t\t\tdonefn(page);\n\t\t\t\t}\n\t\t\t\t// We don't have it need to be fetched\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Fetches the page\n\t\t\t\t\tnew Pages.Model({internalid: foundUrl.get('pageid'), id: foundUrl.get('pageid')}).fetch({\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tcache: this.Application.getConfig('cache.contentPageCdn')\n\t\t\t\t\t\t,\tttl: this.Application.getConfig('cache.contentPageTtl')\n\t\t\t\t\t\t}\n\t\t\t\t\t,\tkillerId: this.Application.killerId\n\t\t\t\t\t,\treset: true\n\t\t\t\t\t}).done(function ()\n\t\t\t\t\t{\n\t\t\t\t\t\tPages.Collection.getInstance().add(page);\n\t\t\t\t\t\tdonefn(page);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\t// No url is found\n\t\t\telse\n\t\t\t{\n\t\t\t\tdonefn(false);\n\t\t\t}\n\t\t}\n\t\t// No url is passed\n\t\telse\n\t\t{\n\t\t\tdonefn(false);\n\t\t}\n\t}\n\t\n\treturn {\n\t\tUrls: Urls,\n\t\tPages: Pages,\n\t\tcurrentRequests: currentRequests,\n\t\tloadPage: loadPage\n\t};\n});\n\n\n// Content.EnhancedViews.js\n// ------------------------\n// Provides functions that based in a view, sets the title,\n// meta tags and inject html content in the dom\ndefine('Content.EnhancedViews', ['Content.DataModels'], function (DataModels)\n{\n\t'use strict';\n\n\tvar EnhancedViews = {\n\t\t\tpreviousPlaceholders: []\n\t\t};\n\n\t_.extend(EnhancedViews, {\n\n\t\t// EnhancedViews.overrideViewSettings:\n\t\t// Updates attributes of the view with the info camming in the page model passed in\n\t\toverrideViewSettings: function (view, page)\n\t\t{\n\t\t\tview.contentZones = view.contentZones || [];\n\n\t\t\tif (page)\n\t\t\t{\n\t\t\t\t// All info comming off the page has presedence to whats already defined in the view\n\t\t\t\tview.title = page.get('title') || view.getTitle();\n\t\t\t\tview.page_header = page.get('pageheader') || view.page_header;\n\t\t\t\tview.description = page.get('description') || view.description;\n\t\t\t\tview.metaDescription = page.get('metadescription') || view.getMetaDescription();\n\t\t\t\tview.metaKeywords = page.get('metakeywords') || view.getMetaKeywords();\n\t\t\t\tview.template = page.get('template') || view.template;\n\t\t\t\tview.metaextra = page.get('metaextra') || '';\n\t\t\t\t// Everything but the banners, who are merged with other that the view may have,\n\t\t\t\tview.contentZones = _.union(view.contentZones, page.get('pagecontent'));\n\t\t\t}\n\n\t\t\t// If you have a default page (this is a page that is pointed by the * url)\n\t\t\t// it will be always merged\n\t\t\tvar default_url = DataModels.Urls.Collection.defaultModel\n\t\t\t,\tdefault_page = default_url && DataModels.Pages.Collection.getInstance().get(default_url.get('pageid'));\n\n\t\t\tif (default_page)\n\t\t\t{\n\t\t\t\tview.contentZones = _.union(view.contentZones, default_page.get('pagecontent'));\n\t\t\t}\n\n\t\t\treturn view;\n\t\t}\n\n\t,\tinitalizeHead: function ()\n\t\t{\n\t\t\treturn jQuery('head')\n\t\t\t\t.not(':has(title)').append('<title/>').end()\n\t\t\t\t.not(':has(link[rel=\"canonical\"])').append('<link rel=\"canonical\"/>').end()\n\t\t\t\t.not(':has(meta[name=\"keywords\"])').append('<meta name=\"keywords\"/>').end()\n\t\t\t\t.not(':has(meta[name=\"description\"])').append('<meta name=\"description\"/>').end();\n\t\t}\n\n\t,\tenhanceHead: function (view)\n\t\t{\n\t\t\tvar title = view.getTitle();\n\n\t\t\tif (title)\n\t\t\t{\n\t\t\t\tdocument.title = title;\n\t\t\t}\n\t\t\t// Sets the text of the title element if we are in the server\n\t\t\t// we only do it on the server side due to an issue modifying\n\t\t\t// the title tag on IE :(\n\t\t\tif (SC.ENVIRONMENT.jsEnvironment === 'server')\n\t\t\t{\n\t\t\t\tthis.$head.find('title').text(title);\n\t\t\t}\n\n\t\t\treturn this.enhanceMetaTags(view).enhanceCanonicalLinks(view);\n\t\t}\n\n\t,\tenhanceMetaTags: function (view)\n\t\t{\n\t\t\tvar custom_meta_tag_class = 'custom';\n\n\t\t\tthis.$head\n\t\t\t\t// we remove any existing custom meta tags\n\t\t\t\t.find('meta.' + custom_meta_tag_class).remove().end()\n\t\t\t\t// then we add the description\n\t\t\t\t.find('meta[name=\"description\"]').attr('content', view.metaDescription || view.getMetaDescription() || '').end()\n\t\t\t\t// and keywords meta tags\n\t\t\t\t.find('meta[name=\"keywords\"]').attr('content', view.metaKeywords ||  view.getMetaKeywords() || '').end()\n\t\t\t\t// then we append the tags specific to this view\n\t\t\t\t// excluding any extra descriptions and keywords meta tags\n\t\t\t\t.append(view.getMetaTags().not('[name=\"description\"]').not('[name=\"keywords\"]').addClass(custom_meta_tag_class));\n\n\t\t\tif (view.metaextra)\n\t\t\t{\n\t\t\t\tjQuery(view.metaextra).addClass(custom_meta_tag_class).appendTo(this.$head);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t,\tenhanceCanonicalLinks: function (view)\n\t\t{\n\t\t\tvar $head = this.$head;\n\n\t\t\t$head\n\t\t\t\t.find('link[rel=\"canonical\"]').attr('href', view.getCanonical()).end()\n\t\t\t\t// we remove any existing next/prev tags every time\n\t\t\t\t// a page is rendered in case the previous view was paginated\n\t\t\t\t.find('link[rel=\"next\"], link[rel=\"prev\"]').remove();\n\n\t\t\t// if the current page is paginated\n\t\t\tvar previous_page = view.getRelPrev()\n\t\t\t,\tnext_page = view.getRelNext();\n\n\t\t\tif (previous_page)\n\t\t\t{\n\t\t\t\tjQuery('<link/>', {\n\t\t\t\t\trel: 'prev'\n\t\t\t\t,\thref: previous_page\n\t\t\t\t}).appendTo($head);\n\t\t\t}\n\n\t\t\tif (next_page)\n\t\t\t{\n\t\t\t\tjQuery('<link/>', {\n\t\t\t\t\trel: 'next'\n\t\t\t\t,\thref: next_page\n\t\t\t\t}).appendTo($head);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\t// EnhancedViews.enhancePage:\n\t\t// enhace the dom bassed on the attributes of the view\n\t,\tenhancePage: function (view, Layout)\n\t\t{\n\t\t\tthis.$head = this.$head || this.initalizeHead();\n\t\t\t// changes the page head based on the view attributes\n\t\t\tthis.enhanceHead(view);\n\n\t\t\t// emptyies the place holders dom element\n\t\t\tEnhancedViews.clearPlaceholders();\n\n\t\t\t// walks the content zones and injects them in the site\n\t\t\t_.each(view.contentZones || [], function (content_zone)\n\t\t\t{\n\t\t\t\t// its in the layout\n\t\t\t\tif (view.$(content_zone.target).length === 0)\n\t\t\t\t{\n\t\t\t\t\t// it's empty\n\t\t\t\t\tif (jQuery(content_zone.target + ':empty').length === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tLayout.trigger('renderEnhancedPageContent', view, content_zone);\n\t\t\t});\n\t\t}\n\n\t,\trenderHTMLContent: function (view, content_zone)\n\t\t{\n\t\t\tvar target = content_zone.target;\n\t\t\t// If the target is inside the view\n\t\t\tif (view.$(target).length)\n\t\t\t{\n\t\t\t\tview.$(target).html(content_zone.content);\n\t\t\t\tEnhancedViews.previousPlaceholders.push(content_zone.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Otherwise, if the target is on the layout\n\t\t\t\t// we have to make sure it's empty\n\t\t\t\tview.options.application.getLayout().$(target).filter(':empty').each(function (index, element)\n\t\t\t\t{\n\t\t\t\t\tjQuery(element).html(content_zone.content);\n\t\t\t\t\tEnhancedViews.previousPlaceholders.push(content_zone.target);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// EnhancedViews.clearPlaceholders:\n\t\t// This clears all content that was previosly added to the Layout,\n\t\t// this method is called by the EnhancedViews.enhancePage\n\t\t// for every new page\n\t,\tclearPlaceholders: function ()\n\t\t{\n\t\t\t_.each(EnhancedViews.previousPlaceholders, function (previous_placeholder)\n\t\t\t{\n\t\t\t\tjQuery(previous_placeholder).empty();\n\t\t\t});\n\n\t\t\tEnhancedViews.previousPlaceholders = [];\n\t\t}\n\t});\n\n\treturn EnhancedViews;\n});\n\n\n// Content.EnhancedViews.js\n// ------------------------\n// The Landing pages Module uses the Content.DataModels to connect to the servers,\n// That's why there is only a view and a router here\ndefine(\n\t'Content.LandingPages'\n,\t['Content.DataModels', 'Content.EnhancedViews']\n,\tfunction (DataModels, EnhancedViews)\n{\n\t'use strict';\n\n\t// Categories is an optional dependency\n\tvar Categories = false;\n\ttry {\n\t\tCategories = require('Categories');\n\t}\n\tcatch (e)\n\t{\n\t\t//console.log('Couldn\\'t load Categories. ' + e);\n\t}\n\n\t// View:\n\t// Tho most of the content is driven by the content service \n\t// we need a view to extend upon\n\tvar View = Backbone.View.extend({\n\t\t\n\t\ttemplate: 'landing_page'\n\t,\ttitle: ''\n\t,\tpage_header: ''\n\t,\tattributes: {\n\t\t\t'id': 'landing-page'\n\t\t,\t'class': 'landing-page'\n\t\t}\n\t,\tevents: {}\n\t\t\n\t,\tinitialize: function ()\n\t\t{\n\t\t\tthis.url = Backbone.history && Backbone.history.fragment;\n\t\t}\n\t\t\n\t\t// View.showContent:\n\t,\tshowContent: function (page)\n\t\t{\n\t\t\tthis.page_header = page.get('pageheader');\n\t\t\tthis.page = page;\n\t\t\tthis.options.layout.showContent(this);\n\t\t}\n\t\t\n\t\t// View.getBreadcrumb:\n\t\t// It will try to figure the breadcrumb out of the url\n\t,\tgetBreadcrumb: function ()\n\t\t{\n\t\t\tvar breadcrumb = [{\n\t\t\t\t\thref: '/'\n\t\t\t\t,\ttext: _('Home').translate()\n\t\t\t\t}];\n\t\t\t\n\t\t\tif (this.url && Categories)\n\t\t\t{\n\t\t\t\tvar category_path = '';\n\t\t\t\t_.each(Categories.getBranchLineFromPath(this.url), function (cat)\n\t\t\t\t{\n\t\t\t\t\tcategory_path += '/'+cat.id;\n\t\t\t\t\t\n\t\t\t\t\tbreadcrumb.push({\n\t\t\t\t\t\thref: category_path\n\t\t\t\t\t,\ttext: cat.title\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tbreadcrumb.push({\n\t\t\t\thref: this.url \n\t\t\t,\ttext: this.page_header\n\t\t\t});\n\n\t\t\treturn breadcrumb;\n\t\t}\n\t});\n\t\n\t// Router:\n\tvar Router = Backbone.Router.extend({\n\t\t\n\t\t// Routes are created based on the urls in the content.mountToApp\n\t\troutes: {}\n\t\t\n\t,\tinitialize: function (Application)\n\t\t{\n\t\t\tthis.Application = Application;\n\t\t}\n\t\t\n\t\t// Router.displayLandingPage\n\t\t// uses the DataModels.loadPage to load the data and create the model\n\t,\tdisplayLandingPage: function (option) \n\t\t{\n\t\t\tvar self = this\n\t\t\t,\tpage_url = option ? unescape(Backbone.history.fragment).replace('?' + option, '') : Backbone.history.fragment\n\t\t\t,\tview = new View({\n\t\t\t\t\tapplication: this.Application\n\t\t\t\t,\tlayout: this.Application.getLayout()\n\t\t\t\t});\n\t\t\t\n\t\t\tDataModels.loadPage('/' + page_url, function (page)\n\t\t\t{\n\t\t\t\tif (page)\n\t\t\t\t{\n\t\t\t\t\tEnhancedViews.overrideViewSettings(view, page);\n\t\t\t\t\tview.showContent(page);\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tself.Application.getLayout().notFound();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\t\n\treturn {\n\t\tView: View\n\t,\tRouter: Router\n\t};\n});\n\n// Content.js\n// ----------\n// Integration to the Content Delivery Serivce Boundle\ndefine(\n\t'Content'\n,\t['Content.DataModels', 'Content.EnhancedViews', 'Content.LandingPages']\n,\tfunction (DataModels, EnhancedViews, LandingPages)\n{\n\t'use strict';\n\t\n\treturn {\n\t\tDataModels: DataModels, \n\t\tEnhancedViews: EnhancedViews, \n\t\tLandingPages: LandingPages,\n\t\tmountToApp: function (Application)\n\t\t{\n\t\t\t// Wires the models to the assets root\n\t\t\tDataModels.Pages.Model.prototype.urlRoot = _.getAbsoluteUrl(DataModels.Pages.Model.prototype.urlRoot);\n\t\t\tDataModels.Urls.Model.prototype.urlRoot = _.getAbsoluteUrl(DataModels.Urls.Model.prototype.urlRoot);\n\t\t\t// Now we wire the collection\n\t\t\tDataModels.Pages.Collection.prototype.url = _.getAbsoluteUrl(DataModels.Pages.Collection.prototype.url);\n\t\t\tDataModels.Urls.Collection.prototype.url = _.getAbsoluteUrl(DataModels.Urls.Collection.prototype.url);\n\n\t\t\tDataModels.Application = Application;\n\n\t\t\tvar Layout = Application.getLayout()\n\t\t\t,\tshow_content_wrapper = function (fn, view)\n\t\t\t\t{\n\t\t\t\t\tvar promise = jQuery.Deferred();\n\t\t\t\t\tvar args = arguments;\n\n\t\t\t\t\t// Check the url and loads the page definition if needed\n\t\t\t\t\tDataModels.loadPage('/' + Backbone.history.fragment, function (page)\n\t\t\t\t\t{\n\t\t\t\t\t\t// override the title and page header of the view with the page returned\n\t\t\t\t\t\tEnhancedViews.overrideViewSettings(view, page);\n\n\t\t\t\t\t\t// Calls the original function with all the parameters (slice to exclude fn)\n\t\t\t\t\t\tfn.apply(Layout, Array.prototype.slice.call(args, 1)).done(function ()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// once the original func is done this reads the attributes of the view and\n\t\t\t\t\t\t\t// sets title, metas and adds banners\n\t\t\t\t\t\t\tEnhancedViews.enhancePage(view, Layout);\n\n\t\t\t\t\t\t\t//only after enhancing the view we resolve the promise\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tpromise.resolveWith(this, arguments);\t\t\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\treturn promise;\n\t\t\t\t};\n\t\t\t\n\t\t\t// Wraps the layout.showContent and Layout.showInModal methods\n\t\t\t// This make sure that every time you try to show content in the \n\t\t\t// application the page will be enhaced by setting title, header, meta tags and banners \n\t\t\tLayout.showContent = _.wrap(Layout.showContent, show_content_wrapper);\n\t\t\tLayout.showInModal = _.wrap(Layout.showInModal, show_content_wrapper);\n\n\t\t\t// Wraps the layout.updateUI function for rendering Content when importants part of the UI are updated dynamically. \n\t\t\tLayout.updateUI = _.wrap(Layout.updateUI, function (fn)\n\t\t\t{\n\t\t\t\tfn.apply(Layout, []); \n\t\t\t\tDataModels.loadPage('/' + Backbone.history.fragment, function (page)\n\t\t\t\t{\n\t\t\t\t\tvar view = Layout; \n\t\t\t\t\tEnhancedViews.overrideViewSettings(view, page);\n\t\t\t\t\tEnhancedViews.enhancePage(view, Layout);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tLayout.on('renderEnhancedPageContent', function (view, content_zone)\n\t\t\t{\n\t\t\t\tif (content_zone.contenttype === 'html')\n\t\t\t\t{\n\t\t\t\t\tEnhancedViews.renderHTMLContent(view, content_zone);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tApplication.on('afterModulesLoaded', function ()\n\t\t\t{\n\t\t\t\tvar query = '';\n\n\t\t\t\t_.each(DataModels.Urls.Collection.getInstance().landingPages, function (landing_page)\n\t\t\t\t{\n\t\t\t\t\tquery = landing_page.get('query')[0] === '/' ? landing_page.get('query').substring(1) : landing_page.get('query');\n\t\t\t\t\tLandingPages.Router.prototype.routes[query + '?*options'] = 'displayLandingPage';\n\t\t\t\t\tLandingPages.Router.prototype.routes[query] = 'displayLandingPage';\n\t\t\t\t});\n\n\t\t\t\treturn new LandingPages.Router(Application);\n\t\t\t});\n\n\t\t\tApplication.on('afterStart', function ()\n\t\t\t{\n\t\t\t\t// Every time the url changes we call the DataModels.loadPage, \n\t\t\t\t// so if we need to load content from the server, the request starts as soon as posible,\n\t\t\t\t// Probably while other ajax request are being made\n\t\t\t\tBackbone.history && Backbone.history.on('all', function ()\n\t\t\t\t{\n\t\t\t\t\tDataModels.loadPage('/' + Backbone.history.fragment);\n\t\t\t\t});\n\n\t\t\t\t// After the application Starts we will do the same, since the url have not changed yet\n\t\t\t\tBackbone.history && DataModels.loadPage('/' + Backbone.history.fragment);\n\t\t\t});\n\t\t}\n\t};\n});\n\n// CookieWarningBanner.js\n// ----------------------\n// Handles the display of the banner to be displayed\n// warning the customers about the site's use of cookies\n\ndefine('CookieWarningBanner', function ()\n{\n\t'use strict';\n\n\treturn {\n\t\tmountToApp: function (application)\n\t\t{\n\t\t\tvar cookie_message = ''\n\t\t\t,\t$cookie_message_element = ''\n\t\t\t,\tLayout = application.getLayout()\n\t\t\t,\tcookie_warning_settings = application.getConfig('cookieWarningBanner')\n\t\t\t\t// The cookie policy is set up in the backend\n\t\t\t,\tcookie_warning_policy = application.getConfig('siteSettings.cookiepolicy')\n\t\t\t,\tshow_cookie_warning_banner = application.getConfig('siteSettings.showcookieconsentbanner') === 'T';\n\n\t\t\tjQuery.cookie.json = true;\n\n\t\t\t// If we need to show the banner and it hasn't been closed\n\t\t\tif (show_cookie_warning_banner && !(cookie_warning_settings.saveInCookie && jQuery.cookie('isCookieWarningClosed')))\n\t\t\t{\n\t\t\t\tcookie_message = cookie_warning_settings.message;\n\t\t\t\t// if there's a file\n\t\t\t\tif (cookie_warning_policy)\n\t\t\t\t{\n\t\t\t\t\tcookie_message += ' <a href=\"https://system.netsuite.com' + cookie_warning_policy +\n\t\t\t\t\t\t'\" data-toggle=\"show-in-modal\" data-page-header=\"' + cookie_warning_settings.anchorText +\n\t\t\t\t\t\t'\">' + cookie_warning_settings.anchorText + '</a>';\n\t\t\t\t}\n\t\t\t\t// html for the message\n\t\t\t\t$cookie_message_element = jQuery(SC.macros.message(cookie_message, 'cookie-banner no-margin-bottom', cookie_warning_settings.closable));\n\n\t\t\t\tLayout.on('afterRender', function ()\n\t\t\t\t{\n\t\t\t\t\t// We prepend the html to the view\n\t\t\t\t\tLayout.$('[data-type=message-placeholder]').prepend($cookie_message_element);\n\t\t\t\t\t\n\t\t\t\t\t$cookie_message_element.on('close', function ()\n\t\t\t\t\t{\n\t\t\t\t\t\tif (cookie_warning_settings.saveInCookie)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tjQuery.cookie('isCookieWarningClosed', true);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n});\n\n// CreditCard.Collection.js\n// -----------------------\n// Credit cards collection\ndefine('CreditCard.Collection', ['CreditCard.Model'], function (Model)\n{\n\t'use strict';\n\n\treturn Backbone.Collection.extend({\n\n\t\tmodel: Model\n\t,\turl: 'services/creditcard.ss'\n\t\n\t});\n});\n\n\n// CreditCard.Model.js\n// -----------------------\n// Model for handling credit cards (CRUD)\ndefine('CreditCard.Model', function ()\n{\n\t'use strict';\n\n\t// validate that the expiration date is bigger than today\n\tfunction validateExpirationDate (value, name, data)\n\t{\n\n\t\tvar current = new Date();\n\n\t\tif (!value || new Date(current.getFullYear(), current.getMonth()).getTime() > new Date(data.expyear, data.expmonth - 1).getTime())\n\t\t{\n\t\t\treturn _('Please select a date in the future').translate();\n\t\t}\n\t}\n\t\n\treturn Backbone.Model.extend({\n\n\t\turlRoot: 'services/creditcard.ss',\n\n\t\tvalidation: {\n\t\t\tccname: { fn: function (cc_name)\n\t\t\t\t{\t\n\t\t\t\t\tif (!cc_name)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn _('Name is required').translate();\n\t\t\t\t\t}\n\t\t\t\t\telse if (cc_name.length > 26)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn _('Name too long').translate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t,\tccnumber: {\tfn: function (cc_number, attr, form)\n\t\t\t\t{\n\n\t\t\t\t\t// credit card number validation\n\t\t\t\t\t// It validates that the number pass the Luhn test and also that it has the right starting digits that identify the card issuer\n\t\t\t\t\tif (!cc_number)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn _('Card Number is required').translate();\n\t\t\t\t\t}\n\n\t\t\t\t\t// this check shouldn't be necessary, maybe it needs to be removed\n\t\t\t\t\tif (_.isUndefined(form.internalid) && (_.isUndefined(this.attributes.ccnumber) || cc_number === this.attributes.ccnumber))\n\t\t\t\t\t{\n\t\t\t\t\t\tcc_number = cc_number.replace(/\\s/g, '');\n\n\t\t\t\t\t\t//check Luhn Algorithm\n\t\t\t\t\t\tvar\tverify_luhn_algorithm = _(cc_number.split('').reverse()).reduce(function (a, n, index)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn a + _((+n * [1, 2][index % 2]).toString().split('')).reduce(function (b, o)\n\t\t\t\t\t\t\t\t\t{ return b + (+o); }, 0);\n\t\t\t\t\t\t\t}, 0) % 10 === 0\n\n\t\t\t\t\t\t// get the credit card name \n\t\t\t\t\t\t,\tpaymenthod_id = _.paymenthodIdCreditCart(cc_number);\n\n\t\t\t\t\t\t//check that card type is supported by validation\n\t\t\t\t\t\tif (!paymenthod_id)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn _('Credit Card type is not supported').translate();\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\telse if (!verify_luhn_algorithm)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// we throw an error if the number fails the regex or the Luhn algorithm \n\t\t\t\t\t\t\treturn _('Credit Card Number is invalid').translate();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t,\texpyear: { fn: validateExpirationDate }\n\t\t,\texpmonth: { fn: validateExpirationDate }\n\t\t}\n\n\t,\tinitialize: function (attributes, options)\n\t\t{\n\t\t\tthis.options = options;\n\t\t\tdelete this.validation.ccsecuritycode;\n\t\t}\n\n\t});\n});\n\n\n/* global nsglobal */\n// ErrorManagement.js\n// ------------------\n// Handles all errors related to api calls and provides a 404 and 500 error pages\n// Also it manages 401 error (session expires) and do the redirect to login\ndefine('ErrorManagement', ['Session'], function (Session)\n{\n\t'use strict';\n\n\tvar Views = {};\n\n\t// Views.PageNotFound:\n\t// Will be rendered if there is a page we can not identify\n\tViews.PageNotFound = Backbone.View.extend({\n\n\t\ttemplate: 'page_not_found'\n\t,\ttitle: _('Page not found').translate()\n\t,\tpage_header: _('Page not found').translate()\n\n\t,\tattributes: {\n\t\t\t'id': 'page-not-found'\n\t\t,\t'class': 'page-not-found'\n\t\t}\n\n\t,\tinitialize: function ()\n\t\t{\n\t\t\tif (SC.ENVIRONMENT.jsEnvironment === 'server')\n\t\t\t{\n\t\t\t\tnsglobal.statusCode = 404;\n\t\t\t}\n\t\t}\n\t});\n\n\tViews.ForbiddenError = Backbone.View.extend({\n\n\t\ttemplate: 'forbidden_error'\n\t,\ttitle: _('Forbidden Error').translate()\n\t,\tpage_header: _('NOT ALLOWED').translate()\n\n\t,\tattributes: {\n\t\t\t'id': 'forbidden-error'\n\t\t,\t'class': 'forbidden-error'\n\t\t}\n\n\t,\tinitialize: function ()\n\t\t{\n\t\t\tif (SC.ENVIRONMENT.jsEnvironment === 'server')\n\t\t\t{\n\t\t\t\tnsglobal.statusCode = 403;\n\t\t\t}\n\t\t}\n\t});\n\n\t// Views.InternalError:\n\t// Will be rendered if there is an internal error\n\t// May be an api request that went bad or some other issue\n\tViews.InternalError = Backbone.View.extend({\n\n\t\ttemplate: 'internal_error'\n\t,\ttitle: _('Internal Error').translate()\n\t,\tpage_header: _('Internal Error').translate()\n\n\t,\tattributes: {\n\t\t\t'id': 'internal-error'\n\t\t,\t'class': 'internal-error'\n\t\t}\n\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tif (options.page_header)\n\t\t\t{\n\t\t\t\tthis.page_header = options.page_header;\n\t\t\t}\n\n\t\t\tif (options.title)\n\t\t\t{\n\t\t\t\tthis.title = options.title;\n\t\t\t}\n\n\t\t\tif (SC.ENVIRONMENT.jsEnvironment === 'server')\n\t\t\t{\n\t\t\t\tnsglobal.statusCode = 500;\n\t\t\t}\n\t\t}\n\t});\n\n\tViews.ExpiredLink = Backbone.View.extend({\n\n\t\ttemplate: 'expired_link'\n\n\t,\tattributes: {\n\t\t\t'id': 'expired_link'\n\t\t,\t'class': 'expired_link'\n\t\t}\n\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tif (options.page_header)\n\t\t\t{\n\t\t\t\tthis.page_header = options.page_header;\n\t\t\t}\n\n\t\t\tif (options.title)\n\t\t\t{\n\t\t\t\tthis.title = options.title;\n\t\t\t}\n\n\t\t\tif (SC.ENVIRONMENT.jsEnvironment === 'server')\n\t\t\t{\n\t\t\t\tnsglobal.statusCode = 500;\n\t\t\t}\n\t\t}\n\t});\n\n\n\tViews.LoggedOut = Backbone.View.extend({\n\t\ttemplate: 'logged_out'\n\t,\ttitle : _('Logged out').translate()\n\t,\tinitialize: function()\n\t\t{\n\t\t\tthis.labels = {\n\t\t\t\ttitle: 'You have been logged out'\n\t\t\t,\texplanation: 'Your session expired or someone else logged in another device with your account. You must log in again to continue.'\n\t\t\t,\tlogin: 'Log in'\n\t\t\t};\n\t\t\t_.each(this.labels, function(val, label, labels)\n\t\t\t{\n\t\t\t\tlabels[label] = _(val).translate();\n\t\t\t});\n\t\t}\n\t,\tshowError: function()\n\t\t{\n\t\t}\n\t});\n\n\t// We extend the view to provide with a showError and hideError to all instances of it\n\t_.extend(Backbone.View.prototype, {\n\n\t\t// we empty all of the error placeholders of the view\n\t\thideError: function ()\n\t\t{\n\t\t\tthis.$('[data-type=\"alert-placeholder\"]').empty();\n\t\t}\n\n\t,\tshowError: function (message,type)\n\t\t{\n\t\t\tthis.hideError();\n\t\t\t// Finds or create the placeholder for the error message\n\t\t\tvar placeholder = this.$('[data-type=\"alert-placeholder\"]');\n\t\t\tif (!placeholder.length)\n\t\t\t{\n\t\t\t\tplaceholder = jQuery('<div/>', {'data-type': 'alert-placeholder'});\n\t\t\t\tthis.$el.prepend(placeholder);\n\t\t\t}\n\n\t\t\t// Renders the error message and into the placeholder\n\t\t\tplaceholder.append(\n\t\t\t\tSC.macros.message(message, type ? type : 'error', true)\n\t\t\t);\n\n\t\t\t// Re Enables all posible disableded buttons of the view\n\t\t\tthis.$(':disabled').attr('disabled', false);\n\n\t\t\t//If the backToTop module is loaded, we scroll to the top of the view to show the error.\n\t\t\tif (this.application)\n\t\t\t{\n\t\t\t\t_.result(this.application.getLayout(), 'backToTop');\n\t\t\t}\n\t\t}\n\n\t,\tshowErrorInModal: function (message)\n\t\t{\n\t\t\tjQuery('.modal').modal('hide');\n\t\t\tvar view = new Backbone.View({application: this.application});\n\t\t\tview.title = _('Error').translate();\n\t\t\tview.render = function ()\n\t\t\t{\n\t\t\t\tthis.$el.append('<p class=\"error-message\">' + message + '</p>');\n\t\t\t};\n\t\t\tview.showInModal();\n\t\t}\n\t});\n\n\tvar parseErrorMessage = function (jqXhr, messageKeys)\n\t{\n\t\tvar message = null, i, current_key;\n\t\ttry\n\t\t{\n\t\t\t// Tries to parse the responseText and try to read the most common keys for error messages\n\t\t\tvar response = JSON.parse(jqXhr.responseText);\n\t\t\tif (response)\n\t\t\t{\n\t\t\t\tfor (i=0; i < messageKeys.length; i++)\n\t\t\t\t{\n\t\t\t\t\tcurrent_key = messageKeys[i];\n\t\t\t\t\tif (response[current_key])\n\t\t\t\t\t{\n\t\t\t\t\t\tmessage = _.isArray(response[current_key]) ? response[current_key][0] : response[current_key];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (err) {}\n\n\t\treturn message;\n\t};\n\n\treturn {\n\t\tViews: Views\n\t,\tparseErrorMessage: parseErrorMessage\n\t,\tmountToApp: function (application)\n\t\t{\n\t\t\tvar Layout = application.getLayout();\n\n\t\t\t_.extend(Layout, {\n\n\t\t\t\t// layout.errorMessageKeys:\n\t\t\t\t// They will be use to try to get the error message of a faild ajax call\n\t\t\t\t// Extend this as needed\n\t\t\t\terrorMessageKeys: ['errorMessage', 'errors', 'error', 'message']\n\n\t\t\t\t// layout.notFound:\n\t\t\t\t// Shortcut to display the Views.PageNotFound\n\t\t\t,\tnotFound: function ()\n\t\t\t\t{\n\t\t\t\t\tvar view = new Views.PageNotFound({\n\t\t\t\t\t\tapplication: application\n\t\t\t\t\t});\n\n\t\t\t\t\tview.showContent();\n\t\t\t\t}\n\n\t\t\t\t// layout.notFound:\n\t\t\t\t// Shortcut to display the Views.InternalError\n\t\t\t,\tinternalError: function (message, page_header, title)\n\t\t\t\t{\n\t\t\t\t\tvar view = new Views.InternalError({\n\t\t\t\t\t\tapplication: application\n\t\t\t\t\t,\tmessage: message\n\t\t\t\t\t,\tpage_header: page_header\n\t\t\t\t\t,\ttitle: title\n\t\t\t\t\t});\n\n\t\t\t\t\tview.showContent();\n\t\t\t\t}\n\n\t\t\t,\texpiredLink: function (message)\n\t\t\t\t{\n\t\t\t\t\tvar view = new Views.ExpiredLink({\n\t\t\t\t\t\tapplication: application\n\t\t\t\t\t,\tpage_header: message\n\t\t\t\t\t,\ttitle: message\n\t\t\t\t\t});\n\n\t\t\t\t\tview.showContent();\n\t\t\t\t}\n\n\t\t\t,\tforbiddenError: function ()\n\t\t\t\t{\n\t\t\t\t\tvar view = new Views.ForbiddenError({\n\t\t\t\t\t\tapplication: application\n\t\t\t\t\t});\n\t\t\t\t\tview.showContent();\n\t\t\t\t}\n\t\t\t,\tunauthorizedError: function()\n\t\t\t\t{\n\t\t\t\t\tif (application.getConfig('currentTouchpoint') === 'checkout')\n\t\t\t\t\t{\n\t\t\t\t\t\tapplication.getUser().set({ isLoggedIn: 'F', isGuest: 'F' });\n\t\t\t\t\t\tapplication.Configuration.currentTouchpoint = 'login';\n\t\t\t\t\t\tBackbone.history.navigate('login-register', { trigger: true });\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar url = Session.get('touchpoints.login');\n\t\t\t\t\t\tif (application.getConfig('currentTouchpoint'))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\turl += '&origin=' + application.getConfig('currentTouchpoint');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (url)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twindow.location = url;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tjQuery(document).ajaxError(function (e, jqXhr, options, error_text)\n\t\t\t{\n\t\t\t\tvar intStatus = parseInt(jqXhr.status, 10);\n\n\t\t\t\tif (error_text === 'abort' || intStatus === 0)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Unauthorized Error, customer must be logged in - we pass origin parameter with the right touchpoint for redirect the user after login\n\t\t\t\tif (intStatus === 401)\n\t\t\t\t{\n\t\t\t\t\tLayout.unauthorizedError(jqXhr);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// You can bypass all this logic by capturing the error callback on the fetch using preventDefault = true on your jqXhr object\n\t\t\t\tif (!jqXhr.preventDefault)\n\t\t\t\t{\n\t\t\t\t\t// if its a write operation we will call the showError of the currentView or of the modal if presetn\n\t\t\t\t\tvar message = parseErrorMessage(jqXhr, Layout.errorMessageKeys);\n\n\t\t\t\t\tif (!message || _.isObject(message))\n\t\t\t\t\t{\n\t\t\t\t\t\tmessage =  _('Theres been an internal error').translate();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.type === 'GET' && options.killerId)\n\t\t\t\t\t{\n\t\t\t\t\t\tif  (intStatus === 403)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Not Found error, we show that error\n\t\t\t\t\t\t\tLayout.forbiddenError();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Its a read operation that was ment to show a page\n\t\t\t\t\t\telse if (intStatus === 404)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Not Found error, we show that error\n\t\t\t\t\t\t\tLayout.notFound();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Other ways we just show an internal error page\n\t\t\t\t\t\t\tLayout.internalError(message);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (Layout.currentView)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Do not show error message if forbidden\n\t\t\t\t\t\tif (intStatus !== 403)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Calls the showError of the modal if present or the one of the currentView (content view)\n\t\t\t\t\t\t\tif (Layout.modalCurrentView)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tLayout.modalCurrentView.showError(message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tLayout.currentView.showError(message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar view = Layout.modalCurrentView || Layout.currentView;\n\t\t\t\t\t\t\tif (view && _.isFunction(view.forbiddenError))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tview.forbiddenError();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tLayout.forbiddenError();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// We allways default to showing the internalError of the layout\n\t\t\t\t\t\tLayout.internalError();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n});\n\n\n// Facets.Helper.js\n// ----------------\n// Helps you with the creation of translators\ndefine('Facets.Helper', ['Facets.Translator'], function (Translator)\n{\n\t'use strict';\n\n\treturn {\n\t\tsettings_stack: []\n\n\t\t// Helper.parseUrl\n\t\t// Returns a Facet.Translator for the passed url and configuration\n\t,\tparseUrl: function (url, configuration) {\n\t\t\treturn new Translator(url, null, configuration);\n\t\t}\n\n\t,\tsetCurrent: function (settings) {\n\t\t\tthis.settings_stack.push(settings);\n\t\t}\n\t\n\t,\tgetCurrent: function () { \n\t\t\treturn this.settings_stack[this.settings_stack.length - 1];\n\t\t}\n\t\t\n\t,\tgetPrevious: function () {\n\t\t\treturn this.settings_stack[this.settings_stack.length - 2];\n\t\t}\n\t};\n});\n\n// Facets.Model.js\n// ---------------\n// Connects to the search api to get all the items and the facets\n// A Model Contains a Collection of items and the list of facet groups with its values\ndefine('Facets.Model', ['ItemDetails.Collection', 'Session'], function (ItemDetailsCollection, Session)\n{\n\t'use strict';\n\t\n\tvar original_fetch = Backbone.CachedModel.prototype.fetch;\n\n\treturn Backbone.CachedModel.extend({\n\t\t\n\t\turl: function()\n\t\t{\n\t\t\tvar url = _.addParamsToUrl(\n\t\t\t\t'/api/items'\n\t\t\t,\t_.extend(\n\t\t\t\t\t{}\n\t\t\t\t,\tthis.searchApiMasterOptions\n\t\t\t\t,\tSession.getSearchApiParams()\n\t\t\t\t)\n\t\t\t);\n\t\t\t\n\t\t\treturn url;\n\t\t}\n\n\t,\tinitialize: function ()\n\t\t{\n\t\t\t// Listen to the change event of the items and converts it to an ItemDetailsCollection\n\t\t\tthis.on('change:items', function (model, items)\n\t\t\t{\n\t\t\t\tif (!(items instanceof ItemDetailsCollection))\n\t\t\t\t{\n\t\t\t\t\t// NOTE: Compact is used to filter null values from response\n\t\t\t\t\tmodel.set('items', new ItemDetailsCollection(_.compact(items)));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// model.fetch\n\t\t// -----------\n\t\t// We need to make sure that the cache is set to true, so we wrap it\n\t,\tfetch: function (options)\n\t\t{\n\t\t\toptions = options || {};\n\n\t\t\toptions.cache = true;\n\n\t\t\treturn original_fetch.apply(this, arguments);\n\t\t}\n\n\n\t}, {\n\t\tmountToApp: function (application) \n\t\t{\n\t\t\t// sets default options for the search api\n\t\t\tthis.prototype.searchApiMasterOptions = application.getConfig('searchApiMasterOptions.Facets', {});\n\t\t}\n\t});\n});\n\n/* global nsglobal */\n// Facets.Router.js\n// ----------------\n// Mixes the Translator, Model and View\ndefine('Facets.Router', ['Facets.Views', 'Facets.Helper', 'Facets.Model', 'Categories'], function (Views, Helper, Model, Categories)\n{\n\t'use strict';\n\t\n\treturn Backbone.Router.extend({\n\t\t\n\t\tinitialize: function (application)\n\t\t{\n\t\t\tthis.application = application;\n\t\t\tthis.translatorConfig = application.translatorConfig;\n\t\t}\n\t\n\t,\tgetFacetsAliasesMapping: function (corrections)\n\t\t{\n\t\t\tvar facets_aliases_mapping = {};\n\n\t\t\t_.each(corrections, function(correction) \n\t\t\t{\n\t\t\t\tfacets_aliases_mapping[correction.usedAlias] = correction.url;\n\t\t\t});\n\n\t\t\treturn facets_aliases_mapping;\n\t\t}\n\n\t,\tunaliasUrl: function (aliased_url, corrections)\n\t\t{\n\t\t\taliased_url = (aliased_url[0] === '/') ? aliased_url.substr(1) : aliased_url;\n\n\t\t\tvar facet_delimiters = this.translatorConfig.facetDelimiters\n\t\t\t,\tfacets_n_options = aliased_url.split(facet_delimiters.betweenFacetsAndOptions)\n\t\t\t,\tfacets = (facets_n_options[0] && facets_n_options[0] !== this.translatorConfig.fallbackUrl) ? facets_n_options[0] : ''\n\t\t\t,\toptions = facets_n_options[1] || ''\n\t\t\t,\tfacet_tokens = facets.split(new RegExp('[\\\\'+ facet_delimiters.betweenDifferentFacets +'\\\\'+ facet_delimiters.betweenFacetNameAndValue +']+', 'ig'))\n\t\t\t,\ttranslated_facets = ''\n\t\t\t,\tfacets_aliases_mapping = this.getFacetsAliasesMapping(corrections);\n\n\t\t\twhile (facet_tokens.length > 0)\n\t\t\t{\n\t\t\t\tvar facet_name = facet_tokens.shift()\n\t\t\t\t,\tfacet_value = facet_tokens.shift();\n\n\t\t\t\tif (facets_aliases_mapping[facet_name])\n\t\t\t\t{\n\t\t\t\t\ttranslated_facets += facets_aliases_mapping[facet_name] + facet_delimiters.betweenFacetNameAndValue + facet_value;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttranslated_facets += facet_name + facet_delimiters.betweenFacetNameAndValue + facet_value;\n\t\t\t\t}\n\n\t\t\t\tif (facet_tokens.length > 0)\n\t\t\t\t{\n\t\t\t\t\ttranslated_facets += facet_delimiters.betweenDifferentFacets;\n\t\t\t\t}\t\t\t\n\t\t\t}\n\n\t\t\tvar unaliased_url = translated_facets;\n\t\t\t\n\t\t\tif (options)\n\t\t\t{\n\t\t\t\tunaliased_url += facet_delimiters.betweenFacetsAndOptions + options;\n\t\t\t}\n\n\t\t\treturn unaliased_url;\n\t\t}\n\n\t\t// router.facetLoading\n\t\t// This handles all the routes of the item list\n\t,\tfacetLoading: function ()\n\t\t{\n\t\t\t// If the previouse view was a Views.Browse (Item List) we \n\t\t\t// re render the facets so links gets upated (For the nervous clicker)\n\t\t\tvar current_view = this.application.getLayout().currentView;\n\t\t\t\n\t\t\tif (current_view instanceof Views.Browse)\n\t\t\t{\n\t\t\t\tcurrent_view.renderFacets(Backbone.history.fragment); // calls parse url\n\t\t\t}\n\t\t\t\n\t\t\t// Creates a translator\n\t\t\tvar translator = Helper.parseUrl(Backbone.history.fragment, this.translatorConfig)\n\t\t\t,\turl = Backbone.history.fragment;\n\n\t\t\t// Should we show the category Page?\n\t\t\tif (this.isCategoryPage(translator))\n\t\t\t{\n\t\t\t\treturn this.showCategoryPage(translator);\n\t\t\t}\n\n\t\t\t// Model\n\t\t\tvar model = new Model()\n\t\t\t// and View\n\t\t\t,\tview = new Views.Browse({\n\t\t\t\t\ttranslator: translator\n\t\t\t\t,\ttranslatorConfig: this.translatorConfig\n\t\t\t\t,\tapplication: this.application\n\t\t\t\t,\tmodel: model\n\t\t\t\t})\n\t\t\t,\tself = this;\n\t\t\t\n\t\t\tmodel.fetch({\n\t\t\t\tdata: translator.getApiParams()\n\t\t\t,\tkillerId: this.application.killerId\n\t\t\t,\tpageGeneratorPreload: true }).then(function (data) {\n\n\t\t\t\tif (data.corrections && data.corrections.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar unaliased_url = self.unaliasUrl(url, data.corrections);\n\n\t\t\t\t\tif (SC.ENVIRONMENT.jsEnvironment === 'server')\n\t\t\t\t\t{\t\t\t\n\t\t\t\t\t\tnsglobal.statusCode = 301;\n\t\t\t\t\t\tnsglobal.location = unaliased_url;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tBackbone.history.navigate('#' + unaliased_url, {trigger: true});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttranslator.setLabelsFromFacets(model.get('facets') || []);\n\t\t\t\t\tview.showContent();\n\t\t\t\t}\n\t\t\t});\t\t\n\t\t}\n\n\t\t// router.¡sCategoryPage\n\t\t// Returs true if this is the top category page, \n\t\t// override it if your implementation difers from this behavior \n\t,\tisCategoryPage: function(translator)\n\t\t{\n\t\t\tvar current_facets = translator.getAllFacets()\n\t\t\t,\tcategories = Categories.getBranchLineFromPath(translator.getFacetValue('category'));\n\n\t\t\treturn (current_facets.length === 1 && current_facets[0].id === 'category' && categories.length === 1 && _.size(categories[0].categories));\n\t\t}\n\n\t,\tshowCategoryPage: function(translator)\n\t\t{\n\t\t\tvar view = new Views.BrowseCategories({\n\t\t\t\ttranslator: translator\n\t\t\t,\ttranslatorConfig: this.translatorConfig\n\t\t\t,\tapplication: this.application\n\t\t\t});\n\t\t\t\n\t\t\tview.showContent();\n\t\t}\n\t});\n});\n\n\n// Facets.Translator.js\n// --------------------\n// Holds the mapping of a url compoment with an api call,\n// is able to translate and to return different configurations of himself with diferent options\ndefine('Facets.Translator'\n,\tfunction ()\n{\n\t'use strict';\n\n\t// Categories is not a rea l dependency, so if it is present we use it other ways we dont\n\tvar Categories = false;\n\ttry {\n\t\tCategories = require('Categories');\n\t}\n\tcatch (e)\n\t{\n\t\t//console.log('Couldn\\'t load Categories. ' + e);\n\t}\n\n\t// This is just for internal use only, DO NOT EDIT IT HERE!!\n\t// the same options should be somewhere in the configuration file\n\tvar default_config = {\n\t\tfallbackUrl: 'search'\n\t,\tdefaultShow: null\n\t,\tdefaultOrder: null\n\t,\tdefaultDisplay: null\n\t,\tfacets: []\n\t,\tfacetDelimiters: {\n\t\t\tbetweenFacetNameAndValue: '/'\n\t\t,\tbetweenDifferentFacets: '/'\n\t\t,\tbetweenDifferentFacetsValues: ','\n\t\t,\tbetweenRangeFacetsValues: 'to'\n\t\t,\tbetweenFacetsAndOptions: '?'\n\t\t,\tbetweenOptionNameAndValue: '='\n\t\t,\tbetweenDifferentOptions: '&'\n\t\t}\n\t};\n\n\tfunction FacetsTranslator(facets, options, configuration)\n\t{\n\t\t// Enforces new\n\t\tif (!(this instanceof FacetsTranslator))\n\t\t{\n\t\t\treturn new FacetsTranslator(facets, options, configuration);\n\t\t}\n\n\t\t// Facets go Here\n\t\tthis.facets = [];\n\n\t\t// Other options like page, view, etc. goes here\n\t\tthis.options = {};\n\n\t\t// This is an object that must contain a fallbackUrl and a lists of facet configurations\n\t\tthis.configuration = configuration || default_config;\n\n\t\t// We cast on top of the passed in parameters.\n\t\tif (facets && options)\n\t\t{\n\t\t\tthis.facets = facets;\n\t\t\tthis.options = options;\n\t\t}\n\t\telse if (_.isString(facets))\n\t\t{\n\t\t\t// It's a url\n\t\t\tthis.parseUrl(facets);\n\t\t}\n\t\telse if (facets)\n\t\t{\n\t\t\t// It's an API option object\n\t\t\tthis.parseOptions(facets);\n\t\t}\n\t}\n\n\t_.extend(FacetsTranslator.prototype, {\n\n\t\tdefaultFacetConfig: {\n\t\t\tbehavior: 'single'\n\t\t,\tmax: 5\n\t\t}\n\n\t\t// facetsTranslator.parseUrl:\n\t\t// Url strings get translated into the differnts part of the object, facets and options\n\t,\tparseUrl: function (url)\n\t\t{\n\t\t\t// We remove a posible 1st / (slash)\n\t\t\turl = (url[0] === '/') ? url.substr(1) : url;\n\n\t\t\t// given an url with options we split them into 2 strings (options and facets)\n\t\t\tvar facets_n_options = url.split(this.configuration.facetDelimiters.betweenFacetsAndOptions)\n\t\t\t,\tfacets = (facets_n_options[0] && facets_n_options[0] !== this.configuration.fallbackUrl) ? facets_n_options[0] : ''\n\t\t\t,\toptions = facets_n_options[1] || '';\n\n\t\t\t// We treat category as the 1st unmaned facet filter, so if you are using categories\n\t\t\t// we will try to take that out by comparig the url with the category tree\n\t\t\tif (this.getFacetConfig('category'))\n\t\t\t{\n\t\t\t\tvar categories = Categories && Categories.getBranchLineFromPath(facets) || [];\n\n\t\t\t\tif (categories && categories.length)\n\t\t\t\t{\n\t\t\t\t\t// We set the value for this facet\n\t\t\t\t\tvar category_string = _.pluck(categories, 'urlcomponent').join('/');\n\t\t\t\t\tthis.parseFacet('category', category_string);\n\n\t\t\t\t\t// And then we just take it out so other posible facets are computed\n\t\t\t\t\tfacets = facets.replace(category_string, '');\n\t\t\t\t}\n\n\t\t\t\t// We remove a posible 1st / (slash) (again, it me be re added by taking the category out)\n\t\t\t\tfacets = (facets[0] === '/') ? facets.substr(1) : facets;\n\t\t\t}\n\n\t\t\t// The facet part of the url gets splited and computed by pairs\n\t\t\tvar facet_tokens = facets.split(new RegExp('[\\\\'+ this.configuration.facetDelimiters.betweenDifferentFacets +'\\\\'+ this.configuration.facetDelimiters.betweenFacetNameAndValue +']+', 'ig'));\n\t\t\twhile (facet_tokens.length > 0)\n\t\t\t{\n\t\t\t\tthis.parseUrlFacet(facet_tokens.shift(), facet_tokens.shift());\n\t\t\t}\n\n\t\t\t// The same for the options part of the url\n\t\t\tvar options_tokens = options.split(new RegExp('[\\\\'+ this.configuration.facetDelimiters.betweenOptionNameAndValue +'\\\\'+ this.configuration.facetDelimiters.betweenDifferentOptions +']+', 'ig'))\n\t\t\t,\ttmp_options = {};\n\n\t\t\twhile (options_tokens.length > 0)\n\t\t\t{\n\t\t\t\ttmp_options[options_tokens.shift()] = options_tokens.shift();\n\t\t\t}\n\n\t\t\tthis.parseUrlOptions(tmp_options);\n\t\t}\n\n\t\t// facetsTranslator.sanitizeValue:\n\t\t// Translates values that came from the url into JS data types that this objects know of\n\t\t// Examples for different types:\n\t\t// - range/10to100 gets translated to {from: '10', to: '100'}\n\t\t// - range/100 gets translated to {from: '0', to: '100'}\n\t\t// - multi/1,2,3 gets translated to ['1', '2', '3']\n\t,\tsanitizeValue: function (value, behavior)\n\t\t{\n\t\t\tvar parsed_value;\n\t\t\tswitch (behavior)\n\t\t\t{\n\t\t\tcase 'range':\n\t\t\t\t// we return an object like {from: string, to: string }\n\t\t\t\tif (_.isString(value))\n\t\t\t\t{\n\t\t\t\t\tif (value.indexOf(this.configuration.facetDelimiters.betweenRangeFacetsValues) !== -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tokens = value.split(this.configuration.facetDelimiters.betweenRangeFacetsValues);\n\t\t\t\t\t\tparsed_value = {from: tokens[0], to: tokens[1]};\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tparsed_value = {from: '0', to: value};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparsed_value = value;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase 'multi':\n\t\t\t\t// we allways return an array for a multi value\n\t\t\t\tif (value.indexOf(this.configuration.facetDelimiters.betweenDifferentFacetsValues) !== -1)\n\t\t\t\t{\n\t\t\t\t\tparsed_value = value.split(this.configuration.facetDelimiters.betweenDifferentFacetsValues);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparsed_value = [value];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tparsed_value = value;\n\t\t\t}\n\t\t\treturn parsed_value;\n\t\t}\n\n\t\t// facetsTranslator.getUrlFacetValue\n\t\t// Returns the value of an active facet by the facet URL component\n\t,\tgetUrlFacetValue: function (facet_url)\n\t\t{\n\t\t\treturn (_.find(this.facets, function (facet)\n\t\t\t{\n\t\t\t\treturn facet.url === facet_url;\n\t\t\t}) || {}).value;\n\t\t}\n\n\t\t// facetsTranslator.getFacetValue:\n\t\t// Returns the value of an active facet by the facet id\n\t,\tgetFacetValue: function (facet_id)\n\t\t{\n\t\t\treturn (_.find(this.facets, function (facet)\n\t\t\t{\n\t\t\t\treturn facet.id === facet_id;\n\t\t\t}) || {}).value;\n\t\t}\n\n\t\t// facetsTranslator.getAllFacets:\n\t\t// Returns a copy of the internal array of facets containing values and configuration\n\t,\tgetAllFacets: function ()\n\t\t{\n\t\t\treturn this.facets.slice(0);\n\t\t}\n\n\t\t// facetsTranslator.getOptionValue:\n\t\t// Returns the value of an active options or it's default value\n\t,\tgetOptionValue: function (option_id)\n\t\t{\n\t\t\treturn this.options[option_id] || null;\n\t\t}\n\n\t\t// facetsTranslator.parseUrlFacet:\n\t\t// for a given name value, it gets the config, sanitaze the value and stores it all in the internal facets array\n\t,\tparseUrlFacet: function (name, value)\n\t\t{\n\t\t\t// Gets the config for the current facet\n\t\t\tvar config = this.getFacetConfig(name, 'url');\n\n\t\t\tif (config.id === 'category' || !name)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.facets.push({\n\t\t\t\tconfig: config\n\t\t\t,\tid: config.id\n\t\t\t,\turl: config.url\n\t\t\t,\tvalue: this.sanitizeValue(value, config.behavior)\n\t\t\t});\n\t\t}\n\n\t\t// facetsTranslator.parseFacet:\n\t\t// Same as parseUrlFacet but from id\n\t,\tparseFacet: function (facet_id, value)\n\t\t{\n\t\t\t// Gets the config for the current facet\n\t\t\tvar config = this.getFacetConfig(facet_id, 'id');\n\n\t\t\tthis.facets.push({\n\t\t\t\tconfig: config\n\t\t\t,\tid: config.id\n\t\t\t,\turl: config.url\n\t\t\t,\tvalue: this.sanitizeValue(value, config.behavior)\n\t\t\t});\n\t\t}\n\n\t\t// facetsTranslator.parseUrlOptions:\n\t\t// Sets options from the options argument or sets default values\n\t,\tparseUrlOptions: function (options)\n\t\t{\n\t\t\tthis.options.show = options.show || this.configuration.defaultShow;\n\t\t\tthis.options.order = options.order || this.configuration.defaultOrder;\n\t\t\tthis.options.page = parseInt(options.page, 10) || 1;\n\t\t\tthis.options.display = options.display || this.configuration.defaultDisplay;\n\t\t\tthis.options.keywords = options.keywords ? decodeURIComponent(options.keywords) : this.configuration.defaultKeywords;\n\t\t}\n\n\t\t// facetsTranslator.getFacetConfig:\n\t\t// Gets the configuration for a given facet by id,\n\t\t// You can also get it by name or url component if you pass the second parameter\n\t,\tgetFacetConfig: function (name, by)\n\t\t{\n\t\t\tvar result =  _.find(this.configuration.facets, function (facet)\n\t\t\t{\n\t\t\t\treturn facet[by || 'id'] === name;\n\t\t\t});\n\n\t\t\treturn result || _.extend({ id: name, name: name, url: name }, this.defaultFacetConfig);\n\t\t}\n\n\t\t// facetsTranslator.getUrl:\n\t\t// Gets the url for current stae of the object\n\t,\tgetUrl: function ()\n\t\t{\n\t\t\tvar url = ''\n\t\t\t,\tself = this;\n\n\t\t\t// Prepears the seo limits\n\t\t\tvar facets_seo_limits = {};\n\t\t\tif (SC.ENVIRONMENT.jsEnvironment === 'server')\n\t\t\t{\n\t\t\t\tfacets_seo_limits = {\n\t\t\t\t\tnumberOfFacetsGroups: this.configuration.facetsSeoLimits && this.configuration.facetsSeoLimits.numberOfFacetsGroups || false\n\t\t\t\t,\tnumberOfFacetsValues: this.configuration.facetsSeoLimits && this.configuration.facetsSeoLimits.numberOfFacetsValues || false\n\t\t\t\t,\toptions: this.configuration.facetsSeoLimits && this.configuration.facetsSeoLimits.options || false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// If there are too many facets selected\n\t\t\tif (facets_seo_limits.numberOfFacetsGroups && this.facets.length > facets_seo_limits.numberOfFacetsGroups)\n\t\t\t{\n\t\t\t\treturn '#';\n\t\t\t}\n\n\t\t\t// Adds the category if it's prsent\n\t\t\tvar category_string = this.getFacetValue('category');\n\t\t\tif (category_string)\n\t\t\t{\n\t\t\t\turl = self.configuration.facetDelimiters.betweenDifferentFacets + category_string;\n\t\t\t}\n\n\t\t\t// Encodes the other Facets\n\t\t\tvar sorted_facets = _.sortBy(this.facets, 'url');\n\t\t\tfor (var i = 0; i < sorted_facets.length; i++)\n\t\t\t{\n\t\t\t\tvar facet = sorted_facets[i];\n\t\t\t\t// Category should be already added\n\t\t\t\tif (facet.id === 'category')\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvar name = facet.url || facet.id,\n\t\t\t\t\tvalue = '';\n\t\t\t\tswitch (facet.config.behavior)\n\t\t\t\t{\n\t\t\t\tcase 'range':\n\t\t\t\t\tfacet.value = (typeof facet.value === 'object') ? facet.value : {from: 0, to: facet.value};\n\t\t\t\t\tvalue = facet.value.from + self.configuration.facetDelimiters.betweenRangeFacetsValues + facet.value.to;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'multi':\n\t\t\t\t\tvalue = facet.value.sort().join(self.configuration.facetDelimiters.betweenDifferentFacetsValues);\n\n\t\t\t\t\tif (facets_seo_limits.numberOfFacetsValues && facet.value.length > facets_seo_limits.numberOfFacetsValues)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn '#';\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvalue = facet.value;\n\t\t\t\t}\n\n\t\t\t\turl += self.configuration.facetDelimiters.betweenDifferentFacets + name + self.configuration.facetDelimiters.betweenFacetNameAndValue + value;\n\t\t\t}\n\n\t\t\turl = (url !== '') ? url : '/'+this.configuration.fallbackUrl;\n\n\t\t\t// Encodes the Options\n\t\t\tvar tmp_options = {}\n\t\t\t,\tseparator = this.configuration.facetDelimiters.betweenOptionNameAndValue;\n\t\t\tif (this.options.order && this.options.order !== this.configuration.defaultOrder)\n\t\t\t{\n\t\t\t\ttmp_options.order = 'order' + separator + this.options.order;\n\t\t\t}\n\n\t\t\tif (this.options.page && parseInt(this.options.page, 10) !== 1)\n\t\t\t{\n\t\t\t\ttmp_options.page = 'page' + separator + encodeURIComponent(this.options.page);\n\t\t\t}\n\n\t\t\tif (this.options.show && parseInt(this.options.show, 10) !== this.configuration.defaultShow)\n\t\t\t{\n\t\t\t\ttmp_options.show = 'show' + separator + encodeURIComponent(this.options.show);\n\t\t\t}\n\n\t\t\tif (this.options.display && this.options.display !== this.configuration.defaultDisplay)\n\t\t\t{\n\t\t\t\ttmp_options.display = 'display' + separator + encodeURIComponent(this.options.display);\n\t\t\t}\n\n\t\t\tif (this.options.keywords && this.options.keywords !== this.configuration.defaultKeywords)\n\t\t\t{\n\t\t\t\ttmp_options.keywords = 'keywords' + separator + encodeURIComponent(this.options.keywords);\n\t\t\t}\n\n\t\t\tvar tmp_options_keys = _.keys(tmp_options)\n\t\t\t,\ttmp_options_vals = _.values(tmp_options);\n\n\n\t\t\t// If there are options that should not be indexed also return #\n\t\t\tif (facets_seo_limits.options && _.difference(tmp_options_keys, facets_seo_limits.options).length)\n\t\t\t{\n\t\t\t\treturn '#';\n\t\t\t}\n\n\t\t\turl += (tmp_options_vals.length) ? this.configuration.facetDelimiters.betweenFacetsAndOptions + tmp_options_vals.join(this.configuration.facetDelimiters.betweenDifferentOptions) : '';\n\n\t\t\treturn _(url).fixUrl();\n\t\t}\n\n\t\t// facetsTranslator.getApiParams:\n\t\t// Gets the api parameters representing the current status of the object\n\t,\tgetApiParams: function ()\n\t\t{\n\t\t\tvar params = {};\n\n\t\t\t_.each(this.facets, function (facet)\n\t\t\t{\n\t\t\t\tswitch (facet.config.behavior)\n\t\t\t\t{\n\t\t\t\tcase 'range':\n\t\t\t\t\tvar value = (typeof facet.value === 'object') ? facet.value : {from: 0, to: facet.value};\n\t\t\t\t\tparams[facet.id + '.from'] = value.from;\n\t\t\t\t\tparams[facet.id + '.to'] = value.to;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'multi':\n\t\t\t\t\tparams[facet.id] = facet.value.sort().join(',') ; // this coma is part of the api call so it should not be removed\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tparams[facet.id] =  facet.value ;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tparams.sort = this.options.order;\n\t\t\tparams.limit = this.options.show;\n\t\t\tparams.offset = (this.options.show * this.options.page) - this.options.show;\n\n\t\t\tparams.q = this.options.keywords;\n\n\t\t\treturn params;\n\t\t}\n\n\t\t// facetsTranslator.cloneForFacetId:\n\t\t// retruns a deep copy of this object with a new value for one facet,\n\t\t// if in a name value that is the same as what's in, it will take it out\n\t,\tcloneForFacetId: function (facet_id, facet_value)\n\t\t{\n\t\t\t// Using jQuery here because it offers deep cloning\n\t\t\tvar facets\t= _.toArray(jQuery.extend(true, {}, this.facets))\n\t\t\t,\toptions\t= jQuery.extend(true, {}, this.options)\n\t\t\t,\tcurrent_facet = _.find(facets, function (facet)\n\t\t\t\t{\n\t\t\t\t\treturn facet.id === facet_id;\n\t\t\t\t});\n\n\t\t\tif (current_facet)\n\t\t\t{\n\t\t\t\tif (current_facet.config.behavior === 'multi')\n\t\t\t\t{\n\t\t\t\t\tif (_.indexOf(current_facet.value, facet_value) === -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrent_facet.value.push(facet_value);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrent_facet.value = _.without(current_facet.value, facet_value);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (current_facet.value.length === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tfacets = _.without(facets, current_facet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (!_.isEqual(current_facet.value, facet_value))\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrent_facet.value = facet_value;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tfacets = _.without(facets, current_facet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toptions.page = 1;\n\n\t\t\tvar translator = new FacetsTranslator(facets, options, this.configuration);\n\n\t\t\tif (!current_facet)\n\t\t\t{\n\t\t\t\ttranslator.parseFacet(facet_id, facet_value);\n\t\t\t}\n\n\t\t\treturn translator;\n\t\t}\n\n\t\t// facetsTranslator.cloneWithoutFacetId:\n\t\t// retruns a deep copy of this object without a facet,\n\t,\tcloneWithoutFacetId: function (facet_id)\n\t\t{\n\t\t\tvar facets = _.toArray(jQuery.extend(true, {}, this.facets))\n\t\t\t,\toptions = jQuery.extend(true, {}, this.options);\n\n\t\t\tfacets = _.without(facets, _.find(facets, function (facet)\n\t\t\t{\n\t\t\t\treturn facet.id === facet_id;\n\t\t\t}));\n\n\t\t\treturn new FacetsTranslator(facets, options, this.configuration);\n\t\t}\n\n\t\t// facetsTranslator.cloneForFacetUrl:\n\t\t// same as cloneForFacetId but passing the url component of the facet\n\t,\tcloneForFacetUrl: function (facet_url, facet_value)\n\t\t{\n\t\t\treturn this.cloneForFacetId(this.getFacetConfig(facet_url, 'url').id, facet_value);\n\t\t}\n\n\n\t\t// facetsTranslator.cloneWithoutFacetId:\n\t\t// same as cloneWithoutFacetId but passing the url component of the facet\n\t,\tcloneWithoutFacetUrl: function (facet_url)\n\t\t{\n\t\t\treturn this.cloneWithoutFacetId(this.getFacetConfig(facet_url, 'url').id);\n\t\t}\n\n\t\t// facetsTranslator.cloneWithoutFacets:\n\t\t// Clones the translator removeing all the facets, leaving only options\n\t,\tcloneWithoutFacets: function ()\n\t\t{\n\t\t\t// Creates a new translator with the same params as this;\n\t\t\tvar translator = new FacetsTranslator(this.facets, this.options, this.configuration);\n\n\t\t\t_.each(translator.getAllFacets(), function (facet)\n\t\t\t{\n\t\t\t\t// Categories are not facets, so lets not remove those\n\t\t\t\tif (facet.id !== 'category')\n\t\t\t\t{\n\t\t\t\t\ttranslator = translator.cloneWithoutFacetId(facet.id);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn translator;\n\t\t}\n\n\t,\tcloneForOption: function (option_id, option_value)\n\t\t{\n\t\t\tvar facets  = _.toArray(jQuery.extend(true, {}, this.facets))\n\t\t\t,\toptions = jQuery.extend(true, {}, this.options);\n\n\t\t\toptions[option_id] = option_value;\n\t\t\treturn new FacetsTranslator(facets, options, this.configuration);\n\t\t}\n\n\t\t// facetsTranslator.cloneForOptions:\n\t\t// same as cloneForFacetId but for options instead of facets\n\t,\tcloneForOptions: function (object)\n\t\t{\n\t\t\tvar facets  = _.toArray(jQuery.extend(true, {}, this.facets))\n\t\t\t,\toptions = jQuery.extend(true, {}, this.options, object);\n\n\t\t\treturn new FacetsTranslator(facets, options, this.configuration);\n\t\t}\n\n\t\t// facetsTranslator.cloneWithoutOption:\n\t\t// same as cloneWithoutFacetId but for options instead of facets\n\t,\tcloneWithoutOption: function (option_id)\n\t\t{\n\t\t\tvar facets  = _.toArray(jQuery.extend(true, {}, this.facets))\n\t\t\t,\toptions = jQuery.extend(true, {}, this.options);\n\n\t\t\tdelete options[option_id];\n\n\t\t\treturn new FacetsTranslator(facets, options, this.configuration);\n\t\t}\n\n\t\t// facetsTranslator.resetAll:\n\t\t// Returns a blank instance of itself\n\t,\tresetAll: function ()\n\t\t{\n\t\t\treturn new FacetsTranslator([], {}, this.configuration);\n\t\t}\n\n\t\t// facetsTranslator.getMergedCategoryTree:\n\t\t// Returns a Category tree based on the site's one\n\t\t// but merged with the values passed in\n\t\t// it expect the format that the search api returns\n\t\t// Be aware that this is a recursive function, and this same function will be used to compute sub categories\n\t,\tgetMergedCategoryTree: function (values, branch)\n\t\t{\n\t\t\tvar self = this;\n\t\t\t// if branch is omited it will start from the top level\n\t\t\tbranch = branch || Categories && Categories.getTree() || {};\n\n\t\t\t_.each(values, function (value)\n\t\t\t{\n\t\t\t\tvar id = _.last(value.id.split('/'));\n\t\t\t\tif (branch[id])\n\t\t\t\t{\n\t\t\t\t\tbranch[id].count = value.count;\n\n\t\t\t\t\tif (branch[id].sub && _.keys(branch[id].sub).length && value.values.length)\n\t\t\t\t\t{\n\t\t\t\t\t\tbranch[id].sub = self.getMergedCategoryTree(value.values, branch[id].sub);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn branch;\n\t\t}\n\n\t\t// facetsTranslator.setLabelsFromFacets:\n\t\t// This let the translator known about labels the api proportions\n\t\t// Tho this make the translator a bit less API agnostic\n\t\t// this step is totaly optional and it should work regardless of this step\n\t,\tsetLabelsFromFacets: function (facets_labels)\n\t\t{\n\t\t\tthis.facetsLabels = facets_labels;\n\t\t}\n\n\t\t// facetsTranslator.getLabelForValue:\n\t\t// If facets labels have been setted it will try to look for the label for the\n\t\t// [id, value] combination and return it's label, otherways it will return the value\n\t,\tgetLabelForValue: function (id, value)\n\t\t{\n\t\t\tvar facet = _.where(this.facetsLabels || [], {id: id});\n\n\t\t\tif (facet.length)\n\t\t\t{\n\t\t\t\tvar label = _.where(facet[0].values || [], {name: value});\n\n\t\t\t\t// if the value could not be found by name, look for url\n\t\t\t\tif (!label.length)\n\t\t\t\t{\n\t\t\t\t\tlabel = _.where(facet[0].values || [], {url: value});\n\t\t\t\t}\n\n\t\t\t\tif (label.length)\n\t\t\t\t{\n\t\t\t\t\treturn label[0].label;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn value;\n\t\t}\n\t});\n\n\treturn FacetsTranslator;\n});\n\n\n// Facets.Views.js\n// ---------------\n// View that handles the item list\ndefine('Facets.Views', ['Cart', 'Facets.Helper', 'Categories'], function (Cart, Helper, Categories)\n{\n\t'use strict';\n\n\tvar Views = {}\n\t\t// statuses stores the statuses of the collapsible facets\n\t,\tstatuses = window.statuses = {}\n\t\t// collapsable_elements stores the statuses of the collapsible elements. This store elements collapsable that are not facets\n\t\t/*\n\t\teach object should be of the form\n\t\t{\n\t\t\tselector: '' //id of the element that will collapsed/expanded\n\t\t,\tcollapsed: true/false\n\t\t}\n\t\t*/\n\t,\tcollapsable_elements = window.collapsable_elements = {};\n\n\tViews.Browse = Backbone.View.extend({\n\n\t\ttemplate: 'facet_browse'\n\t,\tpage_header: _('<b class=\"total-items\">$(0)</b> Products').translate('{itemscount}')\n\t,\tdescription: _('This is a description').translate()\n\n\t,\tattributes: {\n\t\t\t'id': 'facet-browse'\n\t\t,\t'class': 'view facet-browse'\n\t\t}\n\n\t,\tevents: {\n\t\t\t'click [data-toggle=\"collapse\"]': 'clickCollapsable'\n\t\t,\t'click [data-toggle=\"facet-navigation\"]': 'toggleFacetNavigation'\n\t\t,\t'slide div[data-toggle=\"slider\"]': 'updateRangeValues'\n\t\t,\t'stop div[data-toggle=\"slider\"]': 'updateRangeSelection'\n\t\t,\t'change [data-toggle=\"add-to-cart\"] input[name=\"quantity\"]': 'changeQ'\n\t\t,\t'submit [data-toggle=\"add-to-cart\"]': 'addToCart'\n\t\t,\t'click [data-action=\"toggle-filters\"]': 'toggleFilters'\n\t\t}\n\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tthis.statuses = statuses;\n\t\t\tthis.collapsable_elements = collapsable_elements;\n\t\t\tthis.translator = options.translator;\n\t\t\tthis.application = options.application;\n\t\t\tthis.category = Categories.getBranchLineFromPath(this.translator.getFacetValue('category'))[0];\n\n\t\t\tthis.collapsable_elements['facet-header'] = this.collapsable_elements['facet-header'] || {\n\t\t\t\tselector: 'this.collapsable_elements[\"facet-header\"]'\n\t\t\t,\tcollapsed: false\n\t\t\t};\n\t\t}\n\n\t,\ttoggleFilters: function (e)\n\t\t{\n\t\t\te.preventDefault();\n\n\t\t\tvar current_target = jQuery(e.currentTarget);\n\n\t\t\tthis.collapsable_elements['facet-header'].collapsed = !this.collapsable_elements['facet-header'].collapsed;\n\n\t\t\tcurrent_target.find('.filter-icon').toggleClass('icon-chevron-up');\n\n\t\t\tcurrent_target.parents('[data-type=\"accordion\"]')\n\t\t\t\t.toggleClass('well')\n\t\t\t\t.toggleClass('facet-header-white-well')\n\t\t\t\t.find('[data-type=\"accordion-body\"]').stop().slideToggle();\n\t\t}\n\n\t,\tgetPath: function ()\n\t\t{\n\t\t\tvar canonical = window.location.protocol + '//' + window.location.hostname + '/' + Backbone.history.fragment\n\t\t\t,\tindex_of_query = canonical.indexOf('?');\n\n\t\t\t// !~ means: indexOf == -1\n\t\t\treturn !~index_of_query ? canonical : canonical.substring(0, index_of_query);\n\t\t}\n\n\t,\tgetCanonical: function ()\n\t\t{\n\t\t\tvar canonical_url = this.getPath()\n\t\t\t,\tcurrent_page = this.translator.getOptionValue('page');\n\n\t\t\tif (current_page > 1)\n\t\t\t{\n\t\t\t\tcanonical_url += '?page=' + current_page;\n\t\t\t}\n\n\t\t\treturn canonical_url;\n\t\t}\n\n\t,\tgetRelPrev: function ()\n\t\t{\n\t\t\tvar previous_page_url = this.getPath()\n\t\t\t,\tcurrent_page = this.translator.getOptionValue('page');\n\n\t\t\tif (current_page > 1)\n\t\t\t{\n\t\t\t\tif (current_page === 2)\n\t\t\t\t{\n\t\t\t\t\treturn previous_page_url;\n\t\t\t\t}\n\n\t\t\t\tif (current_page > 2)\n\t\t\t\t{\n\t\t\t\t\treturn previous_page_url += '?page=' + (current_page - 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t,\tgetRelNext: function ()\n\t\t{\n\t\t\tvar next_page_url = this.getPath()\n\t\t\t,\tcurrent_page = this.translator.getOptionValue('page');\n\n\t\t\tif (current_page < this.totalPages)\n\t\t\t{\n\t\t\t\treturn next_page_url += '?page='+ (current_page + 1);\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\t// view.renderFacets:\n\t\t// Generates a new translator, grabs the facets of the model,\n\t\t// look for elements with data-type=\"facet\" or data-type=\"all-facets\"\n\t\t// and then execute all the macros and injects the results in the elements\n\t,\trenderFacets: function (url)\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\ttranslator = Helper.parseUrl(url, this.options.translatorConfig)\n\t\t\t,\tfacets = this.model.get('facets');\n\n\t\t\tthis.$('div[data-type=\"facet\"]').each(function (i, nav)\n\t\t\t{\n\t\t\t\tvar $nav = jQuery(nav).empty()\n\t\t\t\t,\tfacet_id = $nav.data('facet-id')\n\t\t\t\t,\tfacet_config = translator.getFacetConfig( facet_id )\n\t\t\t\t,\tfacet_macro = $nav.data('facet-macro') || facet_config.macro || self.application.getConfig('macros.facet')\n\t\t\t\t,\tfacet = _.find(facets, function (facet) {\n\t\t\t\t\t\treturn facet.id === facet_id;\n\t\t\t\t\t});\n\n\t\t\t\t$nav.append( SC.macros[ facet_macro ](translator, facet_config, facet) );\n\t\t\t});\n\n\t\t\tthis.$('div[data-type=\"all-facets\"]').each(function (i, nav)\n\t\t\t{\n\t\t\t\tvar $nav = jQuery(nav).empty()\n\t\t\t\t,\texclude = _.map( ( $nav.data('exclude-facets') || '').split(','), function (result) {\n\t\t\t\t\t\treturn jQuery.trim( result );\n\t\t\t\t\t})\n\t\t\t\t,\tordered_facets = facets && facets.sort(function (a, b) {\n\t\t\t\t\t\t// Default Prioriry is 0\n\t\t\t\t\t\treturn (translator.getFacetConfig(b.id).priority || 0) - (translator.getFacetConfig(a.id).priority || 0);\n\t\t\t\t\t})\n\t\t\t\t,\tcontent = '';\n\n\t\t\t\t_.each(ordered_facets, function (facet)\n\t\t\t\t{\n\t\t\t\t\tvar facet_config = translator.getFacetConfig(facet.id);\n\t\t\t\t\tif ( !_.contains(exclude, facet.id) )\n\t\t\t\t\t{\n\t\t\t\t\t\tcontent += SC.macros[facet_config.macro || self.application.getConfig('macros.facet')](translator, facet_config, facet);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t$nav.append( content );\n\t\t\t});\n\n\t\t\tthis.$('[data-toggle=\"collapse\"]').each(function (index, collapser)\n\t\t\t{\n\t\t\t\tself.fixStatus(collapser);\n\t\t\t});\n\n\t\t\tthis.$('[data-toggle=\"slider\"]').slider();\n\t\t}\n\n\t\t// view.fixStatus:\n\t\t// Tries to keep the status of the collapeser based on what they were previously setted\n\t,\tfixStatus: function (collapser)\n\t\t{\n\t\t\tvar $collapser = jQuery(collapser)\n\t\t\t,\t$facet = $collapser.closest('div[data-type=\"rendered-facet\"]')\n\t\t\t,\t$placeholder = $collapser.closest('div[data-type=\"all-facets\"], div[data-type=\"facet\"]')\n\t\t\t,\t$target = jQuery( $collapser.data('target') );\n\n\t\t\t// Checks the path in the Status object is present\n\t\t\tthis.statuses[$placeholder.attr('id')] = this.statuses[$placeholder.attr('id')] || {};\n\t\t\tthis.statuses[$placeholder.attr('id')][$facet.data('facet-id')] = this.statuses[$placeholder.attr('id')][$facet.data('facet-id')] || {};\n\n\t\t\tif (_.isUndefined(this.statuses[$placeholder.attr('id')][$facet.data('facet-id')][$collapser.data('type')]))\n\t\t\t{\n\t\t\t\tif ($collapser.data('type') !== 'collapse' && !$target.hasClass('in'))\n\t\t\t\t{\n\t\t\t\t\tthis.statuses[$placeholder.attr('id')][$facet.data('facet-id')][$collapser.data('type')] = false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.statuses[$placeholder.attr('id')][$facet.data('facet-id')][$collapser.data('type')] = !this.translator.getFacetConfig($facet.data('facet-id')).collapsed;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.statuses[$placeholder.attr('id')][$facet.data('facet-id')][$collapser.data('type')])\n\t\t\t{\n\t\t\t\t$target.addClass('in').removeClass('collapse');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$target.addClass('collapse').removeClass('in');\n\t\t\t}\n\n\t\t\tthis.toggleCollapsableIndicator($collapser, !this.statuses[$placeholder.attr('id')][$facet.data('facet-id')][$collapser.data('type')]);\n\t\t}\n\n\t\t//view.formatFacetTitle: accepts a facet object and returns a string formatted to be displayed on the document's title according with user facet configuration property titleToken\n\t,\tformatFacetTitle: function (facet)\n\t\t{\n\t\t\tvar defaults = {\n\t\t\t\trange: '$(2): $(0) to $(1)'\n\t\t\t,\tmulti: '$(1): $(0)'\n\t\t\t,\tsingle: '$(1): $(0)'\n\t\t\t};\n\n\t\t\tif (facet.id === 'category')\n\t\t\t{\n\t\t\t\t//we search for a category title starting from the last category of the branch\n\t\t\t\tvar categories = Categories.getBranchLineFromPath(this.options.translator.getFacetValue('category'));\n\t\t\t\tif(categories && categories.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor(var i = categories.length - 1; i >= 0; i--)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar category = categories[i];\n\t\t\t\t\t\tvar category_title = category.pagetitle || category.itemid;\n\t\t\t\t\t\tif(category_title)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn category_title;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (!facet.config.titleToken)\n\t\t\t{\n\t\t\t\tfacet.config.titleToken = defaults[facet.config.behavior] || defaults.single;\n\t\t\t}\n\t\t\tif (_.isFunction(facet.config.titleToken))\n\t\t\t{\n\t\t\t\treturn facet.config.titleToken(facet);\n\t\t\t}\n\t\t\telse if (facet.config.behavior === 'range')\n\t\t\t{\n\t\t\t\treturn _(facet.config.titleToken).translate(facet.value.to, facet.value.from, facet.config.name);\n\t\t\t}\n\t\t\telse if (facet.config.behavior === 'multi')\n\t\t\t{\n\t\t\t\tvar buffer = [];\n\t\t\t\t_.each(facet.value, function (val)\n\t\t\t\t{\n\t\t\t\t\tbuffer.push(val);\n\t\t\t\t});\n\t\t\t\treturn _(facet.config.titleToken).translate(buffer.join(', '), facet.config.name);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn _(facet.config.titleToken).translate(facet.value, facet.config.name);\n\t\t\t}\n\t\t}\n\n\t\t// overrides Backbone.Views.getTitle\n\t,\tgetTitle: function ()\n\t\t{\n\t\t\tif (this.title)\n\t\t\t{\n\t\t\t\treturn this.title;\n\t\t\t}\n\n\t\t\tvar facets = this.options.translator.facets\n\t\t\t,\ttitle = '';\n\n\t\t\tif (facets && facets.length)\n\t\t\t{\n\t\t\t\tvar buffer = []\n\t\t\t\t,\tfacet = null;\n\n\t\t\t\tfor (var i = 0; i < facets.length; i++)\n\t\t\t\t{\n\t\t\t\t\tfacet = facets[i];\n\t\t\t\t\tbuffer.push(this.formatFacetTitle(facet));\n\n\t\t\t\t\tif (i < facets.length - 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tbuffer.push(facet.config.titleSeparator || ', ');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttitle = this.application.getConfig('searchTitlePrefix', '') +\n\t\t\t\t\t\tbuffer.join('') +\n\t\t\t\t\t\tthis.application.getConfig('searchTitleSufix', '');\n\t\t\t}\n\t\t\telse if (this.translator.getOptionValue('keywords'))\n\t\t\t{\n\t\t\t\ttitle = _('Search results for \"$(0)\"').translate(\n\t\t\t\t\tthis.translator.getOptionValue('keywords')\n\t\t\t\t);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttitle = this.application.getConfig('defaultSearchTitle', '');\n\t\t\t}\n\n\t\t\treturn title;\n\t\t}\n\n\t\t// view.showContent:\n\t\t// Works with the title to find the proper wording and calls the layout.showContent\n\t,\tshowContent: function ()\n\t\t{\n\t\t\t// If its a free text search it will work with the title\n\t\t\tvar keywords = this.translator.getOptionValue('keywords')\n\t\t\t,\tresultCount = this.model.get('total')\n\t\t\t,\tself = this;\n\n\t\t\tif (keywords)\n\t\t\t{\n\t\t\t\tkeywords = decodeURIComponent(keywords);\n\n\t\t\t\tif (resultCount > 0)\n\t\t\t\t{\n\t\t\t\t\tthis.subtitle =  resultCount > 1 ? _('Results for \"$(0)\"').translate(keywords) : _('Result for \"$(0)\"').translate(keywords);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.subtitle = _('We couldn\\'t find any items that match \"$(0)\"').translate(keywords);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.totalPages = Math.ceil(resultCount / this.translator.getOptionValue('show'));\n\t\t\t// once the showContent is done the afterAppend is called\n\t\t\tthis.application.getLayout().showContent(this).done(function ()\n\t\t\t{\n\t\t\t\t// Looks for placeholders and injects the facets\n\t\t\t\tself.renderFacets(self.translator.getUrl());\n\t\t\t});\n\t\t}\n\n\t\t// view.clickCollapsable\n\t,\tclickCollapsable: function (e)\n\t\t{\n\t\t\tvar $target = jQuery(e.target);\n\n\t\t\tif (!($target.is('a') || $target.parent().is('a')))\n\t\t\t{\n\t\t\t\tthis.toggleCollapsableIndicator(e.target);\n\t\t\t}\n\t\t}\n\n\t\t// view.toggleCollapsableIndicator\n\t\t// Handles the collapsables and store the status\n\t,\ttoggleCollapsableIndicator: function (element, is_open)\n\t\t{\n\t\t\tvar $element = jQuery(element).closest('*[data-toggle=\"collapse\"]'),\n\t\t\t\t$facet_container = $element.closest('div[data-type=\"rendered-facet\"]');\n\n\t\t\tis_open = _.isUndefined(is_open) ? jQuery($element.data('target')).hasClass('in') : is_open;\n\n\t\t\t$element\n\t\t\t\t.find('*[data-collapsed!=\"\"]')\n\t\t\t\t.filter('[data-collapsed=\"true\"]')[is_open ? 'hide' : 'show']().end()\n\t\t\t\t.filter('[data-collapsed=\"false\"]')[is_open ? 'show' : 'hide']();\n\n\t\t\tvar holder_html_id = $facet_container.parent().attr('id')\n\t\t\t,\tfacet_id = $facet_container.data('facet-id')\n\t\t\t,\ttype = $element.data('type');\n\n\t\t\tthis.statuses[holder_html_id][facet_id][type] = !is_open;\n\t\t}\n\n\t\t// view.updateRangeValues\n\t\t// Talks to the Bootstrap.Slider.js\n\t\t// Displays the numbers under the slider while you are slider\n\t,\tupdateRangeValues: function (e, slider)\n\t\t{\n\t\t\tvar $container = slider.$element.closest('div[data-type=\"rendered-facet\"]')\n\t\t\t,\tparser = this.translator.getFacetConfig( $container.data('facet-id') ).parser\n\t\t\t,\tstart = _.isFunction(parser) ? parser(slider.values.low, true) : slider.values.low\n\t\t\t,\tend = _.isFunction(parser) ? parser(slider.values.high, false) : slider.values.high;\n\n\t\t\t$container\n\t\t\t\t.find('span[data-range-indicator=\"start\"]').html(start).end()\n\t\t\t\t.find('span[data-range-indicator=\"end\"]').html(end);\n\t\t}\n\n\t\t// view.updateRangeSelection\n\t\t// Talks to the Bootstrap.Slider.js\n\t\t// Once the user releases the Slider controller this takes care of\n\t\t// generating a new url and of navigating to it\n\t,\tupdateRangeSelection: function (e, slider)\n\t\t{\n\t\t\tvar facet_id = slider.$element.data('facet-id')\n\t\t\t,\ttranslator = this.translator\n\t\t\t\t// the currently selected slider values\n\t\t\t,\tslider_values = slider.values\n\t\t\t\t// currently selected values for that facet\n\t\t\t,\tfacet_values = translator.getFacetValue(facet_id)\n\t\t\t\t// facet for the slider\n\t\t\t,\tfacet = _.find(this.model.get('facets'), function (item) {\n\t\t\t\t\treturn item.id === facet_id;\n\t\t\t\t})\n\t\t\t\t// available values for that facet\n\t\t\t,\tvalues = _.map(facet.values, function (item) {\n\t\t\t\t\treturn parseFloat(item.url);\n\t\t\t\t});\n\n\t\t\t// if the low selected value equals the minimum available value\n\t\t\t// and the high selected value equals the maximum available value\n\t\t\tif (_.min(values) === slider_values.low && _.max(values) === slider_values.high)\n\t\t\t{\n\t\t\t\t// then we remove the facet from the selection\n\t\t\t\tBackbone.history.navigate(translator.cloneWithoutFacetId(facet_id).getUrl(), {trigger: true});\n\t\t\t}\n\t\t\t// else, if there are not values selected OR\n\t\t\t// the selected from value is different than the slider low value OR\n\t\t\t// the selected to value is different than the slider high value\n\t\t\telse if (!facet_values || parseFloat(facet_values.from) !== slider_values.low || parseFloat(facet_values.to) !== slider_values.high)\n\t\t\t{\n\t\t\t\t// then we navigate to that page\n\t\t\t\tBackbone.history.navigate(translator.cloneForFacetId(facet_id, {\n\t\t\t\t\tfrom: slider_values.low.toFixed(2)\n\t\t\t\t,\tto: slider_values.high.toFixed(2)\n\t\t\t\t}).getUrl(), {trigger: true});\n\t\t\t}\n\t\t}\n\n\t,\tchangeQ: function(e)\n\t\t{\n\t\t\te.preventDefault();\n\t\t\tvar options = jQuery(e.target).closest('form').serializeObject()\n\t\t\t,\tmodel = this.model.get('items').get(options.item_id);\n\t\t\t// Updates the quantity of the model\n\t\t\tmodel.setOption('quantity', options.quantity);\n\t\t\tjQuery(e.target).closest('.item-cell').find('[itemprop=\"price\"]').html(model.getPrice().price_formatted);\n\t\t}\n\n\t\t// view.addToCart\n\t\t// Adds the item to the cart\n\t,\taddToCart: function (e)\n\t\t{\n\t\t\te.preventDefault();\n\n\t\t\tvar options = jQuery(e.target).serializeObject()\n\t\t\t,\tmodel = this.model.get('items').get(options.item_id);\n\n\t\t\t// Updates the quantity of the model\n\t\t\tmodel.setOption('quantity', options.quantity);\n\n\t\t\tif (model.isReadyForCart())\n\t\t\t{\n\t\t\t\tvar self = this\n\t\t\t\t,\tcart = this.application.getCart()\n\t\t\t\t,\tlayout = this.application.getLayout()\n\t\t\t\t,\tcart_promise = jQuery.Deferred()\n\t\t\t\t,\terror_message = _('Sorry, there is a problem with this Item and can not be purchased at this time. Please check back later.').translate();\n\n\t\t\t\tif (model.cartItemId)\n\t\t\t\t{\n\t\t\t\t\tcart_promise = cart.updateItem(model.cartItemId, model).done(function ()\n\t\t\t\t\t{\n\t\t\t\t\t\tif (cart.getLatestAddition())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (self.$containerModal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tself.$containerModal.modal('hide');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (layout.currentView instanceof require('Cart').Views.Detailed)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlayout.currentView.showContent();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tself.showError(error_message);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcart_promise = cart.addItem(model).done(function ()\n\t\t\t\t\t{\n\t\t\t\t\t\tif (cart.getLatestAddition())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlayout.showCartConfirmation();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tself.showError(error_message);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// disalbes the btn while it's being saved then enables it back again\n\t\t\t\tif (e && e.currentTarget)\n\t\t\t\t{\n\t\t\t\t\tjQuery('input[type=\"submit\"]', e.currentTarget).attr('disabled', true);\n\t\t\t\t\tcart_promise.always(function () {\n\t\t\t\t\t\tjQuery('input[type=\"submit\"]', e.currentTarget).attr('disabled', false);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// view.getBreadcrumb:\n\t\t// It will generate an array suitable to pass it to the breadcrumb macro\n\t\t// It looks in the category facet value\n\t,\tgetBreadcrumb: function ()\n\t\t{\n\t\t\tvar category_string = this.translator.getFacetValue('category')\n\t\t\t,\tbreadcrumb = [{\n\t\t\t\t\thref: '/'\n\t\t\t\t,\ttext: _('Home').translate()\n\t\t\t\t}];\n\n\t\t\tif (category_string)\n\t\t\t{\n\t\t\t\tvar category_path = '';\n\t\t\t\t_.each(Categories.getBranchLineFromPath(category_string), function (cat)\n\t\t\t\t{\n\t\t\t\t\tcategory_path += '/'+cat.urlcomponent;\n\n\t\t\t\t\tbreadcrumb.push({\n\t\t\t\t\t\thref: category_path\n\t\t\t\t\t,\ttext: _(cat.itemid).translate()\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t}\n\t\t\telse if (this.translator.getOptionValue('keywords'))\n\t\t\t{\n\t\t\t\tbreadcrumb.push({\n\t\t\t\t\thref: '#'\n\t\t\t\t,\ttext: _('Search Results').translate()\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreadcrumb.push({\n\t\t\t\t\thref: '#'\n\t\t\t\t,\ttext: _('Shop').translate()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn breadcrumb;\n\t\t}\n\n\t\t// view.toggleFacetNavigation\n\t\t// Hides/Shows the facet navigation area\n\t,\ttoggleFacetNavigation: function ()\n\t\t{\n\t\t\tthis.$el.toggleClass('narrow-by');\n\t\t\tthis.toggleNavigationListener(this.$el.hasClass('narrow-by'));\n\t\t}\n\n\t\t// view.toggleNavigationListener\n\t\t// adds/removes event listeners to the HTML to hide the facet navigation area\n\t,\ttoggleNavigationListener: function (isOn)\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\ttouch_started = null;\n\n\t\t\t// turn listeners on\n\t\t\tif (isOn)\n\t\t\t{\n\t\t\t\tjQuery('html')\n\t\t\t\t\t// we save the time when the touchstart happened\n\t\t\t\t\t.on('touchstart.narrow-by', function ()\n\t\t\t\t\t{\n\t\t\t\t\t\ttouch_started = new Date().getTime();\n\t\t\t\t\t})\n\t\t\t\t\t// code for touchend and mousdown is the same\n\t\t\t\t\t.on('touchend.narrow-by mousedown.narrow-by', function (e)\n\t\t\t\t\t{\n\t\t\t\t\t\t// if there wasn't a touch event, or the time difference between\n\t\t\t\t\t\t// touch start and touch end is less that 200 miliseconds\n\t\t\t\t\t\t// (this is to allow scrolling without closing the facet navigation area)\n\t\t\t\t\t\tif (!touch_started || new Date().getTime() - touch_started < 200)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar $target = jQuery(e.target);\n\n\t\t\t\t\t\t\t// if we are not touching the narrow by button or the facet navigation area\n\t\t\t\t\t\t\tif (!$target.closest('[data-toggle=\"facet-navigation\"]').length && !$target.closest('#faceted-navigation').length)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// we hide the navigation\n\t\t\t\t\t\t\t\tself.toggleFacetNavigation();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tjQuery('html')\n\t\t\t\t\t// if the navigation area is hidden, we remove the event listeners from the HTML\n\t\t\t\t\t.off('mousedown.narrow-by touchstart.narrow-by touchend.narrow-by');\n\t\t\t}\n\t\t}\n\n\t});\n\n\n\tViews.BrowseCategories = Backbone.View.extend({\n\n\t\ttemplate: 'category_browse'\n\n\t,\tinitialize: function ()\n\t\t{\n\t\t\tvar self = this;\n\t\t\tthis.category = Categories.getBranchLineFromPath(this.options.translator.getFacetValue('category'))[0];\n\t\t\tthis.translator = this.options.translator;\n\n\t\t\tthis.hasThirdLevelCategories = _.every(this.category.categories, function (sub_category)\n\t\t\t{\n\t\t\t\treturn _.size(sub_category.categories) > 0;\n\t\t\t});\n\n\t\t\tthis.facets = [];\n\n\t\t\tif (this.hasThirdLevelCategories)\n\t\t\t{\n\t\t\t\t_.each(this.category.categories, function (sub_category)\n\t\t\t\t{\n\t\t\t\t\tvar facet = {\n\t\t\t\t\t\tconfiguration: {\n\t\t\t\t\t\t\tbehavior: 'single'\n\t\t\t\t\t\t,\tid: 'category'\n\t\t\t\t\t\t,\tname: sub_category.itemid\n\t\t\t\t\t\t,\tuncollapsible: true\n\t\t\t\t\t\t,\turl: self.category.urlcomponent + '/' + sub_category.urlcomponent\n\t\t\t\t\t\t}\n\t\t\t\t\t,\tvalues: {\n\t\t\t\t\t\t\tid: 'category'\n\t\t\t\t\t\t,\tvalues: []\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t_.each(sub_category.categories, function (third_level_category)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar url = self.category.urlcomponent + '/' + sub_category.urlcomponent + '/' + third_level_category.urlcomponent;\n\n\t\t\t\t\t\tfacet.values.values.push({\n\t\t\t\t\t\t\tlabel: third_level_category.itemid\n\t\t\t\t\t\t,\turl: url\n\t\t\t\t\t\t,\timage: third_level_category.storedisplaythumbnail\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\tself.facets.push(facet);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar facet = {\n\t\t\t\t\tconfiguration: {\n\t\t\t\t\t\tbehavior: 'single'\n\t\t\t\t\t,\tid: 'category'\n\t\t\t\t\t,\tname: ''\n\t\t\t\t\t,\tuncollapsible: true\n\t\t\t\t\t,\thideHeading: true\n\t\t\t\t\t}\n\t\t\t\t,\tvalues: {\n\t\t\t\t\t\tid: 'category'\n\t\t\t\t\t,\tvalues: []\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t_.each(this.category.categories, function (sub_category)\n\t\t\t\t{\n\t\t\t\t\tvar url = self.category.urlcomponent + '/' + sub_category.urlcomponent;\n\n\t\t\t\t\tfacet.values.values.push({\n\t\t\t\t\t\tlabel: sub_category.itemid\n\t\t\t\t\t,\turl: url\n\t\t\t\t\t,\timage: sub_category.storedisplaythumbnail\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tthis.facets.push(facet);\n\t\t\t}\n\t\t}\n\n\t,\tgetBreadcrumb: Views.Browse.prototype.getBreadcrumb\n\n\t,\tgetTitle: function ()\n\t\t{\n\t\t\treturn this.category.pagetitle || this.category.itemid;\n\t\t}\n\t});\n\n\treturn Views;\n});\n\n\n// Facets.js\n// ---------\n// AKA Item List.\n// This is the index, routes in the router are assigned here\ndefine(\n\t'Facets'\n,\t['Facets.Translator', 'Facets.Helper', 'Facets.Model', 'Facets.Router', 'Facets.Views', 'Categories']\n,\tfunction (Translator, Helper, Model, Router, Views, Categories)\n{\n\t'use strict';\n\n\tfunction prepareRouter(application, router)\n\t{\n\t\t// we are constructing this regexp like:\n\t\t// /^\\b(toplevelcategory1|toplevelcategory2|facetname1|facetname2|defaulturl)\\b\\/(.*?)$/\n\t\t// and adding it as a route\n\n\t\t// Get the facets that are in the sitesettings but not in the config.\n\t\t// These facets will get a default config (max, behavior, etc.) - Facets.Translator\n\t\t// Include facet aliases to be conisdered as a possible route\n\t\tvar facets_data = application.getConfig('siteSettings.facetfield')\n\t\t,\tfacets_to_include = [];\n\n\t\t_.each(facets_data, function(facet) {\n\t\t\tfacets_to_include.push(facet.facetfieldid);\n\n\t\t\t// Include URL Component Aliases...\n\t\t\t_.each(facet.urlcomponentaliases, function(facet_alias) {\n\t\t\t\tfacets_to_include.push(facet_alias.urlcomponent);\n\t\t\t});\n\t\t});\n\t\t\n\t\tfacets_to_include = _.union(facets_to_include, _.pluck(application.getConfig('facets'), 'id'));\n\t\tfacets_to_include = _.uniq(facets_to_include);\t\t\n\n\t\t// Here we generate an array with:\n\t\t// * The default url\n\t\t// * The Names of the facets that are in the siteSettings.facetfield config\n\t\t// * the url of the configured facets\n\t\t// * And the url of the top level categories\n\t\tvar components = _.compact(_.union(\n\t\t\t[application.translatorConfig.fallbackUrl]\n\t\t,\tfacets_to_include || []\n\t\t,\t_.pluck(application.translatorConfig.facets, 'url') || []\n\t\t,\tCategories.getTopLevelCategoriesUrlComponent() || []\n\t\t));\n\t\t\n\t\t// Generate the regexp and adds it to the instance of the router\n\t\tvar facet_regex = '^\\\\b(' + components.join('|') + ')\\\\b(.*?)$';\t\n\n\t\trouter.route(new RegExp(facet_regex), 'facetLoading');\n\t}\n\n\tfunction setTranslatorConfig(application)\n\t{\n\t\t// Formats a configuration object in the way the translator is expecting it\n\t\tapplication.translatorConfig = {\n\t\t\tfallbackUrl: application.getConfig('defaultSearchUrl')\n\t\t,\tdefaultShow: _.find(application.getConfig('resultsPerPage'), function (show) { return show.isDefault; }).items || application.getConfig('resultsPerPage')[0].items\n\t\t,\tdefaultOrder: _.find(application.getConfig('sortOptions'), function (sort) { return sort.isDefault; }).id || application.getConfig('sortOptions')[0].id\n\t\t,\tdefaultDisplay: _.find(application.getConfig('itemsDisplayOptions'), function (display) { return display.isDefault; }).id || application.getConfig('itemsDisplayOptions')[0].id\n\t\t,\tfacets: application.getConfig('facets')\n\t\t,\tfacetDelimiters: application.getConfig('facetDelimiters')\n\t\t,\tfacetsSeoLimits: application.getConfig('facetsSeoLimits')\n\t\t};\n\t}\n\n\treturn {\n\t\tTranslator: Translator\n\t,\tHelper: Helper\n\t,\tModel:  Model\n\t,\tRouter: Router\n\t,\tViews: Views\n\t,\tsetTranslatorConfig: setTranslatorConfig\n\t,\tprepareRouter: prepareRouter\n\t,\tmountToApp: function (application)\n\t\t{\n\t\t\tsetTranslatorConfig(application);\n\t\t\t\n\t\t\tvar routerInstance = new Router(application);\n\t\t\t\n\t\t\tprepareRouter(application, routerInstance);\n\t\t\t\n\t\t\t// Wires some config to the model\n\t\t\tModel.mountToApp(application);\n\t\t\treturn routerInstance;\n\t\t}\n\t};\n});\n\n\n(function (win, name)\n{\n\t'use strict';\n\t// [Google Analytics](https://developers.google.com/analytics/devguides/collection/gajs/)\n\t// This variable has to be already defined when our module loads\n\twin[name] = win[name] || [];\n\n\t// GoogleAnalytics.js\n\t// ------------------\n\t// Loads google analytics script and extends application with methods:\n\t// * trackPageview\n\t// * trackEvent\n\t// * trackTransaction\n\t// Also wraps layout's showInModal\n\tdefine('GoogleAnalytics', function ()\n\t{\n\t\tvar GoogleAnalytics = {\n\n\t\t\ttrackPageview: function (url)\n\t\t\t{\n\t\t\t\tif (_.isString(url))\n\t\t\t\t{\n\t\t\t\t\t// [_trackPageview()](https://developers.google.com/analytics/devguides/collection/gajs/methods/gaJSApiBasicConfiguration#_gat.GA_Tracker_._trackPageview)\n\t\t\t\t\twin[name].push(['_trackPageview', url]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t,\ttrackEvent: function (event)\n\t\t\t{\n\t\t\t\tif (event && event.category && event.action)\n\t\t\t\t{\n\t\t\t\t\t// [_trackEvent()](https://developers.google.com/analytics/devguides/collection/gajs/eventTrackerGuide)\n\t\t\t\t\twin[name].push(['_trackEvent'\n\t\t\t\t\t,\tevent.category\n\t\t\t\t\t,\tevent.action\n\t\t\t\t\t,\tevent.label\n\t\t\t\t\t,\tevent.value\n\t\t\t\t\t]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t,\taddItem: function (item)\n\t\t\t{\n\t\t\t\tif (item && item.id && item.name)\n\t\t\t\t{\n\t\t\t\t\t// [_addItem()](https://developers.google.com/analytics/devguides/collection/gajs/methods/gaJSApiEcommerce#_gat.GA_Tracker_._addItem)\n\t\t\t\t\twin[name].push(['_addItem'\n\t\t\t\t\t,\titem.id\n\t\t\t\t\t,\titem.sku\n\t\t\t\t\t,\titem.name\n\t\t\t\t\t,\titem.category\n\t\t\t\t\t,\titem.price\n\t\t\t\t\t,\titem.quantity\n\t\t\t\t\t]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t,\taddTrans: function (transaction)\n\t\t\t{\n\t\t\t\tif (transaction && transaction.id)\n\t\t\t\t{\n\t\t\t\t\t// [_addTrans()](https://developers.google.com/analytics/devguides/collection/gajs/methods/gaJSApiEcommerce#_gat.GA_Tracker_._addTrans)\n\t\t\t\t\twin[name].push(['_addTrans'\n\t\t\t\t\t,\ttransaction.id\n\t\t\t\t\t,\ttransaction.affiliation\n\t\t\t\t\t,\ttransaction.revenue\n\t\t\t\t\t,\ttransaction.tax\n\t\t\t\t\t,\ttransaction.shipping\n\t\t\t\t\t,\ttransaction.city\n\t\t\t\t\t,\ttransaction.state\n\t\t\t\t\t,\ttransaction.country\n\t\t\t\t\t]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t,\ttrackTrans: function ()\n\t\t\t{\n\t\t\t\t// [_trackTrans()](https://developers.google.com/analytics/devguides/collection/gajs/methods/gaJSApiEcommerce#_gat.GA_Tracker_._trackTrans)\n\t\t\t\twin[name].push(['_trackTrans']);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\t// Based on the created SalesOrder we trigger each of the analytics\n\t\t\t// ecommerce methods passing the required information\n\t\t\t// [Ecommerce Tracking](https://developers.google.com/analytics/devguides/collection/gajs/gaTrackingEcommerce?hl=en)\n\t\t,\ttrackTransaction: function (order)\n\t\t\t{\n\t\t\t\tif (order && order.get('confirmation'))\n\t\t\t\t{\n\t\t\t\t\tvar shipping_address = order.get('addresses').get(order.get('shipaddress'))\n\t\t\t\t\t,\ttransaction_id = order.get('confirmation').confirmationnumber\n\t\t\t\t\t,\torder_summary = order.get('summary')\n\t\t\t\t\t,\titem = null;\n\n\t\t\t\t\tGoogleAnalytics.addTrans({\n\t\t\t\t\t\tid: transaction_id\n\t\t\t\t\t,\taffiliation: SC.ENVIRONMENT.siteSettings.displayname\n\t\t\t\t\t,\trevenue: order_summary.subtotal\n\t\t\t\t\t,\ttax: order_summary.taxtotal\n\t\t\t\t\t,\tshipping: order_summary.shippingcost + order_summary.handlingcost\n\t\t\t\t\t,\tcity: shipping_address.get('city')\n\t\t\t\t\t,\tstate: shipping_address.get('state')\n\t\t\t\t\t,\tcountry: shipping_address.get('country')\n\t\t\t\t\t});\n\n\t\t\t\t\torder.get('lines').each(function (line)\n\t\t\t\t\t{\n\t\t\t\t\t\titem = line.get('item');\n\n\t\t\t\t\t\tGoogleAnalytics.addItem({\n\t\t\t\t\t\t\tid: transaction_id\n\t\t\t\t\t\t,\tsku: item.get('_sku')\n\t\t\t\t\t\t,\tname: item.get('_name')\n\t\t\t\t\t\t,\tcategory: item.get('_category')\n\t\t\t\t\t\t,\tprice: line.get('rate')\n\t\t\t\t\t\t,\tquantity: line.get('quantity')\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\treturn GoogleAnalytics.trackTrans();\n\t\t\t\t}\n\t\t\t}\n\n\t\t,\tsetAccount: function (config)\n\t\t\t{\n\t\t\t\tif (config && _.isString(config.propertyID) && _.isString(config.domainName))\n\t\t\t\t{\n\t\t\t\t\t// [Tracking Across a Domain and Its Subdomains](https://developers.google.com/analytics/devguides/collection/gajs/gaTrackingSite#domainSubDomains)\n\t\t\t\t\twin[name].push(\n\t\t\t\t\t\t['_setAccount', config.propertyID]\n\t\t\t\t\t,\t['_setDomainName', config.domainName]\n\t\t\t\t\t,\t['_setAllowLinker', true]\n\t\t\t\t\t);\n\n\t\t\t\t\tthis.propertyID = config.propertyID;\n\t\t\t\t\tthis.domainName = config.domainName;\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\t// [Tracking Between a Domain and a Sub-Directory on Another Domain](https://developers.google.com/analytics/devguides/collection/gajs/gaTrackingSite#domainAndSubDirectory)\n\t\t,\taddCrossDomainParameters: function (url)\n\t\t\t{\n\t\t\t\t// We only need to add the parameters if the url we are trying to go\n\t\t\t\t// is not a sub domain of the tracking domain\n\t\t\t\tif (_.isString(url) && !~url.indexOf(this.domainName))\n\t\t\t\t{\n\t\t\t\t\twin[name].push(function ()\n\t\t\t\t\t{\n\t\t\t\t\t\tvar track_url = _gat._getTrackerByName()._getLinkerUrl(url);\n\t\t\t\t\t\t// This validation is due to Tracking Blockers overriding the default anlaytics methods\n\t\t\t\t\t\tif (typeof track_url === 'string')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\turl = track_url;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn url;\n\t\t\t}\n\n\t\t,\tloadScript: function ()\n\t\t\t{\n\t\t\t\treturn SC.ENVIRONMENT.jsEnvironment === 'browser' && jQuery.getScript(('https:' === document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js');\n\t\t\t}\n\n\t\t,\tmountToApp: function (application)\n\t\t\t{\n\t\t\t\tvar tracking = application.getConfig('tracking.google');\n\n\t\t\t\t// if track page view needs to be tracked\n\t\t\t\tif (tracking && tracking.propertyID)\n\t\t\t\t{\n\t\t\t\t\t// we get the account and domain name from the configuration file\n\t\t\t\t\tGoogleAnalytics.setAccount(tracking);\n\n\t\t\t\t\tapplication.trackers && application.trackers.push(GoogleAnalytics);\n\n\t\t\t\t\t// the analytics script is only loaded if we are on a browser\n\t\t\t\t\tapplication.getLayout().once('afterAppendView', jQuery.proxy(GoogleAnalytics, 'loadScript'));\n\t\t\t\t}\t\n\t\t\t}\n\t\t};\n\t\t\n\t\treturn GoogleAnalytics;\n\t});\n})(window, '_gaq');\n\n(function (win, name)\n{\n\t'use strict';\n\t// [Google Universal Analytics](https://developers.google.com/analytics/devguides/collection/analyticsjs/)\n\t// We customized the tracking default start script so it doesn't loads analytics.js\n\t// (Tracking Start)[https://developers.google.com/analytics/devguides/collection/analyticsjs/#quickstart]\n\twin.GoogleAnalyticsObject = name;\n\twin[name] = win[name] || function ()\n\t{\n\t\t(win[name].q = win[name].q || []).push(arguments);\n\t};\n\twin[name].l = 1 * new Date();\n\n\t// GoogleUniversalAnalytics.js\n\t// ------------------\n\t// Loads google analytics script and extends application with methods:\n\t// * trackPageview\n\t// * trackEvent\n\t// * trackTransaction\n\t// Also wraps layout's showInModal\n\tdefine('GoogleUniversalAnalytics', function ()\n\t{\n\t\tvar GoogleUniversalAnalytics = {\n\n\t\t\ttrackPageview: function (url)\n\t\t\t{\n\t\t\t\tif (_.isString(url))\n\t\t\t\t{\n\t\t\t\t\t// [Page Tracking](https://developers.google.com/analytics/devguides/collection/analyticsjs/pages#overriding)\n\t\t\t\t\twin[name]('send', 'pageview', url);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t,\ttrackEvent: function (event)\n\t\t\t{\n\t\t\t\tif (event && event.category && event.action)\n\t\t\t\t{\n\t\t\t\t\t// [Event Tracking](https://developers.google.com/analytics/devguides/collection/analyticsjs/events#implementation)\n\t\t\t\t\twin[name]('send', 'event', event.category, event.action, event.label, parseFloat(event.value) || 0, {\n\t\t\t\t\t\t'hitCallback': event.callback\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t,\taddItem: function (item)\n\t\t\t{\n\t\t\t\tif (item && item.id && item.name)\n\t\t\t\t{\n\t\t\t\t\t// [Adding Items](https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce#addItem)\n\t\t\t\t\twin[name]('ecommerce:addItem', item);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t,\taddTrans: function (transaction)\n\t\t\t{\n\t\t\t\tif (transaction && transaction.id)\n\t\t\t\t{\n\t\t\t\t\t// [Adding a Transaction](https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce#addTrans)\n\t\t\t\t\twin[name]('ecommerce:addTransaction', transaction);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t,\ttrackTrans: function ()\n\t\t\t{\n\t\t\t\t// [Sending Data](https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce#sendingData)\n\t\t\t\twin[name]('ecommerce:send');\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\t// Based on the created SalesOrder we trigger each of the analytics\n\t\t\t// ecommerce methods passing the required information\n\t\t\t// [Ecommerce Tracking](https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce)\n\t\t,\ttrackTransaction: function (order)\n\t\t\t{\n\t\t\t\tif (order && order.get('confirmation'))\n\t\t\t\t{\n\t\t\t\t\tvar transaction_id = order.get('confirmation').confirmationnumber\n\t\t\t\t\t,\torder_summary = order.get('summary')\n\t\t\t\t\t,\titem = null;\n\n\t\t\t\t\tGoogleUniversalAnalytics.addTrans({\n\t\t\t\t\t\tid: transaction_id\n\t\t\t\t\t,\trevenue: order_summary.subtotal\n\t\t\t\t\t,\tshipping: order_summary.shippingcost + order_summary.handlingcost\n\t\t\t\t\t,\ttax: order_summary.taxtotal\n\t\t\t\t\t,\tcurrency: SC.getSessionInfo('currency') ? SC.getSessionInfo('currency').code : ''\n\t\t\t\t\t});\n\n\t\t\t\t\torder.get('lines').each(function (line)\n\t\t\t\t\t{\n\t\t\t\t\t\titem = line.get('item');\n\n\t\t\t\t\t\tGoogleUniversalAnalytics.addItem({\n\t\t\t\t\t\t\tid: transaction_id\n\t\t\t\t\t\t,\taffiliation: SC.ENVIRONMENT.siteSettings.displayname\n\t\t\t\t\t\t,\tsku: item.get('_sku')\n\t\t\t\t\t\t,\tname: item.get('_name')\n\t\t\t\t\t\t,\tcategory: item.get('_category')\n\t\t\t\t\t\t,\tprice: line.get('rate')\n\t\t\t\t\t\t,\tquantity: line.get('quantity')\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\treturn GoogleUniversalAnalytics.trackTrans();\n\t\t\t\t}\n\t\t\t}\n\n\t\t,\tsetAccount: function (config)\n\t\t\t{\n\t\t\t\tif (config && _.isString(config.propertyID) && _.isString(config.domainName))\n\t\t\t\t{\n\t\t\t\t\t// [Multiple Trackers on The Same Domain](https://developers.google.com/analytics/devguides/collection/analyticsjs/domains#multitrackers)\n\t\t\t\t\twin[name]('create', config.propertyID, {\n\t\t\t\t\t\t'cookieDomain': config.domainName\n\t\t\t\t\t,\t'allowLinker': true\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.propertyID = config.propertyID;\n\t\t\t\t\tthis.domainName = config.domainName;\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\t// [Decorating HTML Links](https://developers.google.com/analytics/devguides/collection/analyticsjs/cross-domain#decoratelinks)\n\t\t,\taddCrossDomainParameters: function (url)\n\t\t\t{\n\t\t\t\t// We only need to add the parameters if the url we are trying to go\n\t\t\t\t// is not a sub domain of the tracking domain\n\t\t\t\tif (_.isString(url) && !~url.indexOf(this.domainName))\n\t\t\t\t{\n\t\t\t\t\twin[name](function (tracker)\n\t\t\t\t\t{\n\t\t\t\t\t\twin.linker = win.linker || new win.gaplugins.Linker(tracker);\n\n\t\t\t\t\t\tvar track_url = win.linker.decorate(url);\n\n\t\t\t\t\t\t// This validation is due to Tracking Blockers overriding the default anlaytics methods\n\t\t\t\t\t\tif (typeof track_url === 'string')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\turl = track_url;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn url;\n\t\t\t}\n\n\t\t,\tloadScript: function ()\n\t\t\t{\n\t\t\t\t// [Load the Ecommerce Plugin](https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce#loadit)\n\t\t\t\twin[name]('require', 'ecommerce', 'ecommerce.js');\n\t\t\t\treturn SC.ENVIRONMENT.jsEnvironment === 'browser' && jQuery.getScript('//www.google-analytics.com/analytics.js');\n\t\t\t}\n\n\t\t,\tmountToApp: function (application)\n\t\t\t{\n\t\t\t\tvar tracking = application.getConfig('tracking.googleUniversalAnalytics');\n\n\t\t\t\t// if track page view needs to be tracked\n\t\t\t\tif (tracking && tracking.propertyID)\n\t\t\t\t{\n\t\t\t\t\t// we get the account and domain name from the configuration file\n\t\t\t\t\tGoogleUniversalAnalytics.setAccount(tracking);\n\n\t\t\t\t\tapplication.trackers && application.trackers.push(GoogleUniversalAnalytics);\n\n\t\t\t\t\t// the analytics script is only loaded if we are on a browser\n\t\t\t\t\tapplication.getLayout().once('afterAppendView', jQuery.proxy(GoogleUniversalAnalytics, 'loadScript'));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn GoogleUniversalAnalytics;\n\t});\n})(window, 'ga');\n\n\ndefine('Home', function ()\n{\n\t'use strict';\n\n\tvar View = Backbone.View.extend({\n\n\t\ttemplate: 'home'\n\n\t,\ttitle: _('Welcome to the store').translate()\n\n\t,\tpage_header: _('Welcome to the store').translate()\n\n\t,\tattributes: {\n\t\t\t'id': 'home-page'\n\t\t,\t'class': 'home-page'\n\t\t}\n\n\t,\tevents:\n\t\t{\n\t\t\t'click .carousel .carousel-control': 'carouselSlide'\n\t\t}\n\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tvar application = options.application;\n\t\t\tthis.config = application.getConfig('homePage');\n\t\t}\n\n\t,\tcarouselSlide: function (e)\n\t\t{\n\t\t\tvar direction = this.$(e.target).data('slide');\n\t\t\tthis.$('.carousel').carousel(direction);\n\t\t}\n\n\t});\n\n\tvar Router = Backbone.Router.extend({\n\n\t\troutes: {\n\t\t\t'': 'homePage'\n\t\t,\t'?*params': 'homePage'\n\t\t}\n\n\t,\tinitialize: function (Application)\n\t\t{\n\t\t\tthis.application = Application;\n\t\t}\n\n\t,\thomePage: function ()\n\t\t{\n\t\t\tvar view = new View({\n\t\t\t\tapplication: this.application\n\t\t\t});\n\n\t\t\tview.showContent();\n\t\t}\n\t});\n\n\treturn {\n\t\tView: View\n\t,\tRouter: Router\n\t,\tmountToApp: function (Application)\n\t\t{\n\t\t\treturn new Router(Application);\n\t\t}\n\t};\n});\n\n\n// ImageLoader.js\n// ------------------\n// This module is responsible of of the lazy loading of images - this is loading only those images that are in the current browser's viewport and start loading \n// the other images when the user scrolls into them. In general this module has two parts - first it exposes the function _.printImage() so images with this \n// behavior can be easily printed in templates&macros and then it contains the logic of loading the images when the user scrolls the window.\n// This module won't affect the Page Generator output code - only browser's\ndefine('ImageLoader', function ()\n{\n\t'use strict';\n\n\tvar default_height = 200; \n\n\tvar image_urls = {};\n\n\tvar fixImagesForLoader = function (s)\n\t{\n\t\treturn s.replace(/<img([^>]*)src=\"([^\"]+)\"([^>]*)/gi, function(all, textBefore, url, textAfter)\n\t\t{\n\t\t\tif (image_urls[url])\n\t\t\t{\n\t\t\t\treturn all;\n\t\t\t}\n\t\t\ttextBefore = textBefore || ''; \n\t\t\ttextAfter = textAfter || '';\t\t\t\n\t\t\t// do nothing if image contains data-loader=\"false\" attribute\n\t\t\tif ( (textBefore && textBefore.indexOf('data-loader=\"false\"') !== -1) || (textAfter && textAfter.indexOf('data-loader=\"false\"') !== -1) )\n\t\t\t{\n\t\t\t\treturn all; \n\t\t\t}\n\t\t\tvar params = _.parseUrlOptions(url); \n\t\t\tvar height = params.resizeh || default_height; \n\t\t\tvar style_attrs = 'style=\"min-height:' + height + 'px;min-width:' + height + 'px\"'; \n\t\t\tvar ret = '<img data-image-status=\"pending\" data-src=\"' + url + '\" ' + style_attrs + textBefore + ' ' + textAfter; \n\t\t\treturn ret; \n\t\t}); \n\t}; \n\n\tvar isElementInViewport = function ($el) \n\t{\n\t\tif (!$el.is(':visible'))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tvar el_rect = {\n\t\t\tleft: $el.offset().left\n\t\t,\ttop: $el.offset().top\n\t\t,\tbottom: $el.offset().top + $el.height()\n\t\t,\tright: $el.offset().left + $el.width()\n\t\t}; \n\t\tvar window_rect = {\n\t\t\tleft: jQuery(window).scrollLeft()\n\t\t,\ttop: jQuery(window).scrollTop()\n\t\t,\tbottom: jQuery(window).scrollTop() + jQuery(window).height()\n\t\t,\tright: jQuery(window).scrollLeft() + jQuery(window).width()\n\t\t};\n\n\t\treturn rectangleIntercept(el_rect, window_rect); \n\t}; \n\n\tvar rectangleIntercept = function (r1, r2)\n\t{\n\t\treturn !(\n\t\t\tr1.left > r2.right || \n\t\t\tr1.right < r2.left || \n\t\t\tr1.top > r2.bottom ||\n\t\t\tr1.bottom < r2.top\n\t\t); \n\t}; \n\n\t// the main imageloader function resolvePendingImages. It will iterate all images marked with data-image-status=\"pending\" and start loading them. \n\t// If passed parameter onlyIfVisible is true it will load ony those images that are currently visible. \n\tvar resolvePendingImages = function(onlyIfVisible)\n\t{\n\t\tjQuery('[data-image-status=\"pending\"]').each(function()\n\t\t{\n\t\t\tvar $image = jQuery(this); \n\t\t\tif (!onlyIfVisible || isElementInViewport($image))\n\t\t\t{\n\t\t\t\tvar src = $image.attr('data-src');\n\t\t\t\t$image.attr({\n\t\t\t\t\tsrc: $image.attr('data-src')\n\t\t\t\t}).data('image-status', 'done').on('load error', function()\n\t\t\t\t{\n\t\t\t\t\t$image.attr({style: ''}); \n\t\t\t\t\timage_urls[src] = true;\n\t\t\t\t});\n\t\t\t}\n\t\t}); \n\t}; \n\n\treturn {\n\t\tmountToApp: function (application)\n\t\t{\n\t\t\twindow.fixImagesForLoader = fixImagesForLoader;\n\n\t\t\tif (!SC.isPageGenerator())\n\t\t\t{\n\t\t\t\t// we listen when the full document is scrolled and check if there is any pending image and load them if they are visible\n\t\t\t\tjQuery(window).on('resize scroll', _.throttle(_(resolvePendingImages).bind(null, true), 200));\n\n\t\t\t\t//when a new view is shown we want to check if it contains any visible pending images and load them \n\t\t\t\tapplication.getLayout().on('afterAppendView afterRender', function()\n\t\t\t\t{\t\t\t\t\t\n\t\t\t\t\tresolvePendingImages(true);\n\t\t\t\t}); \n\n\t\t\t\t//There may be image markup that are there but in hidden parents that may be shown when user clicks or touch something. \n\t\t\t\tjQuery('body').on('click touchend', function() \n\t\t\t\t{\n\t\t\t\t\tresolvePendingImages(false);\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\t//exposing utility methods so we can test them.\n\n\t,\tresolvePendingImages: resolvePendingImages\n\n\t,\trectangleIntercept: rectangleIntercept\n\n\t,\tisElementInViewport: isElementInViewport\n\n\t,\tfixImagesForLoader: fixImagesForLoader\n\n\t,\tdefault_height: default_height\n\n\t};\n\n});\n\n// ImageNotAvailable.js\n// --------------------\n// Simple Module that will make sure that\n// if an image files to load it will load an alternative image in it\ndefine('ImageNotAvailable', function ()\n{\n\t'use strict';\n\t\n\treturn {\n\t\tmountToApp: function (application)\n\t\t{\n\t\t\t// Every time a new view is rendered\n\t\t\tapplication.getLayout().on('afterAppendView', function (view)\n\t\t\t{\n\t\t\t\t// it will look at the img and bind the error event to it\n\t\t\t\tview.$('img').on('error', function ()\n\t\t\t\t{\n\t\t\t\t\t// and haven't tried to changed it before, so we don't enter an infinite loop\n\t\t\t\t\tif (!this.errorCounter)\n\t\t\t\t\t{\n\t\t\t\t\t\t// it will set the src of the img to the default image not available.\n\t\t\t\t\t\t// you can set logic based on size or a class for displaying different urls if you need\n\t\t\t\t\t\tthis.src = application.resizeImage(application.getConfig('imageNotAvailable', ''), SC.ENVIRONMENT.screenWidth < 768 ? 'thumbnail' : 'zoom');\n\t\t\t\t\t\tjQuery(this).parent('[data-zoom]').length && jQuery(this).parent('[data-zoom]').zoom();\n\t\t\t\t\t\tthis.errorCounter = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n});\n\n// ItemDetails.Collection.js\n// -------------------------\n// Returns an extended version of the CachedCollection constructor\n// (file: Backbone.cachedSync.js)\ndefine('ItemDetails.Collection', ['ItemDetails.Model', 'Session'], function (Model, Session)\n{\n\t'use strict';\n\n\treturn Backbone.CachedCollection.extend({\n\t\t\n\t\turl: function()\n\t\t{\n\t\t\tvar url = _.addParamsToUrl(\n\t\t\t\t'/api/items'\n\t\t\t,\t_.extend(\n\t\t\t\t\t{}\n\t\t\t\t,\tthis.searchApiMasterOptions\n\t\t\t\t,\tSession.getSearchApiParams()\n\t\t\t\t)\n\t\t\t);\n\n\t\t\treturn url;\n\t\t}\n\n\t,\tmodel: Model\n\t\t\n\t\t// http://backbonejs.org/#Model-parse\n\t,\tparse: function (response)\n\t\t{\n\t\t\t// NOTE: Compact is used to filter null values from response\n\t\t\treturn _.compact(response.items) || null;\n\t\t}\n\t});\n});\n\n// ItemDetails.Model.js\n// --------------------\n// Represents 1 single product of the web store\ndefine('ItemDetails.Model', ['ItemOptionsHelper', 'Session'], function (ItemOptionsHelper, Session)\n{\n\t'use strict';\n\n\tvar Collection = null;\n\n\tvar Model = Backbone.CachedModel.extend({\n\n\t\turl: function()\n\t\t{\n\t\t\tvar url = _.addParamsToUrl(\n\t\t\t\t'/api/items'\n\t\t\t,\t_.extend(\n\t\t\t\t\t{}\n\t\t\t\t,\tthis.searchApiMasterOptions\n\t\t\t\t,\tSession.getSearchApiParams()\n\t\t\t\t)\n\t\t\t);\n\n\t\t\treturn url;\n\t\t}\n\n\t,\tvalidation: \n\t\t{\n\t\t\tquantity: { fn: function() \n\t\t\t\t{\n\t\t\t\t\tvar self = this;\n\n\t\t\t\t\tif (self.cartItemId)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (self.get('quantity') < self.get('_minimumQuantity', true))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn _('The minimum quantity for this item is $(0).').translate(self.get('_minimumQuantity', true));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (self.get('quantity') < self.get('_minimumQuantity', true)) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (self.application.loadCart().state() === 'resolved')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar itemCart = self.application.getCart().get('lines').find(function(item) \n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar internalid = self.get('internalid')\n\t\t\t\t\t\t\t\t\t,\tchilds = self.getSelectedMatrixChilds();\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\titem = item.get('item');\n\n\t\t\t\t\t\t\t\t\tif (childs && childs.length === 1)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tinternalid = childs[0].get('internalid');\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (internalid === item.get('internalid') && _.size(self.itemOptions) === _.size(item.itemOptions))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar keys = Object.keys(item.itemOptions);\n\t\t\t\t\t\t\t\t\t\tfor (var i = 0; i < keys.length; i++) \n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (!self.itemOptions[keys[i]] || self.itemOptions[keys[i]].internalid !== item.itemOptions[keys[i]].internalid)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\treturn item;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tvar total = itemCart && itemCart.get('quantity') || 0;\n\n\t\t\t\t\t\t\t\tif ((total + self.get('quantity')) < self.get('_minimumQuantity', true))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn _('The minimum quantity for this item is $(0).').translate(self.get('_minimumQuantity', true));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn _('Cart not loaded yet, please wait and try again.').translate();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// The api returns the items as an array allways this takes care of returning the object\n\t,\tparse: function (response)\n\t\t{\n\t\t\t// if we are performing a direct API call the item is response.items[0]\n\t\t\t// but if you are using the ItemDetails.Collection to fetch this guys\n\t\t\t// The item is the response\n\t\t\tvar single_item = response.items && response.items[0];\n\n\t\t\tif (single_item)\n\t\t\t{\n\t\t\t\tsingle_item.facets = response.facets;\n\t\t\t}\n\n\t\t\treturn single_item || response;\n\t\t}\n\n\t,\tinitialize: function ()\n\t\t{\n\t\t\tthis.itemOptions = {};\n\n\t\t\tif (_.isArray(this.get('options')))\n\t\t\t{\n\t\t\t\tthis.setOptionsArray(this.get('options'), true);\n\t\t\t}\n\t\t}\n\n\t,\tgetOption: function (option_name)\n\t\t{\n\t\t\treturn this.itemOptions[option_name];\n\t\t}\n\n\t,\tsetOptionsArray: function (options, dont_validate)\n\t\t{\n\t\t\tvar self = this;\n\t\t\t_.each(options, function (option)\n\t\t\t{\n\t\t\t\tself.setOption(option.id, {\n\t\t\t\t\tinternalid: option.value\n\t\t\t\t,\tlabel: option.displayvalue ? option.displayvalue : option.value\n\t\t\t\t}, dont_validate);\n\t\t\t});\n\t\t}\n\n\t,\tsetOption: function (option_name, value, dont_validate)\n\t\t{\n\t\t\t// Setting it to null means you dont wan a value for it\n\t\t\tif (option_name === 'quantity')\n\t\t\t{\n\t\t\t\tthis.set('quantity', parseInt(value, 10) || 1);\n\t\t\t}\n\t\t\telse if (_.isNull(value))\n\t\t\t{\n\t\t\t\tdelete this.itemOptions[option_name];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Sometimes the name comes in all uppercase\n\t\t\t\tvar option = this.getPosibleOptionByCartOptionId(option_name) || this.getPosibleOptionByCartOptionId(option_name.toLowerCase());\n\n\t\t\t\t// You can pass in the internalid on the instead of the full item\n\t\t\t\tif (option && option.values)\n\t\t\t\t{\n\t\t\t\t\tvalue = _.isObject(value) ? value : _.where(option.values, {internalid: value.toString()})[0];\n\t\t\t\t}\n\t\t\t\telse if (!_.isObject(value))\n\t\t\t\t{\n\t\t\t\t\tvalue = {\n\t\t\t\t\t\tinternalid: value\n\t\t\t\t\t,\tlabel: value\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// if it's a matrix option this will make sure it's compatible to what its already set!\n\t\t\t\tif (!dont_validate && option.isMatrixDimension && !_.contains(this.getValidOptionsFor(option.itemOptionId), value.label))\n\t\t\t\t{\n\t\t\t\t\tthrow new RangeError('The combination you selected is invalid');\n\t\t\t\t}\n\t\t\t\tif (option && option.cartOptionId)\n\t\t\t\t{\n\t\t\t\t\tthis.itemOptions[option.cartOptionId] = value;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\treturn value;\n\n\t\t}\n\n\t,\tgetItemOptionsForCart: function ()\n\t\t{\n\t\t\tvar result = {};\n\n\t\t\t_.each(this.itemOptions, function (value, name)\n\t\t\t{\n\t\t\t\tresult[name] = value.internalid;\n\t\t\t});\n\n\t\t\treturn result;\n\t\t}\n\n\t\t// model.get:\n\t\t// We have override the get function for this model in order to honor the itemsKeyMapping\n\t\t// It also makes sure that _matrixChilds and _relatedItems are ItemDetails.Collection and\n\t\t// _matrixParent is an ItemDetails.Model\n\t,\tget: function (attr, dont_cache)\n\t\t{\n\t\t\tvar keyMapping = this.keyMapping || (this.collection && this.collection.keyMapping);\n\n\t\t\tif (dont_cache || (keyMapping && !this.attributes[attr] && keyMapping[attr]))\n\t\t\t{\n\t\t\t\tvar mapped_key = keyMapping[attr];\n\n\t\t\t\tif (_.isFunction(mapped_key))\n\t\t\t\t{\n\t\t\t\t\tthis.attributes[attr] = mapped_key(this);\n\t\t\t\t}\n\t\t\t\telse if (_.isArray(mapped_key))\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < mapped_key.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.attributes[mapped_key[i]])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.attributes[attr] = this.attributes[mapped_key[i]];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.attributes[attr] = this.attributes[mapped_key];\n\t\t\t\t}\n\n\t\t\t\tif (attr === '_matrixChilds' || attr === '_relatedItems')\n\t\t\t\t{\n\t\t\t\t\tCollection = Collection || require('ItemDetails.Collection');\n\t\t\t\t\tthis.attributes[attr] = new Collection(this.attributes[attr] || []);\n\t\t\t\t}\n\t\t\t\telse if (attr === '_matrixParent')\n\t\t\t\t{\n\t\t\t\t\tthis.attributes[attr] = new Model(this.attributes[attr] || {});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.attributes[attr];\n\t\t}\n\n\t\t// model.getPrice:\n\t\t// Gets the price based on the selection of the item and the quantity\n\t,\tgetPrice: function ()\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\tdetails_object = this.get('_priceDetails') || {}\n\t\t\t,\tmatrix_children = this.getSelectedMatrixChilds()\n\t\t\t,\tresult =  {\n\t\t\t\t\tprice: details_object.onlinecustomerprice\n\t\t\t\t,\tprice_formatted: details_object.onlinecustomerprice_formatted\n\t\t\t\t};\n\n\t\t\t// Computes Quantity pricing.\n\t\t\tif (details_object.priceschedule && details_object.priceschedule.length)\n\t\t\t{\n\t\t\t\tvar quantity = this.get('quantity') || 1,\n\t\t\t\t\tprice_schedule, min, max;\n\n\t\t\t\tfor (var i = 0; i < details_object.priceschedule.length; i++)\n\t\t\t\t{\n\t\t\t\t\tprice_schedule = details_object.priceschedule[i];\n\t\t\t\t\tmin = parseInt(price_schedule.minimumquantity, 10);\n\t\t\t\t\tmax = parseInt(price_schedule.maximumquantity, 10);\n\n\t\t\t\t\tif ((min <= quantity && quantity < max) || (min <= quantity && !max))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult  = {\n\t\t\t\t\t\t\tprice: price_schedule.price\n\t\t\t\t\t\t,\tprice_formatted: price_schedule.price_formatted\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if it's a matrix it will compute the matrix price\n\t\t\tif (matrix_children.length)\n\t\t\t{\n\t\t\t\t// Gets the price of each child\n\t\t\t\tvar children_prices = [];\n\n\t\t\t\t_.each(matrix_children, function (child)\n\t\t\t\t{\n\t\t\t\t\tchild.setOption('quantity', self.get('quantity'));\n\t\t\t\t\tchildren_prices.push(child.getPrice());\n\t\t\t\t});\n\n\t\t\t\tif (children_prices.length === 1)\n\t\t\t\t{\n\t\t\t\t\t// If there is only one it means there is only one price to show\n\t\t\t\t\tresult = children_prices[0];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// otherways we should compute max and min to show a range in the gui\n\t\t\t\t\tvar children_prices_values = _.pluck(children_prices, 'price')\n\t\t\t\t\t,\tmin_value = _.min(children_prices_values)\n\t\t\t\t\t,\tmax_value = _.max(children_prices_values);\n\n\t\t\t\t\tif (min_value !== max_value)\n\t\t\t\t\t{\n\t\t\t\t\t\t// We return them alongside the result of the parent\n\t\t\t\t\t\tresult.min = _.where(children_prices, {price: min_value})[0];\n\t\t\t\t\t\tresult.max = _.where(children_prices, {price: max_value})[0];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// they are all alike so we can show any of them\n\t\t\t\t\t\tresult = children_prices[0];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Adds the compare agains price if its not setted by one if the childs\n\t\t\tif (!result.compare_price && this.get('_comparePriceAgainst'))\n\t\t\t{\n\t\t\t\tresult.compare_price = this.get('_comparePriceAgainst');\n\t\t\t\tresult.compare_price_formatted = this.get('_comparePriceAgainstFormated');\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\n\t\t// model.getStockInfo\n\t\t// Returns an standard formated object for the stock info taking in consideration current matrix option selection.\n\t\t// the loginc is the following: if there is an unique child selected use that. Else use the parent as default\n\t\t// values and open children properties if it has the same value for all selected childs.\n\t,\tgetStockInfo: function ()\n\t\t{\n\t\t\t// Standarize the result object\n\t\t\tvar matrix_children = this.getSelectedMatrixChilds()\n\n\t\t\t\t// if we have one selected child we use that - else we use the parent as default\n\t\t\t,\tmodel = matrix_children.length === 1 ? matrix_children[0] : this\n\n\t\t\t,\tparent = this.get('_matrixParent')\n\n\t\t\t,\tstock_info = {\n\t\t\t\t\tstock: model.get('_stock')\n\t\t\t\t,\tisInStock: model.get('_isInStock')\n\n\t\t\t\t,\toutOfStockMessage: model.get('_outOfStockMessage') || this.get('_outOfStockMessage') || (parent && parent.get('_outOfStockMessage')) || _('Out of Stock').translate()\n\t\t\t\t,\tshowOutOfStockMessage: model.get('_showOutOfStockMessage') || this.get('_showOutOfStockMessage')\n\n\t\t\t\t,\tinStockMessage: model.get('_inStockMessage')\n\t\t\t\t,\tshowInStockMessage: model.get('_showInStockMessage')\n\n\t\t\t\t,\tstockDescription: model.get('_stockDescription')\n\t\t\t\t,\tshowStockDescription: model.get('_showStockDescription')\n\t\t\t\t,\tstockDescriptionClass: model.get('_stockDescriptionClass')\n\t\t\t}\n\n\t\t\t,\tis_something_selected = _(this.getMatrixOptionsSelection()).keys().length;\n\n\t\t\t// if this is an open selection we compute them all\n\t\t\tif (is_something_selected && matrix_children.length > 1)\n\t\t\t{\n\t\t\t\tvar matrix_children_stock_info = [];\n\n\t\t\t\t_.each(matrix_children, function (child)\n\t\t\t\t{\n\t\t\t\t\tmatrix_children_stock_info.push(child.getStockInfo());\n\t\t\t\t});\n\n\t\t\t\t// If all matrix childs return the same value for a given attribute that becomes the output,\n\t\t\t\t// with the exeption of stock that is an adition of the stocks of the childs - but only if the parent has\n\t\t\t\t_.each(stock_info, function (value, key)\n\t\t\t\t{\n\t\t\t\t\tvar children_values_for_attribute = _.pluck(matrix_children_stock_info, key);\n\n\t\t\t\t\tif (key === 'stock')\n\t\t\t\t\t{\n\t\t\t\t\t\tstock_info.stock = _.reduce(children_values_for_attribute, function (memo, num)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn memo + num;\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t}\n\t\t\t\t\telse if (key === 'isInStock')\n\t\t\t\t\t{\n\t\t\t\t\t\t// the parent is in stock if any of the child items is in stock\n\t\t\t\t\t\t// so, if in the array of the values of 'isInStock' for the childs\n\t\t\t\t\t\t// there is a 'true', then the parent item is in stock\n\t\t\t\t\t\tstock_info.isInStock = _.contains(children_values_for_attribute, true);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tchildren_values_for_attribute = _.uniq(children_values_for_attribute);\n\n\t\t\t\t\t\tif (children_values_for_attribute.length === 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstock_info[key] = children_values_for_attribute[0];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn stock_info;\n\t\t}\n\n\t\t// model.isReadyForCart:\n\t\t// if it has mandatory options, checks for all to be filled\n\t\t// also checks if the item is purchasable\n\t,\tisReadyForCart: function ()\n\t\t{\n\t\t\t// if the item is a matrix, we check if the selection is completed\n\t\t\t// for non-matrix items isSelectionComplete always returns true\n\t\t\tif (this.isSelectionComplete())\n\t\t\t{\n\t\t\t\tvar is_purchasable = this.get('_isPurchasable')\n\t\t\t\t,\tchild = this.getSelectedMatrixChilds();\n\n\t\t\t\tif (child.length)\n\t\t\t\t{\n\t\t\t\t\tis_purchasable = child[0].get('_isPurchasable');\n\t\t\t\t}\n\n\t\t\t\treturn is_purchasable;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t});\n\n\tModel.prototype = _.extend(Model.prototype, ItemOptionsHelper);\n\n\treturn Model;\n});\n\n\n/* global nsglobal */\n// ItemDetails.Router.js\n// ---------------------\n// Adds route listener to display Product Detailed Page\n// Parses any options pased as parameters\ndefine('ItemDetails.Router', function()\n{\n\t'use strict';\n\t\n\treturn Backbone.Router.extend({\n\t\t\n\t\troutes: {\n\t\t\t':url': 'productDetailsByUrl'\n\t\t}\n\t\t\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tthis.application = options.application;\n\t\t\t// we will also add a new regexp route to this, that will cover any url with slashes in it so in the case\n\t\t\t// you want to handle urls like /cat1/cat2/urlcomponent, as this are the last routes to be evaluated,\n\t\t\t// it will only get here if there is no other more apropiate one\n\t\t\tthis.route(/^(.*?)$/, 'productDetailsByUrl');\n\t\t\tthis.Model = options.model;\n\t\t\tthis.View = options.view;\n\t\t\t\n\t\t\t// This is the fallback url if a product does not have a url component.\n\t\t\tthis.route('product/:id', 'productDetailsById');\n\t\t\tthis.route('product/:id?:options', 'productDetailsById');\n\t\t}\n\t\t\n\t,\tproductDetailsByUrl: function (url)\n\t\t{\n\t\t\tif (!url) \n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// if there are any options in the URL\n\t\t\tvar options = null;\n\n\t\t\tif (~url.indexOf('?'))\n\t\t\t{\n\t\t\t\toptions = SC.Utils.parseUrlOptions(url);\n\t\t\t\turl = url.split('?')[0];\n\t\t\t}\n\t\t\t// Now go grab the data and show it\n\t\t\tif (options)\n\t\t\t{\n\t\t\t\tthis.productDetails({url: url}, url, options);\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.productDetails({url: url}, url);\t\t\t\t\n\t\t\t} \n\t\t}\n\t\t\n\t,\tproductDetailsById: function (id, options)\n\t\t{\n\t\t\t// Now go grab the data and show it\n\t\t\tthis.productDetails({id: id}, '/product/'+id, SC.Utils.parseUrlOptions(options));\n\t\t}\n\t\t\n\t,\tproductDetails: function (api_query, base_url, options)\n\t\t{\n\t\t\t// Decodes url options \n\t\t\t_.each(options, function (value, name)\n\t\t\t{\n\t\t\t\toptions[name] = decodeURIComponent(value);\n\t\t\t});\n\n\t\t\tvar application = this.application\n\t\t\t,\tmodel = new this.Model()\n\t\t\t\t// we create a new instance of the ProductDetailed View\n\t\t\t,\tview = new this.View({\n\t\t\t\t\tmodel: model\n\t\t\t\t,\tbaseUrl: base_url\n\t\t\t\t,\tapplication: this.application\n\t\t\t\t});\n\n\t\t\tmodel.fetch({\n\t\t\t\tdata: api_query\n\t\t\t,\tkillerId: this.application.killerId\n\t\t\t,\tpageGeneratorPreload: true\n\t\t\t}).then(\n\t\t\t\t// Success function\n\t\t\t\tfunction (data)\n\t\t\t\t{\n\t\t\t\t\tif (!model.isNew())\n\t\t\t\t\t{\t\t\t\t\t\t\n\t\t\t\t\t\tif (api_query.id && model.get('urlcomponent') && SC.ENVIRONMENT.jsEnvironment === 'server')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnsglobal.statusCode = 301;\n\t\t\t\t\t\t\tnsglobal.location = model.get('_url');\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\n\t\t\t\t\t\tif (data.corrections && data.corrections.length > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tview.options.baseUrl = data.corrections[0].url;\n\t\t\t\t\t\t\tmodel.set('_url', data.corrections[0].url);\n\n\t\t\t\t\t\t\tif (model.get('urlcomponent') && SC.ENVIRONMENT.jsEnvironment === 'server')\n\t\t\t\t\t\t\t{\t\t\t\n\t\t\t\t\t\t\t\tnsglobal.statusCode = 301;\n\t\t\t\t\t\t\t\tnsglobal.location = model.get('_url');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tBackbone.history.navigate('#' + data.corrections[0].url + model.getQueryString(), {trigger: true});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// once the item is fully loaded we set its options\n\t\t\t\t\t\tmodel.parseQueryStringOptions(options);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!(options && options.quantity))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmodel.set('quantity', model.get('_minimumQuantity'));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// we first prepare the view\n\t\t\t\t\t\tview.prepView();\n\t\t\t\t\t\t\n\t\t\t\t\t\t// then we show the content\n\t\t\t\t\t\tview.showContent(options);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// We just show the 404 page\n\t\t\t\t\t\tapplication.getLayout().notFound();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Error function\n\t\t\t,\tfunction (model, jqXhr)\n\t\t\t\t{\t\n\t\t\t\t\t// this will stop the ErrorManagment module to process this error\n\t\t\t\t\t// as we are taking care of it\t\t\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tjqXhr.preventDefault = true;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e)\n\t\t\t\t\t{\t\t\t\t\t\t\n\t\t\t\t\t\t// preventDefault could be readonly!\n\t\t\t\t\t\tconsole.log(e.message);\n\t\t\t\t\t}\n\n\t\t\t\t\t// We just show the 404 page\n\t\t\t\t\tapplication.getLayout().notFound();\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t});\n});\n\n\n// ItemDetails.View.js\n// -------------------\n// Handles the pdp and quick view\ndefine('ItemDetails.View', ['Facets.Translator', 'ItemDetails.Collection'], function (FacetsTranslator)\n{\n\t'use strict';\n\n\tvar colapsibles_states = {};\n\n\treturn Backbone.View.extend({\n\n\t\ttitle: ''\n\t,\tpage_header: ''\n\t,\ttemplate: 'product_details'\n\t,\tattributes: {\n\t\t\t'id': 'product-detail'\n\t\t,\t'class': 'view product-detail'\n\t\t}\n\n\t,\tevents: {\n\t\t\t'blur [data-toggle=\"text-option\"]': 'setOption'\n\t\t,\t'click [data-toggle=\"set-option\"]': 'setOption'\n\t\t,\t'change [data-toggle=\"select-option\"]': 'setOption'\n\n\t\t,\t'keydown [data-toggle=\"text-option\"]': 'tabNavigationFix'\n\t\t,\t'focus [data-toggle=\"text-option\"]': 'tabNavigationFix'\n\n\t\t,\t'change [name=\"quantity\"]': 'updateQuantity'\n\t\t,\t'keypress [name=\"quantity\"]': 'submitOnEnter'\n\n\t\t,\t'click [data-type=\"add-to-cart\"]': 'addToCart'\n\n\t\t,\t'shown .collapse': 'storeColapsiblesState'\n\t\t,\t'hidden .collapse': 'storeColapsiblesState'\n\n\t\t,\t'mouseup': 'contentMouseUp'\n\t\t,\t'click': 'contentClick'\n\t\t}\n\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tthis.application = options.application;\n\t\t\tthis.counted_clicks = {};\n\n\t\t\tif (!this.model)\n\t\t\t{\n\t\t\t\tthrow new Error('A model is needed');\n\t\t\t}\n\t\t}\n\n\t\t// view.getBreadcrumb:\n\t\t// It will generate an array suitable to pass it to the breadcrumb macro\n\t\t// It looks in the productDetailsBreadcrumbFacets config object\n\t\t// This will be enhaced to use the categories once thats ready\n\t,\tgetBreadcrumb: function ()\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\tbreadcrumb = []\n\t\t\t,\ttranslator = new FacetsTranslator(null, null, this.application.translatorConfig);\n\n\t\t\t_.each(this.application.getConfig('productDetailsBreadcrumbFacets'), function (product_details_breadcrumb_facet)\n\t\t\t{\n\t\t\t\tvar value = self.model.get(product_details_breadcrumb_facet.facetId);\n\n\t\t\t\tif (value)\n\t\t\t\t{\n\t\t\t\t\ttranslator = translator.cloneForFacetId(product_details_breadcrumb_facet.facetId, value);\n\t\t\t\t\tbreadcrumb.push({\n\t\t\t\t\t\thref: translator.getUrl()\n\t\t\t\t\t,\ttext: product_details_breadcrumb_facet.translator ? _(product_details_breadcrumb_facet.translator).translate(value) : value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn breadcrumb;\n\t\t}\n\n\t\t// view.storeColapsiblesState:\n\t\t// Since this view is re-rendered every time you make a selection\n\t\t// we need to keep the state of the collapsable for the next render\n\t,\tstoreColapsiblesState: function ()\n\t\t{\n\t\t\tthis.storeColapsiblesStateCalled = true;\n\n\t\t\tthis.$('.collapse').each(function (index, element)\n\t\t\t{\n\t\t\t\tcolapsibles_states[SC.Utils.getFullPathForElement(element)] = jQuery(element).hasClass('in');\n\t\t\t});\n\t\t}\n\n\t\t// view.resetColapsiblesState:\n\t\t// as we keep track of the state, we need to reset the 1st time we show a new item\n\t,\tresetColapsiblesState: function ()\n\t\t{\n\t\t\tvar self = this;\n\t\t\t_.each(colapsibles_states, function (is_in, element_selector)\n\t\t\t{\n\t\t\t\tself.$(element_selector)[is_in ? 'addClass' : 'removeClass']('in').css('height', is_in ? 'auto' : '0');\n\t\t\t});\n\t\t}\n\n\t\t// view.updateQuantity:\n\t\t// Updates the quantity of the model\n\t,\tupdateQuantity: function (e)\n\t\t{\n\t\t\tvar new_quantity = parseInt(jQuery(e.target).val(),10)\n\t\t\t,\tcurrent_quantity = this.model.get('quantity')\n\t\t\t,\tisOptimistic = this.application.getConfig('addToCartBehavior') === 'showCartConfirmationModal';\n\n\n\t\t\tnew_quantity = (new_quantity > 0) ? new_quantity : current_quantity;\n\n\t\t\tjQuery(e.target).val(new_quantity);\n\n\t\t\tif (new_quantity !== current_quantity)\n\t\t\t{\n\t\t\t\tthis.model.setOption('quantity', new_quantity);\n\n\t\t\t\tif (!this.$containerModal || !isOptimistic)\n\t\t\t\t{\n\t\t\t\t\tthis.refreshInterface(e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.$containerModal)\n\t\t\t{\n\t\t\t\t// need to trigger an afterAppendView event here because, like in the PDP, we are really appending a new view for the new selected matrix child\n\t\t\t\tthis.application.getLayout().trigger('afterAppendView', this);\n\t\t\t}\n\t\t}\n\n\t\t// submit the form when user presses enter in the quantity input text\n\t,\tsubmitOnEnter: function (e)\n\t\t{\n\t\t\tif (e.keyCode === 13)\n\t\t\t{\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t\tthis.addToCart(e);\n\t\t\t}\n\t\t}\n\n\t\t// view.contentClick:\n\t\t// Keeps track of the clicks you have made onto the view, so the contentMouseUp\n\t\t// knows if it needs to trigger the click event once again\n\t,\tcontentClick: function (e)\n\t\t{\n\t\t\tthis.counted_clicks[e.pageX + '|' + e.pageY] = true;\n\n\t\t\tif (this.$containerModal)\n\t\t\t{\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\t\t}\n\n\t\t// view.contentMouseUp:\n\t\t// this is used just to register a delayed function to check if the click went through\n\t\t// if it didn't we fire the click once again on the top most element\n\t,\tcontentMouseUp: function (e)\n\t\t{\n\t\t\tif (e.which !== 2 && e.which !== 3)\n\t\t\t{\n\t\t\t\tvar self = this;\n\t\t\t\t_.delay(function ()\n\t\t\t\t{\n\t\t\t\t\tif (!self.counted_clicks[e.pageX + '|' + e.pageY])\n\t\t\t\t\t{\n\t\t\t\t\t\tjQuery(document.elementFromPoint(e.clientX, e.clientY)).click();\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete self.counted_clicks[e.pageX + '|' + e.pageY];\n\n\t\t\t\t}, 100);\n\t\t\t}\n\t\t}\n\n\t\t// view.addToCart:\n\t\t// Updates the Cart to include the current model\n\t\t// also takes care of updateing the cart if the current model is a cart item\n\t,\taddToCart: function (e)\n\t\t{\n\t\t\te.preventDefault();\n\n\t\t\t// Updates the quantity of the model\n\t\t\tvar quantity = this.$('[name=\"quantity\"]').val();\n\t\t\tthis.model.setOption('quantity', quantity);\n\n\t\t\tif (this.model.isValid(true) && this.model.isReadyForCart())\n\t\t\t{\n\t\t\t\tvar self = this\n\t\t\t\t,\tcart = this.application.getCart()\n\t\t\t\t,\tlayout = this.application.getLayout()\n\t\t\t\t,\tcart_promise\n\t\t\t\t,\terror_message = _('Sorry, there is a problem with this Item and can not be purchased at this time. Please check back later.').translate()\n\t\t\t\t,\tisOptimistic = this.application.getConfig('addToCartBehavior') === 'showCartConfirmationModal';\n\n\t\t\t\tif (this.model.itemOptions && this.model.itemOptions.GIFTCERTRECIPIENTEMAIL)\n\t\t\t\t{\n\t\t\t\t\tif (!Backbone.Validation.patterns.email.test(this.model.itemOptions.GIFTCERTRECIPIENTEMAIL.label))\n\t\t\t\t\t{\n\t\t\t\t\t\tself.showError(_('Recipient email is invalid').translate());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isOptimistic)\n\t\t\t\t{\n\n\t\t\t\t\tcart.optimistic = {\n\t\t\t\t\t\titem: this.model\n\t\t\t\t\t,\tquantity: quantity\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (this.model.cartItemId)\n\t\t\t\t{\n\t\t\t\t\tcart_promise = cart.updateItem(this.model.cartItemId, this.model).done(function ()\n\t\t\t\t\t{\n\t\t\t\t\t\tif (cart.getLatestAddition())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (self.$containerModal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tself.$containerModal.modal('hide');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (layout.currentView instanceof require('Cart').Views.Detailed)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlayout.currentView.showContent();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tself.showError(error_message);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcart_promise = cart.addItem(this.model).done(function ()\n\t\t\t\t\t{\n\t\t\t\t\t\tif (cart.getLatestAddition())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (!isOptimistic)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlayout.showCartConfirmation();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tself.showError(error_message);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tif (isOptimistic)\n\t\t\t\t\t{\n\t\t\t\t\t\tcart.optimistic.promise = cart_promise;\n\t\t\t\t\t\tlayout.showCartConfirmation();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Checks for rollback items.\n\t\t\t\tcart_promise.fail(function (jqXhr)\n\t\t\t\t{\n\t\t\t\t\tvar error_details = null;\n\t\t\t\t\ttry \n\t\t\t\t\t{\n\t\t\t\t\t\tvar response = JSON.parse(jqXhr.responseText);\n\t\t\t\t\t\terror_details = response.errorDetails;\n\t\t\t\t\t} \n\t\t\t\t\tfinally \n\t\t\t\t\t{\n\t\t\t\t\t\tif (error_details && error_details.status === 'LINE_ROLLBACK')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar new_line_id = error_details.newLineId;\n\t\t\t\t\t\t\tself.model.cartItemId = new_line_id;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself.showError(_('We couldn\\'t process your item').translate());\n\n\t\t\t\t\t\tif (isOptimistic)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tself.showErrorInModal(_('We couldn\\'t process your item').translate());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// disalbes the btn while it's being saved then enables it back again\n\t\t\t\tif (e && e.target)\n\t\t\t\t{\n\t\t\t\t\tvar $target = jQuery(e.target).attr('disabled', true);\n\n\t\t\t\t\tcart_promise.always(function ()\n\t\t\t\t\t{\n\t\t\t\t\t\t$target.attr('disabled', false);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// view.refreshInterface\n\t\t// Computes and store the current state of the item and refresh the whole view, re-rendering the view at the end\n\t\t// This also updates the url, but it does not generates a hisrory point\n\t,\trefreshInterface: function ()\n\t\t{\n\t\t\tvar focused_element = this.$(':focus').get(0);\n\n\t\t\tthis.focusedElement = focused_element ? SC.Utils.getFullPathForElement(focused_element) : null;\n\n\t\t\tif (!this.inModal)\n\t\t\t{\n\t\t\t\tBackbone.history.navigate(this.options.baseUrl + this.model.getQueryString(), {replace: true});\n\t\t\t}\n\n\t\t\t// When there are dropdown options that overlapse with the \"Add to cart\" button\n\t\t\t// when those options are clicked, the \"Add to cart\" button is also clicked.\n\t\t\tsetTimeout(jQuery.proxy(this, 'showContent', {dontScroll: true}), 1);\n\t\t}\n\n\t\t// view.computeDetailsArea\n\t\t// this process what you have configured in itemDetails\n\t\t// executes the macro or reads the properties of the item\n\t,\tcomputeDetailsArea: function ()\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\tdetails = [];\n\n\t\t\t_.each(this.application.getConfig('itemDetails', []), function (item_details)\n\t\t\t{\n\t\t\t\tvar content = '';\n\n\t\t\t\tif (item_details.macro)\n\t\t\t\t{\n\t\t\t\t\tcontent = SC.macros[item_details.macro](self);\n\t\t\t\t}\n\t\t\t\telse if (item_details.contentFromKey)\n\t\t\t\t{\n\t\t\t\t\tcontent = self.model.get(item_details.contentFromKey);\n\t\t\t\t}\n\n\t\t\t\tif (jQuery.trim(content))\n\t\t\t\t{\n\t\t\t\t\tdetails.push({\n\t\t\t\t\t\tname: item_details.name\n\t\t\t\t\t,\topened: item_details.opened\n\t\t\t\t\t,\tcontent: content\n\t\t\t\t\t,\titemprop: item_details.itemprop\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.details = details;\n\t\t}\n\n\t\t// view.showInModal:\n\t\t// Takes care of showing the pdp in a modal, and changes the template, doesn't trigger the\n\t\t// after events because those are triggered by showContent\n\t,\tshowInModal: function (options)\n\t\t{\n\t\t\tthis.template = 'quick_view';\n\n\t\t\treturn this.application.getLayout().showInModal(this, options);\n\t\t}\n\n\t\t// Prepears the model and other internal properties before view.showContent\n\t,\tprepView: function ()\n\t\t{\n\t\t\tthis.title = this.model.get('_pageTitle');\n\t\t\tthis.page_header = this.model.get('_pageHeader');\n\n\t\t\tthis.computeDetailsArea();\n\t\t}\n\n\t,\tgetMetaKeywords: function ()\n\t\t{\n\t\t\t// searchkeywords is for alternative search keywords that customers might use to find this item using your Web store’s internal search\n\t\t\t// they are not for the meta keywords\n\t\t\t// return this.model.get('_keywords');\n\t\t\treturn this.getMetaTags().filter('[name=\"keywords\"]').attr('content') || '';\n\t\t}\n\n\t,\tgetMetaTags: function ()\n\t\t{\n\t\t\treturn jQuery('<head/>').html(\n\t\t\t\tjQuery.trim(\n\t\t\t\t\tthis.model.get('_metaTags')\n\t\t\t\t)\n\t\t\t).children('meta');\n\t\t}\n\n\t,\tgetMetaDescription: function ()\n\t\t{\n\t\t\treturn this.getMetaTags().filter('[name=\"description\"]').attr('content') || '';\n\t\t}\n\t\t// view.renderOptions:\n\t\t// looks for options placeholders and inject the rendered options in them\n\t,\trenderOptions: function ()\n\t\t{\n\t\t\tvar model = this.model\n\t\t\t,\tposible_options = model.getPosibleOptions();\n\n\t\t\t// this allow you to render 1 particular option in a diferent placeholder than the data-type=all-options\n\t\t\tthis.$('div[data-type=\"option\"]').each(function (index, container)\n\t\t\t{\n\t\t\t\tvar $container = jQuery(container).empty()\n\t\t\t\t,\toption_id = $container.data('cart-option-id')\n\t\t\t\t,\tmacro = $container.data('macro') || '';\n\n\t\t\t\t$container.append(model.renderOptionSelector(option_id, macro));\n\t\t\t});\n\n\t\t\t// Will render all options with the macros they were configured\n\t\t\tthis.$('div[data-type=\"all-options\"]').each(function (index, container)\n\t\t\t{\n\t\t\t\tvar $container = jQuery(container).empty()\n\t\t\t\t,\texclude = ($container.data('exclude-options') || '').split(',')\n\t\t\t\t,\tresult_html = '';\n\n\t\t\t\texclude = _.map(exclude, function (result)\n\t\t\t\t{\n\t\t\t\t\treturn jQuery.trim(result);\n\t\t\t\t});\n\n\t\t\t\t_.each(posible_options, function (posible_option, index)\n\t\t\t\t{\n\t\t\t\t\tif (!_.contains(exclude, posible_option.cartOptionId))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult_html += model.renderOptionSelector(posible_option, null, index);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t$container.append(result_html);\n\t\t\t});\n\t\t}\n\n\t\t// view.tabNavigationFix:\n\t\t// When you blur on an input field the whole page gets rendered,\n\t\t// so the function of hitting tab to navigate to the next input stops working\n\t\t// This solves that problem by storing a a ref to the current input\n\t,\ttabNavigationFix: function (e)\n\t\t{\n\t\t\tvar self = this;\n\t\t\tthis.hideError();\n\n\t\t\t// We need this timeout because sometimes a view is rendered several times and we don't want to loose the tabNavigation\n\t\t\tif (!this.tabNavigationTimeout)\n\t\t\t{\n\t\t\t\t// If the user is hitting tab we set tabNavigation to true, for any other event we turn ir off\n\t\t\t\tthis.tabNavigation = e.type === 'keydown' && e.which === 9;\n\t\t\t\tthis.tabNavigationUpsidedown = e.shiftKey;\n\t\t\t\tthis.tabNavigationCurrent = SC.Utils.getFullPathForElement(e.target);\n\t\t\t\tif (this.tabNavigation)\n\t\t\t\t{\n\t\t\t\t\tthis.tabNavigationTimeout = setTimeout(function ()\n\t\t\t\t\t{\n\t\t\t\t\t\tself.tabNavigationTimeout = null;\n\t\t\t\t\t\tthis.tabNavigation = false;\n\t\t\t\t\t},5);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t,\tshowContent: function (options)\n\t\t{\n\t\t\tvar self = this;\n\n\t\t\t// Once the showContent has been called, this make sure that the state is preserved\n\t\t\t// REVIEW: the following code might change, showContent should recieve an options parameter\n\t\t\tthis.application.getLayout().showContent(this, options && options.dontScroll).done(function (view)\n\t\t\t{\n\t\t\t\tself.afterAppend();\n\n\t\t\t\t// related items\n\t\t\t\tvar related_items_placeholder = view.$('[data-type=\"related-items-placeholder\"]');\n\t\t\t\t// check if there is a related items placeholders\n\t\t\t\tif(related_items_placeholder.size() > 0)\n\t\t\t\t{\n\t\t\t\t\tthis.application.showRelatedItems && this.application.showRelatedItems(view.model.get('internalid'), related_items_placeholder);\n\t\t\t\t}\n\n\t\t\t\t// correlated items\n\t\t\t\tvar correlated_items_placeholder = view.$('[data-type=\"correlated-items-placeholder\"]');\n\t\t\t\t// check if there is a related items placeholders\n\t\t\t\tif(correlated_items_placeholder.size() > 0)\n\t\t\t\t{\n\t\t\t\t\tthis.application.showCorrelatedItems && this.application.showCorrelatedItems(view.model.get('internalid'), correlated_items_placeholder);\n\t\t\t\t}\n\n\t\t\t\t// product list place holder.\n\t\t\t\tvar product_lists_placeholder = view.$('[data-type=\"product-lists-control\"]');\n\n\t\t\t\tif (product_lists_placeholder.size() > 0)\n\t\t\t\t{\n\t\t\t\t\tthis.application.ProductListModule.renderProductLists(view);\n\t\t\t\t}\n                \n                // product reviews placeholder\n                var product_reviews_placeholder = view.$('[data-type=\"review-list-placeholder\"]');\n                if (product_reviews_placeholder.size() > 0)\n                {\n                    this.application.showProductReviews(view.model, options, product_reviews_placeholder);\n                }\n                \n\t\t\t});\n\t\t}\n\n\t,\tafterAppend: function ()\n\t\t{\n\t\t\tthis.renderOptions();\n\t\t\tthis.focusedElement && this.$(this.focusedElement).focus();\n\n\t\t\tif (this.tabNavigation)\n\t\t\t{\n\t\t\t\tvar current_index = this.$(':input').index(this.$(this.tabNavigationCurrent).get(0))\n\t\t\t\t,\tnext_index = this.tabNavigationUpsidedown ? current_index - 1 : current_index + 1;\n\n\t\t\t\tthis.$(':input:eq('+ next_index +')').focus();\n\t\t\t}\n\n\t\t\tthis.storeColapsiblesStateCalled ? this.resetColapsiblesState() : this.storeColapsiblesState();\n\t\t\tthis.application.getUser().addHistoryItem && this.application.getUser().addHistoryItem(this.model);\n\n\t\t\tif (this.inModal)\n\t\t\t{\n\t\t\t\tvar $link_to_fix = this.$el.find('[data-name=\"view-full-details\"]');\n\t\t\t\t$link_to_fix.mousedown();\n\t\t\t\t$link_to_fix.attr('href', $link_to_fix.attr('href') + this.model.getQueryString());\n\t\t\t}\n\t\t}\n\n\t\t// view.setOption:\n\t\t// When a selection is change, this computes the state of the item to then refresh the interface.\n\t,\tsetOption: function (e)\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\t$target = jQuery(e.target)\n\t\t\t,\tvalue = $target.val() || $target.data('value') || null\n\t\t\t,\tcart_option_id = $target.closest('[data-type=\"option\"]').data('cart-option-id');\n\n\t\t\t// prevent from going away\n\t\t\te.preventDefault();\n\n\t\t\t// if option is selected, remove the value\n\t\t\tif ($target.data('active'))\n\t\t\t{\n\t\t\t\tvalue = null;\n\t\t\t}\n\n\t\t\t// it will fail if the option is invalid\n\t\t\ttry\n\t\t\t{\n\t\t\t\tthis.model.setOption(cart_option_id, value);\n\t\t\t}\n\t\t\tcatch (error)\n\t\t\t{\n\t\t\t\t// Clears all matrix options\n\t\t\t\t_.each(this.model.getPosibleOptions(), function (option)\n\t\t\t\t{\n\t\t\t\t\toption.isMatrixDimension && self.model.setOption(option.cartOptionId, null);\n\t\t\t\t});\n\n\t\t\t\t// Sets the value once again\n\t\t\t\tthis.model.setOption(cart_option_id, value);\n\t\t\t}\n\n\t\t\tthis.refreshInterface(e);\n\n\t\t\t// need to trigger an afterAppendView event here because, like in the PDP, we are really appending a new view for the new selected matrix child\n\t\t\tif (this.$containerModal)\n\t\t\t{\n\t\t\t\tthis.application.getLayout().trigger('afterAppendView', this);\n\t\t\t}\n\t\t}\n\t});\n});\n\n\n// ItemDetails.js\n// --------------\n// Groups the different components of the Module\ndefine('ItemDetails'\n,\t['ItemDetails.Model', 'ItemDetails.Collection', 'ItemDetails.View', 'ItemDetails.Router']\n,\tfunction (Model, Collection, View, Router)\n{\n\t'use strict';\n\n\treturn {\n\t\tView: View\n\t,\tModel: Model\n\t,\tRouter: Router\n\t,\tCollection: Collection\n\t,\tmountToApp: function (application, options)\n\t\t{\n\t\t\t// Wires the config options to the url of the model \n\t\t\tModel.prototype.searchApiMasterOptions = application.getConfig('searchApiMasterOptions.itemDetails', {});\n\t\t\t// and the keymapping\n\t\t\tModel.prototype.keyMapping = application.getConfig('itemKeyMapping', {});\n\n\t\t\tModel.prototype.itemOptionsConfig = application.getConfig('itemOptions', []);\n\n\t\t\tModel.prototype.itemOptionsDefaultMacros = application.getConfig('macros.itemOptions', {});\n\t\t\t\n\t\t\tif (options && options.startRouter)\n\t\t\t{\n\t\t\t\treturn new Router({application: application, model: Model, view: View});\n\t\t\t}\n\t\t}\n\t};\n});\n\ndefine('ItemImageGallery', ['ItemDetails.View'], function (ItemDetailsView)\n{\n\t'use strict';\n\n\tvar ItemImageGallery = function ItemImageGallery (options)\n\t{\n\t\tthis.options = options;\n\t\tthis.images = options.images;\n\t\tthis.$target = options.$target;\n\n\t\tthis.intitialize();\n\t};\n\n\t_.extend(ItemImageGallery.prototype, {\n\n\t\tintitialize: function ()\n\t\t{\n\t\t\tif (!SC.ENVIRONMENT.isTouchEnabled)\n\t\t\t{\n\t\t\t\tthis.initZoom();\n\t\t\t}\n\n\t\t\tthis.$slider = this.initSlider();\n\n\t\t\treturn this;\n\t\t}\n\n\t,\thasSameImages: function (images)\n\t\t{\n\t\t\treturn this.images.length === images.length && _.difference(this.images, images).length === 0;\n\t\t}\n\n\t,\tzoomImageCallback: function ()\n\t\t{\n\t\t\tvar $this = jQuery(this);\n\n\t\t\tif ($this.width() <= $this.parent().width())\n\t\t\t{\n\t\t\t\t$this.remove();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t,\tinitZoom: function ()\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\timages = this.images;\n\n\t\t\tthis.$target.find('[data-zoom]').each(function (slide_index)\n\t\t\t{\n\t\t\t\tjQuery(this).zoom({\n\t\t\t\t\turl: ImageGalleryModule.resizeZoom(images[slide_index].url)\n\t\t\t\t,\tcallback: self.zoomImageCallback\n\t\t\t\t});\n\t\t\t});\n\n\t\t\treturn this;\n\t\t}\n\n\t,\tbuildSliderPager: function (slide_index)\n\t\t{\n\t\t\tvar image = this.images[slide_index];\n\t\t\treturn '<img src=\"' + ImageGalleryModule.resizeThumb(image.url) + '\" alt=\"' + image.altimagetext + '\">';\n\t\t}\n\n\t,\tinitSlider: function ()\n\t\t{\n\t\t\treturn this.$target.find('[data-slider]').bxSlider({\n\t\t\t\tbuildPager: jQuery.proxy(this.buildSliderPager, this)\n\t\t\t,\tstartSlide: this.options.startSlide || 0\n\t\t\t,\tforceStart: this.options.forceStart\n\t\t\t,\tadaptiveHeight: true\n\t\t\t});\n\t\t}\n\t});\n\n\tvar ImageGalleryModule = {\n\n\t\tItemImageGallery: ItemImageGallery\n\n\t,\tresizeZoom: function (url)\n\t\t{\n\t\t\treturn this.resizeImage(url, 'zoom');\n\t\t}\n\n\t,\tresizeThumb: function (url)\n\t\t{\n\t\t\treturn this.resizeImage(url, 'tinythumb');\n\t\t}\n\n\t,\tgetStartSlide: function (view_gallery, images)\n\t\t{\n\t\t\t// Slider may not be applicable to the view gallery.\n\t\t\tif (view_gallery && view_gallery.$slider.length && view_gallery instanceof ItemImageGallery && view_gallery.hasSameImages(images))\n\t\t\t{\n\t\t\t\treturn view_gallery.$slider.getCurrentSlide();\n\t\t\t}\n\t\t}\n\n\t,\tinitialize: function (view)\n\t\t{\n\t\t\tif (view instanceof ItemDetailsView)\n\t\t\t{\n\t\t\t\tvar images = view.model.get('_images')\n\t\t\t\t,\tstart_slide = ImageGalleryModule.getStartSlide(view.imageGallery, images);\n\n\t\t\t\tview.imageGallery = new ImageGalleryModule.ItemImageGallery({\n\t\t\t\t\timages: images\n\t\t\t\t,\t$target: view.$('.item-image-gallery') || view.$el\n\t\t\t\t,\tstartSlide: start_slide\n\t\t\t\t,\tforceStart: !_.isUndefined(start_slide)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t,\tmountToApp: function (application)\n\t\t{\n\t\t\tapplication.getConfig('macros').itemDetailsImage = 'itemImageGallery';\n\n\t\t\tif (SC.ENVIRONMENT.jsEnvironment === 'browser')\n\t\t\t{\n\t\t\t\tthis.resizeImage = application.resizeImage;\n\n\t\t\t\tapplication.getLayout().on('afterAppendView', this.initialize);\n\t\t\t}\n\t\t}\n\t};\n\n\treturn ImageGalleryModule;\n});\n\n// ItemOptionsHelper.js\n// --------------------\n// Defines function that will be extended into ItemDetails.Model\ndefine('ItemOptionsHelper', function ()\n{\n\t'use strict';\n\n\tvar ItemOptionsHelper = {\n\t\t// itemOptionsHelper.renderOptionSelected:\n\t\t// Renders the option defaulting to the \"selected\" macro\n\t\trenderOptionSelected: function (option_name_or_option_config, macro) \n\t\t{\n\t\t\t// Gets the configutarion, uses it if passed or looks for it if the name is passed\n\t\t\tvar option = _.isObject(option_name_or_option_config) ? option_name_or_option_config : this.getPosibleOptionByCartOptionId(option_name_or_option_config)\n\t\t\t// gets the selected value from the macro\n\t\t\t,\tselected_value = this.getOption(option.cartOptionId);\n\t\t\t// Uses the passed in macro or the default macro selector \n\t\t\tmacro = macro || option.macros.selected;\n\n\t\t\t// if no value is selected just return an empty string\n\t\t\tif (!selected_value)\n\t\t\t{\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\t\n\t\t\treturn SC.macros[macro](option, selected_value, this);\n\t\t}\n\n\t\t// itemOptionsHelper.renderAllOptionSelected:\n\t\t// Renders all the options defaulting to the \"selected\" macro\n\t,\trenderAllOptionSelected: function (options_to_render)\n\t\t{\n\t\t\tvar self = this;\n\n\t\t\toptions_to_render = options_to_render || this.getPosibleOptions();\n\n\t\t\treturn _.reduce(\n\t\t\t\toptions_to_render\n\t\t\t,\tfunction (memo, option) \n\t\t\t\t{\n\t\t\t\t\treturn memo + self.renderOptionSelected(option);\n\t\t\t\t}\n\t\t\t,\t''\n\t\t\t);\n\t\t}\n\n\t\t// itemOptionsHelper.renderOptionSelector:\n\t\t// Renders the option defaulting to the \"selector\" macro\n\t,\trenderOptionSelector: function (option_name_or_option_config, macro, index)\n\t\t{\n\t\t\t// Gets the configutarion, uses it if passed or looks for it if the name is passed\n\t\t\tvar option = _.isObject(option_name_or_option_config) ? option_name_or_option_config : this.getPosibleOptionByCartOptionId(option_name_or_option_config)\n\t\t\t// gets the selected value from the macro\n\t\t\t,\tselected_value = this.getOption(option.cartOptionId);\n\t\t\t// Uses the passed in macro or the default macro selector \n\t\t\tmacro = macro || option.macros.selector;\n\n\t\t\t// If it's a matrix it checks for valid combinations \n\t\t\tif (option.isMatrixDimension)\n\t\t\t{\n\t\t\t\tvar available = this.getValidOptionsFor(option.itemOptionId);\n\t\t\t\t_.each(option.values, function (value)\n\t\t\t\t{\n\t\t\t\t\tvalue.isAvailable = _.contains(available, value.label);\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\treturn SC.macros[macro](option, selected_value, this, index);\n\t\t}\n\n\t\t// itemOptionsHelper.renderOptionSelected:\n\t\t// Renders the option defaulting to the \"selected\" macro\n\t,\trenderOptionsGridSelector: function (options, macro) \n\t\t{\n\t\t\t// Gets the configutarion, uses it if passed or looks for it if the name is passed\n\t\t\tvar option_h = options.horizontal\n\t\t\t,\toption_v = options.vertical\n\t\t\t,\tavailable = false;\n\n\t\t\tif (option_h.isMatrixDimension)\n\t\t\t{\n\t\t\t\tavailable = this.getValidOptionsFor(option_h.itemOptionId);\n\n\t\t\t\t_.each(option_h.values, function (value)\n\t\t\t\t{\n\t\t\t\t\tvalue.isAvailable = _.contains(available, value.label);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (option_v.isMatrixDimension)\n\t\t\t{\n\t\t\t\tavailable = this.getValidOptionsFor(option_v.itemOptionId);\n\t\t\t\t\n\t\t\t\t_.each(option_v.values, function (value)\n\t\t\t\t{\n\t\t\t\t\tvalue.isAvailable = _.contains(available, value.label);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn SC.macros[macro](option_h, option_v, this);\n\t\t}\n\n\t\t// itemOptionsHelper.renderAllOptionSelector:\n\t\t// Renders all the options defaulting to the \"selector\" macro\n\t,\trenderAllOptionSelector: function (options_to_render)\n\t\t{\n\t\t\tvar self = this;\n\n\t\t\toptions_to_render = options_to_render || this.getPosibleOptions();\n\n\t\t\treturn _.reduce(\n\t\t\t\toptions_to_render\n\t\t\t,\tfunction (memo, option) \n\t\t\t\t{\n\t\t\t\t\treturn memo + self.renderOptionSelector(option);\n\t\t\t\t}\n\t\t\t,\t''\n\t\t\t);\n\t\t}\n\n\t\t// itemOptionsHelper.getValidOptionsFor:\n\t\t// returns a list of all valid options for the option you passed in\n\t,\tgetValidOptionsFor: function (item_option_id)\n\t\t{\n\t\t\tvar selection = this.getMatrixOptionsSelection();\n\t\t\tdelete selection[item_option_id];\n\t\t\t\n\t\t\treturn _.uniq(_.map(this.getSelectedMatrixChilds(selection), function (model)\n\t\t\t{\n\t\t\t\treturn model.get(item_option_id);\n\t\t\t}));\n\t\t}\n\n\t\t// itemOptionsHelper.isSelectionComplete\n\t\t// returns true if all mandatory options are set,\n\t\t// if it's a mtrix it also checks that there is only one sku sleected\n\t,\tisSelectionComplete: function ()\n\t\t{\n\t\t\tvar posible_options = this.getPosibleOptions()\n\t\t\t,\tis_matrix = false;\n\t\t\t\n\t\t\t// Checks all mandatory fields are set\n\t\t\t// in the mean time \n\t\t\tfor (var i = 0; i < posible_options.length; i++)\n\t\t\t{\n\t\t\t\tvar posible_option = posible_options[i];\n\t\t\t\t\n\t\t\t\tis_matrix = is_matrix || posible_option.isMatrixDimension;\n\t\t\t\t\n\t\t\t\tif (posible_option.isMandatory && !this.getOption(posible_option.cartOptionId))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// If its matrix its expected that only 1 item is selected, not more than one nor 0 \n\t\t\tif (is_matrix && this.getSelectedMatrixChilds().length !== 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// itemOptionsHelper.getPosibleOptionsFor:\n\t\t// gets the configuration for one option by its cart id.\n\t,\tgetPosibleOptionByCartOptionId: function (cart_option_id)\n\t\t{\n\t\t\treturn _.where(this.getPosibleOptions(), {cartOptionId: cart_option_id})[0];\n\t\t}\n\n\t\t// itemOptionsHelper.getPosibleOptionsFor:\n\t\t// gets the configuration for one option by its url component.\n\t,\tgetPosibleOptionByUrl: function (url)\n\t\t{\n\t\t\treturn _.where(this.getPosibleOptions(), {url: url})[0];\n\t\t}\n\n\t\t// itemOptionsHelper.getPosibleOptions\n\t\t// returns an array of all the posible options with values and information \n\t,\tgetPosibleOptions: function () \n\t\t{\n\t\t\tif (this.cachedPosibleOptions)\n\t\t\t{\n\t\t\t\treturn this.cachedPosibleOptions;\n\t\t\t}\n\n\t\t\tvar result = [];\n\t\t\tif (this.get('_optionsDetails') && this.get('_optionsDetails').fields)\n\t\t\t{\n\t\t\t\tvar self = this\n\t\t\t\t\t// Prepeares a simple map of the configuration \n\t\t\t\t,\toptions_config_map = {};\n\n\t\t\t\t_.each(this.itemOptionsConfig, function (option)\n\t\t\t\t{\n\t\t\t\t\tif (option.cartOptionId)\n\t\t\t\t\t{\n\t\t\t\t\t\toptions_config_map[option.cartOptionId] = option;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// if you are an child in the cart it then checks for the options of the parent\n\t\t\t\tvar fields = this.get('_matrixParent').get('_id') ? this.get('_matrixParent').get('_optionsDetails').fields : this.get('_optionsDetails').fields;\n\n\t\t\t\t// Walks the _optionsDetails to generate a standar options responce.\n\t\t\t\t_.each(fields, function (option_details)\n\t\t\t\t{\n\t\t\t\t\tvar option = {\n\t\t\t\t\t\tlabel: option_details.label\n\t\t\t\t\t,\tvalues: option_details.values\n\t\t\t\t\t,\ttype: option_details.type\n\t\t\t\t\t,\tcartOptionId: option_details.internalid\n\t\t\t\t\t,\titemOptionId: option_details.sourcefrom || ''\n\t\t\t\t\t,\tisMatrixDimension: option_details.ismatrixdimension || false\n\t\t\t\t\t,\tisMandatory: option_details.ismandatory || false\n\t\t\t\t\t,\tmacros: {}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Makes sure all options are availabe by defualt\n\t\t\t\t\t_.each(option.values, function (value)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue.isAvailable = true;\n\t\t\t\t\t});\n\n\t\t\t\t\t// Merges this with the configuration object \n\t\t\t\t\tif (options_config_map[option.cartOptionId])\n\t\t\t\t\t{\n\t\t\t\t\t\toption = _.extend(option, options_config_map[option.cartOptionId]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (option_details.ismatrixdimension)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar item_values = self.get('_matrixChilds').pluck(option.itemOptionId);\n\n\t\t\t\t\t\toption.values = _.filter(option.values, function (value)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (value.internalid)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn _.contains(item_values, value.label);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (self.itemOptionsDefaultMacros)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Sets macros for this option\n\t\t\t\t\t\tif (!option.macros.selector)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\toption.macros.selector = self.itemOptionsDefaultMacros.selectorByType[option.type] ? self.itemOptionsDefaultMacros.selectorByType[option.type] : self.itemOptionsDefaultMacros.selectorByType['default']; // using .default breaks ie :(\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!option.macros.selected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\toption.macros.selected = self.itemOptionsDefaultMacros.selectedByType[option.type] ? self.itemOptionsDefaultMacros.selectedByType[option.type] : self.itemOptionsDefaultMacros.selectedByType['default']; // using .default breaks ie :(\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Makes sure the url key of the object is set, \n\t\t\t\t\t// otherways sets it to the cartOptionId (it should allways be there)\n\t\t\t\t\tif (!option.url)\n\t\t\t\t\t{\n\t\t\t\t\t\toption.url = option.cartOptionId;\n\t\t\t\t\t}\n\n\t\t\t\t\tresult.push(option);\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// Since this is not going to change in the life of the model we can cache it\n\t\t\t\tthis.cachedPosibleOptions = result;\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t}\n\n\t,\tisCombinationAvailable: function (selection)\n\t\t{\n\t\t\treturn _.findWhere(_.pluck(this.getSelectedMatrixChilds(), 'attributes'), selection);\n\t\t}\n\n\t\t// itemOptionsHelper.isProperlyConfigured\n\t\t// returns true if all matrix options are mapped to the cart options \n\t,\tisProperlyConfigured: function ()\n\t\t{\n\t\t\tvar options = this.getPosibleOptions()\n\t\t\t,\toption = null;\n\n\t\t\tif (options && options.length)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < options.length; i++)\n\t\t\t\t{\n\t\t\t\t\toption = options[i];\n\n\t\t\t\t\tif (option.isMatrixDimension && !option.itemOptionId)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t}\n\t\t\t// If you omit item options from the fieldset and use matrix, that an issue.\n\t\t\telse if (this.get('_matrixChilds') && this.get('_matrixChilds').length)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t// itemOptionsHelper.getMatrixOptionsSelection\n\t\t// returns an object of all the matrix options with its setted values\n\t,\tgetMatrixOptionsSelection: function () \n\t\t{\n\t\t\tvar matrix_options = _.where(this.getPosibleOptions(), {isMatrixDimension: true})\n\t\t\t,\tresult = {}\n\t\t\t,\tself = this;\n\n\t\t\t_.each(matrix_options, function (matrix_option)\n\t\t\t{\n\t\t\t\tvar value = self.getOption(matrix_option.cartOptionId);\n\t\t\t\tif (value && value.label)\n\t\t\t\t{\n\t\t\t\t\tresult[matrix_option.itemOptionId] = value.label;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn result; \n\t\t}\n\n\t\t// itemOptionsHelper.getSelectedMatrixChilds\n\t\t// Returns all the children of a matrix that complies with the current or passed in selection\n\t,\tgetSelectedMatrixChilds: function (selection) \n\t\t{\n\t\t\tselection = selection || this.getMatrixOptionsSelection();\n\t\t\tvar selection_key = JSON.stringify(selection);\n\n\t\t\t// Creates the Cache container\n\t\t\tif (!this.matrixSelectionCache)\n\t\t\t{\n\t\t\t\tthis.matrixSelectionCache = {};\n\t\t\t}\n\n\t\t\tif (!this.get('_matrixChilds'))\n\t\t\t{\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\t// Caches the entry for the item\n\t\t\tif (!this.matrixSelectionCache[selection_key])\n\t\t\t{\n\t\t\t\tthis.matrixSelectionCache[selection_key] = _.values(selection).length ? this.get('_matrixChilds').where(selection) : this.get('_matrixChilds').models;\n\t\t\t}\n\t\t\t\n\t\t\treturn this.matrixSelectionCache[selection_key];\n\t\t}\n\t\t\n\t\t// itemOptionsHelper.getQueryString\n\t\t// Computes all the selected options and transforms them into a url query string\n\t,\tgetQueryString: function () \n\t\t{\n\t\t\treturn this.getQueryStringWithQuantity(this.get('quantity'));\n\t\t}\n\n\t\t// itemOptionsHelper.getQueryStringWithQuantity\n\t\t// Computes all the selected options and transforms them into a url query string with a given quantity\n\t,\tgetQueryStringWithQuantity: function (quantity) \n\t\t{\n\t\t\tvar self = this\n\t\t\t,\tresult = '?quantity=' + (quantity || 1);\n\n\t\t\t_.each (this.getPosibleOptions(), function (option)\n\t\t\t{\n\t\t\t\tvar value = self.getOption(option.cartOptionId);\n\t\t\t\tif (value)\n\t\t\t\t{\n\t\t\t\t\tresult += '&' + option.url + '=' + encodeURIComponent(value.internalid);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn result;\n\t\t}\n\n\t\t// itemOptionsHelper.parseQueryStringOptions\n\t\t// Given a url query string, it sets the options in the model\n\t,\tparseQueryStringOptions: function (options) \n\t\t{\n\t\t\tvar self = this;\n\t\t\t_.each(options, function (value, name)\n\t\t\t{\n\t\t\t\tif (name === 'quantity')\n\t\t\t\t{\n\t\t\t\t\tself.setOption('quantity', value);\n\t\t\t\t}\n\t\t\t\telse if (name === 'cartitemid')\n\t\t\t\t{\n\t\t\t\t\tself.cartItemId = value;\n\t\t\t\t}\n\t\t\t\telse if (value && name)\n\t\t\t\t{\n\t\t\t\t\tvalue = decodeURIComponent(value);\n\t\t\t\t\tvar option = self.getPosibleOptionByUrl(name);\n\n\t\t\t\t\tif (option)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (option.values)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// We check for both Label and internal id because we detected that sometimes they return one or the other\n\t\t\t\t\t\t\tvalue = _.where(option.values, {label: value})[0] || _.where(option.values, {internalid: value})[0];\n\t\t\t\t\t\t\tself.setOption(option.cartOptionId, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tself.setOption(option.cartOptionId, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\treturn ItemOptionsHelper;\n});\n\n\n// ItemRelations.Correlated.Model.js\n// ---------------\ndefine('ItemRelations.Correlated.Model', ['Session'], function (Session)\n{\n\t'use strict';\n\t\n\tvar original_fetch = Backbone.CachedModel.prototype.fetch;\n\n\treturn Backbone.CachedModel.extend({\n\t\t\n\t\turl: function()\n\t\t{\n\t\t\tvar url = _.addParamsToUrl(\n\t\t\t\t'/api/items'\n\t\t\t,\t_.extend(\n\t\t\t\t\t{}\n\t\t\t\t,\tthis.searchApiMasterOptions\n\t\t\t\t,\tSession.getSearchApiParams()\n\t\t\t\t)\n\t\t\t);\n\t\t\t\n\t\t\treturn url;\n\t\t}\n\n\t\t// model.fetch\n\t\t// -----------\n\t\t// We need to make sure that the cache is set to true, so we wrap it\n\t,\tfetch: function (options)\n\t\t{\n\t\t\toptions = options || {};\n\n\t\t\toptions.cache = true;\n\n\t\t\treturn original_fetch.apply(this, arguments);\n\t\t}\n\t});\n});\n\n// ItemRelations.Related.Model.js\n// ---------------\ndefine('ItemRelations.Related.Model', ['Session'], function (Session)\n{\n\t'use strict';\n\t\n\tvar original_fetch = Backbone.CachedModel.prototype.fetch;\n\n\treturn Backbone.CachedModel.extend({\n\t\t\n\t\turl: function()\n\t\t{\n\t\t\tvar url = _.addParamsToUrl(\n\t\t\t\t'/api/items'\n\t\t\t,\t_.extend(\n\t\t\t\t\t{}\n\t\t\t\t,\tthis.searchApiMasterOptions\n\t\t\t\t,\tSession.getSearchApiParams()\n\t\t\t\t)\n\t\t\t);\n\t\t\t\n\t\t\treturn url;\n\t\t}\n\n\t\t// model.fetch\n\t\t// -----------\n\t\t// We need to make sure that the cache is set to true, so we wrap it\n\t,\tfetch: function (options)\n\t\t{\n\t\t\toptions = options || {};\n\n\t\t\toptions.cache = true;\n\n\t\t\treturn original_fetch.apply(this, arguments);\n\t\t}\n\t});\n});\n\n// ItemRelations.js\n// --------------\n// Handles the different relations between items\ndefine('ItemRelations'\n,\t['ItemRelations.Related.Model', 'ItemRelations.Correlated.Model', 'ItemDetails.Model']\n,\tfunction (ItemsRelatedModel, ItemsCorrelatedModel, ItemDetailsModel)\n{\n\t'use strict';\n\n\tvar filter_related = function (original_items, related_model_items)\n\t{\n\t\tvar related_items = related_model_items.items\n\t\t,\tfiltered_related_items = [];\n\n\t\t// check if items aren't repeated and items that aren't already in the original items list (parameter)\n\t\t_.each(related_items, function(item){\n\t\t\tvar related_array = item.relateditems_detail;\n\t\t\tif(related_array)\n\t\t\t{\n\t\t\t\t_.each(related_array, function(related) {\n\t\t\t\t\tif(_.indexOf(original_items, related.internalid) < 0 && !_.find(filtered_related_items, function(filtered){ return filtered.get('internalid') === related.internalid; }))\n\t\t\t\t\t{\n\t\t\t\t\t\tfiltered_related_items.push(new ItemDetailsModel(related));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn filtered_related_items;\n\t};\n\n\tvar ItemRelations = {\n\t\tfilterRelated: filter_related\n\t};\n\n\treturn {\n\t\tItemRelations : ItemRelations\n\t,\tItemsRelatedModel : ItemsRelatedModel\n\t,\tItemsCorrelatedModel: ItemsCorrelatedModel\n\t,\tmountToApp: function (application)\n\t\t{\n\t\t\t// Wires the config options to the url of the models \n\t\t\tItemsRelatedModel.prototype.searchApiMasterOptions = application.getConfig('searchApiMasterOptions.relatedItems', {});\n\t\t\tItemsCorrelatedModel.prototype.searchApiMasterOptions = application.getConfig('searchApiMasterOptions.correlatedItems', {});\n\n\t\t\tapplication.showRelatedItems = function (items, $placeholder)\n\t\t\t{\n\t\t\t\t// check if items is a single value (for instance, item detail page)\n\t\t\t\t// if its an array, sort the ids in ascending order for better cache collision\n\t\t\t\tvar item_ids = items instanceof Array ? _.sortBy(items, function (id){return id;}) : [items];\n\n\t\t\t\tvar related_items_model = new ItemsRelatedModel()\n\t\t\t\t,\titems_data = {data:{id: item_ids.join(',')}};\n\n\t\t\t\trelated_items_model.fetch(items_data).done(function(model){\n\t\t\t\t\t\n\t\t\t\t\tvar filtered_related_items = filter_related(item_ids, model);\n\n\t\t\t\t\t// render the related items macro if there are any\n\t\t\t\t\tif(filtered_related_items.length)\n\t\t\t\t\t{\n\t\t\t\t\t\t$placeholder.append(\n\t\t\t\t\t\t\tSC.macros.relatedItems(filtered_related_items, application) \n\t\t\t\t\t\t);\t\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tapplication.showCorrelatedItems = function (items, $placeholder)\n\t\t\t{\n\t\t\t\t// check if items is a single value (for instance, item detail page)\n\t\t\t\tvar item_ids = items instanceof Array ? _.sortBy(items, function (id){return id;}) : [items];\n\n\t\t\t\tvar correlated_items_model = new ItemsCorrelatedModel()\n\t\t\t\t,\titems_data = {data:{id: item_ids.join(',')}};\n\n\t\t\t\tcorrelated_items_model.fetch(items_data).done(function(model){\n\t\t\t\t\t\n\t\t\t\t\tvar filtered_related_items = filter_related(item_ids, model);\n\n\t\t\t\t\t// render the related items macro if there are any\n\t\t\t\t\tif(filtered_related_items.length)\n\t\t\t\t\t{\n\t\t\t\t\t\t$placeholder.append(\n\t\t\t\t\t\t\tSC.macros.correlatedItems(filtered_related_items, application) \n\t\t\t\t\t\t);\t\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\t};\n});\n\n// ListHeader:\n// View used to manipulate a collection\n// by adding sorting and filtering capabilities\n// based on the sort and filter options from the collection\ndefine('ListHeader',  function ()\n{\n\t'use strict';\n\n\t//Class and instance methods definition\n\tvar ListHeader = Backbone.View.extend({\n\n\t\ttemplate: 'list_header'\n\n\t,\tevents: {\n\t\t\t'change [data-action=\"filter\"]': 'filterHandler'\n\t\t,\t'change [data-action=\"sort\"]': 'sortHandler'\n\t\t,\t'click [data-action=\"toggle-sort\"]': 'toggleSortHandler'\n\t\t,\t'change [data-action=\"select-all\"]': 'selectAll'\n\t\t,\t'change [data-action=\"unselect-all\"]': 'unselectAll'\n\t\t,\t'change [data-action=\"range-filter\"]': 'rangeFilterHandler'\n\t\t,\t'click [data-action=\"toggle-filters\"]': 'toggleFilters'\n\t\t}\n\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tvar view = options.view;\n\n\t\t\t_.extend(this, options);\n\n            // true only if the module using list header is the one responsible of fetching the collection for the first time (optional)\n            this.avoidFirstFetch = options.avoidFirstFetch;\n\n            // the original count of items of the collection without filtering (optional)\n            this.totalCount = options.totalCount;\n\n\t\t\t// store the range (date) filter options\n\t\t\tthis.rangeFilterOptions = view.rangeFilterOptions || {};\n\n\t\t\t// Label for range filter (optional)\n\t\t\tthis.rangeFilterLabel = options.rangeFilterLabel;\n\n\t\t\t// after the parent view is rendered\n\t\t\tview.on('afterViewRender', jQuery.proxy(this, 'appendToView'));\n\n\t\t\t// default value of filter collapse\n\t\t\tthis.expandedStatePath = this.view.className ? this.view.className + '.expanded' : 'state.expanded';\n\t\t\tListHeader.setPersistedState(this.expandedStatePath, ListHeader.getPersistedState(this.expandedStatePath, false));\n\t\t}\n\n\t,\ttoggleFilters: function (e)\n\t\t{\n\t\t\te.preventDefault();\n\t\t\tvar current_target = jQuery(e.currentTarget)\n\t\t\t,\tfilter_icon = current_target.find('.filter-icon')\n\t\t\t,\tis_expanded = ListHeader.getPersistedState(this.expandedStatePath, false);\n\n\t\t\tis_expanded ? filter_icon.addClass('icon-chevron-down').removeClass('icon-chevron-up') : filter_icon.removeClass('icon-chevron-down').addClass('icon-chevron-up');\n\t\t\tListHeader.setPersistedState(this.expandedStatePath, !is_expanded);\n\n\t\t\tcurrent_target.parents('[data-type=\"accordion\"]')\n\t\t\t\t.toggleClass('well')\n\t\t\t\t.toggleClass('facet-header-white-well')\n\t\t\t\t.find('[data-type=\"accordion-body\"]').stop().slideToggle();\n\t\t}\n\n\t,\tgetExpanded: function ()\n\t\t{\n\t\t\treturn ListHeader.getPersistedState(this.expandedStatePath, false);\n\t\t}\n\n\t,\tappendToView: function (view)\n\t\t{\n\t\t\tvar $place_holder = view.$el.find('[data-type=\"list-header-placeholder\"]');\n\n\t\t\t// we render the ListHeader view\n\t\t\tthis.render();\n\n\t\t\t// prepend it to the parent\n\t\t\tthis.$el.prependTo($place_holder.length ? $place_holder : view.$el);\n\t\t\t// and add the event listeners\n\t\t\tthis.delegateEvents();\n\t\t}\n\n\t\t//returns the initial date range to apply\n\t,\tgetInitialDateRange: function (url_range)\n\t\t{\n\t\t\tif (this.rangeFilter)\n\t\t\t{\n\t\t\t\tvar date_range_fromUrl = this.getRangeFromUrl(url_range);\n\n\t\t\t\tif (date_range_fromUrl.from || date_range_fromUrl.to)\n\t\t\t\t{\n\t\t\t\t\t// By doing this, I can be sure I'm not entering out of range values in the filter input fields.\n\t\t\t\t\t// However, if invalid values are entered, they are not considered for filtering.\n\t\t\t\t\tthis.validateDateRange(date_range_fromUrl);\n\n\t\t\t\t\treturn date_range_fromUrl;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar quantityDays = this.notUseDefaultDateRange ?\n\t\t\t\t\t\t\t\t\t\tthis.quantityDaysRange :\n\t\t\t\t\t\t\t\t\t\tthis.application.getConfig('filterRangeQuantityDays');\n\n\t\t\t\t\tif (quantityDays) {\n\t\t\t\t\t\tvar from = new Date()\n\t\t\t\t\t\t,\tto =  new Date();\n\n\t\t\t\t\t\tfrom.setDate(from.getDate() - quantityDays);\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tfrom: _.dateToString(from)\n\t\t\t\t\t\t,\tto: _.dateToString(to)\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t,\tsetSelecteds: function ()\n\t\t{\n\t\t\tvar url_options = _.parseUrlOptions(Backbone.history.fragment);\n\n\t\t\tthis.selectedFilter = this.getFilterFromUrl(url_options.filter);\n\t\t\tthis.selectedRange = this.getInitialDateRange(url_options.range);\n\t\t\tthis.selectedSort = this.getSortFromUrl(url_options.sort);\n\t\t\tthis.order = this.getOrderFromUrl(url_options.order);\n\t\t\tthis.page = this.getPageFromUrl(url_options.page);\n\n\t\t\tthis.selectedDisplay = this.getDisplayFromUrl(url_options.display);\n\t\t}\n\n\t\t// when rendering we need to check\n\t\t// if there are options already set up in the url\n\t,\trender: function ()\n\t\t{\n            // if there are no items in the collection, avoid rendering the list header\n            if(this.totalCount === 0)\n            {\n                return;\n            }\n\n\t\t\tif (!this.selectedFilter && !this.selectedSort && !this.order && !this.selectedRange && !this.selectedDisplay)\n\t\t\t{\n\t\t\t\tthis.setSelecteds();\n\n                // after we set the current status\n\t\t\t\t// we update the collection\n                if(!this.avoidFirstFetch)\n                {\n                    this.updateCollection();\n                }\n\t\t\t}\n\n\t\t\treturn this._render();\n\t\t}\n\n\t\t// updateCollection:\n\t\t// the collection used by the view MUST have an update method\n\t\t// this method is going to be called whenever a sort/filter value changes\n\t,\tupdateCollection: function ()\n\t\t{\n\t\t\tvar range = null\n\t\t\t,\tcollection = this.collection;\n\n\t\t\tif (this.selectedRange) {\n\t\t\t\trange = {\n\t\t\t\t\tfrom: this.selectedRange.from\n\t\t\t\t,\tto: this.selectedRange.to\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcollection.update && collection.update({\n\t\t\t\tfilter: this.selectedFilter\n\t\t\t,\trange: range\n\t\t\t,\tsort: this.selectedSort\n\t\t\t,\torder: this.order\n\t\t\t,\tpage: this.page\n\t\t\t,\tkillerId: this.application.killerId\n\t\t\t}, this);\n\n\t\t\treturn this;\n\t\t}\n\n\t\t// returns a specific filter\n\t,\tgetFilter: function (value)\n\t\t{\n\t\t\treturn _(this.filters).find(function (filter)\n\t\t\t{\n\t\t\t\treturn _.isFunction(filter.value) ?\n\t\t\t\t\tfilter.value.apply(this.view) === value :\n\t\t\t\t\tfilter.value === value;\n\t\t\t}, this);\n\t\t}\n\n\t\t// returns a specific sort\n\t,\tgetSort: function (value)\n\t\t{\n\t\t\treturn _.findWhere(this.sorts, {\n\t\t\t\tvalue: value\n\t\t\t});\n\t\t}\n\n\t\t// returns a specific display\n\t,\tgetDisplay: function (value)\n\t\t{\n\t\t\treturn _.findWhere(this.displays, {\n\t\t\t\tid: value\n\t\t\t});\n\t\t}\n\n\t\t// retuns the selected filter from the url\n\t\t// or the default filter if no value set up\n\t,\tgetFilterFromUrl: function (url_value)\n\t\t{\n\t\t\treturn this.getFilter(url_value) || this.getDefaultFilter();\n\t\t}\n\n\t,\tgetRangeFromUrl: function (url_value)\n\t\t{\n\t\t\tvar split = url_value ? url_value.split('to') : [];\n\n\t\t\treturn {\n\t\t\t\tfrom: split[0]\n\t\t\t,\tto: split[1]\n\t\t\t};\n\t\t}\n\n\t\t// returns the selected sort from the url\n\t\t// or the default sort if no value set up\n\t,\tgetSortFromUrl: function (url_value)\n\t\t{\n\t\t\treturn this.getSort(url_value) || this.getDefaultSort();\n\t\t}\n\n\t\t// returns the selected order from the url\n\t\t// this could be inverse or nothing\n\t,\tgetOrderFromUrl: function (url_value)\n\t\t{\n\t\t\treturn url_value === 'inverse' ? -1 : 1;\n\t\t}\n\n\t\t// Retrieve current selected display option or 'list' by default\n\t,\tgetDisplayFromUrl: function (url_value)\n\t\t{\n\t\t\treturn this.getDisplay(url_value) || this.getDefaultDisplay();\n\t\t}\n\n\t,\tgetPageFromUrl: function (url_value)\n\t\t{\n\t\t\tvar page_number = parseInt(url_value, 10);\n\n\t\t\treturn !isNaN(page_number) && page_number > 0 ? page_number : 1;\n\t\t}\n\n\t,\tpager: function (url_value)\n\t\t{\n\t\t\tvar page_number = parseInt(url_value, 10)\n\t\t\t,\turl = Backbone.history.fragment;\n\n\t\t\treturn isNaN(page_number) || page_number === 1 ? _.removeUrlParameter(url, 'page') : _.setUrlParameter(url, 'page', page_number);\n\t\t}\n\n\t,\tdisplayer: function (display_option)\n\t\t{\n\t\t\tvar url = Backbone.history.fragment;\n\n\t\t\treturn display_option === this.getDefaultDisplay().id ? _.removeUrlParameter(url, 'display') : _.setUrlParameter(url, 'display', display_option);\n\t\t}\n\n\t\t// if there's already a default filter, return that\n\t\t// otherwise find the one selected on the filter list\n\t,\tgetDefaultFilter: function ()\n\t\t{\n\t\t\treturn this.defaultFilter || (this.defaultFilter = _.findWhere(this.filters, {selected: true}) || _.first(this.filters));\n\t\t}\n\n\t\t// if there's already a default sort, return that\n\t\t// otherwise find the one selected on the sort list\n\t,\tgetDefaultSort: function ()\n\t\t{\n\t\t\treturn this.defaultSort || (this.defaultSort = _.findWhere(this.sorts, {selected: true}) || _.first(this.sorts));\n\t\t}\n\n\t,\tgetDefaultDisplay: function ()\n\t\t{\n\t\t\treturn this.defaultDisplay || (this.defaultDisplay = _.findWhere(this.displays, {selected: true}) || _.first(this.displays));\n\t\t}\n\n\t,\tisDefaultFilter: function (filter)\n\t\t{\n\t\t\treturn this.getDefaultFilter() === filter;\n\t\t}\n\n\t,\tisDefaultSort: function (sort)\n\t\t{\n\t\t\treturn this.getDefaultSort() === sort;\n\t\t}\n\n\t,\tisDefaultDisplay: function (display)\n\t\t{\n\t\t\treturn this.getDefaultDisplay() === display;\n\t\t}\n\n\t\t// method called when dom dropdown change\n\t,\tfilterHandler: function (e)\n\t\t{\n\t\t\t// unselect all elements\n\t\t\tthis.unselectAll({\n\t\t\t\tsilent: true\n\t\t\t});\n\t\t\t// sets the selected filter\n\t\t\tthis.selectedFilter = this.getFilter(e.target.value);\n\t\t\t// updates the url and the collection\n\t\t\tthis.updateUrl();\n\t\t}\n\n\t\t// method called when dom dropdown change\n\t,\tsortHandler: function (e)\n\t\t{\n\t\t\t// sets the selected sort\n\t\t\tthis.selectedSort = this.getSort(e.target.value);\n\t\t\t// updates the url and the collection\n\t\t\tthis.updateUrl();\n\t\t}\n\n\t\t// method called when dom button clicked\n\t,\ttoggleSortHandler: function ()\n\t\t{\n\t\t\t// toggles the selected order\n\t\t\tthis.order *= -1;\n\t\t\t// updates the url and the collection\n\t\t\tthis.updateUrl();\n\t\t}\n\n\t\t// selects all in collection\n\t,\tselectAll: function ()\n\t\t{\n\t\t\tif ('selectAll' in this.view)\n\t\t\t{\n\t\t\t\tthis.view.selectAll();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\t// unselects in collection\n\t,\tunselectAll: function (options)\n\t\t{\n\t\t\tif ('unselectAll' in this.view)\n\t\t\t{\n\t\t\t\tthis.view.unselectAll(options);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t,\trangeFilterHandler: _.throttle(function ()\n\t\t{\n\t\t\tvar selected_range = this.selectedRange\n\t\t\t,\t$ranges = this.$('[data-action=\"range-filter\"]');\n\n\t\t\t$ranges.each(function ()\n\t\t\t{\n\t\t\t\tif (this.value)\n\t\t\t\t{\n\t\t\t\t\tselected_range[this.name] = this.value;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelete selected_range[this.name];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (this.validateDateRange(selected_range))\n\t\t\t{\n\t\t\t\t// updates the url and the collection\n\t\t\t\tthis.updateUrl();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.showError(_('Invalid date format.').translate());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}, 2500, {leading:false})\n\n\t,\tvalidateDateRange: function (selected_range)\n\t\t{\n\t\t\tvar options = this.rangeFilterOptions\n\t\t\t,\tis_valid = true\n\t\t\t,\tto = new Date(selected_range.to)\n\t\t\t,\tfrom = new Date(selected_range.from)\n\t\t\t,\ttoMin = new Date(options.toMin)\n\t\t\t,\ttoMax = new Date(options.toMax)\n\t\t\t,\tfromMin = new Date(options.fromMin)\n\t\t\t,\tfromMax = new Date(options.fromMax);\n\n\t\t\tif (options.toMin && _.isDateValid(toMin) && _.isDateValid(to) && to.getTime() < toMin.getTime())\n\t\t\t{\n\t\t\t\tselected_range.to = options.toMin;\n\t\t\t}\n\t\t\telse if (!selected_range.to || (options.toMax && _.isDateValid(toMax) && _.isDateValid(to) && to.getTime() > toMax.getTime()))\n\t\t\t{\n\t\t\t\tselected_range.to = options.toMax;\n\t\t\t}\n\n\t\t\tif (!selected_range.from || (options.fromMin && _.isDateValid(fromMin) && _.isDateValid(from) && from.getTime() < fromMin.getTime()))\n\t\t\t{\n\t\t\t\tselected_range.from = options.fromMin;\n\t\t\t}\n\t\t\telse if (options.fromMax && _.isDateValid(fromMax) && _.isDateValid(from) && from.getTime() > fromMax.getTime())\n\t\t\t{\n\t\t\t\tselected_range.from = options.fromMax;\n\t\t\t}\n\n\t\t\tif (selected_range.to && !_.isDateValid(_.stringToDate(selected_range.to)))\n\t\t\t{\n\t\t\t\tis_valid = false;\n\n\t\t\t\tdelete selected_range.to;\n\t\t\t}\n\n\t\t\tif (selected_range.from && !_.isDateValid(_.stringToDate(selected_range.from)))\n\t\t\t{\n\t\t\t\tis_valid = false;\n\n\t\t\t\tdelete selected_range.from;\n\t\t\t}\n\n\t\t\treturn is_valid;\n\t\t}\n\n\t,\tupdateUrl: function ()\n\t\t{\n\t\t\tvar url = Backbone.history.fragment;\n\t\t\t// if the selected filter is the default one\n\t\t\t//   remove the filter parameter\n\t\t\t// else change it for the selected value\n\t\t\turl = this.isDefaultFilter(this.selectedFilter) ?\n\t\t\t\t_.removeUrlParameter(url, 'filter') :\n\t\t\t\t_.setUrlParameter(url, 'filter', _.isFunction(this.selectedFilter.value) ? this.selectedFilter.value.apply(this.view) : this.selectedFilter.value);\n\t\t\t// if the selected sort is the default one\n\t\t\t//   remove the sort parameter\n\t\t\t// else change it for the selected value\n\t\t\turl = this.isDefaultSort(this.selectedSort) ? _.removeUrlParameter(url, 'sort') : _.setUrlParameter(url, 'sort', this.selectedSort.value);\n\t\t\t// if the selected order is the default one\n\t\t\t//   remove the order parameter\n\t\t\t// else change it for the selected value\n\t\t\turl = this.order === 1 ? _.removeUrlParameter(url, 'order') : _.setUrlParameter(url, 'order', 'inverse');\n\t\t\t// if range from and range to are set up\n\t\t\t//   change them in the url\n\t\t\t// else remove the parameter\n\t\t\tif (this.selectedRange)\n\t\t\t{\n\t\t\t\turl = this.selectedRange.from && this.selectedRange.to ? _.setUrlParameter(url, 'range', this.selectedRange.from + 'to' + this.selectedRange.to) : _.removeUrlParameter(url, 'range');\n\t\t\t}\n\n\t\t\turl = _.removeUrlParameter(url, 'page');\n\t\t\tthis.page = 1;\n\n\t\t\t// just go there already, but warn no one\n\t\t\tBackbone.history.navigate(url, {trigger: false});\n\n\t\t\treturn this.updateCollection();\n\t\t}\n\t});\n\n\t//Class methods definition (statis methods)\n\tListHeader = _.extend(ListHeader,\n\t{\n\t\t//Allow save STATICALY any value to be shared by all ListHeader instances\n\t\tsetPersistedState: function (path, value)\n\t\t{\n\t\t\treturn _.setPathFromObject(this.state = this.state || {}, path, value);\n\t\t}\n\t\t//Allow get STATICALY any value to be shared by all ListHeader instances\n\t,\tgetPersistedState: function (path, default_value)\n\t\t{\n\t\t\treturn _.getPathFromObject(this.state = this.state || {}, path, default_value);\n\t\t}\n\t});\n\n\treturn ListHeader;\n});\n\n\n// Merchandising.Context.DefaultHandlers\n// -------------------------------------\n// Registers a set of 'default handlers', this handlers are called\n// depending on the execution context (current view they are in when beeing called)\n// The following handlers are required for correct funtionality of the Merchandising Zone module:\n// * getFilterValues\n//   returns an array with the values of a specific filter in the current view\n// * getIdItemsToExclude\n//   returns an array with the ids of the items in the current view\ndefine('Merchandising.Context.DefaultHandlers'\n,\t['Merchandising.Context', 'Facets.Views', 'ItemDetails.View', 'Cart.Views']\n,\tfunction (MerchandisingContext, FacetsViews, ItemDetailsView, CartViews)\n{\n\t'use strict';\n\n\tvar DefaultContextHandlers = {\n\n\t\tmergeFilterValues: function (current_values, facet_values)\n\t\t{\n\t\t\treturn _.union(\n\n\t\t\t\t_.reject(current_values, function (value)\n\t\t\t\t{\n\t\t\t\t\treturn value === '$current';\n\t\t\t\t})\n\n\t\t\t,\tfacet_values || []\n\t\t\t);\n\t\t}\n\n\t,\tparseValues: function (filters, callback)\n\t\t{\n\t\t\t_.each(filters, function (values, key)\n\t\t\t{\n\t\t\t\tvalues = DefaultContextHandlers.mergeFilterValues(values, callback(values, key));\n\n\t\t\t\tif (values.length)\n\t\t\t\t{\n\t\t\t\t\t_.each(values, function(value) \n                    {\n\t\t\t\t\t\tMerchandisingContext.appendFilterValue(filters, key, value);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelete filters[key];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn filters;\n\t\t}\n\n\t,\tincludeFacetsToFilters: function (facets, filters)\n\t\t{\n\t\t\tvar facet_id = ''\n\t\t\t,\tfacet_values = [];\n\n\t\t\t_.each(facets, function (facet)\n\t\t\t{\n\t\t\t\tfacet_id = facet.id;\n\t\t\t\tfacet_values = facet.value;\n\n\t\t\t\tfacet_values = _.isArray(facet_values) ? facet_values : [facet_values];\n\n\t\t\t\tif (filters.hasOwnProperty(facet_id))\n\t\t\t\t{\n\t\t\t\t\tfacet_values = _.union(filters[facet_id], facet_values);\n\t\t\t\t}\n\n\t\t\t\tfilters[facet_id] = facet_values;\n\t\t\t});\n\n\t\t\treturn filters;\n\t\t}\n\n\t,\titemListHandlers: {\n\n\t\t\tgetFilters: function (filters, isWithin)\n\t\t\t{\n\t\t\t\tvar facets = this.view.translator.facets;\n\n\t\t\t\tif (isWithin)\n\t\t\t\t{\n\t\t\t\t\tfilters = DefaultContextHandlers.includeFacetsToFilters(facets, filters);\n\t\t\t\t}\t\t\t\t\n\n\t\t\t\treturn DefaultContextHandlers.parseValues(filters, function (values, key)\n\t\t\t\t{\n\t\t\t\t\tvar facet_values = [];\n\n\t\t\t\t\tif (_.contains(values, '$current'))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar current_facet = _.findWhere(facets, {id: key});\n\n\t\t\t\t\t\tfacet_values = current_facet && current_facet.value || [];\n\n\t\t\t\t\t\tif (!_.isArray(facet_values))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfacet_values = [facet_values];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn facet_values;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// [_.pluck](http://underscorejs.org/#pluck)\n\t\t,\tgetIdItemsToExclude: function ()\n\t\t\t{\n\t\t\t\treturn this.view.model.get('items').pluck('internalid');\n\t\t\t}\n\t\t}\n\n\t,\tgetItemValues: function (facets, field_id)\n\t\t{\n\t\t\treturn _.pluck(_.findWhere(facets, {\n\t\t\t\tid: field_id\n\t\t\t}).values, 'url');\n\t\t}\n\n\t,\titemDetailsHandlers: {\n\t\t\t// depending on the item's attributes\n\t\t\tgetFilters: function (filters, isWithin)\n\t\t\t{\n\t\t\t\tvar facets = this.view.model.get('facets');\n\n\t\t\t\treturn DefaultContextHandlers.parseValues(filters, function (values, key)\n\t\t\t\t{\n\t\t\t\t\tif (isWithin || _.contains(values, '$current'))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn DefaultContextHandlers.getItemValues(facets, key);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// there is only one it, we return its id\n\t\t\t// notice: we are returning it inside of an array\n\t\t,\tgetIdItemsToExclude: function ()\n\t\t\t{\n\t\t\t\treturn [this.view.model.get('internalid')];\n\t\t\t}\n\t\t}\n\n\t,\tgetCartLineItemValue: function (item, filter_id)\n\t\t{\n\t\t\tvar value = item.get(filter_id);\n\n\t\t\tif (!value)\n\t\t\t{\n\t\t\t\tvar selected = _.findWhere(\n\t\t\t\t\titem.getPosibleOptions(), {itemOptionId: filter_id}\n\t\t\t\t);\n\n\t\t\t\tvalue = selected ? item.getOption(selected.cartOptionId).label : null;\n\t\t\t}\n\n\t\t\treturn value;\n\t\t}\n\n\t\t// returns an array with the values\n\t\t// [_.compact](http://underscorejs.org/#compact)\n\t\t// [_.map](http://underscorejs.org/#map)\n\t,\tgetCartItemValues: function (items, filter_id)\n\t\t{\n\t\t\treturn _.compact(items.map(function (line)\n\t\t\t{\n\t\t\t\treturn MerchandisingContext.escapeValue(\n\t\t\t\t\tDefaultContextHandlers.getCartLineItemValue(line.get('item'), filter_id)\n\t\t\t\t);\n\t\t\t}));\n\t\t}\n\n\t,\tcartDetailedHandlers: {\n\n\t\t\tgetFilters: function (filters, isWithin)\n\t\t\t{\n\t\t\t\tvar items = this.view.model.get('lines');\n\n\t\t\t\treturn DefaultContextHandlers.parseValues(filters, function (values, key)\n\t\t\t\t{\n\t\t\t\t\tif (isWithin || _.contains(values, '$current'))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn DefaultContextHandlers.getCartItemValues(items, key);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// for each if the lines in the cart, we return either:\n\t\t\t// * the id of the matrix parent, if its a matrix\n\t\t\t// * the id of the line.item, if its not\n\t\t,\tgetIdItemsToExclude: function ()\n\t\t\t{\n\t\t\t\tvar item = null;\n\n\t\t\t\t// [_.map](http://underscorejs.org/#map)\n\t\t\t\treturn _.map(this.view.model.get('lines'), function (line)\n\t\t\t\t{\n\t\t\t\t\titem = line.get('item');\n\n\t\t\t\t\treturn item.get('_matrixParent').get('_id') || item.get('_id');\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t,\tcartConfirmationHandlers: {\n\n\t\t\t// returns the value of the attribute in the view's line item\n\t\t\tgetFilters: function (filters, isWithin)\n\t\t\t{\n\t\t\t\tvar item = this.view.line.get('item');\n\n\t\t\t\treturn DefaultContextHandlers.parseValues(filters, function (values, key)\n\t\t\t\t{\n\t\t\t\t\tif (isWithin || _.contains(values, '$current'))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn MerchandisingContext.escapeValue(\n\t\t\t\t\t\t\tDefaultContextHandlers.getCartLineItemValue(item, key)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// returns either the matrix parent id or the item id\n\t\t\t// of the view's line item\n\t\t,\tgetIdItemsToExclude: function ()\n\t\t\t{\n\t\t\t\tvar item = this.view.line.get('item');\n\t\t\t\treturn [item.get('_matrixParent').get('_id') || item.get('_id')];\n\t\t\t}\n\t\t}\n\n\t,\tmountToApp: function ()\n\t\t{\n\t\t\tMerchandisingContext\n\t\t\t\t.registerHandlers(FacetsViews.Browse, this.itemListHandlers)\n\t\t\t\t.registerHandlers(ItemDetailsView, this.itemDetailsHandlers)\n\t\t\t\t.registerHandlers(CartViews.Detailed, this.cartDetailedHandlers)\n\t\t\t\t.registerHandlers(CartViews.Confirmation, this.cartConfirmationHandlers);\n\n\t\t\treturn this;\n\t\t}\n\t};\n\n\treturn DefaultContextHandlers;\n});\n\n\n// Merchandising.Context\n// ---------------------\ndefine('Merchandising.Context', function ()\n{\n\t'use strict';\n\n\tvar MerchandisingContext = function MerchandisingContext (view)\n\t{\n\t\tif (view.MerchandisingContext)\n\t\t{\n\t\t\treturn view.MerchandisingContext;\n\t\t}\n\t\tthis.view = view;\n\t\tview.MerchandisingContext = this;\n\t};\n\n\t_.extend(MerchandisingContext, {\n\n\t\t// list of registered handlers\n\t\thandlers: []\n\n\t\t// registerHandlers\n\t\t// pushes a new handler for a specific view to the handler list\n\t,\tregisterHandlers: function (view_constructor, methods)\n\t\t{\n\t\t\tif (view_constructor)\n\t\t\t{\n\t\t\t\t// if there was already a handler for that view\n\t\t\t\t// we remove it from the list, and extend the new\n\t\t\t\t// handler with any events that the previous one had\n\t\t\t\tvar new_handler = _.extend(\n\t\t\t\t\tMerchandisingContext.removeHandler(view_constructor)\n\t\t\t\t,\tmethods\n\t\t\t\t);\n\n\t\t\t\tnew_handler.viewConstructor = view_constructor;\n\t\t\t\t// then we add it first on the list\n\t\t\t\tMerchandisingContext.handlers.unshift(new_handler);\n\t\t\t}\n\n\t\t\treturn MerchandisingContext;\n\t\t}\n\n\t\t// based on the constructor passed as a parameter\n\t\t// it removes any handler that matches the constructor\n\t\t// from the handlers list.\n\t\t// returns the removed handler\n\t,\tremoveHandler: function (view_constructor)\n\t\t{\n\t\t\tvar removed = {};\n\n\t\t\tMerchandisingContext.handlers = _.reject(MerchandisingContext.handlers, function (handler)\n\t\t\t{\n\t\t\t\tif (handler.viewConstructor === view_constructor)\n\t\t\t\t{\n\t\t\t\t\tremoved = handler;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn removed;\n\t\t}\n\n\t\t// retuns a handler based on the view\n\t,\tgetHandlerForView: function (view)\n\t\t{\n\t\t\treturn _.find(MerchandisingContext.handlers, function (handler)\n\t\t\t{\n\t\t\t\treturn view instanceof handler.viewConstructor;\n\t\t\t});\n\t\t}\n\n\t,\tescapeValue: function (value)\n\t\t{\n\t\t\treturn value ? value.toString().replace(/\\s/g, '-') : '';\n\t\t}\n\n\t\t// callHandler\n\t\t// calls 'callback_key' from the handler for that view passing all of the arguments\n\t,\tcallHandler: function (callback_key, context, parameters)\n\t\t{\n\t\t\tvar handler = MerchandisingContext.getHandlerForView(context.view);\n\t\t\treturn handler && _.isFunction(handler[callback_key]) && handler[callback_key].apply(context, parameters);\n\t\t}\n\n\t,\tappendFilterValue: function (filters, key, value)\n\t\t{\n\t\t\tif (_.isObject(value) && ('to' in value) && ('from' in value)) \n\t\t\t{\n\t\t\t\tdelete filters[key];\n\n\t\t\t\tfilters[key + '.to'] = value.to;\n\t\t\t\tfilters[key + '.from'] = value.from;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (_.isUndefined(filters[key]))\n\t\t\t\t{\n\t\t\t\t\tfilters[key] = '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar comma = '';\n\n\t\t\t\tif (filters[key])\n\t\t\t\t{\n\t\t\t\t\tcomma = ',';\n\t\t\t\t}\n\n\t\t\t\tfilters[key] += comma + value;\n\t\t\t}\n\t\t}\n\t});\n\n\t_.extend(MerchandisingContext.prototype, {\n\n\t\tcallHandler: function (callback_key)\n\t\t{\n\t\t\treturn MerchandisingContext.callHandler(callback_key, this, _.toArray(arguments).slice(1));\n\t\t}\n\n\t,\tgetFilters: function (filters, isWithin)\n\t\t{\n\t\t\tvar parsed_filters = this.callHandler('getFilters', filters, isWithin);\n\t\t\t\n\t\t\tif (!parsed_filters)\n\t\t\t{\n\t\t\t\tparsed_filters = {};\n\n\t\t\t\t_.each(filters, function (values, key)\n\t\t\t\t{\n\t\t\t\t\tvalues = _.without(values, '$current');\n\t\t\t\t\t\n\t\t\t\t\tif (values.length)\n\t\t\t\t\t{\n\t\t\t\t\t\t_.each(values, function (value)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tMerchandisingContext.appendFilterValue(parsed_filters, key, value);\t\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn parsed_filters;\n\t\t}\t\n\n\t,\tgetIdItemsToExclude: function ()\n\t\t{\n\t\t\treturn this.callHandler('getIdItemsToExclude') || [];\n\t\t}\n\t});\n\n\treturn MerchandisingContext;\n});\n\n\n// Merhcandising Item Collection\n// -----------------------------\n// Item collection used for the merchandising zone\ndefine('Merchandising.ItemCollection', ['ItemDetails.Collection', 'Session'], function (ItemDetailsCollection, Session)\n{\n\t'use strict';\n\n\t// we declare a new version of the ItemDetailsCollection\n\t// to make sure the urlRoot doesn't get overridden\n\treturn ItemDetailsCollection.extend({\n\n\t\turl: function ()\n\t\t{\n\t\t\treturn _.addParamsToUrl(\n\t\t\t\t'/api/items'\n\t\t\t,\t_.extend(\n\t\t\t\t\t{}\n\t\t\t\t,\tthis.searchApiMasterOptions\n\t\t\t\t,\tSession.getSearchApiParams()\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t});\n});\n\n\n// Merchandising.Rule\n// ------------------\n// Object that contains both model and collection of Merchandising Rules\n// Each MerchandisingRule.Model is a Merchandising Rule record on the backend\ndefine('Merchandising.Rule', function ()\n{\n\t'use strict';\n\n\tvar MerchandisingRule = {};\t\n\n\t// Standard Backbone.Model, we call extend in case\n\t// we want to override some methods\n\tMerchandisingRule.Model = Backbone.Model.extend({});\n\n\t// Handles the merchandising rules, it is a Singleton as\n\t// there is only one set of the rules\n\tMerchandisingRule.Collection = Backbone.CachedCollection.extend({\n\t\turl: '/dls/services/merchandising.ss'\n\t,\tmodel: MerchandisingRule.Model\n\t}, SC.Singleton);\n\n\treturn MerchandisingRule;\n});\n\n// Merchandising.Zone\n// ------------------\ndefine('Merchandising.Zone'\n,\t['Merchandising.ItemCollection', 'Merchandising.Rule', 'Merchandising.Context']\n,\tfunction (MerchandisingItemCollection, MerchandisingRule, MerchandisingContext)\n{\n\t'use strict';\n\n\t// we declare a new version of the ItemDetailsCollection\n\t// to make sure the urlRoot doesn't get overridden\n\tvar MerchandisingZone = function MerchandisingZone (element, options)\n\t{\n\t\tvar application = options && options.application\n\t\t,\tlayout = application && application.getLayout && application.getLayout();\n\n\t\tif (!element || !layout)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tthis.$element = jQuery(element).empty();\n\t\t// we try to get the model based on option.id (if passed) or the elements data id\n\t\tthis.model = MerchandisingRule.Collection.getInstance().get(\n\t\t\toptions.id || this.$element.data('id')\n\t\t);\n\n\t\tif (this.model && this.$element.length && !this.$element.hasClass(this.loadingClassNames))\n\t\t{\n\t\t\tthis.options = options;\n\t\t\tthis.application = application;\n\t\t\tthis.items = new MerchandisingItemCollection();\n\t\t\tthis.context = new MerchandisingContext(layout.modalCurrentView || layout.currentView || layout);\n\n\t\t\tthis.initialize();\n\t\t}\n\t};\n\n\t_.extend(MerchandisingZone.prototype, {\n\n\t\tinitialize: function ()\n\t\t{\n\t\t\tthis.addLoadingClass();\n\t\t\t// the listeners MUST be added before the fetch ocurrs\n\t\t\tthis.addListeners();\n\n\t\t\t// fetch the items\n\t\t\tthis.items.fetch({\n\t\t\t\tcache: true\n\t\t\t,\tdata: this.getApiParams()\n\t\t\t});\n\t\t}\n\n\t,\taddListeners: function ()\n\t\t{\n\t\t\t// [jQuery.proxy](http://api.jquery.com/jQuery.proxy/)\n\t\t\tvar proxy = jQuery.proxy;\n\n\t\t\tthis.items.on({\n\t\t\t\tsync: proxy(this.excludeItems, this)\n\t\t\t,\texcluded: proxy(this.appendItems, this)\n\t\t\t,\tappended: proxy(this.removeLoadingClass, this)\n\t\t\t,\terror: proxy(this.handleRequestError, this)\n\t\t\t});\n\t\t}\n\n\t\t// pre: this.model and this.options must be defined\n\t,\tgetApiParams: function ()\n\t\t{\n\t\t\tvar filters = this.parseApiFilterOptions()\n\t\t\t,\tsorting = this.parseApiSortingOptions();\n\n\t\t\tif (sorting.length)\n\t\t\t{\n\t\t\t\tfilters.sort = sorting.join(',');\n\t\t\t}\n\n\t\t\t// # Response\n\t\t\t// parameters to be passed to the item's fetch query\n\t\t\treturn _.extend({\n\t\t\t\tlimit: this.getLimit()\n\t\t\t,\tfieldset: this.model.get('fieldset')\n\t\t\t}, filters);\n\t\t}\n\n\t,\tparseApiFilterOptions: function ()\n\t\t{\n\t\t\tvar\tfilters = {};\n\n\t\t\t// parses the merchandising rule filters into the filters obj\n\t\t\t_.each(this.model.get('filter'), function (rule_filter)\n\t\t\t{\n\t\t\t\tfilters[rule_filter.field_id] = rule_filter.field_value;\n\t\t\t});\n\n\t\t\treturn this.context.getFilters(filters, this.model.get('within'));\n\t\t}\n\n\t,\tparseApiSortingOptions: function ()\n\t\t{\n\t\t\t// turn sorting obj into a string for the query\n\t\t\treturn _.map(this.model.get('sort'), function (value)\n\t\t\t{\n\t\t\t\treturn value.field_id + ':' + value.dir;\n\t\t\t});\n\t\t}\n\n\t\t// if there are items to get excluded from the collection\n\t\t// we need to ask for more items from the api\n\t\t// because the filtering gets done after the request\n\t,\tgetLimit: function ()\n\t\t{\n\t\t\tvar model = this.model\n\t\t\t,\tlimit = model.get('show')\n\t\t\t,\texclude = model.get('exclude');\n\n\t\t\tif (exclude.length)\n\t\t\t{\n\t\t\t\tif (_.contains(exclude, '$cart'))\n\t\t\t\t{\n\t\t\t\t\tlimit += this.application.getCart().get('lines').length;\n\t\t\t\t}\n\n\t\t\t\tif (_.contains(exclude, '$current'))\n\t\t\t\t{\n\t\t\t\t\tlimit += this.context.getIdItemsToExclude().length;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn limit <= 100 ? limit : 100;\n\t\t}\n\n\t,\texcludeItems: function ()\n\t\t{\n\t\t\tvar self = this;\n\n\t\t\t_.each(this.model.get('exclude'), function (filter)\n\t\t\t{\n\t\t\t\tself.applyFilterToItems(filter);\n\t\t\t});\n\n\t\t\tthis.items.trigger('excluded');\n\n\t\t\treturn this;\n\t\t}\n\n\t\t// narrows down the collection if excludes set up on the merchandising rule\n\t,\tapplyFilterToItems: function (filter)\n\t\t{\n\t\t\tvar items = this.items;\n\n\t\t\tswitch (filter)\n\t\t\t{\n\t\t\t\tcase '$cart':\n\n\t\t\t\t\tvar item = null;\n\n\t\t\t\t\tthis.application.getCart().get('lines').each(function (line)\n\t\t\t\t\t{\n\t\t\t\t\t\titem = line.get('item');\n\n\t\t\t\t\t\titems.remove(\n\t\t\t\t\t\t\titems.get(\n\t\t\t\t\t\t\t\titem.get('_matrixParent').get('_id') || item.get('_id')\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\tbreak;\n\n\t\t\t\tcase '$current':\n\n\t\t\t\t\t_.each(this.context.getIdItemsToExclude(), function (id)\n\t\t\t\t\t{\n\t\t\t\t\t\titems.remove(items.get(id));\n\t\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\t// pre: this.$element must be defined\n\t,\tappendItems: function ()\n\t\t{\n\t\t\tvar items = this.items;\n\n\t\t\tif (items.length)\n\t\t\t{\n\t\t\t\t// we try to get the 'template' from either\n\t\t\t\t// the merchandising rule or the default configuration\n\t\t\t\tvar model = this.model\n\t\t\t\t,\tapplication = this.application\n\t\t\t\t,\ttemplate = SC.macros[model.get('template')] || SC.macros[application.getConfig('macros.merchandisingZone')];\n\n\t\t\t\t// then we append the parsed template to the element\n\t\t\t\tthis.$element.append(\n\t\t\t\t\ttemplate({\n\t\t\t\t\t\tapplication: application\n\t\t\t\t\t,\ttitle: model.get('title')\n\t\t\t\t\t,\tdescription: model.get('description')\n\t\t\t\t\t,\titems: _.first(items.models, model.get('show'))\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\n\t\t\titems.trigger('appended');\n\n\t\t\t// notify the layout that the content might have changed\n\t\t\tthis.options && this.options.application && this.options.application.getLayout().trigger('afterRender'); \n\n\t\t\treturn this;\n\t\t}\n\n\t,\tloadingClassNames: 'loading loading-merchandising-zone'\n\n\t,\taddLoadingClass: function ()\n\t\t{\n\t\t\tthis.$element.addClass(this.loadingClassNames);\n\t\t}\n\n\t,\tremoveLoadingClass: function ()\n\t\t{\n\t\t\tthis.$element.removeClass(this.loadingClassNames);\n\t\t}\n\n\t,\thandleRequestError: function ()\n\t\t{\n\t\t\tthis.removeLoadingClass();\n\t\t\tconsole.error('Merchandising Zone - Request Error', arguments);\n\t\t}\n\t});\n\n\treturn MerchandisingZone;\n});\n\n\n// Merchandising.jQueryPlugin\n// --------------------------\n// Creates a jQuery plugin to handle the Merchandising Zone's intialization\n// ex: jQuery('my-custom-selector').merchandisingZone(options)\n// options MUST include the application its running\n// id of the Zone to be rendered is optional IF it is on the element's data-id\ndefine('Merchandising.jQueryPlugin', ['Merchandising.Zone'], function (MerchandisingZone)\n{\n\t'use strict';\n\t// [jQuery.fn](http://learn.jquery.com/plugins/basic-plugin-creation/)\n\tjQuery.fn.merchandisingZone = function (options)\n\t{\n\t\treturn this.each(function ()\n\t\t{\n\t\t\tnew MerchandisingZone(this, options);\t\n\t\t});\n\t};\n});\n\n// Merchandising.js\n// ----------------\n// Module to handle MerchandisingZones\n// (ex: Featured Items section)\ndefine('Merchandising'\n,\t['Merchandising.ItemCollection', 'Merchandising.Rule', 'Merchandising.Zone', 'Merchandising.Context', 'Merchandising.jQueryPlugin']\n,\tfunction (ItemCollection, Rule, Zone, Context)\n{\n\t'use strict';\n\n\treturn {\n\t\tItemCollection: ItemCollection\n\t,\tContext: Context\n\t,\tRule: Rule\n\t,\tZone: Zone\n\t,\tmountToApp: function (application)\n\t\t{\n\t\t\t// we add the default options to be added when fetching the items\n\t\t\t// this includes language and shoper's currency\n\t\t\tItemCollection.prototype.searchApiMasterOptions = application.getConfig('searchApiMasterOptions.merchandisingZone');\n\n\t\t\t// afterAppendView is triggered whenever a view or modal is appended\n\t\t\tapplication.getLayout()\n\t\t\t\t.on('afterAppendView', function ()\n\t\t\t\t{\n\t\t\t\t\t// we dont want to discover unwanted merch zones, specifically\n\t\t\t\t\t// those in a the main screen (layout) behind the current modal.\n\t\t\t\t\t// give preference to modalCurrentView if available\n\t\t\t\t\t// otherwise inspect layout since merch zones can live outside of the currentview.\n\t\t\t\t\tvar currentView = this.modalCurrentView || this; // \"this\" is current layout!\n\n\t\t\t\t\tcurrentView.$('[data-type=\"merchandising-zone\"]').merchandisingZone({\n\t\t\t\t\t\tapplication: application\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t// content service triggers this event when rendering a new enhanced page\n\t\t\t\t.on('renderEnhancedPageContent', function (view, content_zone)\n\t\t\t\t{\n\t\t\t\t\t// if the type of the content zone is merchandising\n\t\t\t\t\tif (content_zone.contenttype === 'merchandising')\n\t\t\t\t\t{\n\t\t\t\t\t\t// target = selector\n\t\t\t\t\t\t// $view_target = jQuery.find(selector, view), view is the context\n\t\t\t\t\t\tvar target = content_zone.target\n\t\t\t\t\t\t,\t$view_target = view.$(target)\n\t\t\t\t\t\t,\tmerchandising_zone_options = {\n\t\t\t\t\t\t\t\tapplication: application\n\t\t\t\t\t\t\t,\tid: content_zone.content\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// if the target is in the current view\n\t\t\t\t\t\t// we add the merchandising zone there\n\t\t\t\t\t\tif ($view_target.length)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$view_target.merchandisingZone(merchandising_zone_options);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// else, we search for the target in the layout\n\t\t\t\t\t\t\tthis.$(target)\n\t\t\t\t\t\t\t\t.filter(':empty')\n\t\t\t\t\t\t\t\t.merchandisingZone(merchandising_zone_options);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\tapplication.getMerchandisingRules = function getMerchandisingRules ()\n\t\t\t{\n\t\t\t\treturn Rule.Collection.getInstance();\n\t\t\t};\n\t\t}\n\t};\n});\n\n\n// MultiCurrencySupport.js\n// -----------------------\n// Handles the change event of the currency selector combo\ndefine('MultiCurrencySupport', function () \n{\n\t'use strict';\n\t\n\treturn {\n\t\tmountToApp: function (application)\n\t\t{\n\t\t\tvar layout = application.getLayout();\n\t\t\t\n\t\t\t// Adds the event listener\n\t\t\t_.extend(layout.events, {\n\t\t\t\t'change select[data-toggle=\"currency-selector\"]' : 'setCurrency'\n\t\t\t});\n\t\t\t\n\t\t\t// Adds the handler function\n\t\t\t_.extend(layout,\n\t\t\t{\n\t\t\t\tsetCurrency: function (e)\n\t\t\t\t{\n\t\t\t\t\tvar currency_code = jQuery(e.target).val()\n\t\t\t\t\t,\tselected_currency = _.find(SC.ENVIRONMENT.availableCurrencies, function (currency)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn currency.code === currency_code;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t// We use the param **\"cur\"** to pass this to the ssp environment\n\t\t\t\t\tvar current_search = SC.Utils.parseUrlOptions(window.location.search);\n\t\t\t\t\t\n\t\t\t\t\t// if we are in a facet result we will remove all facets and navigate to the default search \n\t\t\t\t\tif (window.location.hash !== '' && layout.currentView.translator)\n\t\t\t\t\t{\n\t\t\t\t\t\twindow.location.hash = application.getConfig('defaultSearchUrl', '');\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tcurrent_search.cur = selected_currency.code;\n\n\t\t\t\t\twindow.location.search = _.reduce(current_search, function (memo, val, name)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn val ? memo + name + '=' + val + '&' : memo;\n\t\t\t\t\t}, '?');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n});\n\n\n// MultiHostSupport.js\n// -------------------\n// Handles the change event of the currency selector combo\ndefine('MultiHostSupport', function ()\n{\n\t'use strict';\n\n\treturn {\n\t\tmountToApp: function (application)\n\t\t{\n\t\t\t// Adds the event listener\n\t\t\t_.extend(application.getLayout().events, {'change select[data-toggle=\"host-selector\"]' : 'setHost'});\n\t\t\t_.extend(application.getLayout().events, {'change select[data-toggle=\"language-selector\"]' : 'setLang'});\n\n\t\t\t// Adds the handler function\n\t\t\t_.extend(application.getLayout(),\n\t\t\t{\n\t\t\t\tsetHost: function (e)\n\t\t\t\t{\n\t\t\t\t\tvar host = jQuery(e.target).val()\n\t\t\t\t\t,\turl;\n\n\t\t\t\t\tif (Backbone.history._hasPushState)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Seo Engine is on, send him to the root\n\t\t\t\t\t\turl = host;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// send it to the current path, it's probably a test site\n\t\t\t\t\t\turl = host+location.pathname;\n\t\t\t\t\t}\n\n\t\t\t\t\twindow.location.href = location.protocol + '//' + url;\n\t\t\t\t}\n\t\t\t,\tsetLang: function (e)\n\t\t\t\t{\n\t\t\t\t\tvar selected_host = jQuery(e.target).val()\n\t\t\t\t\t,\tavailable_hosts = SC.ENVIRONMENT.availableHosts\n\t\t\t\t\t,\tselected_language;\n\n\t\t\t\t\tfor(var i = 0; i < available_hosts.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar host = available_hosts[i]\n\t\t\t\t\t\t,\tlang = _(host.languages).findWhere({host: selected_host});\n\n\t\t\t\t\t\tif (lang && lang.locale)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tselected_language = lang;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// use the param **\"lang\"** to pass this to the ssp environment\n\t\t\t\t\tif (selected_language && selected_language.locale)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar current_search = SC.Utils.parseUrlOptions(window.location.search);\n\n\t\t\t\t\t\tcurrent_search.lang = selected_language.locale;\n\n\t\t\t\t\t\twindow.location.search =  _.reduce(current_search, function (memo, val, name)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn val ? memo + name + '=' + val + '&' : memo;\n\t\t\t\t\t\t}, '?');\n\n\t\t\t\t\t\treturn window.location.search;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n});\n\n\n// NavigationHelper.js\n// -------------------\n// This file intersect all clicks on a elements and computes what to do, if navigate useing backbone or navigate away\n// support data-touchpoint for indicating a target touchpoint by name and data-keep-options for keeping current url options in the link.\ndefine('NavigationHelper', ['Session', 'UrlHelper'], function (Session)\n{\n\t'use strict';\n\n\tvar NavigationHelper = {\n\n\t\tmountToApp: function (application)\n\t\t{\n\t\t\t// there is a soft dependency with Content.EnhancedViews\n\t\t\t// we only want it to disable the function that sets the title of the page,\n\t\t\t// we don't want to do that pages that open in modals\n\t\t\ttry\n\t\t\t{\n\t\t\t\tContentEnhancedViews = require('Content.EnhancedViews');\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t//window.console && window.console.log && window.console.log('Couldn\\'t load ContentEnhancedViews');\n\t\t\t}\n\n\t\t\t// Layout\n\t\t\tvar Layout = application.getLayout()\n\t\t\t,\tContentEnhancedViews;\n\n\t\t\t// Touchpoints navigation\n\t\t\t_.extend(Layout, {\n\n\t\t\t\toldIE: function ()\n\t\t\t\t{\n\t\t\t\t\tvar\tisExplorer = /msie [\\w.]+/\n\t\t\t\t\t,\tdocMode = document.documentMode;\n\n\t\t\t\t\treturn (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));\n\t\t\t\t}\n\n\t\t\t,\tgetUrl: function ($element)\n\t\t\t\t{\n\n\t\t\t\t\tif (this.oldIE())\n\t\t\t\t\t{\n\t\t\t\t\t\treturn $element.data('href');\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn $element.attr('href');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t,\tsetUrl: function ($element, url)\n\t\t\t\t{\n\t\t\t\t\t$element.attr('href', url);\n\n\t\t\t\t\tif (this.oldIE())\n\t\t\t\t\t{\n\t\t\t\t\t\t$element.data('href', url);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// layout.showInternalLinkInModal\n\t\t\t\t// for links that has the data-toggle=show-in-modal we will open them in a modal,\n\t\t\t\t// we do this by overriding the showContent function of the layout\n\t\t\t\t// and by disabeling the overrideViewSettings of the Content.EnhancedViews package\n\t\t\t\t// Then we just navigate to that url to call the router and execute the logic as normal\n\t\t\t,\tshowInternalLinkInModal: function (e, href, target)\n\t\t\t\t{\n\t\t\t\t\tvar self = this\n\t\t\t\t\t,\tcurrent_fragment = Backbone.history.fragment || '/'\n\t\t\t\t\t,\toriginal_view;\n\n\t\t\t\t\tthis.isRewrited = true;\n\t\t\t\t\tthis.originalShowContent = this.showContent;\n\n\t\t\t\t\tif (ContentEnhancedViews)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.originalOverrideViewSettings = ContentEnhancedViews.overrideViewSettings;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Here we override the showContent function\n\t\t\t\t\tthis.showContent = function (view)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar promise = jQuery.Deferred();\n\t\t\t\t\t\t/// If you ever try to set a view that is not the original one\n\t\t\t\t\t\t// this code will cathc it an do an undo\n\t\t\t\t\t\tif (!original_view)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\toriginal_view = view;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (original_view !== view)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpromise = self.originalShowContent.apply(self.application.getLayout(), arguments);\n\t\t\t\t\t\t\toriginal_view.$containerModal.modal('hide');\n\t\t\t\t\t\t\treturn promise;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (view && _.isFunction(view.showInModal))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Then we just call the show in modal of the same view that we were passed in.\n\t\t\t\t\t\t\tpromise = view.showInModal({className: target.data('modal-class-name')});\n\n\t\t\t\t\t\t\t// once this model closes we undo the override of the function\n\t\t\t\t\t\t\tview.$containerModal.on('hide.bs.modal', function ()\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tself.undoNavigationHelperFunctionRewrite();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tself.undoNavigationHelperFunctionRewrite();\n\t\t\t\t\t\t\tBackbone.history.navigate(href, {trigger: false, replace: true});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn promise;\n\t\t\t\t\t};\n\n\t\t\t\t\t// Here we navigate to the url and we then change the url to what it was originaly set in page that opened the modal\n\t\t\t\t\tBackbone.history.navigate(href, {trigger: true, replace: true});\n\t\t\t\t\tBackbone.history.navigate(current_fragment, {trigger: false, replace: true});\n\t\t\t\t}\n\n\t\t\t\t// layout.undoNavigationHelperFunctionRewrite\n\t\t\t\t// helper method to undo the override performed by layout.showInternalLinkInModal\n\t\t\t,\tundoNavigationHelperFunctionRewrite: function ()\n\t\t\t\t{\n\t\t\t\t\tif (this.isRewrited)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showContent = this.originalShowContent;\n\n\t\t\t\t\t\tif (ContentEnhancedViews)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tContentEnhancedViews.overrideViewSettings = this.originalOverrideViewSettings;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.isRewrited = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// layout.showExternalLinkInModal\n\t\t\t\t// Opens an external page in a modal, by rendering an iframe in it\n\t\t\t,\tshowExternalLinkInModal: function (e, href, target)\n\t\t\t\t{\n\t\t\t\t\tvar view = new Backbone.View({\n\t\t\t\t\t\tapplication: this.application\n\t\t\t\t\t});\n\n\t\t\t\t\tview.src = href;\n\t\t\t\t\tview.template = 'iframe';\n\t\t\t\t\tview.page_header = target.data('page-header') || '';\n\n\t\t\t\t\tview.showInModal({\n\t\t\t\t\t\tclassName: (target.data('modal-class-name') || '') +' iframe-modal'\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// layout.clickEventListener\n\t\t\t\t// Handles the unatended link event\n\t\t\t,\tclickEventListener: function (e)\n\t\t\t\t{\n\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\t// Grabs info from the event element\n\t\t\t\t\tvar $this = jQuery(e.currentTarget)\n\t\t\t\t\t,\thref = this.getUrl($this) || ''\n\t\t\t\t\t,\ttarget_is_blank = e.button === 1 || e.ctrlKey || e.metaKey || $this.attr('target') === '_blank'\n\t\t\t\t\t,\ttarget_is_modal = $this.data('toggle') === 'show-in-modal'\n\t\t\t\t\t,\tis_disabled = $this.attr('disabled')\n\t\t\t\t\t,\tis_dropdown = $this.data('toggle') === 'dropdown'\n\n\t\t\t\t\t// Workaround for internet explorer 7. href is overwritten with the absolute path so we save the original href\n\t\t\t\t\t// in data-href (only if we are in IE7)\n\t\t\t\t\t// IE7 detection courtesy of Backbone\n\t\t\t\t\t// More info: http://www.glennjones.net/2006/02/getattribute-href-bug/\n\t\t\t\t\t,\tisExplorer = /msie [\\w.]+/\n\t\t\t\t\t,\tdocMode = document.documentMode\n\t\t\t\t\t,\toldIE = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));\n\n\t\t\t\t\tif (is_disabled)\n\t\t\t\t\t{\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (oldIE)\n\t\t\t\t\t{\n\t\t\t\t\t\thref = $this.data('href');\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($this.data('original-href') && !target_is_blank)\n\t\t\t\t\t{\n\t\t\t\t\t\thref = $this.data('original-href');\n\t\t\t\t\t}\n\n\t\t\t\t\tvar is_external = ~href.indexOf('http:') || ~href.indexOf('https:') || ~href.indexOf('mailto:') || ~href.indexOf('tel:');\n\n\t\t\t\t\t// use href=# or href=\"\"\n\t\t\t\t\tif (href === '#' || href === '' || is_dropdown)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// The navigation is within the same browser window\n\t\t\t\t\tif (!target_is_blank)\n\t\t\t\t\t{\n\t\t\t\t\t\t// There is a modal open\n\t\t\t\t\t\tif (this.$containerModal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.$containerModal.modal('hide');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Wants to open this link in a modal\n\t\t\t\t\t\tif (target_is_modal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (is_external)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.showExternalLinkInModal(e, href, $this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.showInternalLinkInModal(e, href, $this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (is_external)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdocument.location.href = href;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tBackbone.history.navigate(href, {trigger: true});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\twindow.open(href, _.uniqueId('window'));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// intercepts mousedown events on all anchors with no data-touchpoint attribute and fix its href attribute to work when opening in a new tab\n\t\t\t,\tfixNoPushStateLink: function (e)\n\t\t\t\t{\n\t\t\t\t\tvar anchor = jQuery(e.target)\n\t\t\t\t\t,\thref = this.getUrl(anchor) || '#';\n\n\t\t\t\t\tif (Backbone.history.options.pushState || href === '#' ||\n\t\t\t\t\t\thref.indexOf('http://') === 0 || href.indexOf('https://') === 0 || href.indexOf('mailto:') === 0 || href.indexOf('tel:') === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if (anchor.data('toggle') === 'show-in-modal')\n\t\t\t\t\t{\n\t\t\t\t\t\tanchor.data('original-href', href);\n\t\t\t\t\t\tthis.setUrl(anchor, window.location.href);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar fixedHref;\n\n\t\t\t\t\tif (window.location.hash)\n\t\t\t\t\t{\n\t\t\t\t\t\tfixedHref = window.location.href.replace(/#.*$/, '#' + href);\n\t\t\t\t\t}\n\t\t\t\t\telse if (window.location.href.lastIndexOf('#')  ===  window.location.href.length - 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tfixedHref = window.location.href +  href;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tfixedHref = window.location.href + '#' + href;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.setUrl(anchor, fixedHref);\n\t\t\t\t}\n\n\t\t\t,\tgetTargetTouchpoint: function ($target)\n\t\t\t\t{\n\t\t\t\t\tvar application = this.application\n\t\t\t\t\t,\ttouchpoints = Session.get('touchpoints')\n\t\t\t\t\t,\ttarget_data = $target.data()\n\t\t\t\t\t,\ttarget_touchpoint = (touchpoints ? touchpoints[target_data.touchpoint] : '') || ''\n\t\t\t\t\t,\thashtag = target_data.hashtag\n\t\t\t\t\t,\tnew_url = ''\n\t\t\t\t\t,\tclean_hashtag = hashtag && hashtag.replace('#', '');\n\n\t\t\t\t\t// If we already are in the target touchpoint then we return the hashtag or the original href.\n\t\t\t\t\t// We don't want to absolutize this url so we just return it.\n\t\t\t\t\tif (target_data.touchpoint === application.getConfig('currentTouchpoint'))\n\t\t\t\t\t{\n\t\t\t\t\t\tnew_url = clean_hashtag ? ('#' + clean_hashtag) : this.getUrl($target);\n\t\t\t\t\t\tnew_url = target_data.keepOptions ? this.getKeepOptionsUrl($target) : new_url;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// if we are heading to a secure domain (myAccount or checkout), keep setting the language by url\n\t\t\t\t\t\tif (target_touchpoint.indexOf('https:') >= 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar current_language = SC.ENVIRONMENT.currentLanguage;\n\t\t\t\t\t\t\tif (current_language)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttarget_data.parameters = target_data.parameters ?\n\t\t\t\t\t\t\t\t\t\ttarget_data.parameters + '&lang=' + current_language.locale :\n\t\t\t\t\t\t\t\t\t\t'lang=' + current_language.locale;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (target_data.parameters)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttarget_touchpoint += (~target_touchpoint.indexOf('?') ? '&' : '?') + target_data.parameters;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (hashtag && hashtag !== '#' && hashtag !== '#/')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnew_url = _.fixUrl(target_touchpoint + (~target_touchpoint.indexOf('?') ? '&' : '?') + 'fragment=' + clean_hashtag);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnew_url = _.fixUrl(target_touchpoint);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// We need to make this url absolute in order for this to navigate\n\t\t\t\t\t\t// instead of being triggered as a hash\n\t\t\t\t\t\tif (new_url && !(~new_url.indexOf('http:') || ~new_url.indexOf('https:')))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnew_url = location.protocol + '//' + location.host + new_url;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Cross Domain Cookie Tracking:\n\t\t\t\t\t// Trackers like Google Analytics require us to send special parameters in the url\n\t\t\t\t\t// to keep tracking the user as one entity even when moving to a different domain\n\t\t\t\t\tif (application.addCrossDomainParameters)\n\t\t\t\t\t{\n\t\t\t\t\t\tnew_url = application.addCrossDomainParameters(new_url);\n\t\t\t\t\t}\n\n\t\t\t\t\t// check if we need to redirect to a diferent host based on the current language\n\t\t\t\t\tnew_url = this.fixTargetHost(new_url);\n\n\t\t\t\t\treturn new_url;\n\t\t\t\t}\n\n\t\t\t\t// layout.touchpointMousedown\n\t\t\t\t// On mousedown we will set the href of the the link, passing google analitics if needed\n\t\t\t,\ttouchpointMousedown: function (e)\n\t\t\t\t{\n\t\t\t\t\tthis.isTouchMoveEvent = false;\n\n\t\t\t\t\tif (e.type === 'touchstart')\n\t\t\t\t\t{\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\n\t\t\t\t\tvar $target = jQuery(e.currentTarget)\n\t\t\t\t\t,\tnew_url = this.getTargetTouchpoint($target);\n\n\t\t\t\t\t// 2 = middle click, 3 = right click\n\t\t\t\t\tif (e.which === 2 || e.which === 3)\n\t\t\t\t\t{\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\te.stopPropagation();\n\n\t\t\t\t\t\t// set the url to the href, so the open on a new tab have the correct url\n\t\t\t\t\t\tthis.setUrl($target, new_url);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!new_url.indexOf('https:') && $target.data('touchpoint') !== application.getConfig('currentTouchpoint'))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Hide modal, do post after that\n\t\t\t\t\t\t\tLayout.$containerModal && Layout.$containerModal.length && Layout.$containerModal.modal('hide');\n\n\t\t\t\t\t\t\t_.doPost(new_url);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.setUrl($target, new_url);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// layout.touchpointClick\n\t\t\t\t// This detects if you are tring to access a different hashtag within the same touchpoint\n\t\t\t,\ttouchpointMouseup: function (e)\n\t\t\t\t{\n\t\t\t\t\tvar $target = jQuery(e.currentTarget)\n\t\t\t\t\t,\ttarget_data = $target.data()\n\t\t\t\t\t,\ttarget_is_blank = e.button !== 0 || e.ctrlKey || e.metaKey || $target.attr('target') === '_blank';\n\n\t\t\t\t\tif (!target_is_blank && this.application.getConfig('currentTouchpoint') && this.application.getConfig('currentTouchpoint') === target_data.touchpoint && target_data.hashtag)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar new_url = target_data.hashtag;\n\t\t\t\t\t\t// Removes the hastag if it's there remove it\n\t\t\t\t\t\tnew_url = new_url[0] === '#' ? new_url.substring(1) : new_url;\n\t\t\t\t\t\t// if it doesnot has a slash add it\n\t\t\t\t\t\tnew_url = new_url[0] === '/' ? new_url : '/' + new_url;\n\t\t\t\t\t\t// we just set the hastag as a relative href and the app should take care of itself\n\n\t\t\t\t\t\tthis.setUrl($target, new_url);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (e.type === 'touchend' && !this.isTouchMoveEvent)\n\t\t\t\t\t{\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\t\t$target.trigger('click');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t,\ttouchpointTouchMove: function ()\n\t\t\t\t{\n\t\t\t\t\tthis.isTouchMoveEvent = true;\n\t\t\t\t}\n\n\t\t\t\t// layout.getDomain()\n\t\t\t\t// helper to extract the domain of a url\n\t\t\t,\tgetDomain: function (url)\n\t\t\t\t{\n\t\t\t\t\treturn url.split('/')[2] || null;\n\t\t\t\t}\n\n\t\t\t\t// layout.getProtocol()\n\t\t\t\t// helper to extract the protocol of a url\n\t\t\t,\tgetProtocol: function (url)\n\t\t\t\t{\n\t\t\t\t\treturn url.split('/')[0] || null;\n\t\t\t\t}\n\n\t\t\t\t// getKeepOptionsUrl. Implement logic of HTML attribute 'data-keep-options'.\n\t\t\t\t// Return a new link poblating given anchor's href with options (http parameters) from window.location.href.\n\t\t\t\t// Value of data-keep-options can be '*' (all options from window.location are taken) or a comma separated (only given parameters are taken)\n\t\t\t,\tgetKeepOptionsUrl: function ($target)\n\t\t\t\t{\n\t\t\t\t\tif (_.getWindow().location.href.indexOf('?') > 0 && $target.data('keep-options'))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar current_options = _.parseUrlOptions(_.getWindow().location.href);\n\t\t\t\t\t\t//remove options not defined in the target's data-key-options attr\n\t\t\t\t\t\tif ($target.data('keep-options') !== '*')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar valid_option_names = $target.data('keep-options').split(',')\n\t\t\t\t\t\t\t,\tkeys = _(current_options).keys();\n\n\t\t\t\t\t\t\t_(keys).each(function (key)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!_(valid_option_names).contains(key))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdelete current_options[key];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar anchor_options = (this.getUrl($target) && this.getUrl($target).indexOf('?') > 0) ? _.parseUrlOptions(this.getUrl($target)) : {}\n\t\t\t\t\t\t,\tnew_params = ''\n\t\t\t\t\t\t,\thref_to_fix = this.getUrl($target) || '';\n\n\t\t\t\t\t\t//override with global\n\t\t\t\t\t\tanchor_options = _.extend(anchor_options, current_options);\n\n\t\t\t\t\t\t// remove query string from url\n\t\t\t\t\t\thref_to_fix = href_to_fix.indexOf('?') > 0 ? (href_to_fix.substring(0, href_to_fix.indexOf('?'))) : href_to_fix;\n\n\t\t\t\t\t\tvar options = _(anchor_options).keys();\n\n\t\t\t\t\t\tfor (var i = 0; i < options.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar key = options[i];\n\t\t\t\t\t\t\tnew_params += key + '=' + anchor_options[key] + (i < options.length - 1 ? '&' : '');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn href_to_fix + (new_params ? ('?' + new_params) : '');\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn this.getUrl($target);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// get the target host based on the current language\n\t\t\t,\tgetTargetHost: function ()\n\t\t\t\t{\n\t\t\t\t\tvar available_hosts = SC.ENVIRONMENT.availableHosts\n\t\t\t\t\t,\ttarget_host;\n\n\t\t\t\t\tif(available_hosts && available_hosts.length)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor(var i = 0; i < available_hosts.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar host = available_hosts[i]\n\t\t\t\t\t\t\t,\tlang = _(host.languages).findWhere({locale: SC.ENVIRONMENT.currentLanguage.locale});\n\n\t\t\t\t\t\t\tif (lang && lang.host)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttarget_host = lang.host;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn target_host;\n\t\t\t\t}\n\n\t\t\t\t// given a url, if not secure (not myaccount nor checkout), replace the host based on the current language\n\t\t\t,\tfixTargetHost: function (url)\n\t\t\t\t{\n\t\t\t\t\tvar fixed_url = url;\n\t\t\t\t\t// check if target is shopping (http) -> we might have to change this\n\t\t\t\t\tif(!~url.indexOf('https:'))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar target_host = this.getTargetHost();\n\t\t\t\t\t\tif(target_host)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfixed_url = fixed_url.replace(/(http:\\/\\/)([^/?#]*)([^>]*)/gi, function(all, protocol, host, rest){return protocol + target_host + rest;});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn fixed_url;\n\t\t\t\t}\n\n\t\t\t,\tkeepOptionsMousedown: function (e)\n\t\t\t\t{\n\t\t\t\t\tvar $target = jQuery(e.currentTarget)\n\t\t\t\t\t,\tnew_url = this.getKeepOptionsUrl($target);\n\n\t\t\t\t\tthis.setUrl($target, new_url);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Adds event listeners to the layout\n\t\t\t_.extend(Layout.events, {\n\n\t\t\t\t// touchpoints, this needs to be before the other click event, so they are computed early\n\t\t\t\t'touchstart a[data-touchpoint]:not([data-navigation=\"ignore-click\"])': 'touchpointMousedown'\n\t\t\t,\t'touchmove a[data-touchpoint]:not([data-navigation=\"ignore-click\"])': 'touchpointTouchMove'\n\t\t\t,\t'mousedown a[data-touchpoint]:not([data-navigation=\"ignore-click\"])': 'touchpointMousedown'\n\t\t\t,\t'touchend a[data-touchpoint]:not([data-navigation=\"ignore-click\"])': 'touchpointMouseup'\n\t\t\t,\t'mouseup a[data-touchpoint]:not([data-navigation=\"ignore-click\"])': 'touchpointMouseup'\n\n\t\t\t,\t'mousedown a[data-keep-options]:not([data-touchpoint]):not([data-navigation=\"ignore-click\"])': 'keepOptionsMousedown'\n\t\t\t\t//intercept clicks on anchor without touchpoint for fixing its href when user try to open it on new tabs / windows.\n\t\t\t,\t'mousedown a:not([data-touchpoint]):not([data-navigation=\"ignore-click\"])': 'fixNoPushStateLink'\n\t\t\t,\t'touchstart a:not([data-touchpoint]):not([data-navigation=\"ignore-click\"])': 'fixNoPushStateLink'\n\t\t\t\t// Listen to the click event of all a elements of the layout\n\t\t\t,\t'click a:not([data-navigation=\"ignore-click\"])': 'clickEventListener'\n\t\t\t});\n\t\t}\n\t};\n\n\treturn NavigationHelper;\n});\n\n\n// LiveOrder.Collection.js\n// -----------------------\n// Live Orders collection\ndefine('LiveOrder.Collection', ['LiveOrder.Model'], function (Model)\n{\n\t'use strict';\n\n\treturn Backbone.Collection.extend({\n\t\tmodel: Model\n\t});\n});\n\n// LiveOrder.Model.js\n// -----------------------\n// Model for showing information about an open order\ndefine('LiveOrder.Model', ['Order.Model', 'OrderLine.Model', 'OrderLine.Collection', 'ItemDetails.Model', 'Session'], function (OrderModel, OrderLineModel, OrderLineCollection, ItemDetailsModel, Session)\n{\n\t'use strict';\n\n\tvar LiveOrderLine = {};\n\n\tLiveOrderLine.Model = OrderLineModel.extend({\n\t\turlRoot: _.getAbsoluteUrl('services/live-order-line.ss')\n\t});\n\n\tLiveOrderLine.Collection = OrderLineCollection.extend({\n\t\tmodel: LiveOrderLine.Model\n\t,\turl: _.getAbsoluteUrl('services/live-order-line.ss')\n\t});\n\n\treturn OrderModel.extend({\n\n\t\turlRoot: _.getAbsoluteUrl('services/live-order.ss')\n\n\t,\tlinesCollection: LiveOrderLine.Collection\n\n\t\t// redefine url to avoid possible cache problems from browser\n\t,\turl: function()\n\t\t{\n\t\t\tvar base_url = OrderModel.prototype.url.apply(this, arguments);\n\t\t\treturn base_url + '&t=' + new Date().getTime();\n\t\t}\n\n\t,\tinitialize: function ()\n\t\t{\n\t\t\t// call the initialize of the parent object, equivalent to super()\n\t\t\tOrderModel.prototype.initialize.apply(this, arguments);\n\n\t\t\t// Some actions in the live order may change the url of the checkout so to be sure we re send all the touchpoints\n\t\t\tthis.on('change:touchpoints', function (model, touchpoints)\n\t\t\t{\n\t\t\t\tSession.set('touchpoints', touchpoints);\n\t\t\t});\n\t\t}\n\n\t,\tgetLatestAddition: function ()\n\t\t{\n\t\t\tvar model = null;\n\n\t\t\tif (this.get('latest_addition'))\n\t\t\t{\n\t\t\t\tmodel = this.get('lines').get(this.get('latest_addition'));\n\t\t\t}\n\n\t\t\tif (!model && this.get('lines').length)\n\t\t\t{\n\t\t\t\tmodel = this.get('lines').at(0);\n\t\t\t}\n\n\t\t\treturn model;\n\t\t}\n\n\t,\twrapOptionsSuccess: function (options)\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\tapplication = this.application;\n\t\t\t// if passing a succes function we need to wrap it\n\t\t\toptions = options || {};\n\t\t\toptions.success = _.wrap(options.success || jQuery.noop, function (fn, item_model, result)\n\t\t\t{\n\t\t\t\t// This method is called in 2 ways by doing a sync and by doing a save\n\t\t\t\t// if its a save result will be the raw object\n\t\t\t\tvar attributes = result;\n\t\t\t\t// If its a sync resilt will be a string\n\t\t\t\tif (_.isString(result))\n\t\t\t\t{\n\t\t\t\t\tattributes = item_model;\n\t\t\t\t}\n\n\t\t\t\t// Tho this should be a restfull api, the live-order-line returns the full live-order back (lines and summary are interconnected)\n\t\t\t\tself.set(attributes);\n\n\t\t\t\t// Calls the original success function\n\t\t\t\tfn.apply(self, _.toArray(arguments).slice(1));\n\n\t\t\t\tvar line = self.get('lines').get(self.get('latest_addition'))\n\t\t\t\t,\titem = line && line.get('item');\n\n\t\t\t\titem && application && application.trackEvent && application.trackEvent({\n\t\t\t\t\tcategory: 'add-to-cart'\n\t\t\t\t,\taction: 'button'\n\t\t\t\t,\tlabel: item.get('_url') + item.getQueryString()\n\t\t\t\t,\tvalue: 1\n\t\t\t\t});\n\t\t\t});\n\n\t\t\toptions.killerId = application && application.killerId;\n\n\t\t\treturn options;\n\t\t}\n\n\t,\taddItem: function (item, options)\n\t\t{\n\t\t\t// Calls the addItems funtion passing the item as an array of 1 item\n\t\t\treturn this.addItems([item], options);\n\t\t}\n\n\t,\taddItems: function (items, options)\n\t\t{\n\t\t\t// Obteins the Collection constructor\n\t\t\tvar LinesCollection = this.linesCollection;\n\n\t\t\t// Prepares the input for the new collection\n\t\t\tvar lines = _.map(items, function (item)\n\t\t\t{\n\t\t\t\tvar line_options = item.getItemOptionsForCart();\n\n\t\t\t\treturn {\n\t\t\t\t\titem: {\n\t\t\t\t\t\tinternalid: item.get('internalid')\n\t\t\t\t\t}\n\t\t\t\t,\tquantity: item.get('quantity')\n\t\t\t\t,\toptions: _.values(line_options).length ? line_options : null\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t// Creates the Colection\n\t\t\tvar self = this\n\t\t\t,\tlines_collection = new LinesCollection(lines);\n\n\t\t\t// add the dummy line for optimistic add to cart - when the request come back with the real data the collection will be reseted.\n\t\t\tif (this.optimistic)\n\t\t\t{\n\t\t\t\tvar dummy_line = new OrderLineModel({\n\t\t\t\t\tquantity: this.optimistic.quantity\n\t\t\t\t,\titem: this.optimistic.item.attributes\n\t\t\t\t,\trate_formatted: this.optimistic.item.get('_price_formatted')\n\t\t\t\t,\trate: this.optimistic.item.get('_price')\n\t\t\t\t});\n\t\t\t\t// search the item in the cart to merge the quantities\n\t\t\t\tvar item_line = this.get('lines').find(function (line)\n\t\t\t\t{\n\t\t\t\t\treturn line.get('item').get('internalid') === self.optimistic.item.get('internalid');\n\t\t\t\t});\n\t\t\t\tif (item_line)\n\t\t\t\t{\n\t\t\t\t\titem_line.set('quantity', parseInt(this.optimistic.quantity, 10) + item_line.get('quantity'));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.get('lines').add(dummy_line);\n\t\t\t\t\titem_line = dummy_line;\n\t\t\t\t}\n\t\t\t\tthis.optimisticLine = item_line;\n\t\t\t\tthis.trigger('change');\n\t\t\t}\n\n\t\t\t// Saves it\n\t\t\tvar promise = lines_collection.sync('create', lines_collection, this.wrapOptionsSuccess(options));\n\t\t\tif (promise)\n\t\t\t{\n\t\t\t\tpromise.fail(function()\n\t\t\t\t{\n\t\t\t\t\t// if any error we must revert the optimistic changes.\n\t\t\t\t\tif (self.optimistic)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar item_line = self.get('lines').find(function (line)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn line.get('item').get('internalid') === self.optimistic.item.get('internalid');\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (item_line)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\titem_line.set('quantity', item_line.get('quantity') - parseInt(self.optimistic.quantity, 10));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!item_line.get('quantity'))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tself.get('lines').remove(item_line);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.set('latest_addition', self.get('latest_addition_original'));\n\t\t\t\t\t\tself.trigger('change');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn promise;\n\t\t}\n\n\t,\tupdateItem: function (line_id, item, options)\n\t\t{\n\t\t\tvar line = this.get('lines').get(line_id)\n\t\t\t,\tline_options = item.getItemOptionsForCart();\n\n\t\t\tline.set({\n\t\t\t\tquantity: item.get('quantity')\n\t\t\t,\toptions: _.values(line_options).length ? line_options : null\n\t\t\t});\n\n\t\t\tline.ongoingPromise = line.save({}, this.wrapOptionsSuccess(options));\n\n\t\t\treturn line.ongoingPromise;\n\t\t}\n\n\t,\tupdateLine: function (line, options)\n\t\t{\n\t\t\t// Makes sure the quantity is a number\n\t\t\tline.set('quantity', parseInt(line.get('quantity'), 10));\n\n\t\t\tline.ongoingPromise = line.save({}, this.wrapOptionsSuccess(options));\n\n\t\t\treturn line.ongoingPromise;\n\t\t}\n\n\t,\tremoveLine: function (line, options)\n\t\t{\n\t\t\tline.ongoingPromise = line.destroy(this.wrapOptionsSuccess(options));\n\n\t\t\treturn line.ongoingPromise;\n\t\t}\n\n\t\t// submit invoked when the user place/submit the order\n\t,\tsubmit: function ()\n\t\t{\n\t\t\tthis.set('internalid', null);\n\n\t\t\tvar self = this\n\t\t\t,\tcreditcard = this.get('paymentmethods').findWhere({type: 'creditcard'})\n\t\t\t,\tpaypal = this.get('paymentmethods').findWhere({type: 'paypal'});\n\n\t\t\tif (creditcard && !creditcard.get('creditcard'))\n\t\t\t{\n\t\t\t\tthis.get('paymentmethods').remove(creditcard);\n\t\t\t}\n\n\t\t\tif (paypal && !paypal.get('complete'))\n\t\t\t{\n\t\t\t\tthis.get('paymentmethods').remove(paypal);\n\t\t\t}\n\t\t\treturn this.save().fail(function ()\n\t\t\t{\n\t\t\t\tself.set('internalid', 'cart');\n\t\t\t}).done(function ()\n\t\t\t{\n\t\t\t\tself.application.trackEvent && self.application.trackEvent({\n\t\t\t\t\tcategory: 'place-order'\n\t\t\t\t,\taction: 'button'\n\t\t\t\t,\tlabel: ''\n\t\t\t\t,\tvalue: 1\n\t\t\t});\n\t\t\t});\n\t\t}\n\n\t,\tsave: function ()\n\t\t{\n\t\t\tif (this.get('confirmation'))\n\t\t\t{\n\t\t\t\treturn jQuery.Deferred().resolve();\n\t\t\t}\n\n\t\t\treturn OrderModel.prototype.save.apply(this, arguments);\n\t\t}\n\n\t,\tgetTotalItemCount: function ()\n\t\t{\n\t\t\treturn _.reduce(this.get('lines').pluck('quantity'), function (memo, quantity)\n\t\t\t{\n\t\t\t\treturn memo + (parseFloat(quantity) || 1);\n\t\t\t}, 0);\n\t\t}\n\n\t,\tparse: function (response, options)\n\t\t{\n\t\t\tif (options && !options.parse)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn response;\n\t\t}\n\n\t\t// Returns the order's lines that have not set its addresses to Multi Ship To yet\n\t,\tgetUnsetLines: function ()\n\t\t{\n\t\t\treturn this.get('lines').filter(function (line) { return !line.get('shipaddress') && line.get('isshippable'); });\n\t\t}\n\n\t\t// Returns the order's line that are NON Shippable\n\t,\tgetNonShippableLines: function ()\n\t\t{\n\t\t\treturn this.get('lines').filter(function (line) { return !line.get('isshippable'); });\n\t\t}\n\n\t\t// Returns the list of lines already set its shipping address\n\t,\tgetSetLines: function ()\n\t\t{\n\t\t\treturn this.get('lines').filter(function (line) { return line.get('shipaddress') && line.get('isshippable'); });\n\t\t}\n\n\t\t// Returns the order's line that are shippable without taking into account if their have or not set a shipaddress\n\t,\tgetShippableLines: function ()\n\t\t{\n\t\t\treturn this.get('lines').filter(function (line) { return line.get('isshippable'); });\n\t\t}\n\t\t// Returns an array containing the cart items ids\n\t,\tgetItemsIds: function ()\n\t\t{\n\t\t\treturn this.get('lines').map(function(line){return line.get('item').get('internalid');});\n\t\t}\n\t\t//Determines if at least one item is shippable\n\t,\tgetIfThereAreDeliverableItems: function ()\n\t\t{\n\t\t\treturn this.get('lines').length !== this.getNonShippableLines().length;\n\t\t}\n\t});\n});\n\n\n// Order.Model.js\n// -----------------------\n// Model for showing information about an order\ndefine('Order.Model', ['OrderLine.Collection', 'OrderShipmethod.Collection', 'Address.Collection', 'CreditCard.Collection','OrderPaymentmethod.Collection'], function (OrderLinesCollection, ShipmethodsCollection, AddressesCollection, CreditCardsCollection, OrderPaymentmethodCollection)\n{\n\t'use strict';\n\n\treturn Backbone.Model.extend({\n\n\t\tlinesCollection: OrderLinesCollection\n\n\t,\tinitialize: function (attributes)\n\t\t{\n\t\t\tthis.on('change:lines', function (model, lines)\n\t\t\t{\n\t\t\t\tmodel.set('lines', new model.linesCollection(lines), {silent: true});\n\t\t\t});\n\t\t\tthis.trigger('change:lines', this, attributes && attributes.lines || []);\n\n\t\t\tthis.on('change:shipmethods', function (model, shipmethods)\n\t\t\t{\n\t\t\t\tmodel.set('shipmethods', new ShipmethodsCollection(shipmethods), {silent: true});\n\t\t\t});\n\t\t\tthis.trigger('change:shipmethods', this, attributes && attributes.shipmethods || []);\n\n\t\t\tthis.on('change:multishipmethods', function (model, multishipmethods)\n\t\t\t{\n\t\t\t\tif (multishipmethods)\n\t\t\t\t{\n\t\t\t\t\t_.each(_.keys(multishipmethods), function(address_id) {\n\t\t\t\t\t\tmultishipmethods[address_id] = new ShipmethodsCollection(multishipmethods[address_id], {silent: true});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tmodel.set('multishipmethods', multishipmethods, {silent: true});\n\t\t\t});\n\t\t\tthis.trigger('change:multishipmethods', this, attributes && attributes.multishipmethods || []);\n\n\t\t\tthis.on('change:addresses', function (model, addresses)\n\t\t\t{\n\t\t\t\tmodel.set('addresses', new AddressesCollection(addresses), {silent: true});\n\t\t\t});\n\t\t\tthis.trigger('change:addresses', this, attributes && attributes.addresses || []);\n\n\t\t\tthis.on('change:paymentmethods', function (model, paymentmethods)\n\t\t\t{\n\t\t\t\tmodel.set('paymentmethods', new OrderPaymentmethodCollection(paymentmethods), {silent: true});\n\t\t\t});\n\t\t\tthis.trigger('change:paymentmethods', this, attributes && attributes.paymentmethods || []);\n\t\t}\n\t});\n});\n\n\n// OrderLine.Collection.js\n// -----------------------\n// Order Line collection\ndefine('OrderLine.Collection', ['OrderLine.Model'], function (Model)\n{\n\t'use strict';\n\n\treturn Backbone.Collection.extend({\n\t\tmodel: Model\n\t});\n});\n\n// OrderLine.Model.js\n// -----------------------\n// Model for showing information about a line in the order\ndefine('OrderLine.Model', ['ItemDetails.Model'], function (ItemDetailsModel)\n{\n\t'use strict';\n\n\treturn Backbone.Model.extend({\n\n\t\tinitialize: function (attributes)\n\t\t{\n\t\t\tthis.on('change:item', function (model, item)\n\t\t\t{\n\t\t\t\tmodel.set('minimumquantity', item.minimumquantity);\n\n\t\t\t\tmodel.set('item', new ItemDetailsModel(_.extend(item, {\n\t\t\t\t\tline_id: model.get('internalid')\n\t\t\t\t,\toptions: model.get('options')\n\t\t\t\t,\tquantity: model.get('quantity')\n\t\t\t\t,\tminimumquantity: model.get('minimumquantity')\n\t\t\t\t})), {silent: true});\n\t\t\t});\n\n\t\t\tthis.trigger('change:item', this, attributes && attributes.item || {});\n\n\t\t\tthis.on('error', function (model, jqXhr)\n\t\t\t{\n\t\t\t\tvar result = JSON.parse(jqXhr.responseText)\n\t\t\t\t,\terror_details = result.errorDetails;\n\n\t\t\t\tif (error_details && error_details.status === 'LINE_ROLLBACK')\n\t\t\t\t{\n\t\t\t\t\tmodel.set('internalid', error_details.newLineId);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Extend the model with Backbone.Validation.mixin to validate it without a View\n\t\t\t_.extend(this, Backbone.Validation.mixin);\n\t\t}\n\n\t,\tvalidation: \n\t\t{\n\t\t\tquantity: { fn: function() \n\t\t\t\t{\n\t\t\t\t\tif (this.get('quantity') < this.get('item').get('_minimumQuantity', true))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn _('The minimum quantity for this item is $(0).').translate(this.get('item').get('_minimumQuantity', true));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t,\ttoJSON: function ()\n\t\t{\n\t\t\tvar options = this.attributes.options;\n\n\t\t\t// Custom attributes include the id and value as part of the array not the format expected in service\n\t\t\tif (options instanceof Array)\n\t\t\t{\n\t\t\t\tvar newOptions = {};\n\n\t\t\t\t_.each(options, function (e)\n\t\t\t\t{\n\t\t\t\t\tnewOptions[e.id.toLowerCase()] = e.value;\n\t\t\t\t});\n\n\t\t\t\toptions = newOptions;\n\t\t\t}\n\n\t\t\tvar matrix_parent_id = this.attributes.item.get('_matrixParent') && this.attributes.item.get('_matrixParent').get('_id');\n\n\t\t\treturn {\n\t\t\t\titem: {\n\t\t\t\t\tinternalid: matrix_parent_id ? matrix_parent_id : this.attributes.item.get('_id')\n\t\t\t\t}\n\t\t\t,\tquantity: this.attributes.quantity\n\t\t\t,\tinternalid: this.attributes.internalid\n\t\t\t,\toptions: options\n\t\t\t,\tsplitquantity: parseInt(this.attributes.splitquantity, 10)\n\t\t\t,\tshipaddress: this.attributes.shipaddress\n\t\t\t,\tshipmethod: this.attributes.shipmethod\n\t\t\t};\n\t\t}\n\n\t,\tgetPrice: function ()\n\t\t{\n\t\t\tvar item_price = this.attributes.item.getPrice();\n\n\t\t\treturn {\n\t\t\t\tprice: this.get('rate')\n\t\t\t,\tprice_formatted: this.get('rate_formatted')\n\t\t\t,\tcompare_price: item_price.compare_price\n\t\t\t,\tcompare_price_formatted: item_price.compare_price_formatted\n\t\t\t};\n\t\t}\n\t});\n});\n\n// OrderPaymentmethod.Collection.js\n// --------------------------------\n// Collection of posible payment method\ndefine('OrderPaymentmethod.Collection', ['OrderPaymentmethod.Model'], function (Model)\n{\n\t'use strict';\n\n\treturn Backbone.Collection.extend({\n\t\tmodel: Model\n\t});\n});\n\n\n// OrderPaymentmethod.Model.js\n// ---------------------------\n// Payment method Model\ndefine('OrderPaymentmethod.Model', function ()\n{\n\t'use strict';\n\n\treturn Backbone.Model.extend({\n\t\tgetFormattedPaymentmethod: function ()\n\t\t{\n\t\t\treturn this.get('type');\n\t\t}\n\t});\n});\n\n\n// OrderShipmethod.Collection.js\n// -----------------------------\n// Shipping methods collection\ndefine('OrderShipmethod.Collection', ['OrderShipmethod.Model'], function (Model)\n{\n\t'use strict';\n\n\treturn Backbone.Collection.extend({\n\t\tmodel: Model\n\t,\tcomparator: 'name'\n\t});\n});\n\n// OrderShipmethod.Model.js\n// ------------------------\n// Single ship method\ndefine('OrderShipmethod.Model', function ()\n{\n\t'use strict';\n\n\treturn Backbone.Model.extend({\n\t\tgetFormattedShipmethod: function ()\n\t\t{\n\t\t\treturn this.get('name');\n\t\t}\n\t});\n\n\t\n});\n\n\n// ProductList.Collection.js\n// -----------------------\n// Product List collection\ndefine('ProductList.Collection', ['ProductList.Model'], function (Model)\n{\n\t'use strict';\n\n\treturn Backbone.Collection.extend({\n\n\t\turl: _.getAbsoluteUrl('services/product-list.ss')\n\n\t,\tmodel: Model\n\n\t\t// Filter based on the iterator and return a collection of the same type\n\t,\tfiltered: function(iterator) {\n\t\t\treturn new this.constructor(this.filter(iterator));\n\t\t}\n\t});\n});\n\n// ProductLists.Model.js \n// -----------------------\n// Model for handling Product Lists (CRUD)\ndefine('ProductList.Model',['ProductListItem.Collection'], function (ProductListItemCollection)\n{\n\t'use strict';\n\n\tfunction validateLength (value, name)\n\t{\n\t\tvar max_length = 300;\n\n\t\tif (value && value.length > max_length)\n\t\t{\n\t\t\treturn _('$(0) must be at most $(1) characters').translate(name, max_length);\n\t\t}\n\t}\n\n\tfunction validateName (value, name)\n\t{\n\t\tif (!value)\n\t\t{\n\t\t\treturn _('Name is required').translate();\n\t\t}\n\n\t\treturn validateLength(value, name);\n\t}\n\n\treturn Backbone.Model.extend(\n\t{\n\t\turlRoot: _.getAbsoluteUrl('services/product-list.ss')\n\n\t,\tdefaults : {\n\t\t\tname: ''\n\t\t,\tdescription: ''\n\t\t,\titems : new ProductListItemCollection()\n\t\t,\tscope : {id: '2', name: 'private'}\n\t\t,\ttype : {id: '1', name: 'default'}\n\t\t}\n\n\t,\tvalidation:\n\t\t{\n\t\t\tname: { fn: validateName }\n\n\t\t,\tdescription: { fn: validateLength }\n\t\t}\n\n\t\t// redefine url to avoid possible cache problems from browser\n\t,\turl: function()\n\t\t{\n\t\t\tvar base_url = Backbone.Model.prototype.url.apply(this, arguments);\n\t\t\t\n\t\t\treturn base_url + '&t=' + new Date().getTime();\n\t\t}\n\n\t,\tinitialize: function (data)\n\t\t{\n\t\t\tvar collection;\n\n\t\t\tif (data && data.items)\n\t\t\t{\n\t\t\t\tcollection = new ProductListItemCollection(data.items);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcollection = new ProductListItemCollection([]);\n\t\t\t}\n\t\t\t\n\t\t\tthis.set('items', collection);\t\t\t\n\t\t}\n\n\t\t// Returns true if an item with id: pli_to_add_id and options: pli_to_add_options is already in this product list. Options could be empty.\n\t,\tchecked: function (item_to_add_id, item_to_add_options)\n\t\t{\n\t\t\treturn this.get('items').some(function (pli)\n\t\t\t{\t\t\t\n\t\t\t\tif (pli.item.internalid === item_to_add_id)\n\t\t\t\t{\n\t\t\t\t\tvar pli_options = pli.get('options');\n\t\t\t\t\t\n\t\t\t\t\tif (_.isEmpty(pli_options) && _.isEmpty(item_to_add_options))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn _.isEqual(pli_options, item_to_add_options);\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}\n\n\t\t// Returns all the products which are out of stock.\n\t,\tgetOutOfStockItems: function()\n\t\t{\n\t\t\treturn this.get('items').filter(function(product_list_item) \n\t\t\t{\n\t\t\t\treturn !product_list_item.get('item').ispurchasable; \n\t\t\t});\t\t\t\n\t\t}\n\n\t\t// Returns all the products which do not fulfill minimum quantity requirements.\n\t,\tgetNotPurchasableItemsDueToMinimumQuantity: function()\n\t\t{\n\t\t\treturn this.get('items').filter(function(product_list_item) \n\t\t\t{\n\t\t\t\treturn !product_list_item.fulfillsMinimumQuantityRequirement();\n\t\t\t});\n\t\t}\n\t});\n});\n\n// CreditCard.Router.js\n// -----------------------\n// Router for handling Product lists \ndefine('ProductList.Router', ['ProductList.Model'], function (ProductListModel)\n{\n\t'use strict';\n\n\treturn Backbone.Router.extend({\n\n\t\troutes: \n\t\t{\n\t\t\t'productlists': 'showProductListsList'\n\t\t,\t'productlists/?*options': 'showProductListsList'\n\t\t,\t'productlist/:id': 'showProductListDetails'\n\t\t,\t'productlist/:id/?*options': 'showProductListDetails'\n\t\t}\n\n\t,\tinitialize: function (application)\n\t\t{\n\t\t\tthis.application = application;\n\t\t}\n\n\t\t// resolve the Product list details routes that can be of form /productlist/$(internalid) or \n\t\t// /productlist/tmpl_$(templateid) in the case the record doesn't exist yet (predefined lists)\n\t,\tshowProductListDetails: function (id, options)\n\t\t{\n\t\t\tvar prefix = 'tmpl_'\n\t\t\t,\tself = this\n\t\t\t,\tindex_of_question = id.indexOf('?')\n\t\t\t,\tinternalid;\n\n\t\t\tif (index_of_question !== -1)\n\t\t\t{\n\t\t\t\toptions = id.substring(index_of_question);\n\t\t\t\tinternalid = parseInt(id, 10);\n\n\t\t\t\tif (!isNaN(internalid))\n\t\t\t\t{\n\t\t\t\t\tid = internalid + '';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (id.indexOf(prefix) === 0)\n\t\t\t{ \n\t\t\t\t// then this is a predefined template that doesn't exist yet (without internalid)\n\t\t\t\tvar template_id = id.substring(prefix.length, index_of_question !== -1 ? index_of_question : id.length)\n\t\t\t\t,\tproduct_lists_promise = self.application.getProductLists().fetch();\n\n\t\t\t\tproduct_lists_promise.done(function() \n\t\t\t\t{\n\t\t\t\t\tvar template = self.application.getProductLists().findWhere({templateid: template_id});\n\t\t\t\t\t\n\t\t\t\t\tself.doShowProductListDetails(template, options);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tself.application.getProductList(id).done(function(model) \n\t\t\t\t{\n\t\t\t\t\tself.doShowProductListDetails(new ProductListModel(model), options);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Render the product list details view\n\t,\tdoShowProductListDetails: function(model, options)\n\t\t{\n\t\t\tvar params_options = _.parseUrlOptions(options)\n\t\t\t,\tview = new this.application.ProductListModule.Views.Details({\n\t\t\t\tapplication: this.application\n\t\t\t,\tparams: params_options\n\t\t\t,\tmodel: model\n\t\t\t,\tincludeSortingFilteringHeader: true\n\t\t\t});\n\n\t\t\tview.showContent('productlist_' + (model.get('internalid') ? model.get('internalid') : 'tmpl_' + model.get('templateid')));\n\t\t}\n\n\t\t// Render the product lists landing page\n\t,\tshowProductListsList: function (options)\n\t\t{\n\t\t\tvar self = this;\n\n\t\t\tthis.application.getProductListsPromise().done(function ()\n\t\t\t{\t\t\t\t\n\t\t\t\tvar params_options = _.parseUrlOptions(options)\n\t\t\t\t,\tview = new self.application.ProductListModule.Views.Lists({\n\t\t\t\t\t\tapplication: self.application\n\t\t\t\t\t,\tparams: params_options\n\t\t\t\t\t,\tcollection: self.application.getProductLists()\n\t\t\t\t\t});\n\n\t\t\t\tview.showContent('productlist_all');\n\t\t\t});\n\t\t}\n\t});\n});\n\n\n// ProductList.js\n// -----------------\n// Defines the ProductList module (Model, Views, Router). \ndefine('ProductList',\n['ProductListControl.Views', 'ProductListDetails.View', 'ProductList.Collection','ProductList.Model','ProductListItem.Collection','ProductListItem.Model', 'ProductList.Router','ProductListDeletion.View', 'ProductListCreation.View', 'ProductListLists.View'],\nfunction (ProductListControlViews, ProductListDetailsView, ProductListCollection, ProductListModel, ProductListItemCollection, ProductListItemModel, ProductListRouter, ProductListDeleteView, ProductListCreateView, ProductListListsView)\n{\n\t'use strict';\n\n\t// ProductLists myaccount's menu items. This is a good example of dynamic-multilevel myaccount's menuitems definition.\n\tvar productlists_dummy_menuitems = function(application) \n\t{\n\t\tif (!application.ProductListModule.isProductListEnabled()) \n\t\t{\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn {\n\t\t\tid: 'product_list_dummy'\n\t\t,\tname: application.ProductListModule.isSingleList() ? _('Loading list...').translate() : _('Loading lists...').translate()\n\t\t,\turl: ''\n\t\t,\tindex: 2\n\t\t};\n\t}; \n\n\t// Call only when promise was resolved!\n\tvar productlists_menuitems = function(application)\n\t{\n\t\tif (!application.ProductListModule.isProductListEnabled())\n\t\t{\n\t\t\treturn undefined;\n\t\t}\n\n\t\tvar product_lists = application.getProductLists()\n\t\t,\tactual_object = {\n\n\t\t\tid: function (application)\n\t\t\t{\n\t\t\t\t// Returns the correct id of the list in the case of single list and 'productlists' otherwise.\n\t\t\t\tvar is_single_list = application.ProductListModule.isSingleList();\n\n\t\t\t\tif (is_single_list) \n\t\t\t\t{\n\t\t\t\t\tvar the_single_list = product_lists.at(0);\n\t\t\t\t\t\n\t\t\t\t\t// Check if it's a predefined list before return\n\t\t\t\t\treturn 'productlist_' + (the_single_list.get('internalid') ? the_single_list.get('internalid') : ('tmpl_' + the_single_list.get('templateid')));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn 'productlists';\n\t\t\t\t}\n\t\t\t}\n\t\t,\tname: function (application)\n\t\t\t{\n\t\t\t\t// The name of the first list in the case of single list or generic 'Product Lists' otherwise\n\t\t\t\treturn application.ProductListModule.isSingleList() ? \n\t\t\t\t\tproduct_lists.at(0).get('name') :\n\t\t\t\t\t_('Product Lists').translate();\n\t\t\t}\n\t\t,\turl: function (application)\n\t\t\t{\t\t\t\t\n\t\t\t\t// Returns a link to the list in the case of single list and no link otherwise.\n\t\t\t\tvar is_single_list = application.ProductListModule.isSingleList(); \n\t\t\t\tif(is_single_list) \n\t\t\t\t{\n\t\t\t\t\tvar the_single_list = product_lists.at(0); \n\t\t\t\t\treturn 'productlist/' + (the_single_list.get('internalid') ? the_single_list.get('internalid') : ('tmpl_' + the_single_list.get('templateid'))); \n\t\t\t\t}\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\treturn ''; \n\t\t\t\t}\n\t\t\t}\n\t\t\t// Index of the menu item for menu order\n\t\t,\tindex: 2\n\t\t\t// Sub-menu items\n\t\t,\tchildren: function (application) \n\t\t\t{\n\t\t\t\t// If it's single list, there is no sub-menu\n\t\t\t\tif (application.ProductListModule.isSingleList())\n\t\t\t\t{\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\t// The first item (if not single list) has to be a link to the landing page\n\t\t\t\tvar items = [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'productlist_all'\n\t\t\t\t\t,\tname: _('All my lists').translate()\n\t\t\t\t\t,\turl: 'productlists/?'\n\t\t\t\t\t,\tindex: 1\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t\t// Then add all the lists\n\t\t\t\tproduct_lists.each(function (productlist)\n\t\t\t\t{\n\t\t\t\t\titems.push({\n\t\t\t\t\t\tid: 'productlist_' + (productlist.get('internalid') || 'tmpl_' + productlist.get('templateid'))\n\t\t\t\t\t,\turl: 'productlist/' + (productlist.get('internalid') || 'tmpl_' + productlist.get('templateid'))\n\t\t\t\t\t,\tname: productlist.get('name') + '&nbsp;(' + productlist.get('items').length + ')'\n\t\t\t\t\t,\tindex: 2\n\t\t\t\t\t}); \n\t\t\t\t});\n\n\t\t\t\treturn items; \n\t\t\t}\n\t\t}; \n\n\t\treturn actual_object;\n\t};\n\n\t// Encapsulate all product list elements into a single module to be mounted to the application\n\t// Update: Keep the application reference within the function once its mounted into the application\n\tvar ProductListModule = function()\n\t{\n\t\tvar app = {};\n\t\t// this application will render some of its views in existing DOM elements (placeholders)\n\t\tvar placeholder = {\n\t\t\tcontrol: '[data-type=\"product-lists-control\"]'\n\t\t};\n\n\t\tvar views = {\n\t\t\t\tControl: ProductListControlViews\n\t\t\t,\tDetails: ProductListDetailsView\n\t\t\t,\tNewList: ProductListCreateView\n\t\t\t,\tLists: ProductListListsView\n\t\t\t,\tDelete: ProductListDeleteView\n\t\t\t}\n\t\t,\tmodels = {\n\t\t\t\tProductList: ProductListModel\n\t\t\t,\tProductListItem: ProductListItemModel\n\t\t\t}\n\t\t,\tcollections = {\n\t\t\t\tProductList: ProductListCollection\n\t\t\t,\tProductListItem: ProductListItemCollection\n\t\t\t};\n\n\t\t// is the Product-List functionality available for this application?\n\t\tvar isProductListEnabled = function () \n\t\t{\n\t\t\tvar application = app;\n\n\t\t\treturn application.getConfig('product_lists') !== undefined;\n\t\t};\n\n\t\t// are we in the single-list modality ? \n\t\tvar isSingleList = function ()\n\t\t{\n\t\t\tvar application = app;\n\n\t\t\treturn !application.getConfig('product_lists.additionEnabled') && \n\t\t\t\tapplication.getConfig('product_lists.list_templates') && \n\t\t\t\t_.filter(application.getConfig('product_lists.list_templates'), function (pl) { return !pl.type || pl.type.name !== 'later'; }).length === 1 ;\n\t\t};\n\n\t\tvar mountToApp = function (application)\n\t\t{\n\t\t\tapp = application;\n\n\t\t\t// Loads Product Lists collection model singleton\n\t\t\tapplication.getProductListsPromise = function ()\n\t\t\t{\n\t\t\t\tif (!application.productListsInstancePromise)\n\t\t\t\t{\n\t\t\t\t\tapplication.productListsInstancePromise = jQuery.Deferred();\n\t\t\t\t\tapplication.productListsInstance = new ProductListCollection();\n\t\t\t\t\tapplication.productListsInstance.application = application;\n\t\t\t\t\tapplication.productListsInstance.fetch().done(function(jsonCollection) \n\t\t\t\t\t{\n\t\t\t\t\t\tapplication.productListsInstance.set(jsonCollection);\t\t\t\t\t\t\n\t\t\t\t\t\tapplication.productListsInstancePromise.resolve(application.productListsInstance);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn application.productListsInstancePromise;\n\t\t\t};\n\n\t\t\tapplication.getProductLists = function ()\n\t\t\t{\n\t\t\t\tif (!application.productListsInstance)\n\t\t\t\t{\n\t\t\t\t\tapplication.productListsInstance = new ProductListCollection();\n\t\t\t\t\tapplication.productListsInstance.application = application;\n\t\t\t\t}\n\n\t\t\t\treturn application.productListsInstance;\n\t\t\t};\n\n\t\t\t// obtain a single ProductList with all its item's data\n\t\t\tapplication.getProductList = function (id)\n\t\t\t{\n\t\t\t\tvar productList = new ProductListModel();\n\n\t\t\t\tproductList.set('internalid', id);\n\t\t\t\t\n\t\t\t\treturn productList.fetch();\n\t\t\t};\n\n\t\t\t// obtain a single Saved for Later ProductList with all its item's data\n\t\t\tapplication.getSavedForLaterProductList = function ()\n\t\t\t{\n\t\t\t\tvar productList = new ProductListModel();\n\n\t\t\t\tproductList.set('internalid', 'later');\n\t\t\t\t\n\t\t\t\treturn productList.fetch();\n\t\t\t};\n\n\t\t\t// Application.ProductListModule - reference to this module\n\t\t\tapplication.ProductListModule = ProductListModule;\n\n\t\t\tapplication.getUserPromise().done(function () \n\t\t\t{\n\t\t\t\tif (SC.ENVIRONMENT.PRODUCTLISTS_CONFIG)\n\t\t\t\t{\n\t\t\t\t\tapplication.Configuration.product_lists = SC.ENVIRONMENT.PRODUCTLISTS_CONFIG;\n\t\t\t\t}\n\n\t\t\t\t// if Product Lists are not enabled, return...\n\t\t\t\tif (application.ProductListModule.isProductListEnabled())\n\t\t\t\t{\n\t\t\t\t\tvar layout = application.getLayout();\n\n\t\t\t\t\t// rendering product lists\n\t\t\t\t\tapplication.ProductListModule.renderProductLists();\n\t\t\t\t\t\n\t\t\t\t\tlayout.on('afterAppendView', function (view)\n\t\t\t\t\t{\n\t\t\t\t\t\tapplication.ProductListModule.renderProductLists(view);\t\n\t\t\t\t\t});\n\n\t\t\t\t\tlayout.on('afterAppendToDom', function ()\n\t\t\t\t\t{\n\t\t\t\t\t\tapplication.ProductListModule.renderProductLists();\n\t\t\t\t\t});\n\n\t\t\t\t\t// Put this code block outside afterAppendView to avoid infinite loop!\n\t\t\t\t\tapplication.getProductListsPromise().done(function()\n\t\t\t\t\t{\n\t\t\t\t\t\t// Replace dummy menu item from My Account\n\t\t\t\t\t\tlayout.replaceMenuItem && layout.replaceMenuItem(function (menuitem)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn menuitem && menuitem.id === 'product_list_dummy';\n\t\t\t\t\t\t}, productlists_menuitems);\n\n\t\t\t\t\t\tlayout.updateMenuItemsUI && layout.updateMenuItemsUI();\n\n\t\t\t\t\t\tif (application.ProductListModule.isSingleList())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Update header profile link for single product list...\n\t\t\t\t\t\t\tvar the_single_list = application.getProductLists().at(0)\n\t\t\t\t\t\t\t,\tproduct_list_menu_item = layout.$('.header-profile-single-productlist');\n\n\t\t\t\t\t\t\tif (the_single_list && product_list_menu_item)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar product_list_hashtag = '#productlist/' + (the_single_list.get('internalid') ? the_single_list.get('internalid') : ('tmpl_' + the_single_list.get('templateid')));\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tproduct_list_menu_item.text(the_single_list.get('name'));\n\t\t\t\t\t\t\t\tproduct_list_menu_item.attr('data-hashtag', product_list_hashtag);\n\n\t\t\t\t\t\t\t\tlayout.updateUI();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t});\n\n\t\t\t\t\tProductListItemModel.prototype.keyMapping = application.getConfig('itemKeyMapping', {});\n\t\t\t\t\tProductListItemModel.prototype.itemOptionsConfig = application.getConfig('itemOptions', []);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// always start our router.\n\t\t\treturn new ProductListRouter(application);\n\t\t};\n\n\t\t// renders the control used in shopping pdp and quickview\n\t\tvar renderControl = function (view_)\n\t\t{\t\n\t\t\tvar application = app;\n\n\t\t\tjQuery(placeholder.control).each(function()\n\t\t\t{\n\t\t\t\tvar view = view_ || application.getLayout().currentView\n\t\t\t\t,\tis_single_list_mode = application.ProductListModule.isSingleList()\n\t\t\t\t,\t$container = jQuery(this);\n\n\t\t\t\tapplication.getProductListsPromise().done(function()\n\t\t\t\t{\n\t\t\t\t\t// this control needs a reference to the StoreItem model !\n\t\t\t\t\tif (view && view.model && view.model.getPosibleOptions)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar control = null;\n\n\t\t\t\t\t\tif (is_single_list_mode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontrol = new ProductListControlViews.ControlSingle({\n\t\t\t\t\t\t\t\tcollection: application.getProductLists()\n\t\t\t\t\t\t\t,\tproduct: view.model\n\t\t\t\t\t\t\t,\tapplication: application\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontrol = new ProductListControlViews.Control({\n\t\t\t\t\t\t\t\tcollection: application.getProductLists()\n\t\t\t\t\t\t\t,\tproduct: view.model\n\t\t\t\t\t\t\t,\tapplication: application\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$container.empty().append(control.$el);\n\t\t\t\t\t\tcontrol.render();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (application.getProductListsPromise().state() === 'pending')\n\t\t\t\t{\n\t\t\t\t\t$container.empty().append('<button class=\"btn\">' + is_single_list_mode ? _('Loading List...').translate() : _('Loading Lists...').translate() + '</button>');\n\t\t\t\t}\n\t\t\t}); \n\t\t};\n\n\t\t// render all product-lists related widgets\n\t\tvar renderProductLists = function (view)\n\t\t{\t\n\t\t\tvar application = app;\n\n\t\t\tif (!application.ProductListModule.isProductListEnabled())\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//global variable with the customer internalid. \n\t\t\tSC.ENVIRONMENT.customer_internalid = application.getUser().get('internalid'); \n\n\t\t\tapplication.ProductListModule.renderControl(view);\n\t\t};\n\n\t\t// Gets the internal product id for a store item considering it could be a matrix child. \n\t\tvar internalGetProductId = function (product)\n\t\t{\n\t\t\t// If its matrix its expected that only 1 item is selected, not more than one nor 0 \n\t\t\tif (product.getPosibleOptions().length)\n\t\t\t{\n\t\t\t\tvar selected_options = product.getSelectedMatrixChilds();\n\n\t\t\t\tif (selected_options.length === 1)\n\t\t\t\t{\n\t\t\t\t\treturn selected_options[0].get('internalid') + '';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn product.get('_id') + '';\n\t\t};\n\n\t\treturn {\n\t\t\tViews : views\n\t\t,\tModels: models\n\t\t,\tCollections: collections\n\t\t,\tRouter: ProductListRouter\n\t\t,\tisProductListEnabled: isProductListEnabled\n\t\t,\tisSingleList: isSingleList\n\t\t,\tmountToApp: mountToApp\n\t\t,\trenderControl: renderControl\n\t\t,\trenderProductLists: renderProductLists\n\t\t,\tinternalGetProductId: internalGetProductId\n\t\t,\tplaceholder: placeholder\n\t\t,\tMenuItems: productlists_dummy_menuitems\n\t\t};\n\n\t}();\n\n\treturn ProductListModule;\n});\n\n\n// ProductList.Views.js\n// -----------------------\n// Views for handling Product Lists (CRUD)\ndefine('ProductListAddedToCart.View', function ()\n{\n\t'use strict';\n\n\treturn Backbone.View.extend({\n\t\t\n\t\ttemplate: 'product_list_added_to_cart'\n\t\t\n\t,\tattributes: {'class': 'product-list-added-to-cart' }\n\t\t\n\t,\ttitle: _('Added to Cart').translate()\n\n\t,\tinitialize: function (options)\n\t\t{\t\t\t\t\t\t\n\t\t\tthis.options = options;\n\t\t\tthis.application = options.application;\n\t\t}\n\n\t\t// Render the view and show warning message if any item is not available to be added to the cart\n\t,\trender: function ()\n\t\t{\n\t\t\tBackbone.View.prototype.render.apply(this);\n\n\t\t\tvar list = this.options.list\n\t\t\t,\tnot_purchasable_items_count = this.options.not_purchasable_items_count;\n\n\t\t\tif (list && not_purchasable_items_count > 0)\n\t\t\t{\n\t\t\t\tvar warning_message = not_purchasable_items_count === 1 ? _('One item not available for purchase was not added to the cart.').translate() : _('$(0) items not available for purchase were not added to the cart.').translate(not_purchasable_items_count);\n\n\t\t\t\tthis.showWarningMessage(warning_message);\n\t\t\t}\t\t\t\n\t\t}\n\n\t,\tshowWarningMessage: function (message)\n\t\t{\n\t\t\tthis.$('[data-warning-message]').empty().append(message);\n\t\t}\n\n\t});\n\n});\n\n\n// ProductListControl.Views.js\n// -----------------------\n// The Control view that let the user add an item to a list from the pdp or quickview. \n// It supports 1) the single list experience and 2) the move item functionality.\ndefine('ProductListControl.Views',['ProductList.Model','ProductListItem.Collection', 'Session'], function (ProductListModel, ProductListItemCollection, Session)\n{\n\t'use strict';\n\n\tvar Views = {};\n\n\t// The main control view\n\tViews.Control = Backbone.View.extend({\n\t\t\n\t\ttemplate: 'product_list_control'\n\t\t\n\t,\tattributes: {'class': 'dropdown product-lists'}\n\n\t,\tevents:\n\t\t{\n\t\t\t\t'click [data-type=\"show-new-list\"]': 'showNewProductList'\n\t\t\t,\t'click [data-action=\"show-productlist-control\"]' : 'toggleProductListControl'\n\t\t}\n\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tthis.product = options.product;\n\t\t\tthis.collection = options.collection;\n\t\t\tthis.application = options.application;\n\t\t\tthis.moveOptions = options.moveOptions;\n\n\t\t\tif (this.moveOptions)\n\t\t\t{\n\t\t\t\tthis.mode = 'move';\n\t\t\t}\n\t\t\t\n\t\t\t// need to hide the menu (data-type=\"productlist-control\") when clicked outside, so we register here a click handler on the document.: \n\t\t\tjQuery(document).click(function(event)\n\t\t\t{\n\t\t\t\tif (jQuery(event.target).parents().index(jQuery(event.target).closest('[data-type^=\"productlist-control\"]')) === -1 && jQuery(event.target).attr('class') && jQuery(event.target).attr('class').indexOf('productlist-control') === -1)\n\t\t\t\t{\n\t\t\t\t\tif(jQuery('[data-type=\"productlist-control\"]').is(':visible'))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar $control = jQuery('[data-type=\"productlist-control\"]');\n\t\t\t\t\t\t\n\t\t\t\t\t\t// return the control to its initial state\n\t\t\t\t\t\t$control.find('form[data-type=\"add-new-list-form\"]').hide();\n\t\t\t\t\t\t$control.find('[data-type=\"show-add-new-list-form\"]').show();\n\n\t\t\t\t\t\t$control.slideUp();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Render the control view, appending the items views and add new list form\n\t,\trender: function ()\n\t\t{\n\t\t\t// if the control is currently visible then we remember that !\n\t\t\tthis.is_visible =  this.$('[data-type=\"productlist-control\"]').is(':visible');\t\t\t\n\t\t\t\n\t\t\tBackbone.View.prototype.render.apply(this);\n\t\t\t\n\t\t\tvar self = this;\n\n\t\t\tself.collection.each(function (model)\n\t\t\t{\n\t\t\t\tvar view = new Views.ControlItem({\n\t\t\t\t\tmodel: model\n\t\t\t\t,\tproduct: self.product\n\t\t\t\t,\tapplication : self.application\n\t\t\t\t,\tparentView: self\n\t\t\t\t});\n\n\t\t\t\tself.$('ul').prepend(view.render().el);\n\t\t\t});\n\n\t\t\tvar new_product_list_model = new ProductListModel()\n\t\t\t,\tnew_item_view = new Views.ControlNewItem({\n\t\t\t\t\tmodel: new_product_list_model\n\t\t\t\t,\tapplication : self.application\n\t\t\t\t,\tparentView: self\n\t\t\t\t});\n\t\t\t\n\t\t\tself.$('[data-type=\"new-item-container\"]').html(new_item_view.render().el);\n\n\t\t\t// we don't want to disable the control button for guest users because we want to send them to login page on click\n\t\t\tif (this.application.getUser().get('isLoggedIn') === 'T' && !self.isReadyForList())\n\t\t\t{\n\t\t\t\tself.$('[data-action=\"show-productlist-control\"]').attr('disabled', 'true');\n\t\t\t}\n\t\t\t\n\t\t\t// also we don't want to erase any previous confirmation messages\n\t\t\tself.confirm_message && self.saveAndShowConfirmationMessage(self.confirm_message);\n\t\t}\n\n\t\t// Show/Hide the control\n\t,\ttoggleProductListControl: function(e)\n\t\t{\n\t\t\tif (this.mode === 'move')\n\t\t\t{\n\t\t\t\te && e.stopPropagation();\n\t\t\t}\n\t\t\t\n\t\t\t// Check if the user is logged in\n\t\t\tif (!this.validateLogin())\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar $control = this.$('[data-type=\"productlist-control\"]');\n\n\t\t\tif ($control.is(':visible'))\n\t\t\t{\t\t\t\t\n\t\t\t\t// return the control to its initial state\n\t\t\t\t$control.find('form[data-type=\"add-new-list-form\"]').hide();\n\t\t\t\t$control.find('[data-type=\"show-add-new-list-form\"]').show();\n\n\t\t\t\t$control.slideUp();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// When in move mode, hide any other instance of the product list control in the page before sliding down.\n\t\t\t\tif (this.mode === 'move')\n\t\t\t\t{\n\t\t\t\t\tjQuery('[data-type=\"productlist-control\"]').hide();\n\t\t\t\t}\t\t\t\t\n\n\t\t\t\t$control.slideDown();\n\t\t\t}\n\t\t}\n\n\t\t// if the user is not logged in we redirect it to login page and then back to the PDP. \n\t,\tvalidateLogin: function ()\n\t\t{\n\t\t\tif (this.application.getUser().get('isLoggedIn') === 'F')\n\t\t\t{\n\t\t\t\tvar login = Session.get('touchpoints.login');\n\t\t\t\t\n\t\t\t\tlogin += '&origin=' + this.application.getConfig('currentTouchpoint');\n\n\t\t\t\tif (this.$el.closest('.modal-product-detail').size() > 0) //we are in the quick view\n\t\t\t\t{\n\t\t\t\t\tvar hashtag = this.$el.closest('.modal-product-detail').find('[data-name=\"view-full-details\"]').data('hashtag');\n\t\t\t\t\tlogin += '&origin_hash=' + hashtag.replace('#/', '');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlogin += '&origin_hash=' + Backbone.history.fragment;\n\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\twindow.location.href = login;\n\t\t\t\t\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// validates the passed gift cert item and return false and render an error message if invalid. \n\t,\tvalidateGiftCertificate: function (item) \n\t\t{\n\t\t\tif (item.itemOptions && item.itemOptions.GIFTCERTRECIPIENTEMAIL)\n\t\t\t{\n\t\t\t\tif (!Backbone.Validation.patterns.email.test(item.itemOptions.GIFTCERTRECIPIENTEMAIL.label))\n\t\t\t\t{\n\t\t\t\t\tthis.render(); //for unchecking the just checked checkbox\n\t\t\t\t\tthis.showError(_('Recipient email is invalid').translate());\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t,\tgetItemOptions: function (itemOptions)\n\t\t{\n\t\t\tvar result = {};\n\n\t\t\t_.each(itemOptions, function (value, name)\n\t\t\t{\n\t\t\t\tresult[name] = { value: value.internalid, displayvalue: value.label };\n\t\t\t});\n\n\t\t\treturn result;\n\t\t}\n\n\t\t// Adds the product to the newly created list, renders the control and shows a confirmation msg\n\t,\taddNewProductToList: function (newList)\n\t\t{\n\t\t\tthis.addItemToList(this.product, newList, true);\n\t\t\tthis.saveAndShowConfirmationMessage(\n\t\t\t\tthis.$('.ul-product-lists [type=\"checkbox\"]:checked').size() > 1 ?\n\t\t\t\t\t_('Good! You added this item to your product lists').translate() :\n\t\t\t\t\t_('Good! You added this item to your product list').translate()\n\t\t\t);\n\t\t}\n\n\t\t// Add a new product list item into a product list\n\t,\taddItemToList: function (product, productList, dontShowMessage)\n\t\t{\n\t\t\tif (!this.validateGiftCertificate(this.product))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar self = this;\n\n\t\t\tif (!productList.get('internalid')) //this is a predefined list\n\t\t\t{\n\t\t\t\tproductList.save().done(function(data)\n\t\t\t\t{\n\t\t\t\t\tvar new_model = new ProductListModel(data); \n\n\t\t\t\t\tself.application.getProductLists().add(new_model, {merge: true});\n\t\t\t\t\tself.doAddItemToList(product, new_model, dontShowMessage);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tself.doAddItemToList(product, productList, dontShowMessage);\n\t\t\t}\n\t\t}\n\n\t\t// Adds the new item to the collection\n\t,\tdoAddItemToList: function (product, productList, dontShowMessage)\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\tproduct_list_item = {\n\t\t\t\t\tdescription: ''\n\t\t\t\t,\toptions: this.getItemOptions(product.itemOptions)\n\t\t\t\t,\tquantity: product.get('quantity')\n\t\t\t\t,\tproductList: {\n\t\t\t\t\t\tid: productList.get('internalid')\n\t\t\t\t\t}\n\t\t\t\t,\titem: {\n\t\t\t\t\t\tinternalid: this.application.ProductListModule.internalGetProductId(product)\n\t\t\t\t\t}\n\t\t\t};\n\n\t\t\tproductList.get('items').create(product_list_item, {\n\t\t\t\tsuccess: function ()\n\t\t\t\t{\n\t\t\t\t\tself.render();\n\n\t\t\t\t\tif (!dontShowMessage)\n\t\t\t\t\t{\n\t\t\t\t\t\tself.saveAndShowConfirmationMessage(\n\t\t\t\t\t\t\tself.$('.ul-product-lists [type=\"checkbox\"]:checked').size() > 1 ?\n\t\t\t\t\t\t\t\t_('Good! You added this item to your product lists').translate() :\n\t\t\t\t\t\t\t\t_('Good! You added this item to your product list').translate()\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Check for predefined list before moving\n\t,\tmoveProductHandler: function (destination)\n\t\t{\n\t\t\tvar self = this;\n\n\t\t\tif (!destination.get('internalid')) //this is a predefined list\n\t\t\t{\n\t\t\t\tdestination.save().done(function(data)\n\t\t\t\t{\n\t\t\t\t\tvar new_product_list = new ProductListModel(data);\n\t\t\t\t\n\t\t\t\t\tself.application.getProductLists().add(new_product_list, {merge: true});\n\t\t\t\t\tself.moveProduct(new_product_list);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tself.application.getProductLists().add(destination, {merge: true});\n\t\t\t\tself.moveProduct(destination);\n\t\t\t}\n\t\t}\n\n\t\t// Moves the item to the destination list\n\t,\tmoveProduct: function (destination)\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\toriginal_item = this.moveOptions.productListItem\n\t\t\t,\toriginal_item_clone = original_item.clone()\n\t\t\t,\tdetails_view = this.moveOptions.parentView;\n\n\t\t\toriginal_item_clone.set('productList', {\n\t\t\t\tid: destination.get('internalid')\n\t\t\t});\n\n\t\t\tself.toggleProductListControl();\n\n\t\t\tdestination.get('items').create(original_item_clone,\n\t\t\t{\n\t\t\t\tsuccess: function (saved_model)\n\t\t\t\t{\n\t\t\t\t\tvar app = details_view.application\n\t\t\t\t\t,\tfrom_list = self.application.getProductLists().findWhere({internalid: self.moveOptions.parentView.model.get('internalid') })\n\t\t\t\t\t,\tto_list = self.application.getProductLists().findWhere({internalid: destination.get('internalid')});\n\n\t\t\t\t\tself.doMoveProduct(from_list, to_list, original_item, saved_model);\n\n\t\t\t\t\tdetails_view.model.get('items').remove(original_item);\n\t\t\t\t\tdetails_view.render();\n\t\t\t\t\t\n\t\t\t\t\tapp.getLayout().updateMenuItemsUI();\n\t\t\t\t\tapp.getLayout().currentView.showConfirmationMessage(\n\t\t\t\t\t\t_('Good! You successfully moved the item from this to $(0)').\n\t\t\t\t\t\t\ttranslate('<a href=\"/productlist/' + destination.get('internalid') + '\">' + destination.get('name') + '</a>')\n\t\t\t\t\t);\t\t\t\t\t\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Adds the item clone to the destination list and removes the original from its list\n\t,\tdoMoveProduct: function (from, to, original_model, saved_model)\n\t\t{\n\t\t\t// if add not defined, create the collection\n\t\t\tif (to.get('items') instanceof Array)\n\t\t\t{\n\t\t\t\tto.set('items', new ProductListItemCollection());\n\t\t\t}\n\t\t\t\n\t\t\t// add the item to the application collection\n\t\t\tto.get('items').add(saved_model);\n\t\t\t\n\t\t\tfrom.get('items').remove(original_model);\n\t\t}\n\n\t\t// Gets the internal product id for a store item considering it could be a matrix child.\n\t,\tgetProductId: function (product)\n\t\t{\n\t\t\treturn this.application.ProductListModule.internalGetProductId(product);\n\t\t}\n\n\t\t// Determines if the control is visible\n\t,\tisAvailable: function ()\n\t\t{\n\t\t\t//if you want to disable the product list experience you instead can return: this.application.getUser().get('isLoggedIn') === 'T';\n\t\t\treturn true;\n\t\t}\n\n\t\t// Determines if the control should be enabled or not. This default behavior is that any item can be added\n\t\t// to a list no matter if it is purchasable. Also it will be enabled for guest users in which case it will \n\t\t// redirect the user to the login page. The only condition is that matrix item has to have the options selected. \n\t,\tisReadyForList: function ()\n\t\t{\n\t\t\treturn this.mode === 'move' || this.product.isSelectionComplete();\n\t\t\t// if you want to add only purchasable products to a product list then you can change the above with: \n\t\t\t// return this.product.isReadyForCart();\n\t\t}\n\n\t\t// Shows the create new product list form\n\t,\tshowNewProductList: function (e)\n\t\t{\n\t\t\tvar link = jQuery(e.target);\n\n\t\t\tlink.siblings('[data-type=\"add-new-list-form\"]').show();\n\t\t\tlink.hide();\n\t\t\tthis.$('[data-type=\"new-product-list-name\"]').focus();\n\t\t}\n\n\t\t// Renders a confirmation message storing message parameter and also stores the message\n\t,\tsaveAndShowConfirmationMessage: function (message)\n\t\t{\n\t\t\tthis.confirm_message = message;\n\t\t\t\n\t\t\tthis.showConfirmationMessage(this.confirm_message);\n\t\t}\n\n\t\t// Hides the confirmation message\n\t,\thideConfirmationMessage: function()\n\t\t{\n\t\t\tthis.confirm_message = null;\n\t\t\tthis.$('[data-confirm-message]').hide();\n\t\t}\n\t});\n\t\n\t// ControlItem\n\t// Sub View that represents an item and a checkbox in the control\n\tViews.ControlItem = Backbone.View.extend({\n\n\t\ttagName: 'li'\n\t\t\n\t,\ttemplate: 'product_list_control_item'\n\n\t,\tevents: {\n\t\t\t'click [data-action=\"product-list-item\"]' : 'pListItemHandler'\n\t\t}\n\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tthis.model = options.model;\n\t\t\tthis.product = options.product;\n\t\t\tthis.application = options.application;\n\t\t\tthis.parentView = options.parentView;\n\t\t}\n\n\t\t// Determines if an item is checked if the item belongs the list\n\t\t// Whilst on move mode, returns always false\n\t,\tchecked: function ()\n\t\t{\n\t\t\treturn this.parentView.mode !== 'move' ? this.model.checked(this.parentView.getProductId(this.product), this.parentView.getItemOptions(this.product.itemOptions)) : false;\n\t\t}\n\n\t\t// if move mode enabled, move the item, if not, an item is added/removed from a list\n\t,\tpListItemHandler: function (e)\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\tcheckbox = jQuery(e.target);\n\n\t\t\tif (self.parentView.mode === 'move')\n\t\t\t{\n\t\t\t\tself.moveProduct();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tself.addRemoveProduct(checkbox);\n\t\t\t}\n\t\t}\n\n\t\t// Moves an item to another list\n\t,\tmoveProduct: function ()\n\t\t{\n\t\t\tthis.parentView.moveProductHandler(this.model);\n\t\t}\n\n\t\t// Adds/removes an item from a list\n\t,\taddRemoveProduct: function ($checkbox)\n\t\t{\n\t\t\tif ($checkbox.is(':checked'))\n\t\t\t{\n\t\t\t\t// add to list\n\t\t\t\tthis.parentView.addItemToList(this.product, this.model);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// remove from list\n\t\t\t\tthis.removeItemFromList(this.product);\n\t\t\t}\n\t\t}\n\n\t\t// Remove a product list item from the product list\n\t,\tremoveItemFromList: function (product)\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\tproduct_id = this.parentView.getProductId(product)\n\t\t\t,\tproduct_item = self.model.get('items').find(function (item)\n\t\t\t\t{\n\t\t\t\t\treturn item.get('item').internalid === product_id;\n\t\t\t\t});\n\n\t\t\tif (product_item)\n\t\t\t{\n\t\t\t\tthis.model.get('items').remove(product_item);\n\n\t\t\t\tproduct_item.destroy().done(function ()\n\t\t\t\t{\n\t\t\t\t\tself.parentView.render();\n\t\t\t\t\tself.parentView.hideConfirmationMessage();\n\t\t\t\t}); \n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tself.parentView.render();\n\t\t\t}\n\t\t}\n\t});\n\n\t// ControlNewItem\n\t// Sub View that shows the create new list form\n\tViews.ControlNewItem = Backbone.View.extend({\n\n\t\ttagName: 'div'\n\n\t,\ttemplate: 'product_list_control_new_pl'\n\n\t,\tevents: {\n\t\t\t'click [data-action=\"create-and-move\"]': 'saveForm'\n\t\t,\t'click [data-type=\"show-add-new-list-form\"]' : 'showNewListForm'\n\t\t}\n\n\t,\tinitialize : function (options)\n\t\t{\n\t\t\tthis.application = options.application;\n\t\t\tthis.model = options.model;\n\t\t\tthis.parentView = options.parentView;\n\t\t}\n\n\t\t// Handle save new product list form postback \n\t,\tsaveForm: function (event)\n\t\t{\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\n\t\t\tif (!this.parentView.validateGiftCertificate(this.parentView.product))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar self = this;\n\n\t\t\tBackbone.View.prototype.saveForm.apply(this, arguments).done(function ()\n\t\t\t{\n\t\t\t\tvar new_product_list = self.model\n\t\t\t\t,\tparent_view = self.parentView;\n\n\t\t\t\tnew_product_list.set('items', new ProductListItemCollection(new_product_list.get('items')));\n\t\t\t\t\n\t\t\t\t// add the product list item\n\t\t\t\tif (parent_view.mode === 'move')\n\t\t\t\t{\n\t\t\t\t\t// create new list\n\t\t\t\t\tparent_view.moveProductHandler(new_product_list);\n\t\t\t\t\tparent_view.collection.add(self.model, {merge: true});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparent_view.collection.add(new_product_list);\n\t\t\t\t\tparent_view.addNewProductToList(new_product_list);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Shows the create new list form\n\t,\tshowNewListForm: function (e)\n\t\t{\n\t\t\te && e.stopPropagation();\n\t\t\tvar $el = jQuery(this.el);\n\t\t\tvar new_list_form = $el.find('form[data-type=\"add-new-list-form\"]');\n\t\t\t\n\t\t\tif (new_list_form)\n\t\t\t{\n\t\t\t\tnew_list_form.show();\n\t\t\t\tthis.$('[data-type=\"new-product-list-name\"]').focus();\n\t\t\t\t$el.find(e.target).hide();\n\t\t\t}\n\t\t}\n\n\t});\n\n\t// ControlSingle\n\t// Control view for single list mode. @extends Views.Control. \n\tViews.ControlSingle = Backbone.View.extend({\n\t\t\n\t\ttemplate: 'product_list_control_single'\n\t\t\n\t,\tattributes: {'class': 'product-lists-single'}\n\n\t,\tevents: {\n\t\t\t'click [data-type=\"add-product-to-single-list\"]': 'addItemToSingleList'\n\t\t}\n\n\t,\taddItemToList: Views.Control.prototype.addItemToList\n\n\t,\tdoAddItemToList: Views.Control.prototype.doAddItemToList\n\n\t,\tsaveAndShowConfirmationMessage: Views.Control.prototype.saveAndShowConfirmationMessage\n\n\t,\tisReadyForList: Views.Control.prototype.isReadyForList\n\n\t,\tvalidateGiftCertificate: Views.Control.prototype.validateGiftCertificate\n\n\t,\tgetItemOptions: Views.Control.prototype.getItemOptions\n\t\n\t,\tvalidateLogin: Views.Control.prototype.validateLogin\n\n\t,\tgetProductId: Views.Control.prototype.getProductId\n\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tthis.product = options.product;\n\t\t\tthis.collection = options.collection;\n\t\t\tthis.application = options.application;\n\n\t\t\t// single list\n\t\t\tthis.single_list = this.collection.at(0);\n\t\t}\n\n\t,\trender: function ()\n\t\t{\n\t\t\tBackbone.View.prototype.render.apply(this);\n\n\t\t\t// for guest user we want to enable the button and send the user to the login page\n\t\t\t// for non guest users we want to disable the button if the product is not yet ready for list\n\t\t\tif (!this.isReadyForList())\n\t\t\t{\n\t\t\t\tthis.$('[data-type=\"add-product-to-single-list\"]').attr('disabled', 'true');\n\t\t\t}\n\t\t}\n\n\t\t// Get list internal ids\n\t,\tgetProductsInternalid: function()\n\t\t{\n\t\t\treturn _(this.single_list.get('items').models).map(function (item)\n\t\t\t{\n\t\t\t\treturn item.get('item').internalid;\n\t\t\t});\n\t\t}\n\n\t\t// Before adding item to the list, checks for not created predefined list\n\t,\taddItemToSingleList: function(e)\n\t\t{\t\t\t\n\t\t\tif (!this.validateLogin())\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar self = this;\n\n\t\t\te.preventDefault();\n\n\t\t\t// Check if predefined list was not created yet\n\t\t\tif (!self.single_list.get('internalid'))\n\t\t\t{\n\t\t\t\tself.single_list.save().done(function () {\n\t\t\t\t\tself.single_list.set('items', new ProductListItemCollection([])); \n\t\t\t\t\tself.renderAfterAdded(self);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tself.renderAfterAdded(self);\n\t\t\t}\n\t\t}\n\n\t\t// Adds the item to the list\n\t,\trenderAfterAdded: function (self)\n\t\t{\n\t\t\tif (!this.validateGiftCertificate(self.product))\n\t\t\t{\n\t\t\t\treturn; \n\t\t\t}\n\n\t\t\tself.addItemToList(self.product, self.single_list);\n\t\t\tself.render();\n\n\t\t\tself.saveAndShowConfirmationMessage(\n\t\t\t\t_('Good! You added this item to your product list').translate()\n\t\t\t);\n\n\t\t\tthis.$('[data-type=\"add-product-to-single-list\"]').attr('disabled', 'true');\n\t\t}\n\n\t});\n\t\n\treturn Views;\n});\n\n// ProductListCreation.Views.js\n// -----------------------\n// View to handle Product Lists creation\ndefine('ProductListCreation.View', ['ProductList.Model', 'ProductListItem.Collection'], \n\tfunction (ProductListModel, ProductListItemCollection)\n{\n\t'use strict';\n\n\treturn Backbone.View.extend({\n\n\t\ttemplate: 'product_list_new'\n\n\t,\tattributes: {'class': 'container product-list-new'}\n\n\t,\tevents: {\n\t\t\t'submit form': 'saveForm'\n\t\t,\t'keypress [type=\"text\"]': 'preventEnter'\n\t\t}\n\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tthis.application = options.application;\n\t\t\tthis.parentView = options.parentView;\n\t\t\tthis.model = options.model;\n\t\t\tthis.isEdit = this.model.get('internalid'); \n\t\t\tthis.page_header = this.getTitle();\n\t\t}\n\n\t\t// Prevents not desired behaviour when hitting enter\n\t,\tpreventEnter: function(event)\n\t\t{\n\t\t\tif (event.keyCode === 13) \n\t\t\t{\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t}\n\n\t\t// Sets focus on the name field and returns the correct title text\n\t,\tgetTitle: function ()\n\t\t{\n\t\t\tthis.$('[name=\"name\"]').focus();\n\t\t\treturn this.isEdit ? _('Edit your list').translate() : _('Create a new list').translate(); \n\t\t}\n\n\t\t// Handles the form submit on save\n\t,\tsaveForm: function()\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\tsave_promise = Backbone.View.prototype.saveForm.apply(self, arguments); \n\t\t\tsave_promise && save_promise.done(function ()\n\t\t\t{\n\t\t\t\tself.model.set('items', new ProductListItemCollection(self.model.get('items')));\n\t\t\t\tself.$containerModal && self.$containerModal.modal('hide');\n\t\t\t\tif (self.isEdit) \n\t\t\t\t{\n\t\t\t\t\tself.application.getProductLists().add(self.model, {merge: true}); \n\t\t\t\t\tself.application.getLayout().updateMenuItemsUI();\n\t\t\t\t\tself.parentView.render();\n\t\t\t\t\tif (self.parentView.$el.hasClass('ProductListDetailsView'))\n\t\t\t\t\t{\n\t\t\t\t\t\tself.parentView.showConfirmationMessage(\n\t\t\t\t\t\t\t_('Good! The list was successfully updated. ').translate()\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tself.parentView.showConfirmationMessage(\n\t\t\t\t\t\t\t_('Good! Your $(0) list was successfully updated. ').translate('<a href=\"/productlist/' + self.model.get('internalid') + '\">' + self.model.get('name') + '</a>')\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t\t\t\t\t\n\t\t\t\t\tself.application.getProductLists().add(self.model);\n\t\t\t\t\tself.application.getLayout().updateMenuItemsUI();\n\t\t\t\t\tself.parentView.showConfirmationMessage(\n\t\t\t\t\t\t_('Good! Your $(0) list was successfully created. ').translate('<a href=\"/productlist/' + self.model.get('internalid') + '\">' + self.model.get('name') + '</a>')\n\t\t\t\t\t);\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tself.parentView.highlightList && self.parentView.highlightList(self.model.get('internalid')); \n\t\t\t});\t\t\n\t\t}\n\n\t\t// Get new list name\n\t,\tgetName: function ()\n\t\t{\n\t\t\treturn this.$('.product-list-new-name-input input').val();\n\t\t}\n\n\t\t// Get new list notes\n\t,\tgetNotes: function ()\n\t\t{\n\t\t\treturn this.$('.product-list-new-notes-input textarea').val();\n\t\t}\n\n\t});\n\n});\n\n\n// ProductListDeletion.Views.js\n// -----------------------\n// View to handle Product Lists (lists and items) deletion\ndefine('ProductListDeletion.View', function ()\n{\n\t'use strict';\n\n\treturn Backbone.View.extend({\n\n\t\ttemplate: 'product_list_delete_confirm'\n\n\t,\ttitle: _('Delete item').translate()\n\n\t,\tpage_header: _('Delete item').translate()\n\n\t,\tevents: {\n\t\t\t'click [data-action=\"delete\"]' : 'confirmDelete'\n\t\t}\n\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tthis.application = options.application;\n\t\t\tthis.parentView = options.parentView;\n\t\t\tthis.target = options.target;\n\t\t\tthis.title = options.title;\n\t\t\tthis.page_header = options.title;\n\t\t\tthis.body = options.body;\n\t\t\tthis.confirm_delete_method = options.confirm_delete_method;\n\t\t\tthis.confirmLabel = options.confirmLabel || _('Yes, Remove It').translate(); \n\t\t}\n\n\t\t// Invokes parent view delete confirm callback function\n\t,\tconfirmDelete : function ()\n\t\t{\n\t\t\tthis.parentView[this.confirm_delete_method](this.target);\n\t\t}\n\n\t\t// Sets focus con cancel button and returns the title text\n\t,\tgetTitle: function ()\n\t\t{\n\t\t\tthis.$('[data-action=\"cancel\"]').focus();\n\t\t\treturn _('Delete product list').translate();\n\t\t}\n\t});\n\n});\n\n// ProductList.Views.js\n// -----------------------\n// Views for handling Product Lists (CRUD)\ndefine('ProductListDetails.View'\n,\t['ProductListItem.Collection','ProductListDeletion.View', 'ProductList.Model', 'ItemDetails.Model', 'ProductListLists.View', 'ProductListAddedToCart.View', 'ProductListItemEdit.View', 'ProductListItem.Model', 'ProductListControl.Views', 'ListHeader']\n,\tfunction (ProductListItemCollection, ProductListDeletionView, ProductListModel, ItemDetailsModel, ProductListListsView, ProductListAddedToCartView, ProductListItemEditView, ProductListItemModel, ProductListControlViews, ListHeader)\n{\n\t'use strict';\n\n\treturn Backbone.View.extend({\n\n\t\ttemplate: 'product_list_details'\n\t,\tclassName: 'ProductListDetailsView'\n\n\t,\tattributes: {'class': 'ProductListDetailsView'}\n\n\t,\tevents: {\n\t\t\t// items events\n\t\t\t'click [data-action=\"add-to-cart\"]' : 'addItemToCartHandler'\n\t\t,\t'click [data-action=\"add-items-to-cart\"]': 'addItemsToCartBulkHandler'\n\n\t\t,\t'click [data-action=\"delete-item\"]' : 'askDeleteListItem'\n\t\t,   'click [data-action=\"delete-items\"]': 'deleteItemsHandler'\n\n\t\t,\t'click [data-action=\"edit-item\"]' : 'askEditListItem'\n\t\t,\t'click [data-action=\"update-item-quantity\"]': 'updateListItemQuantity'\n\t\t,\t'click [data-ui-action=\"show-edit-notes\"]' : 'showEditNotes'\n\t\t,\t'click [data-ui-action=\"cancel-edit-notes-form\"]' : 'showViewNotes'\n\t\t,\t'click [data-ui-action=\"plus-one\"]' : 'addPlusOne'\n\t\t,\t'click [data-ui-action=\"minus-one\"]' : 'addMinusOne'\n\t\t,\t'click [data-action=\"add-list-to-cart\"]': 'addListToCart_'\n\n\t\t,\t'click [data-action=\"edit-list\"]': 'editListHandler'\n\t\t,\t'click [data-action=\"delete-list\"]': 'deleteListHandler'\n\n\t\t,\t'change [name=\"item_quantity\"]': 'updateItemQuantity'\n\t\t,\t'keyup [name=\"item_quantity\"]': 'updateItemQuantity'\n\t\t,\t'submit [data-action=\"update-quantity-item-list\"]': 'updateItemQuantityFormSubmit'\n\n\t\t,\t'click [data-type=\"product-list-item\"]': 'toggleProductListItemHandler'\n\t\t}\n\n\t,\tsortOptions: [\n\t\t\t{\n\t\t\t\tvalue: 'name'\n\t\t\t,\tname: _('Sort by name').translate()\n\t\t\t,\tselected: true\n\t\t\t}\n\t\t,\t{\n\t\t\t\tvalue: 'price'\n\t\t\t,\tname: _('Sort by price').translate()\n\t\t\t}\n\t\t,\t{\n\t\t\t\tvalue: 'created'\n\t\t\t,\tname: _('Sort by date Added').translate()\n\t\t\t}\n\t\t,\t{\n\t\t\t\tvalue: 'priority'\n\t\t\t,\tname: _('Sort by priority').translate()\n\t\t\t}\n\t\t]\n\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tthis.options = options;\n\t\t\tthis.model = options.model;\n\t\t\tthis.application = options.application;\n\t\t\tthis.cart = this.application.getCart();\n\n\t\t\tthis.displayOptions = this.application.getConfig('product_lists.itemsDisplayOptions');\n\n\t\t\tthis.sflMode = options.sflMode;\n\t\t\tthis.addToCartCallback = options.addToCartCallback;\n\t\t\tthis.includeSortingFilteringHeader = options.includeSortingFilteringHeader;\n\t\t\tthis.title = this.model.get('name');\n\n\t\t\tthis.collection = this.model.get('items');\n\t\t\tthis.collection.productListId = this.model.get('internalid');\n\n\t\t\tthis.setupListHeader(this.collection);\n\n\t\t\t// set css class for the current display option\n\t\t\t// this.$el.addClass('display-' + this.getCurrentDisplayOpt());\n\t\t\tthis.collection.on('reset', jQuery.proxy(this, 'render'));\n\t\t}\n\n\t,\tsetupListHeader: function(collection)\n\t\t{\n\t\t\tif (!this.includeSortingFilteringHeader)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar self = this;\n\n\t\t\tthis.listHeader = new ListHeader({\n\t\t\t\tview: this\n\t\t\t,\tapplication: this.application\n\t\t\t,\theaderMarkup : function()\n\t\t\t\t{\n\t\t\t\t\treturn SC.macros.productListBulkActions(self.model);\n\t\t\t\t}\n\t\t\t,\thideFilterExpandable : function()\n\t\t\t\t{\n\t\t\t\t\treturn this.collection.length < 2;\n\t\t\t\t}\n\t\t\t,\tselectable: true\n\t\t\t,\tcollection: collection\n\t\t\t,\tsorts: this.sortOptions\n\t\t\t,\tdisplays: this.displayOptions\n\t\t\t});\n\t\t}\n\n\t\t// add this list to cart handler\n\t,\taddListToCart_: function ()\n\t\t{\n\t\t\tthis.addListToCart(this.model);\n\t\t}\n\n\t,\taddListToCart: ProductListListsView.prototype.addListToCart\n\n\t\t// Shows the delete confirmation modal view\n\t,\taskDeleteListItem : function (e)\n\t\t{\n\t\t\te.stopPropagation();\n\n\t\t\tthis.deleteConfirmationView = new ProductListDeletionView({\n\t\t\t\tapplication: this.application\n\t\t\t,\tparentView: this\n\t\t\t,\ttarget: e.target\n\t\t\t,\ttitle: _('Delete selected items').translate()\n\t\t\t,\tbody: _('Are you sure you want to remove selected items?').translate()\n\t\t\t,\tconfirmLabel: _('Yes').translate()\n\t\t\t,\tconfirm_delete_method: 'deleteListItemHandler'\n\t\t\t});\n\n\t\t\tthis.application.getLayout().showInModal(this.deleteConfirmationView);\n\t\t}\n\n\t\t// Add a particular item into the cart\n\t,\taddItemToCartHandler : function (e)\n\t\t{\n\t\t\te.stopPropagation();\n\t\t\te.preventDefault();\n\n\t\t\tvar self = this\n\t\t\t,\tselected_product_list_item_id = self.$(e.target).closest('article').data('id')\n\t\t\t,\tselected_product_list_item = self.model.get('items').findWhere({\n\t\t\t\t\tinternalid: selected_product_list_item_id.toString()\n\t\t\t\t})\n\t\t\t,\tselected_item = selected_product_list_item.get('item')\n\t\t\t,\tselected_item_internalid = selected_item.internalid\n\t\t\t,\titem_detail = self.getItemForCart(selected_item_internalid, selected_product_list_item.get('quantity'));\n\n\t\t\titem_detail.set('_optionsDetails', selected_item.itemoptions_detail);\n\t\t\titem_detail.setOptionsArray(selected_product_list_item.getOptionsArray(), true);\n\n\t\t\tvar add_to_cart_promise = this.addItemToCart(item_detail)\n\t\t\t,\twhole_promise = null;\n\n\t\t\tif (this.sflMode)\n\t\t\t{\n\t\t\t\twhole_promise = jQuery.when(add_to_cart_promise, this.deleteListItem(selected_product_list_item)).then(jQuery.proxy(this, 'executeAddToCartCallback'));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twhole_promise = jQuery.when(add_to_cart_promise).then(jQuery.proxy(this, 'showConfirmationHelper', selected_product_list_item));\n\t\t\t}\n\n\t\t\tif (whole_promise)\n\t\t\t{\n\t\t\t\tthis.disableElementsOnPromise(whole_promise, 'article[data-item-id=\"' + selected_item_internalid + '\"] a, article[data-item-id=\"' + selected_item_internalid + '\"] button');\n\t\t\t}\n\t\t}\n\n\t,\t_getSelection:function()\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\titems = []\n\t\t\t,\titems_for_cart = []\n\t\t\t,\tbutton_selector = [];\n\n\t\t\t//Filter items for bulk operation\n\t\t\t_.each(this.collection.models, function(item_in_list)\n\t\t\t{\n\t\t\t\t//irrelevant items: no-op\n\t\t\t\tif (item_in_list.get('checked') !== true)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\titems.push(item_in_list);\n\t\t\t\tvar item_internal_id = item_in_list.get('item').internalid;\n\t\t\t\tvar item_for_cart = self.getItemForCart(item_internal_id, item_in_list.get('quantity'), item_in_list.get('options'));\n\n\t\t\t\titems_for_cart.push(item_for_cart);\n\t\t\t\tbutton_selector.push('article[data-item-id=\"' + item_internal_id + '\"] a, article[data-item-id=\"' + item_internal_id + '\"] button');\n\t\t\t});\n\n\t\t\t//items: backbone models representing selected items\n\t\t\t//items_for_cart: selected models ready to be inserted into a cart\n\t\t\t//button_selector: all the buttons that should be disabled when performing a batch operation\n\t\t\treturn {\n\t\t\t\t\titems: items\n\t\t\t\t,\titems_for_cart: items_for_cart\n\t\t\t\t,\tbutton_selector: button_selector\n\n\t\t\t};\n\n\t\t}\n\n\n\t,\taddItemsToCartBulkHandler:function(ev)\n\t\t{\n\t\t\tev.preventDefault();\n\n\t\t\tvar self = this;\n\t\t\tvar selected_models = this._getSelection();\n\n\t\t\t//no items selected: no opt\n\t\t\tif (selected_models.items.length < 1)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar button_selector = selected_models.button_selector.join(',');\n\n\t\t\t//add items to cart\n\t\t\tvar add_to_cart_promise = this.cart.addItems(selected_models.items_for_cart);\n\t\t\tadd_to_cart_promise.then( function()\n\t\t\t{\n\t\t\t\tself.unselectAll();\n\t\t\t\tself.showConfirmationHelper();\n\t\t\t});\n\n\t\t\tif (add_to_cart_promise)\n\t\t\t{\n\t\t\t\tthis.disableElementsOnPromise(add_to_cart_promise, button_selector);\n\t\t\t}\n\t\t}\n\n\t,\tdeleteItemsHandler:function(ev)\n\t\t{\n\t\t\tev.preventDefault();\n\n\t\t\tvar self = this\n\t\t\t,\tselected_models = this._getSelection()\n\t\t\t,\tdelete_promises = [];\n\n\n\t\t\tif(selected_models.items.length < 1)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//there are two collections with the same information this.model and the one on application\n\t\t\t//should remove the item on both\n\t\t\tvar app_item_list = _.findWhere(self.application.getProductLists().models, {id: self.model.id});\n\n\t\t\t_.each(selected_models.items, function(item)\n\t\t\t{\n\t\t\t\t//fix already used in \"deleteListItem\"\n\t\t\t\titem.url = ProductListItemModel.prototype.url;\n\n\t\t\t\tapp_item_list && app_item_list.get('items').remove(item);\n\t\t\t\tdelete_promises.push(item.destroy().promise());\n\t\t\t});\n\n\t\t\tjQuery.when.apply(jQuery, delete_promises).then(function()\n\t\t\t{\n\t\t\t\tself.render();\n\t\t\t\tself.application.getLayout().updateMenuItemsUI();\n\t\t\t\tself.showConfirmationMessage(_('The selected items were removed from your product list').translate());\n\t\t\t});\n\t\t}\n\n\t\t//this is called from the ListHeader when you check select all.\n\t,\tselectAll:function()\n\t\t{\n\t\t\t_.each(this.collection.models, function(item)\n\t\t\t{\n\t\t\t\titem.set('checked', true);\n\t\t\t});\n\t\t\tthis.render();\n\t\t}\n\n\t,\tunselectAll:function()\n\t\t{\n\t\t\t_.each(this.collection.models, function(item)\n\t\t\t{\n\t\t\t\titem.set('checked', false);\n\t\t\t});\n\t\t\tthis.render();\n\t\t}\n\n\n\t,\texecuteAddToCartCallback: function()\n\t\t{\n\t\t\tif (!this.addToCartCallback)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.addToCartCallback();\n\t\t}\n\n\t,\tshowConfirmationHelper: function(selected_item)\n\t\t{\n\t\t\tthis.showConfirmationMessage(_('Good! The items were successfully added to your cart. You can continue to <a href=\"#\" data-touchpoint=\"viewcart\">view cart and checkout</a>').translate());\n\n\t\t\t//selected item may be undefined\n\t\t\tif (_.isUndefined(selected_item) === true)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.addedToCartView = new ProductListAddedToCartView({\n\t\t\t\tapplication: this.application\n\t\t\t,\tparentView: this\n\t\t\t,\titem: selected_item\n\t\t\t});\n\n\t\t\tthis.application.getLayout().showInModal(this.addedToCartView);\n\t\t}\n\n\t\t// Gets the ItemDetailsModel for the cart\n\t,\tgetItemForCart: function (id, qty, opts)\n\t\t{\n\t\t\treturn new ItemDetailsModel({\n\t\t\t\tinternalid: id\n\t\t\t,\tquantity: qty\n\t\t\t,\toptions: opts\n\t\t\t});\n\t\t}\n\n\t\t// Adds the item to the cart\n\t,\taddItemToCart: function (item)\n\t\t{\n\t\t\treturn this.cart.addItem(item);\n\t\t}\n\n\t\t// Product list item deletion handler\n\t,\tdeleteListItemHandler: function (target)\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\titemid = jQuery(target).closest('article').data('id')\n\t\t\t,\tproduct_list_item = this.model.get('items').findWhere({\n\t\t\t\t\tinternalid: itemid + ''\n\t\t\t\t});\n\n\t\t\tvar success = function ()\n\t\t\t{\n\t\t\t\tif (self.application.getLayout().updateMenuItemsUI)\n\t\t\t\t{\n\t\t\t\t\tself.application.getLayout().updateMenuItemsUI();\n\t\t\t\t}\n\n\t\t\t\tself.deleteConfirmationView.$containerModal.modal('hide');\n\t\t\t\tself.render();\n\t\t\t\tself.showConfirmationMessage(_('The item was removed from your product list').translate());\n\n\t\t\t};\n\n\t\t\tvar productList = self.application.getProductLists().where({internalid: self.model.id });\n\n\t\t\tif (productList.length > 0)\n\t\t\t{\n\t\t\t\tproductList[0].get('items').remove(product_list_item);\n\t\t\t}\n\n\t\t\tself.deleteListItem(product_list_item, success);\n\t\t}\n\n\t\t// Remove an product list item from the current list\n\t,\tdeleteListItem: function (product_list_item, successFunc)\n\t\t{\n\t\t\tthis.model.get('items').remove(product_list_item);\n\n\t\t\tproduct_list_item.url = ProductListItemModel.prototype.url;\n\t\t\tvar promise = product_list_item.destroy();\n\t\t\tpromise && successFunc && promise.done(function()\n\t\t\t{\n\t\t\t\tsuccessFunc();\n\t\t\t});\n\t\t}\n\n\t\t// Edit a product list item from the current list\n\t,\taskEditListItem : function(e)\n\t\t{\n\t\t\te.stopPropagation();\n\n\t\t\tvar product_list_itemid = this.$(e.target).closest('article').data('id')\n\t\t\t,\tselected_item = this.model.get('items').findWhere({\n\t\t\t\tinternalid: product_list_itemid.toString()\n\t\t\t});\n\n\t\t\tthis.editView = new ProductListItemEditView({\n\t\t\t\tapplication: this.application\n\t\t\t,\tparentView: this\n\t\t\t,\ttarget: e.target\n\t\t\t,\tmodel: selected_item\n\t\t\t,\ttitle: _('Edit Item').translate()\n\t\t\t,\tconfirm_edit_method: 'editListItemHandler'\n\t\t\t});\n\n\t\t\tthis.editView.showInModal();\n\t\t}\n\n\t\t// Updates product list item quantity from the current list\n\t,\tupdateListItemQuantity : function(e)\n\t\t{\n\t\t\te.preventDefault();\n\n\t\t\tvar product_list_itemid = this.$(e.target).closest('article').data('id')\n\t\t\t,\tselected_pli = this.model.get('items').findWhere({internalid: product_list_itemid.toString()})\n\t\t\t,\tminimum_quantity = selected_pli.get('item').minimumquantity;\n\n\t\t\tthis.updateItemQuantityHelper(selected_pli, minimum_quantity);\n\t\t}\n\n\t\t// Product list item edition handler\n\t,\teditListItemHandler: function (product_list_item)\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\tedit_result = product_list_item.save();\n\n\t\t\tif (!edit_result)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tedit_result.done(function (new_attributes)\n\t\t\t{\n\t\t\t\tvar new_model = new ProductListItemModel(new_attributes);\n\n\t\t\t\tself.model.get('items').add(new_model, {merge: true});\n\t\t\t\tself.editView.$containerModal.modal('hide');\n\t\t\t\tself.editView.destroy();\n\t\t\t\tself.render();\n\t\t\t});\n\t\t}\n\n\t\t// Retrieve the current (if any) items display option\n\t,\tgetDisplayOption: function ()\n\t\t{\n\t\t\tvar search = (this.options.params && this.options.params.display) || 'list';\n\n\t\t\treturn _(this.displayOptions).findWhere({\n\t\t\t\tid: search\n\t\t\t});\n\t\t}\n\n\t,\trender: function()\n\t\t{\n\t\t\tBackbone.View.prototype.render.apply(this, arguments);\n\n\t\t\tvar self = this\n\t\t\t,\tout_of_stock_items = []\n\t\t\t,\titems = this.model.get('items')\n\t\t\t,\tis_single_list = this.application.ProductListModule.isSingleList();\n\n\t\t\titems.each(function(item) {\n\t\t\t\tif (!item.get('item').ispurchasable)\n\t\t\t\t{\n\t\t\t\t\tout_of_stock_items.push(item);\n\t\t\t\t}\n\n\t\t\t\tself.renderOptions(item);\n\n\t\t\t\tif (!is_single_list)\n\t\t\t\t{\n\t\t\t\t\tself.renderMove(item);\n\t\t\t\t}\n\n\t\t\t});\n\n\t\t\tvar warning_message = null;\n\n\t\t\tif (out_of_stock_items.length === 1)\n\t\t\t{\n\t\t\t\twarning_message =  _('$(0) of $(1) items in your list is currently not available for purchase. If you decide to add the list to your cart, only available products will be added.').translate(out_of_stock_items.length, items.length);\n\t\t\t}\n\t\t\telse if (out_of_stock_items.length > 1)\n\t\t\t{\n\t\t\t\twarning_message =  _('$(0) of $(1) items in your list are currently not available for purchase. If you decide to add the list to your cart, only available products will be added.').translate(out_of_stock_items.length, items.length);\n\t\t\t}\n\n\t\t\tif (warning_message)\n\t\t\t{\n\t\t\t\tself.showWarningMessage(warning_message);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\t// Render the item options (matrix and custom)\n\t,\trenderOptions: function (pli_model)\n\t\t{\n\t\t\tvar item_detail_model = pli_model.get('itemDetails');\n\t\t\tvar posible_options = item_detail_model.getPosibleOptions();\n\n\t\t\t// Will render all options with the macros they were configured\n\t\t\tthis.$('article[data-id=\"' + pli_model.id + '\"]').find('div[data-type=\"all-options\"]').each(function (index, container)\n\t\t\t{\n\t\t\t\tvar $container = jQuery(container).empty()\n\t\t\t\t,\texclude = _.map(($container.data('exclude-options') || '').split(','), function (result)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn jQuery.trim(result);\n\t\t\t\t\t})\n\t\t\t\t,\tresult_html = '';\n\n\t\t\t\t_.each(posible_options, function (posible_option)\n\t\t\t\t{\n\t\t\t\t\tif (!_.contains(exclude, posible_option.cartOptionId))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult_html += item_detail_model.renderOptionSelected(posible_option);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t$container.append(result_html);\n\n\t\t\t\tif(result_html.length === 0)\n\t\t\t\t{\n\t\t\t\t\t$container.remove();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Renders the move control for a product list\n\t,\trenderMove: function (product_list_model)\n\t\t{\n\t\t\tvar self = this;\n\n\t\t\tvar container = this.$('article[data-id=\"' + product_list_model.id + '\"]').find('div[data-type=\"productlist-control-move\"]');\n\t\t\tvar control = new ProductListControlViews.Control({\n\t\t\t\tcollection: self.getMoveLists(self.application.getProductLists(), self.model, product_list_model)\n\t\t\t,\tproduct: product_list_model.get('item')\n\t\t\t,\tapplication: self.application\n\t\t\t,\tmoveOptions:\n\t\t\t\t{\n\t\t\t\t\tparentView: self\n\t\t\t\t,\tproductListItem: product_list_model\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tjQuery(container).empty().append(control.$el);\n\t\t\tcontrol.render();\n\t\t}\n\n\t\t// Filters all lists so it does not include the current list and the lists where the item is already present\n\t,\tgetMoveLists: function (all_lists, current_list, list_item)\n\t\t{\n\t\t\treturn all_lists.filtered( function(model)\n\t\t\t{\n\t\t\t\treturn model.get('internalid') !== current_list.get('internalid') &&\n\t\t\t\t\t!model.get('items').find(function (product_item)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn product_item.get('item').internalid+'' === list_item.get('item').internalid+'';\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// Shows the edit modal view\n\t,\teditListHandler: function(event)\n\t\t{\n\t\t\tevent.preventDefault();\n\t\t\tProductListListsView.prototype.editList.apply(this, [this.model]);\n\t\t}\n\n\t\t// Shows the delete modal view\n\t,\tdeleteListHandler: function(event)\n\t\t{\n\t\t\tevent.preventDefault();\n\t\t\tthis.deleteConfirmationView = new ProductListDeletionView({\n\t\t\t\tapplication: this.application\n\t\t\t,\tparentView: this\n\t\t\t,\ttarget: null\n\t\t\t,\ttitle: _('Delete list').translate()\n\t\t\t,\tbody: _('Are you sure you want to remove this list?').translate()\n\t\t\t,\tconfirm_delete_method: 'deleteList'\n\t\t\t});\n\t\t\tthis.application.getLayout().showInModal(this.deleteConfirmationView);\n\t\t}\n\n\t\t// Delete confirm callback\n\t,\tdeleteList: function()\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\tlist = this.model;\n\t\t\tthis.application.getProductLists().remove(list);\n\t\t\tlist.url = ProductListModel.prototype.url;\n\n\t\t\tlist.destroy().done(function ()\n\t\t\t{\n\t\t\t\tself.deleteConfirmationView.$containerModal.modal('hide');\n\t\t\t\tBackbone.history.navigate('/productlists', {trigger: true});\n\t\t\t\tself.application.getLayout().updateMenuItemsUI();\n\t\t\t\tself.application.getLayout().currentView.showConfirmationMessage(\n\t\t\t\t\t_('Your $(0) list was removed').\n\t\t\t\t\t\ttranslate('<span class=\"product-list-name\">' + list.get('name') + '</span>')\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\t// Get the label for showContent()\n\t,\tgetViewLabel: function ()\n\t\t{\n\t\t\treturn 'productlist_' + (this.model.get('internalid') ? this.model.get('internalid') : 'tmpl_' + this.model.get('templateid'));\n\t\t}\n\n\t\t// override showContent() for showing the breadcrumb\n\t,\tshowContent: function()\n\t\t{\n\t\t\tvar breadcrumb = [\n\t\t\t\t{\n\t\t\t\t\ttext: _('Product Lists').translate(),\n\t\t\t\t\thref: '/productlists'\n\t\t\t\t}\n\t\t\t,\t{\n\t\t\t\t\ttext: this.model.get('name'),\n\t\t\t\t\thref: '/productlist/' + (this.model.get('internalid') ? this.model.get('internalid') : 'tmpl_' + this.model.get('templateid'))\n\t\t\t\t}\n\t\t\t];\n\t\t\tif (this.application.ProductListModule.isSingleList())\n\t\t\t{\n\t\t\t\tbreadcrumb.splice(0, 1); //remove first\n\t\t\t}\n\t\t\tthis.application.getLayout().showContent(this, this.getViewLabel(), breadcrumb);\n\t\t}\n\n\t\t// Updates quantity on form submit.\n\t,\tupdateItemQuantityFormSubmit: function (e)\n\t\t{\n\t\t\te.preventDefault();\n\t\t\tthis.updateItemQuantity(e);\n\t\t}\n\n\t\t// Helper function. Used in updateItemQuantity and updateListItemQuantity functions.\n\t,\tupdateItemQuantityHelper: function(selected_item, new_quantity)\n\t\t{\n\t\t\tselected_item.set('quantity', new_quantity);\n\n\t\t\tvar self = this\n\t\t\t,\tedit_result = selected_item.save();\n\n\t\t\tif (edit_result)\n\t\t\t{\n\t\t\t\tedit_result.done(function (new_attributes)\n\t\t\t\t{\n\t\t\t\t\tvar new_model = new ProductListItemModel(new_attributes);\n\n\t\t\t\t\tself.model.get('items').add(new_model, {merge: true});\n\t\t\t\t\tself.render();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn edit_result;\n\t\t}\n\n\t\t// updateItemQuantity:\n\t\t// executes on blur of the quantity input\n\t\t// Finds the item in the product list, updates its quantity and saves the list model\n\t,\tupdateItemQuantity: _.debounce(function (e)\n\t\t{\n\t\t\te.preventDefault();\n\n\t\t\tvar product_list_itemid = this.$(e.target).closest('article').data('id')\n\t\t\t,\tselected_item = this.model.get('items').findWhere({internalid: product_list_itemid.toString()})\n\t\t\t,\toptions = jQuery(e.target).closest('form').serializeObject()\n\t\t\t,\t$input = jQuery(e.target).closest('form').find('[name=\"item_quantity\"]')\n\t\t\t,\tnew_quantity = parseInt(options.item_quantity, 10)\n\t\t\t,\tcurrent_quantity = parseInt(selected_item.get('quantity'), 10);\n\n\t\t\tnew_quantity = (new_quantity > 0) ? new_quantity : current_quantity;\n\n\t\t\t$input.val(new_quantity);\n\n\t\t\tif (new_quantity ===  current_quantity)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$input.val(new_quantity).prop('disabled', true);\n\n\t\t\tvar edit_promise = this.updateItemQuantityHelper(selected_item, new_quantity);\n\n\t\t\tif (!edit_promise)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tedit_promise.always(function ()\n\t\t\t{\n\t\t\t\t$input.prop('disabled', false);\n\t\t\t});\n\n\t\t}, 600)\n\n\t,\ttoggleProductListItemHandler: function (e)\n\t\t{\n\t\t\tthis.toggleProductListItem(jQuery(e.target).closest('article').data('id'));\n\t\t}\n\n\n\n\t,\ttoggleProductListItem: function (pli)\n\t\t{\n\t\t\tpli = this.collection.get(pli);\n\n\t\t\tif (pli)\n\t\t\t{\n\t\t\t\tthis[pli.get('checked') ? 'unselectProductListItem' : 'selectProductListItem'](pli);\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t}\n\n\t,\tselectProductListItem: function (pli)\n\t\t{\n\t\t\tif (pli)\n\t\t\t{\n\t\t\t\tpli.set('checked', true);\n\t\t\t}\n\t\t}\n\n\t,\tunselectProductListItem: function (pli)\n\t\t{\n\t\t\tif (pli)\n\t\t\t{\n\t\t\t\tpli.set('checked', false);\n\t\t\t}\n\t\t}\n\t});\n});\n\n\n// ProductListItem.Collection.js\n// -----------------------\n// Product List collection\ndefine('ProductListItem.Collection', ['ProductListItem.Model'], function (Model)\n{\n\t'use strict';\n\n\treturn Backbone.Collection.extend({\n\t\t\n\t\tmodel: Model\n\t\t\n\t,\turl: _.getAbsoluteUrl('services/product-list-item.ss')\n\n\t,\tinitialize: function(options) \n\t\t{\n\t\t\tthis.options = options; \n\t\t}\n\n\t\t// Collection.update:\n\t\t// custom method called by ListHeader view\n\t\t// it receives the currently applied filter,\n\t\t// currently applied sort and currently applied order\n\t,\tupdate: function (options)\n\t\t{\n\t\t\tthis.fetch({\n\t\t\t\tdata: {\n\t\t\t\t\tproductlistid: this.productListId\n\t\t\t\t,\tinternalid: null\n\t\t\t\t,\tsort: options.sort.value\n\t\t\t\t,\torder: options.order\n\t\t\t\t,\tpage: options.page\n\t\t\t\t}\n\t\t\t,\treset: true\n\t\t\t,\tkillerId: options.killerId\n\t\t\t});\n\t\t}\n\t});\n});\n\n// ProductListItem.Model.js\n// -----------------------\n// Model for handling Product Lists (CRUD)\ndefine('ProductListItem.Model',['ItemDetails.Model'], function (ItemDetailsModel)\n{\n\t'use strict';\n\n\treturn Backbone.Model.extend(\n\t{\n\t\turlRoot: _.getAbsoluteUrl('services/product-list-item.ss')\n\n\t,\tdefaults : {\n\t\t\tpriority : {id: '2', name: 'medium'}\n\t\t,\toptions: ''\n\t\t}\n\t\t\n\t\t// Name is required\n\t,\tvalidation: {\n\t\t\tname: { required: true, msg: _('Name is required').translate() }\n\t\t}\n\n\t\t// redefine url to avoid possible cache problems from browser\n\t,\turl: function()\n\t\t{\n\t\t\tvar base_url = Backbone.Model.prototype.url.apply(this, arguments);\n\t\t\t\n\t\t\treturn base_url + '&t=' + new Date().getTime();\n\t\t}\n\n\t,\tinitialize: function (data)\n\t\t{\n\t\t\tthis.item = data.item;\n\n\t\t\tif (this.item && this.item.matrix_parent && this.item.itemoptions_detail)\n\t\t\t{\n\t\t\t\tthis.item.itemoptions_detail.fields = this.item.matrix_parent.itemoptions_detail.fields;\n\t\t\t\tthis.item.matrixchilditems_detail = this.item.matrix_parent.matrixchilditems_detail;\n\t\t\t}\n\n\t\t\tvar itemDetailModel = new ItemDetailsModel(this.item);\n\t\t\t\n\t\t\titemDetailModel.setOptionsArray(this.getOptionsArray(), true);\n\t\t\t\n\t\t\tthis.set('itemDetails', itemDetailModel);\n\t\t}\n\n\t\t// Returns options as an array. This is the way ItemDetailModel expects when initialized.\n\t,\tgetOptionsArray: function()\n\t\t{\t\t\t\n\t\t\t// Iterate on the stored Product List Item options and create an id/value object compatible with the existing options renderer...\n\t\t\tvar option_values = []\n\t\t\t,\tselected_options = this.get('options');\n\n\t\t\t_.each(selected_options, function(value, key) {\t\t\n\t\t\t\toption_values.push({id: key, value: value.value, displayvalue: value.displayvalue});\n\t\t\t});\n\n\t\t\treturn option_values;\n\t\t}\t\n\n\t\t// Copied from SC.Application('Shopping').Configuration.itemKeyMapping._name\n\t,\tgetProductName: function()\n\t\t{\n\t\t\tif (!this.get('item'))\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tvar item = this.get('item');\n\n\t\t\t// If its a matrix child it will use the name of the parent\n\t\t\tif (item && item.matrix_parent && item.matrix_parent.internalid) \n\t\t\t{\n\t\t\t\treturn item.matrix_parent.storedisplayname2 || item.matrix_parent.displayname;\n\t\t\t}\n\n\t\t\t// Otherways return its own name\n\t\t\treturn item.storedisplayname2 || item.displayname;\n\t\t}\n\t\n\t\t// We need to check if mandatory options are set. No matrix option checking is required for editing a Product List Item.\n\t,\tisSelectionCompleteForEdit: function()\n\t\t{\n\t\t\tvar item_details = this.get('itemDetails')\n\t\t\t,\tposible_options = item_details.getPosibleOptions();\n\t\t\t\n\t\t\tfor (var i = 0; i < posible_options.length; i++)\n\t\t\t{\n\t\t\t\tvar posible_option = posible_options[i];\n\t\t\t\t\n\t\t\t\tif (posible_option.isMandatory && !item_details.getOption(posible_option.cartOptionId))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Returns true if a product can be purchased due to minimum quantity requirements.\n\t,\tfulfillsMinimumQuantityRequirement: function()\n\t\t{\n\t\t\tvar item_minimum_quantity = this.get('item').minimumquantity;\n\n\t\t\tif (!item_minimum_quantity)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn parseInt(item_minimum_quantity, 10) <= parseInt(this.get('quantity'), 10);\n\t\t}\n\t});\n});\n\n\n// ProductListItemEdit.View.js\n// -----------------------\n// View to handle Product Lists Item edition.\ndefine('ProductListItemEdit.View', ['ProductListItem.Model'], function (ProductListItemModel)\n{\n\t'use strict';\n\n\tfunction getItemOptions(itemOptions)\n\t{\n\t\tvar result = {};\n\n\t\t_.each(itemOptions, function (value, name)\n\t\t{\n\t\t\tresult[name] = { value: value.internalid, displayvalue: value.label };\n\t\t});\n\n\t\treturn result;\n\t}\n\n\treturn Backbone.View.extend({\n\t\ttemplate: 'product_list_edit_item'\n\n\t,\ttitle: _('Edit item').translate()\n\n\t,\tpage_header: _('Edit item').translate()\n\n\t,\tevents: {\n\t\t\t'click [data-action=\"edit\"]' : 'edit'\n\t\t,\t'blur [data-toggle=\"text-option\"]': 'setOption'\n\t\t,\t'click [data-toggle=\"set-option\"]': 'setOption'\n\t\t,\t'change [data-toggle=\"select-option\"]': 'setOption'\n\n\t\t,\t'change [name=\"quantity\"]': 'updateQuantity'\n\t\t,\t'keypress [name=\"quantity\"]': 'ignoreEnter'\n\n\t\t,\t'change [name=\"description\"]': 'updateDescription'\n\t\t,\t'keypress [name=\"description\"]': 'ignoreEnter'\n\n\t\t,\t'change [name=\"priority\"]': 'updatePriority'\n\n\t\t,\t'keydown [data-toggle=\"text-option\"]': 'tabNavigationFix'\n\t\t,\t'focus [data-toggle=\"text-option\"]': 'tabNavigationFix'\n\n\t\t}\n\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tthis.application = options.application;\n\t\t\tthis.parentView = options.parentView;\n\t\t\tthis.target = options.target;\n\t\t\tthis.title = options.title;\n\t\t\tthis.page_header = options.title;\n\n\t\t\tif (!options.model)\n\t\t\t{\n\t\t\t\tthrow new Error('A model is needed');\n\t\t\t}\n\n\t\t\tvar attrs = jQuery.extend(true, {}, options.model.attributes);\n\n\t\t\tthis.model = new ProductListItemModel(attrs);\n\t\t\tthis.confirm_edit_method = options.confirm_edit_method;\n\t\t}\n\n\t\t// Edit the current item\n\t,\tedit: function()\n\t\t{\n\t\t\tif (this.model.isSelectionCompleteForEdit())\n\t\t\t{\n\t\t\t\tvar item_detail_model = this.model.get('itemDetails');\n\n\t\t\t\tthis.$('[data-action=\"edit\"]').attr('disabled', 'true');\n\t\t\t\tthis.$('[data-action=\"cancel\"]').attr('disabled', 'true');\n\n\t\t\t\tthis.model.set('options', getItemOptions(item_detail_model.itemOptions));\n\t\t\t\tthis.model.set('item', { id: this.application.ProductListModule.internalGetProductId(item_detail_model) });\n\n\t\t\t\tthis.parentView[this.confirm_edit_method](this.model);\n\t\t\t}\n\t\t}\n\n\t\t// Updates the quantity of the model\n\t,\tupdateQuantity: function (e)\n\t\t{\n\t\t\tvar new_quantity = parseInt(jQuery(e.target).val(), 10)\n\t\t\t,\tcurrent_quantity = this.model.get('quantity');\n\n\t\t\tnew_quantity = (new_quantity > 0) ? new_quantity : current_quantity;\n\n\t\t\tjQuery(e.target).val(new_quantity);\n\n\t\t\tif (new_quantity !== current_quantity)\n\t\t\t{\n\t\t\t\tthis.model.set('quantity', new_quantity);\n\t\t\t\tthis.storeFocus(e);\n\t\t\t}\n\t\t}\n\n\t\t// Updates the description of the model\n\t,\tupdateDescription: function (e)\n\t\t{\n\t\t\tvar new_description = jQuery(e.target).val()\n\t\t\t,\tcurrent_description = this.model.get('description');\n\n\t\t\tif (new_description !== current_description)\n\t\t\t{\n\t\t\t\tthis.model.set('description', new_description);\n\t\t\t\tthis.storeFocus(e);\n\t\t\t}\n\t\t}\n\n\t\t// Updates the priority of the model\n\t,\tupdatePriority: function (e)\n\t\t{\n\t\t\tvar new_priority = jQuery(e.target).val()\n\t\t\t,\tcurrent_priority = this.model.get('priority');\n\n\t\t\tif (new_priority !== current_priority)\n\t\t\t{\n\t\t\t\tthis.model.set('priority', {id: new_priority } );\n\t\t\t\tthis.storeFocus(e);\n\t\t\t}\n\t\t}\n\n\t\t// Sets an item option (matrix or custom)\n\t,\tsetOption: function (e)\n\t\t{\n\t\t\tvar $target = jQuery(e.target)\n\t\t\t,\tvalue = $target.val() || $target.data('value') || null\n\t\t\t,\tcart_option_id = $target.closest('[data-type=\"option\"]').data('cart-option-id');\n\n\t\t\t// Prevent from going away\n\t\t\te.preventDefault();\n\n\t\t\t// if option is selected, remove the value\n\t\t\tif ($target.data('active'))\n\t\t\t{\n\t\t\t\tvalue = null;\n\t\t\t}\n\n\t\t\tvar item_detail_model = this.model.get('itemDetails');\n\n\t\t\t// it will fail if the option is invalid\n\t\t\ttry\n\t\t\t{\n\t\t\t\titem_detail_model.setOption(cart_option_id, value);\n\t\t\t}\n\t\t\tcatch (error)\n\t\t\t{\n\t\t\t\t// Clears all matrix options\n\t\t\t\t_.each(item_detail_model.getPosibleOptions(), function (option)\n\t\t\t\t{\n\t\t\t\t\toption.isMatrixDimension && item_detail_model.setOption(option.cartOptionId, null);\n\t\t\t\t});\n\n\t\t\t\t// Sets the value once again\n\t\t\t\titem_detail_model.setOption(cart_option_id, value);\n\t\t\t}\n\n\t\t\tthis.storeFocus(e);\n\t\t\tthis.render();\n\t\t}\n\n\t\t// view.storeFocus\n\t\t// Computes and store the current state of the item and refresh the whole view, re-rendering the view at the end\n\t\t// This also updates the url, but it does not generates a history point\n\t,\tstoreFocus: function ()\n\t\t{\n\t\t\tvar focused_element = this.$(':focus').get(0);\n\n\t\t\tthis.focusedElement = focused_element ? SC.Utils.getFullPathForElement(focused_element) : null;\n\t\t}\n\n\t\t// view.tabNavigationFix:\n\t\t// When you blur on an input field the whole page gets rendered,\n\t\t// so the function of hitting tab to navigate to the next input stops working\n\t\t// This solves that problem by storing a a ref to the current input\n\t,\ttabNavigationFix: function (e)\n\t\t{\n\t\t\tthis.hideError();\n\n\t\t\t// If the user is hitting tab we set tabNavigation to true, for any other event we turn ir off\n\t\t\tthis.tabNavigation = (e.type === 'keydown' && e.which === 9);\n\t\t\tthis.tabNavigationUpsidedown = e.shiftKey;\n\t\t\tthis.tabNavigationCurrent = SC.Utils.getFullPathForElement(e.target);\n\t\t}\n\n\t,\tafterAppend: function ()\n\t\t{\n\t\t\tthis.focusedElement && this.$(this.focusedElement).focus();\n\n\t\t\tif (this.tabNavigation)\n\t\t\t{\n\t\t\t\tvar current_index = this.$(':input').index(this.$(this.tabNavigationCurrent).get(0))\n\t\t\t\t,\tnext_index = this.tabNavigationUpsidedown ? current_index - 1 : current_index + 1;\n\n\t\t\t\tthis.$(':input:eq('+ next_index +')').focus();\n\t\t\t}\n\t\t}\n\n\t\t// view.showInModal:\n\t\t// Takes care of showing the pdp in a modal, and changes the template, doesn't trigger the\n\t\t// after events because those are triggered by showContent\n\t,\tshowInModal: function (options)\n\t\t{\n\t\t\tthis.template = 'product_list_edit_item';\n\n\t\t\treturn this.application.getLayout().showInModal(this, options);\n\t\t}\n\n\t\t// don't want to trigger form submit when user presses enter when in the quantity input text\n\t,\tignoreEnter: function (e)\n\t\t{\n\t\t\tif (e.keyCode === 13)\n\t\t\t{\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\t\t}\n\t});\n});\n\n\n// ProductList.Views.js\n// -----------------------\n// Views for handling Product Lists (CRUD)\ndefine('ProductListLists.View'\n,\t['ProductListDetails.View', 'ProductList.Model', 'ProductListItem.Collection', 'ProductListCreation.View', 'ItemDetails.Model', 'ProductListAddedToCart.View', 'ProductListDeletion.View', 'ListHeader']\n,\tfunction (ProductListDetailsView, ProductListModel, ProductListItemCollection, ProductListCreationView, ItemDetailsModel, ProductListAddedToCartView, ProductListDeletionView, ListHeader)\n{\n\t'use strict';\n\n\treturn Backbone.View.extend({\n\n\t\ttemplate: 'product_list_lists'\n\n\t,\ttitle: _('Product Lists').translate()\n\n\t,\tclassName: 'ProductListListsView'\n\n\t,\tattributes: {'class': 'ProductListListsView'}\n\n\t,\tevents:\n\t\t{\n\t\t\t'change [data-action=\"sort-by\"]': 'sortBy'\n\t\t,\t'click [data-action=\"add-list\"]': 'createProductList'\n\t\t,\t'click [data-action=\"delete-list\"]': 'askDeleteList'\n\t\t,\t'click [data-action=\"edit-list\"]': 'editListHandler'\n\t\t,\t'click [data-action=\"share-list\"]': 'shareList'\n\t\t,\t'click [data-action=\"add-to-cart\"]': 'addListToCartHandler'\n\t\t,\t'click [data-action=\"select\"]': 'toggleProductListHandler'\n\t\t,\t'click [data-action=\"navigate\"]': 'navigateToItems'\n\t\t}\n\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tthis.options = options;\n\t\t\tthis.application = options.application;\n\n\t\t\t//setup list header\n\t\t\tthis.listHeader = new ListHeader({\n\t\t\t\t\tview: this\n\t\t\t\t,\tdisplays : true\n\t\t\t\t,\thideFilterExpandable: true\n\t\t\t\t,\tapplication: this.application\n\t\t\t\t,\tcollection : this.collection\n\t\t\t\t,\theaderMarkup : '<button class=\"btn pull-right add-list\" data-action=\"add-list\">' + _('Create New List').translate() + '</button>'\n\t\t\t});\n\t\t}\n\n\t,\trender: function()\n\t\t{\n\t\t\tBackbone.View.prototype.render.apply(this, arguments);\n\t\t\t//if there are no list we show the list creation form\n\t\t\tif (!this.collection.length)\n\t\t\t{\n\t\t\t\tthis.newProductListView = new ProductListCreationView({\n\t\t\t\t\tapplication: this.application\n\t\t\t\t,\tparentView: this\n\t\t\t\t,\tmodel: new ProductListModel() //create!\n\t\t\t\t});\n\t\t\t\tthis.newProductListView.render();\n\t\t\t\tthis.$('[data-type=\"new-product-list\"]').append(this.newProductListView.$el);\n\t\t\t}\n\t\t}\n\n\t\t// Show create new product list modal form\n\t,\tcreateProductList: function ()\n\t\t{\n\t\t\tthis.newProductListView = new ProductListCreationView({\n\t\t\t\tapplication: this.application\n\t\t\t,\tparentView: this\n\t\t\t,\tmodel: new ProductListModel() //create!\n\t\t\t});\n\n\t\t\tthis.application.getLayout().showInModal(this.newProductListView);\n\t\t}\n\n\t\t// starts the 'delete a list' use case\n\t,\taskDeleteList: function (e)\n\t\t{\n\t\t\tthis.deleteConfirmationView = new ProductListDeletionView({\n\t\t\t\tapplication: this.application\n\t\t\t,\tparentView: this\n\t\t\t,\ttarget: e.target\n\t\t\t,\ttitle: _('Delete list').translate()\n\t\t\t,\tbody: _('Are you sure you want to remove this list?').translate()\n\t\t\t,\tconfirm_delete_method: 'deleteListHandler'\n\t\t\t});\n\t\t\tthis.application.getLayout().showInModal(this.deleteConfirmationView);\n\t\t}\n\n\t\t// called from the sub view when the user confirms he wants to delete the product list.\n\t,\tdeleteListHandler: function(target)\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\tlist = this.getListFromDom(jQuery(target));\n\n\t\t\tthis.collection.remove(list);\n\t\t\tlist.url = ProductListModel.prototype.url;\n\n\t\t\tlist.destroy().done(function ()\n\t\t\t{\n\t\t\t\tself.application.getLayout().updateMenuItemsUI();\n\t\t\t\tself.showConfirmationMessage(\n\t\t\t\t\t_('Your $(0) list was removed').\n\t\t\t\t\t\ttranslate('<span class=\"product-list-name\">' + list.get('name') + '</span>')\n\t\t\t\t);\n\t\t\t\tself.deleteConfirmationView.$containerModal.modal('hide');\n\t\t\t});\n\t\t}\n\n\t\t// temporarily highlights a list that has been recently added or edited\n\t,\thighlightList: function (internalid)\n\t\t{\n\t\t\tvar $list_dom = jQuery(this.el).find('article[data-product-list-id='+ internalid +']');\n\t\t\tif ($list_dom)\n\t\t\t{\n\t\t\t\t$list_dom.addClass('new-list');\n\n\t\t\t\tsetTimeout( function ()\n\t\t\t\t{\n\t\t\t\t\t$list_dom.removeClass('new-list');\n\t\t\t\t},3000);\n\t\t\t}\n\t\t}\n\n\t\t// Add list to cart click handler\n\t,\taddListToCartHandler: function (e)\n\t\t{\n\t\t\te.preventDefault();\n\n\t\t\tvar list = this.getCurrentList(e);\n\n\t\t\tthis.addListToCart(list);\n\t\t}\n\n\t\t// Adds an entire list to the cart\n\t,\taddListToCart: function (list)\n\t\t{\n\t\t\t// collect the items data to add to cart\n\t\t\tvar add_items = []\n\t\t\t,\tself = this\n\t\t\t,\tnot_purchasable_items_count = 0;\n\n\t\t\tlist.get('items').each(function (item)\n\t\t\t{\n\t\t\t\tvar store_item = item.get('item');\n\n\t\t\t\tif (store_item.ispurchasable)\n\t\t\t\t{\n\t\t\t\t\tvar item_detail = new ItemDetailsModel({\n\t\t\t\t\t\t\tinternalid: store_item.internalid\n\t\t\t\t\t\t,\tquantity: item.get('quantity')\n\t\t\t\t\t});\n\n\t\t\t\t\titem_detail.set('_optionsDetails', store_item.itemoptions_detail);\n\t\t\t\t\titem_detail.setOptionsArray(item.getOptionsArray(), true);\n\n\t\t\t\t\tadd_items.push(item_detail);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnot_purchasable_items_count++;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (add_items.length === 0)\n\t\t\t{\n\t\t\t\tvar errorMessage = _('All items in the list are not available for purchase.').translate();\n\n\t\t\t\tself.showWarningMessage(errorMessage);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// add the items to the cart and when its done show the confirmation view\n\t\t\tthis.application.getCart().addItems(add_items).done(function ()\n\t\t\t{\n\t\t\t\t// before showing the confirmation view we need to fetch the items of the list with all the data.\n\t\t\t\tself.application.getProductList(list.get('internalid')).done(function(model)\n\t\t\t\t{\n\t\t\t\t\tself.addedToCartView = new ProductListAddedToCartView({\n\t\t\t\t\t\tapplication: self.application\n\t\t\t\t\t,\tparentView: self\n\t\t\t\t\t,\tlist: new ProductListModel(model) //pass the model with all the data\n\t\t\t\t\t,\tnot_purchasable_items_count: not_purchasable_items_count\n\t\t\t\t\t});\n\n\t\t\t\t\t// also show a confirmation message\n\t\t\t\t\tvar confirmMessage;\n\n\t\t\t\t\tif(list.get('items').length > 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tconfirmMessage =  _('Good! $(1) items from your $(0) list were successfully added to your cart. You can continue to <a href=\"\">view your cart and checkout</a>').\n\t\t\t\t\t\ttranslate('<a class=\"product-list-name\" href=\"/productlist/' + list.get('internalid') + '\">'+list.get('name')+'</a>', list.get('items').length);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tconfirmMessage =  _('Good! $(1) item from your $(0) list was successfully added to your cart. You can continue to <a href=\"\" data-touchpoint=\"viewcart\">view your cart and checkout</a>').\n\t\t\t\t\t\ttranslate('<a class=\"product-list-name\" href=\"/productlist/' + list.get('internalid') + '\">'+list.get('name')+'</a>', list.get('items').length);\n\t\t\t\t\t}\n\n\t\t\t\t\tself.showConfirmationMessage(confirmMessage);\n\t\t\t\t\tself.application.getLayout().showInModal(self.addedToCartView);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// Edit list click handler\n\t,\teditListHandler: function (e)\n\t\t{\n\t\t\tvar list = this.getListFromDom(jQuery(e.target));\n\t\t\tthis.editList(list);\n\t\t}\n\n\t\t// Get the list (collection) from dom\n\t,\tgetListFromDom: function ($target)\n\t\t{\n\t\t\tvar list_id = $target.closest('[data-product-list-id]').data('product-list-id') + '';\n\n\t\t\treturn this.options.collection.where({internalid: list_id})[0];\n\t\t}\n\n\t\t// Edit list click handler (displays edit list modal view)\n\t,\teditList: function (list)\n\t\t{\n\t\t\tthis.newProductListView = new ProductListCreationView({\n\t\t\t\tapplication: this.application\n\t\t\t,\tparentView: this\n\t\t\t,\tmodel: list\n\t\t\t});\n\n\t\t\tthis.application.getLayout().showInModal(this.newProductListView);\n\t\t}\n\n\t\t// Get the label for showContent()\n\t,\tgetViewLabel: function ()\n\t\t{\n\t\t\treturn 'productlist_all';\n\t\t}\n\n\t\t// override showContent() for showing the breadcrumb\n\t,\tshowContent: function()\n\t\t{\n\t\t\tthis.application.getLayout().showContent(this, this.getViewLabel(), [{\n\t\t\t\ttext: _('Product Lists').translate(),\n\t\t\t\thref: '/productlists'\n\t\t\t}]);\n\t\t}\n\n\t\t\t,\ttoggleProductListItemHandler: function (e)\n\t\t{\n\t\t\tthis.toggleProductListItem(jQuery(e.target).closest('article').data('id'));\n\t\t}\n\n\t,\ttoggleProductListHandler: function (e)\n\t\t{\n\t\t\tthis.toggleProductList(jQuery(e.target).closest('article').data('id'));\n\t\t}\n\n\t,\ttoggleProductList: function (pl_internalid)\n\t\t{\n\t\t\tvar pl = this.collection.get(pl_internalid);\n\n\t\t\tif (pl)\n\t\t\t{\n\t\t\t\tthis[pl.get('checked') ? 'unselectProductList' : 'selectProductList'](pl);\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t}\n\n\t,\tselectProductList: function (pl)\n\t\t{\n\t\t\tif (pl)\n\t\t\t{\n\t\t\t\tpl.set('checked', true);\n\t\t\t}\n\t\t}\n\n\t,\tunselectProductList: function (pl)\n\t\t{\n\t\t\tif (pl)\n\t\t\t{\n\t\t\t\tpl.set('checked', false);\n\t\t\t}\n\t\t}\n\n\t,\tgetCurrentList: function (e)\n\t\t{\n\t\t\tvar list_id = jQuery(e.target).closest('[data-product-list-id]').data('product-list-id') + ''\n\t\t\t,\tlist = this.options.collection.findWhere({\n\t\t\t\t\tinternalid: list_id\n\t\t\t\t});\n\n\t\t\treturn list;\n\t\t}\n\n\t,\tnavigateToItems: function (e)\n\t\t{\n\t\t\tvar list = this.getCurrentList(e)\n\t\t\t,\tinternalid = list.get('internalid')\n\t\t\t,\turl = '/productlist/' + (internalid ? internalid : 'tmpl_' + list.get('templateid'));\n\n\t\t\tBackbone.history.navigate(url, {trigger: true});\n\t\t}\n\t});\n});\n\n\n// ProductList.Views.js\n// -----------------------\n// Views for handling Product Lists (CRUD)\ndefine('ProductListMenu.View', function ()\n{\n\t'use strict';\n\n\treturn Backbone.View.extend({\n\t\t\n\t\ttemplate: 'product_list_menu'\n\t\t\n\t,\tattributes: {'class': 'ProductListMenuView'}\n\n\t,\tinitialize: function(options)\n\t\t{\n\t\t\tthis.options = options;\n\t\t\tthis.application = options.application;\n\t\t\tthis.is_single_list = this.application.ProductListModule.isSingleList(this.application); \n\t\t\tif (this.is_single_list)\n\t\t\t{\n\t\t\t\tthis.model = this.collection.at(0); \n\t\t\t}\n\t\t}\n\t\n\t});\n\n});\n\n\n// ProductReviews.Collection.js\n// ----------------------------\n// Returns an extended version of the CachedCollection constructor\n// (file: Backbone.cachedSync.js)\ndefine('ProductReviews.Collection', ['ProductReviews.Model'], function (Model)\n{\n\t'use strict';\n\t\n\treturn Backbone.CachedCollection.extend({\n\t\t\n\t\turl: 'services/product-reviews.ss'\n\t\t\n\t,\tmodel: Model\n\t\t\n\t\t// pre-processes the data after fetching\n\t\t// http://backbonejs.org/#Model-parse\n\t,\tparse: function (data)\n\t\t{\n\t\t\t// We set up some global attributes to the Collection\n\t\t\tthis.page = data.page;\n\t\t\tthis.recordsPerPage = data.recordsPerPage;\n\t\t\tthis.totalRecordsFound = data.totalRecordsFound;\n\t\t\tthis.totalPages = Math.ceil(this.totalRecordsFound / this.recordsPerPage);\n\t\t\t\n\t\t\t// and we return only the collection from the server\n\t\t\treturn data.records;\n\t\t}\n        \n    ,   parseOptions: function (options)\n        {\n            if (options)\n            {\n                if (options.filter)\n                {\n                    options.filter = options.filter.id;\n                }\n                \n                if (options.sort)\n                {\n                    options.sort = options.sort.id;\n                }\n                \n                options.itemid = this.itemId;\n            }\n            \n            return options;\n        }\n        \n        // Collection.update:\n\t\t// custom method called by ListHeader view\n\t\t// it receives the currently applied filter,\n\t\t// currently applied sort and currently applied order\n\t,\tupdate: function (options)\n\t\t{\n            var data = this.getReviewParams(this.parseOptions(options), this.application);\n            \n            if (data.order)\n            {\n                // check for inverse results\n                data.order = options.order && options.order < 0 ? data.order.replace('ASC', 'DESC') : data.order.replace('DESC', 'ASC');\n            }\n            \n\t\t\tthis.fetch({\n\t\t\t\tdata: data\n            ,   reset: true\n\t\t\t,\tkillerId: options.killerId\n\t\t\t});\n\t\t}\n\t});\n});\n\n// ProductReviews.Model.js\n// -----------------------\n// It returns a new instance of a Backbone CachedModel\n// (file: Backbone.cachedSync.js)\n// initializes writer and rating per attribute if null or undefined\ndefine('ProductReviews.Model', function ()\n{\n\t'use strict';\n\t\n\treturn Backbone.CachedModel.extend({\n\t\t\n\t\turlRoot: 'services/product-reviews.ss'\n\t\t// conditions for each of the fields to be valid\n\t\t// [Backbone.Validation](https://github.com/thedersen/backbone.validation)\n\t,\tvalidation: {\n\t\t\trating: {\n\t\t\t\trequired: true\n\t\t\t,\tmsg: _('Rating is required').translate()\n\t\t\t}\n\t\t,\ttitle: {\n\t\t\t\tfn: function (value)\n\t\t\t\t{\n\t\t\t\t\tif (!value)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn _('Title is required').translate(); \n\t\t\t\t\t} \n\t\t\t\t\telse if (value.length >= 199)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn _('The field name cannot contain more than the maximum number (199) of characters allowed.').translate(); \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t,\ttext: {\n\t\t\t\tfn: function (value)\n\t\t\t\t{\n\t\t\t\t\tif (value.length >= 1000)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn _('The review field cannot contain more than the maximum number (1000) of characters allowed.').translate(); \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t,\t'writer.name': {\n\t\t\t\trequired: true\n\t\t\t,\tmsg: _('Writer is required').translate()\n\t\t\t}\n\t\t}\n\n\t,\tinitialize: function ()\n\t\t{\n\t\t\t// We need to set this attributes to the model\n\t\t\t// so they get validated\n\t\t\tthis.get('rating_per_attribute') || this.set('rating_per_attribute', {});\n\t\t\tthis.get('rating') || this.set('rating', null);\n\t\t\tthis.get('writer') || this.set('writer', {});\n\t\t\tthis.get('title') || this.set('title', '');\n\t\t}\n\n\t,\tparse: function (response)\n\t\t{\n\t\t\tresponse.rated = JSON.parse(jQuery.cookie('votedReviewsId') || '{}')[response.internalid];\n\t\t\treturn response;\n\t\t}\n\t});\n});\n\n// ProductReviews.Router.js\n// ------------------------\n// Handles the rendering of the different views depending on the URL route\ndefine('ProductReviews.Router'\n,\t['ProductReviews.Model', 'ProductReviews.Collection', 'ProductReviews.Views', 'ItemDetails.Model']\n,\tfunction (Model, Collection, Views, ItemDetailsModel)\n{\n\t'use strict';\n\t\n\t// http://backbonejs.org/#Router\n\treturn Backbone.Router.extend({\n\n\t\troutes: { \n            'product/:id/newReview': 'createReviewById'\n        ,\t':url/newReview': 'createReviewByUrl'\n\t\t}\n\t\t\n\t,\tinitialize: function (Application)\n\t\t{\n\t\t\tthis.application = Application;\n\t\t}\n\n\t,\tcreateReviewByUrl: function (url)\n\t\t{\n\t\t\t// if there are any options in the URL\n\t\t\tif (~url.indexOf('?'))\n\t\t\t{\n\t\t\t\turl = url.split('?')[0];\n\t\t\t}\n\t\t\t\n\t\t\t// Now go grab the data and show it\n\t\t\tthis.createReview({url: url});\n\t\t}\n\t\n\t,\tcreateReviewById: function (id)\n\t\t{\n\t\t\tthis.createReview({id: id});\n\t\t}\n\t\t\n\t\t// createReview:\n\t\t// renders the Product Reviews form\n\t,\tcreateReview: function (api_params)\n\t\t{\n\t\t\tvar item_details_model = new ItemDetailsModel()\n\n\t\t\t,\tmodel = new Model()\n\t\t\t\t// creates a new instance of the Form View\n\t\t\t,\tview = new Views.Form({\n\t\t\t\t\titem: item_details_model\n\t\t\t\t,\tmodel: model\n\t\t\t\t,\tapplication: this.application\n\t\t\t\t});\n\t\t\t\n\t\t\t// then we fetch for the data of the item\n\t\t\titem_details_model.fetch({\n\t\t\t\tdata: api_params\n\t\t\t,\tkillerId: this.application.killerId\n\t\t\t}).done(function ()\n\t\t\t{\n\t\t\t\t// and we show the content on success\n\t\t\t\tview.showContent();\n\t\t\t});\n\t\t}\n\t});\n});\n\n// ProductReviews.Views.js\n// -----------------------\n// Returns an object with Backbone Views as attributes\n// http://backbonejs.org/#View\n// * Views.ItemReviewCenter: used when listing all of the reviews of an item\n// * Views.Form: to create a new ProductReview\n// * Views.FormPreview: to show the user how the review is going to look\ndefine('ProductReviews.Views', ['ListHeader'], function (ListHeader)\n{\n\t'use strict';\n\t\n\tvar Views = {};\n\n\t// Based on the item's breadcrumb, we suffix '/reviews'\n\tfunction getReviewsBaseBreadcrumb (item)\n\t{\n\t\tvar result = item.get('_breadcrumb').slice(0);\n\t\t\n\t\t// we add the new element to the breadcrumb array\n\t\tresult.push({\n\t\t\thref: item.get('_url') +'/reviews'\n\t\t,\ttext: _('Reviews').translate()\n\t\t});\n\t\t\n\t\treturn result;\n\t}\n\t\n\t// Views.ItemReviewCenter:\n\t// This view is shown when listing the reviews of an item\n\t// contains event handlers for voting helpfulness and flaging a review\n\tViews.ItemReviewCenter = Backbone.View.extend({\n\t\t\n\t\ttemplate: 'reviews_center_for_item'\n\t\t\n\t,\tattributes: {\n\t\t\t'id': 'item-product-reviews'\n\t\t,\t'class': 'item-product-reviews item-detailed-reviews'\n\t\t}\n\t\n\t,\tevents: {\n\t\t\t'click [data-type=\"vote\"]': 'markReview'\n\t\t,\t'click [data-action=\"flag\"]': 'markReview'\n\t\t}\n\t\t\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tthis.item = options.item;\n\t\t\tthis.baseUrl = options.baseUrl;\n\t\t\tthis.application = options.application;\n            this.queryOptions = options.queryOptions;\n            \n            options.collection.itemId = this.item.get('internalid');\n            \n            this.setupListHeader(options.collection);\n\t\t}\n        \n    ,\tgetRelPrev: function ()\n\t\t{\n\t\t\tvar current_page = this.queryOptions && parseInt(this.queryOptions.page) || 1;\n\n\t\t\tif (current_page > 1)\n\t\t\t{\n\t\t\t\tif (current_page === 2)\n\t\t\t\t{\n\t\t\t\t\treturn this.baseUrl;\n\t\t\t\t}\n\n\t\t\t\tif (current_page > 2)\n\t\t\t\t{\n\t\t\t\t\treturn this.baseUrl + '?page=' + (current_page - 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t,\tgetRelNext: function ()\n\t\t{\n\t\t\tvar current_page = this.queryOptions && this.queryOptions.page || 1;\n\n\t\t\tif (current_page < this.collection.totalPages)\n\t\t\t{\n\t\t\t\treturn this.baseUrl += '?page='+ (current_page + 1);\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n        \n        // creates a new url based on a new filter or sorting options\n\t,\tgetUrlForOption: function (option)\n\t\t{\n\t\t\tvar options = {}\n\t\t\t,\tsort = option && option.sort || this.options.queryOptions.sort\n\t\t\t,\tfilter = option && option.filter || this.options.queryOptions.filter;\n\t\t\t\n\t\t\tif (filter)\n\t\t\t{\n\t\t\t\toptions.filter = filter;\n\t\t\t}\n\n\t\t\tif (sort)\n\t\t\t{\n\t\t\t\toptions.sort = sort;\n\t\t\t}\n            \n\t\t\treturn this.baseUrl +'?'+ jQuery.param(options);\n\t\t}\n    ,   setupListHeader: function (collection)\n        {   \n            var sorts = _(this.application.getConfig('productReviews.sortOptions')).map(function(sort)\n            {\n                sort.value = sort.id;\n                return sort;\n            }); \n            var filters = _(this.application.getConfig('productReviews.filterOptions')).map(function(filter)\n            {\n                filter.value = filter.id;\n                return filter;\n            });\n\t\t\tthis.listHeader = new ListHeader({\n\t\t\t\tview: this\n\t\t\t,\tapplication: this.application\n\t\t\t,\tcollection: collection\n\t\t\t,\tsorts: sorts\n\t\t\t,\tfilters: filters\n            ,   avoidFirstFetch: true\n            ,   totalCount: this.item.get('_ratingsCount')\n\t\t\t});\n            \n        }\n\t\t\n\t,\tshowContent: function ()\n\t\t{\n\t\t\t// we set up both title and page_header for the view\n\t\t\tthis.title = this.page_header = _('$(0) reviews').translate(this.item.get('_name'));\n\n\t\t\tthis.application.getLayout().showContent(this);\n\t\t}\n        \n    ,   updateCannonicalLinks: function ()\n        {\n            var $head = jQuery('head')\n            ,   previous_page = this.getRelPrev()\n            ,   next_page = this.getRelNext();\n            \n            $head.find('link[rel=\"next\"], link[rel=\"prev\"]').remove();\n            \n            if (previous_page)\n\t\t\t{\n\t\t\t\tjQuery('<link/>', {\n\t\t\t\t\trel: 'prev'\n\t\t\t\t,\thref: previous_page\n\t\t\t\t}).appendTo($head);\n\t\t\t}\n\n\t\t\tif (next_page)\n\t\t\t{\n\t\t\t\tjQuery('<link/>', {\n\t\t\t\t\trel: 'next'\n\t\t\t\t,\thref: next_page\n\t\t\t\t}).appendTo($head);\n\t\t\t}\n        }\n\n\t,\thandleMarkSuccess: function (review_id, action, review, $container)\n\t\t{\n\t\t\tvar productReviews = this.application.getConfig('productReviews')\n\t\t\t,\tcurrentReviewedItems = JSON.parse(jQuery.cookie('votedReviewsId') || '{}');\n\n\t\t\t// this should be always false because you cannot mark an already marked review\n\t\t\tif (!currentReviewedItems[review_id])\n\t\t\t{\n\t\t\t\tcurrentReviewedItems[review_id] = {};\n\t\t\t\tcurrentReviewedItems[review_id][action] = true;\n\t\t\t\tjQuery.cookie('votedReviewsId', JSON.stringify(currentReviewedItems));\n\t\t\t\t\n\t\t\t\tvar rated = {};\n\t\t\t\trated[action] = true;\n\t\t\t\trated.voted = true;\n\t\t\t\treview.set('rated', rated);\n\t\t\t}\n\n\t\t\t$container\n\t\t\t\t// we re-render the macro with the new data\n\t\t\t\t.html(\n\t\t\t\t\t// we use the reviewMacro from the config file\n\t\t\t\t\t// we pass the review that was just edited\n\t\t\t\t\t// and the configuration options for Product Reviews\n\t\t\t\t\tSC.macros[productReviews.reviewMacro](review, _.extend({showActionButtons: true}, productReviews))\n\t\t\t\t)\n\t\t\t\t// and we let the user know it all went ok\n\t\t\t\t.find('[data-type=\"alert-placeholder\"]').html(\n\t\t\t\t\tSC.macros.message(_('<b>Thank You!</b> We love your feedback.').translate(), 'success', true)\n\t\t\t\t);\n\t\t}\n\n\t,\thandleMarkError: function ($container)\n\t\t{\n\t\t\t// otherwise we show an error message\n\t\t\t$container\n\t\t\t\t.find('[data-type=\"vote\"]').removeClass('disabled').end()\n\t\t\t\t.find('[data-type=\"alert-placeholder\"]').html(\n\t\t\t\t\tSC.macros.message(_('<b>We are sorry!</b> There has been an error, please try again later.').translate(), 'error', true )\n\t\t\t\t);\n\t\t}\n\t\t// handles the ajax call to vote or flag a review\n\t,\tmarkReview: function (e)\n\t\t{\n\t\t\tvar $element = jQuery(e.target);\n\n\t\t\tif (!$element.hasClass('disabled'))\n\t\t\t{\n\t\t\t\tvar\trated = {}\n\t\t\t\t,\tproxy = jQuery.proxy\n\n\t\t\t\t,\taction = $element.data('action')\n\t\t\t\t,\t$container = $element.closest('.review-container')\n\n\t\t\t\t\t// we get the review from the collection\n\t\t\t\t,\treview_id = $element.data('review-id')\n\t\t\t\t,\treview = this.collection.get(review_id);\n\n\t\t\t\t$element.addClass('disabled');\n\t\t\t\t\n\t\t\t\trated[action] = true;\n\n\t\t\t\t// we set the action that we are going to call\n\t\t\t\treview.set({\n\t\t\t\t\taction: action\n\t\t\t\t,\trated: rated\n\t\t\t\t});\n\n\t\t\t\t// and then we do the save the review\n\t\t\t\treview.save().then(\n\t\t\t\t\tproxy(this.handleMarkSuccess, this, review_id, action, review, $container)\n\t\t\t\t,\tproxy(this.handleMarkError, this, $container)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t\n\t,\tgetBreadcrumb: function ()\n\t\t{\n\t\t\treturn getReviewsBaseBreadcrumb(this.item);\n\t\t}\n\t});\n\t\n\t// Views.Form:\n\t// This view is used to render the Product Review form\n\t// It handles the rating and submission of the review\n\tViews.Form = Backbone.View.extend({\n\t\t\n\t\ttemplate: 'review_form'\n\t\t\n\t,\tattributes: {\n\t\t\t'id': 'product-review-form'\n\t\t,\t'class': 'product-review-form'\n\t\t}\n\t\t\n\t,\ttitle: _('Write your Review').translate()\n\t\t\n\t,\tpage_header: _('Write your Review').translate()\n\t\n\t,\tevents: {\n\t\t\t'rate [data-toggle=\"rater\"]': 'rate'\n\t\t,\t'submit form#new-product-review': 'preview'\n\t\t}\n\t\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tthis.item = options.item;\n\t\t\tthis.tmpRatingPerAtribute = {};\n\t\t\tthis.application = options.application;\n\t\t\t// we let the view know if the customer is logged in\n\t\t\t// as this might be required to add a review\n\t\t\tthis.isLoggedIn = options.application.getUser().get('isLoggedIn') === 'T';\n\t\t\t\n            this.updateMetaTags();\n\t\t\t\n\t\t\t// if the user is logged in and this is the first time we're initializing the view we preload the nickname\n\t\t\tif (this.isLoggedIn && !(this.model.get('writer') && this.model.get('writer').name))\n\t\t\t{\n\t\t\t\tthis.model.set('writer',{'name':  options.application.getUser().get('firstname') });\n\t\t\t}\n\t\t}\n\n\t,\tshowContent: function ()\n\t\t{\n\t\t\tif (this.model.get('text'))\n\t\t\t{\n\t\t\t\t// if the model contains text (if comming from a Preview View)\n\t\t\t\t// we need to parse all html line breaks into regular ones\n\t\t\t\tthis.model.set('text', this.model.get('text').replace(/<br>/g, '\\n'));\n\t\t\t}\n\n\t\t\tvar self = this;\n\n\t\t\tthis.application.getLayout().showContent(this).done(function ()\n\t\t\t{\n\t\t\t\t// we initialize our custom plugin for rating\n\t\t\t\t// (file: Bootstrap.Rate.js)\n\t\t\t\tself.$('[data-toggle=\"rater\"]').rater();\n\t\t\t});\n\t\t}\n\t\t\n\t\t// sets the rating of an attribute in the model\n\t,\trate: function (e, rater)\n\t\t{\n\n\t\t\tvar attributes_to_rate_on = this.item.get('_attributesToRateOn');\n\t\t\t\n\t\t\t// if the name is not in attributes_to_rate_on\n\t\t\tif (~_.indexOf(attributes_to_rate_on, rater.name))\n\t\t\t{\n\t\t\t\tthis.tmpRatingPerAtribute[rater.name] = rater.value;\n\t\t\t}\n\t\t\telse if (rater.name === '__overall__')\n\t\t\t{\n\t\t\t\tthis.tmpRating = rater.value;\n\t\t\t\t// rate touched is a flag to prevent auto computing the overall rating\n\t\t\t\tthis.rateTouched = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (!this.rateTouched && this.application.getConfig('productReviews.computeOverall'))\n\t\t\t{\n\t\t\t\t// auto compute the overall rating\n\t\t\t\tvar average = Math.round(_.reduce(_.values(this.tmpRatingPerAtribute), function(memo, num){return memo+num; }, 0) / attributes_to_rate_on.length);\n\t\t\t\tthis.$('[data-toggle=\"rater\"][data-name=\"__overall__\"]').data('rater').setValue(average, true);\n\t\t\t\tthis.model.set('rating', average);\n\t\t\t}\n\t\t}\n\n\t\t// method to parse html tags into text\n\t,\tsanitize: function (text)\n\t\t{\n\t\t\treturn jQuery.trim(text).replace(/</g, '&lt;').replace(/\\>/g, '&gt;');\n\t\t}\n\t\t\n\t\t// When the Preview button is clicked\n\t,\tpreview: function (e)\n\t\t{\n\t\t\te && e.preventDefault();\n\n\t\t\t// it sets the Model's text, title and writer\n\t\t\tthis.model.set({\n\t\t\t\ttitle: this.sanitize(this.$('#title').val())\n\t\t\t,\trating: this.tmpRating || this.model.get('rating')\n\t\t\t,\trating_per_attribute: this.tmpRatingPerAtribute ||  this.model.get('rating_per_attribute')\n\t\t\t,\twriter: {name: this.sanitize(this.$('#writer').val())}\n\t\t\t,\ttext: this.sanitize(this.$('#text').val()).replace(/\\n/g, '<br>')\n\t\t\t});\n\n\t\t\t// Then we show the FormPreview using the same Model\n\t\t\t// Notice: the Model contains the selected rate for the different attributes\n\t\t\t// plus the text, title and writer that were set up right above this comment\t\t\t\t\t\t\n\t\t\tthis.$savingForm = jQuery(e.target).closest('form');\n\t\t\tif (this.model.isValid(true)) {\n\t\t\t\tnew Views.FormPreview(this.options).showContent();\n\t\t\t}\n\t\t}\n\t\t\n\t,\tgetBreadcrumb: function ()\n\t\t{\n\t\t\tvar result = getReviewsBaseBreadcrumb(this.item);\n\t\t\t\n\t\t\tresult.push({\n\t\t\t\thref: this.item.get('_url') + '/reviews/new'\n\t\t\t,\ttext: _('Write New').translate()\n\t\t\t});\n\t\t\t\n\t\t\treturn result;\n\t\t}\n    ,   updateMetaTags: function ()\n        {\n            var $head = jQuery('head');\n            \n            jQuery('<meta/>', {\n\t\t\t\t\tname: 'robots'\n\t\t\t\t,\tcontent: 'noindex, nofollow'\n\t\t\t\t}).appendTo($head);\n        }\n\t});\n\t\n\t// Views.FormPreview:\n\t// This view is shown prior to the form's submission\n\t// Handles both edit and save events\n\t// * edit renders the form view\n\t// * save submits the form and renders the confirmation view\n\tViews.FormPreview = Backbone.View.extend({\n\t\t\n\t\ttemplate: 'review_form_preview'\n\t\t\n\t,\tattributes: {\n\t\t\t'id': 'product-review-form-preview'\n\t\t,\t'class': 'product-review-form-preview'\n\t\t}\n\t\t\n\t,\ttitle: _('Submit your Review').translate()\n\t\t\n\t,\tpage_header: _('Submit your Review').translate()\n\t\n\t,\tevents: {\n\t\t\t'click [data-action=\"edit-review\"]': 'edit'\n\t\t,\t'submit form': 'save'\n\t\t}\n\t\t\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tthis.item = options.item;\n\t\t}\n\t\t\n\t\t// when the edit button is clicked, we show the Form view\n\t,\tedit: function ()\n\t\t{\n\t\t\tnew Views.Form(this.options).showContent();\n\t\t}\n\t\t\n\t,\tsave: function (e)\n\t\t{\n\t\t\te && e.preventDefault();\n\t\t\t\n\t\t\tvar self = this;\n\t\t\t\n\t\t\tthis.model.set('itemid', this.item.get('internalid')).save(null, {\n\t\t\t\tstatusCode: {\n\t\t\t\t\t'401': function ()\n\t\t\t\t\t{\n\t\t\t\t\t\t// If login is required from the server side\n\t\t\t\t\t\t// we need to handle it here\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}).done(function ()\n\t\t\t{\n\t\t\t\t// Once the review is submited, we show the Confirmation View\n\t\t\t\tvar preview_review = new Views.FormConfirmation(self.options);\n\t\t\t\tpreview_review.showContent();\n\t\t\t});\n\t\t}\n\t\t\n\t,\tgetBreadcrumb: function ()\n\t\t{\n\t\t\tvar result = getReviewsBaseBreadcrumb(this.item);\n\t\t\t\n\t\t\tresult.push({\n\t\t\t\thref: this.item.get('_url') + '/reviews/new'\n\t\t\t,\ttext: _('Preview').translate()\n\t\t\t});\n\t\t\t\n\t\t\treturn result;\n\t\t}\n\t});\n\t\n\tViews.FormConfirmation = Backbone.View.extend({ \n\t\t\n\t\ttemplate: 'review_form_confirmation'\n\t\t\n\t,\tattributes: {\n\t\t\t'id': 'product-review-form-confirmation'\n\t\t,\t'class': 'product-review-form-confirmation'\n\t\t}\n\t\t\n\t,\ttitle: _('Thank You! Your review has been submitted.').translate()\n\t\t\n\t,\tpage_header: _('<b>Thank You!</b> Your review has been submitted.').translate()\n\t\n\t,\tevents: {}\n\t\t\n\t,\tinitialize: function (options)\n\t\t{\n\t\t\tthis.item = options.item;\n\t\t}\n\t\t\n\t,\tgetBreadcrumb: function ()\n\t\t{\n\t\t\tvar result = getReviewsBaseBreadcrumb(this.item);\n\t\t\t\n\t\t\tresult.push({\n\t\t\t\thref: this.item.get('_url') + '/reviews/new'\n\t\t\t,\ttext: _('Thank you').translate()\n\t\t\t});\n\t\t\t\n\t\t\treturn result;\n\t\t}\n\t});\n\t\n\treturn Views;\n});\n\n\n// ProductReviews.js\n// -----------------\n// Defines the ProductReviews module (Model, Collection, Views, Router)\n// Mount to App also handles rendering of the reviews\n// if the current view has any placeholder for them\ndefine('ProductReviews'\n,\t['ProductReviews.Model', 'ProductReviews.Collection', 'ProductReviews.Views', 'ProductReviews.Router']\n,\tfunction (Model, Collection, Views, Router)\n{\n\t'use strict';\n    \n    // @method Parse url options and return product reviews api params\n    // @param {ApplicationSkeleton} application\n    // @param {object} options url parameters\n    // @return {object} reviews_params\n    var getReviewParams = function(options, application)\n    {\n        var sort\n        ,\tfilter\n            // Cumputes Params for Reviews API\n        ,\treviews_params = {};\n\n        if (options)\n        {\n            // if there's a filter in the URL\n            if (options.filter)\n            {\n                // we get it from the config file, based on its id\n                filter = _.find(application.getConfig('productReviews.filterOptions'), function (i) {\n                    return i.id === options.filter;\n                }) || {};\n            }\n            else\n            {\n                // otherwise we just get the default one\n                filter = _.find(application.getConfig('productReviews.filterOptions'), function (i) {\n                    return i.isDefault;\n                }) || {};\n            }\n            // and we add it to the reviews_params obj\n            reviews_params = _.extend(reviews_params, filter.params);\n\n            // same for sorting, if it comes as a parameter\n            if (options.sort)\n            {\n                // we get it from the config file\n                sort = _.find(application.getConfig('productReviews.sortOptions'), function (i) {\n                    return i.id === options.sort;\n                }) || {};\n            }\n            else\n            {\n                // otherwise we just get the default one\n                sort = _.find(application.getConfig('productReviews.sortOptions'), function (i) {\n                    return i.isDefault;\n                }) || {};\n            }\n            // and we add it to the reviews_params obj\n            reviews_params = _.extend(reviews_params, sort.params);\n        }\n\n        // If there's a specific page in the url, we pass that to\n        // if there isn't, we just get the first oen\n        reviews_params = _.extend(reviews_params, {page: options && options.page || 1});\n\n        return reviews_params;\n    };\n    \n    var ProductReviewsModule = {\n\t\tViews: Views\n\t,\tModel: Model\n\t,\tRouter: Router\n\t,\tCollection: Collection\n\t,\tmountToApp: function (application)\n\t\t{\n\t\t\tModel.prototype.urlRoot = _.getAbsoluteUrl(Model.prototype.urlRoot);\n\t\t\tCollection.prototype.url = _.getAbsoluteUrl(Collection.prototype.url);\n            \n            Collection.prototype.getReviewParams = getReviewParams;\n            Collection.prototype.application = application;\n    \n            // fetch and display product reviews\n            application.showProductReviews = function (model, options, $placeholder)\n            {\n                // get the reviews api params\n                var reviews_params = getReviewParams(options, application)\n                ,   collection = new Collection()\n                ,   self = this\n                ,   view = new Views.ItemReviewCenter({\n                        collection: collection\n                    ,   baseUrl: 'product/' + model.get('internalid')\n                    ,\tqueryOptions: options || {}\n                    ,\titem: model\n                    ,\tapplication: self\n                    });\n\n                // add the item internal id to the reviews api params\n                reviews_params.itemid = model.get('internalid');\n\n                // return the fetch 'promise'\n                collection.fetch(\n                { \n                    data: reviews_params\n                ,\tkillerId: this.killerId\n                }).done(function ()\n                {\n                    view.updateCannonicalLinks();\n                    \n                    // append and render the view\n                    $placeholder.empty().append(view.$el);\n                    view.render();\n                    \n                    collection.on('reset', function ()\n                    {\n                        view.render();\n                    }, self);\n                \n                }); \n            };\n\n\t\t\t// default behaviour for mount to app\n\t\t\treturn new Router(application);\n\t\t}\n\t};\n    \n    return ProductReviewsModule;\n});\n\n\n// Profile.js\n// ----------\n// Stores all data related to the User\n// Has methods to get and set the Recently Viewed Items\ndefine('Profile', ['Facets.Model'], function (FacetsModel)\n{\n\t'use strict';\n\t\n\tvar Profile = {\n\n\t\turlRoot: 'services/profile.ss'\n\n\t,\taddHistoryItem: function(item)\n\t\t{\n\t\t\tif (item)\n\t\t\t{\n\t\t\t\t// If the item is already in the recently viewed, we remove it\n\t\t\t\tthis.recentlyViewedItems.get('items').remove(item);\n\t\t\t\t\n\t\t\t\t// we add the item at the beginning of a collection\n\t\t\t\tthis.recentlyViewedItems.get('items').unshift(item);\n\n\t\t\t\tif (this.useCookie)\n\t\t\t\t{\n\t\t\t\t\tvar current_items = jQuery.cookie('recentlyViewedIds')\n\t\t\t\t\t,\tnews_items = _.union(this.recentlyViewedItems.get('items').pluck('internalid'), current_items);\n\n\t\t\t\t\tjQuery.cookie('recentlyViewedIds', _.first(news_items, this.numberOfItemsDisplayed));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t,\tloadItemsFromCookie: function ()\n\t\t{\n\t\t\t// create an array of ID items to get only the elements that are present in the cookie but are not present in memory\n\t\t\tvar cookie_ids = jQuery.cookie('recentlyViewedIds') || [];\n\t\t\t\n\t\t\tcookie_ids = !_.isArray(cookie_ids) ? [cookie_ids] : cookie_ids;\n\t\t\t\n\t\t\tvar\titems_ids = _.difference(cookie_ids, this.recentlyViewedItems.get('items').pluck('internalid')).join(',')\n\t\t\t,\tself = this;\n\n\t\t\tif (items_ids)\n\t\t\t{\n\t\t\t\t//return promise (http://api.jquery.com/promise/)\n\t\t\t\treturn this.facetsModel.fetch({data:{id: items_ids}}, {silent: true}).done(function()\n\t\t\t\t{\n\t\t\t\t\tself.facetsModel.get('items').each(function (model)\n\t\t\t\t\t{\n\t\t\t\t\t\t// find the position of the item on the cookie\n\t\t\t\t\t\tvar index = _(cookie_ids).indexOf(model.get('_id'));\n\t\t\t\t\t\t// add item to recentlyViewedItems at the position\n\t\t\t\t\t\tself.recentlyViewedItems.get('items').add(model, {at: index});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\treturn jQuery.Deferred().resolve();\n\t\t}\n\n\t,\trenderRecentlyViewedItems: function (view)\n\t\t{\n\t\t\tvar self = this\n\t\t\t,\t$container = view.$('[data-type=\"recently-viewed-placeholder\"]')\n\t\t\t,\tmacro = SC.macros[$container.data('macro') || 'recentlyViewed'];\n\n\t\t\treturn this.getRecentlyViewedItems().then(function ()\n\t\t\t{\n\t\t\t\tvar items = self.recentlyViewedItems.get('items');\n\t\t\t\t\n\t\t\t\titems.remove(items.get(view.model.id));\n\n\t\t\t\t$container.html(macro(items.first(self.numberOfItemsDisplayed), view.options.application));\n\n\t\t\t\tview.application.getLayout().updateUI();\n\t\t\t});\n\t\t}\n\t\t\n\t,\tgetRecentlyViewedItems: function ()\n\t\t{\n\t\t\treturn this.useCookie ? this.loadItemsFromCookie() : jQuery.Deferred().resolve();\n\t\t}\n\t};\n\t\t\n\treturn {\n\n\t\tProfile: Profile\n\n\t,\tmountToApp: function (application)\n\t\t{\n\t\t\tvar handler = function()\n\t\t\t{\n\t\t\t\t// Sets the getUser function for the application\n\t\t\t\t_.extend(application.getUser(), Profile, {\n\t\t\t\t\tapplication: application\n\t\t\t\t\t// we get this values from the configuration file\n\t\t\t\t,\tuseCookie: application.getConfig('recentlyViewedItems.useCookie', false)\n\t\t\t\t\t// initialize new instance of Facets Model to use search API\n\t\t\t\t,\tfacetsModel: new FacetsModel()\n\t\t\t\t\t// initialize the collection of items (empty)\n\t\t\t\t,\trecentlyViewedItems: new FacetsModel().set('items',[])\n\t\t\t\t,\tnumberOfItemsDisplayed: application.getConfig('recentlyViewedItems.numberOfItemsDisplayed')\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tapplication.getLayout().on('afterAppendView', function (view)\n\t\t\t\t{\n\t\t\t\t\tif (view.$('[data-type=\"recently-viewed-placeholder\"]').length)\n\t\t\t\t\t{\n\t\t\t\t\t\tapplication.getUser().renderRecentlyViewedItems(view);\n\t\t\t\t\t}\n\t\t\t\t});\t\n\t\t\t};\n\t\t\tif (application.getUserPromise)\n\t\t\t{\n\t\t\t\tapplication.getUserPromise().done(handler); \n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thandler();\n\t\t\t}\n\n\t\t\t\n\t\t}\n\t};\n});\n\n// PromoCodeSupport.js\n// -------------------\n// rewrite touchpoints when set promocode.\ndefine('PromocodeSupport', ['UrlHelper'], function (UrlHelper)\n{\n\t'use strict';\n\n\treturn {\n\t\tmountToApp: function (application)\n\t\t{\n\t\t\t// Method defined in file UrlHelper.js\n\t\t\tUrlHelper.addTokenListener('promocode', function (value)\n\t\t\t{\n\t\t\t\t// We get the instance of the ShoppingCart and apply the promocode\n\t\t\t\t// See method \"update\" of model Cart in file Models.js (ssp library file)\n\t\t\t\tapplication.getCart().save({promocode: {code: value}});\n\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}\n\t};\n\t\n});\n\n\n// Session.js\n// -------------\n// \ndefine('Session', function ()\n{\n\t'use strict';\n\n\treturn {\n\n\t\tget: function(path, default_value)\n\t\t{\n\t\t\treturn _.getPathFromObject(SC.getSessionInfo(), path, default_value);\n\t\t}\n\n\t,\tset: function(path, value)\n\t\t{\n\t\t\tSC.getSessionInfo()[path] = value;\n\t\t}\n\n\t,\tgetSearchApiParams: function()\n\t\t{\n\t\t\tvar search_api_params = {};\n\n\t\t\t// Locale\n\t\t\tvar locale = this.get('language.locale', '');\n\t\t\tif (~locale.indexOf('_'))\n\t\t\t{\n\t\t\t\tvar locale_tokens = locale.split('_');\n\t\t\t\tsearch_api_params.language = locale_tokens[0];\n\t\t\t\tsearch_api_params.country = locale_tokens[1];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsearch_api_params.language = locale;\n\t\t\t}\n\n\t\t\t// Currency\n\t\t\tsearch_api_params.currency = this.get('currency.code', '');\n\n\t\t\t// Price Level\n\t\t\tsearch_api_params.pricelevel = this.get('priceLevel', '');\n\n\t\t\t// No cache\n\t\t\tif (_.parseUrlOptions(location.search).nocache === 'T')\n\t\t\t{\n\t\t\t\tsearch_api_params.nocache = 'T';\n\t\t\t}\n\n\t\t\treturn search_api_params;\n\t\t}\n\n\t};\n\n});\n\n\n// SiteSearch.js\n// -------------\n// Defines listeners and methods for the Global Site Search (macro siteSearch.txt)\n// Uses Bootstrap's Typeahead plugin\n// http://twitter.github.com/bootstrap/javascript.html#typeahead\ndefine('SiteSearch', ['Facets.Translator', 'TypeAhead.Model', 'Session'], function (Translator, Model, Session)\n{\n\t'use strict';\n\n\t// SiteSearch.currentSearchOptions() - Returns current search options formatted as query params.\n\tvar currentSearchOptions = function ()\n\t{\n\t\tvar newOptions = []\n\t\t,\tcurrentOptions = SC.Utils.parseUrlOptions(window.location.href);\n\n\t\t_.each(currentOptions, function (value, key)\n\t\t{\n\t\t\tvar lowerCaseKey = key.toLowerCase();\n\n\t\t\tif (lowerCaseKey === 'order' || lowerCaseKey === 'show' ||  lowerCaseKey === 'display')\n\t\t\t{\n\t\t\t\tnewOptions.push(lowerCaseKey + '=' + value);\n\t\t\t}\n\t\t});\n\n\t\tvar newOptionsStr = newOptions.join('&');\n\n\t\tif (newOptionsStr.length > 0)\n\t\t{\n\t\t\tnewOptionsStr = '&' + newOptionsStr;\n\t\t}\n\n\t\treturn newOptionsStr;\n\t};\n\n\t// This object's methods are ment to be added to the layout\n\tvar SiteSearch = {\n\n\t\t// method call on submit of the Search form\n\t\tsearchEventHandler: function (e)\n\t\t{\n\t\t\te.preventDefault();\n\n\t\t\tthis.$search.find('input').data('typeahead').select();\n\t\t}\n\n\t,\tseeAllEventHandler: function (e, typeahead)\n\t\t{\n\t\t\tthis.search(typeahead.query);\n\t\t}\n\n\t,\tfocusEventHandler: function ()\n\t\t{\n\t\t\tthis.$search.find('input').typeahead('lookup');\n\t\t}\n\n\t\t//SiteSearch.formatKeywords() - format a search query string according to configuration.js (searchPrefs)\n\t,\tformatKeywords: function (app, keywords)\n\t\t{\n\t\t\tvar keywordFormatter = app.getConfig('searchPrefs.keywordsFormatter');\n\n\t\t\tif (keywordFormatter && _.isFunction(keywordFormatter))\n\t\t\t{\n\t\t\t\tkeywords = keywordFormatter(keywords);\n\t\t\t\tvar maxLength = app.getConfig('searchPrefs.maxLength') || 99999;\n\t\t\t\tif (keywords.length > maxLength)\n\t\t\t\t{\n\t\t\t\t\tkeywords = keywords.substring(0, maxLength);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn keywords;\n\t\t}\n\n\t,\tsearch: function (keywords)\n\t\t{\n\t\t\tvar currentView = this.currentView;\n\n\t\t\tkeywords = SiteSearch.formatKeywords(this.getApplication(), keywords);\n\n\t\t\tif (this.getApplication().getConfig('isSearchGlobal') || !(currentView && currentView.options.translator instanceof Translator))\n\t\t\t{\n\t\t\t\tvar search_url = this.getApplication().getConfig('defaultSearchUrl')\n\t\t\t\t,\tdelimiters = this.typeaheadConfig.application.Configuration.facetDelimiters\n\t\t\t\t,\tkeywordsDelimited = delimiters.betweenFacetsAndOptions + 'keywords' + delimiters.betweenOptionNameAndValue;\n\n\t\t\t\t// If we are not in Shopping we have to redirect to it\n\t\t\t\tif (this.getApplication().getConfig('currentTouchpoint') !== 'home')\n\t\t\t\t{\n\t\t\t\t\twindow.location.href = Session.get('touchpoints.home') + '#' + search_url + keywordsDelimited + keywords;\n\t\t\t\t}\n\t\t\t\t// Else we stay in the same app\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// We navigate to the default search url passing the keywords\n\t\t\t\t\tBackbone.history.navigate(search_url + keywordsDelimited + keywords + currentSearchOptions(), {trigger: true});\n\t\t\t\t\t// on any type of search, the search term is removed from the global input box\n\t\t\t\t\tthis.$search.find('input').val('');\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// if search is not global and we are on the Browse Facet View\n\t\t\t// we might want to use the search to narrow the current list of items\n\t\t\telse\n\t\t\t{\n\t\t\t\tBackbone.history.navigate(currentView.options.translator.cloneForOption('keywords', keywords).getUrl(), {trigger: true});\n\t\t\t}\n\t\t}\n\n\t,\tprocessAnchorTags: function (e, typeahead)\n\t\t{\n\t\t\tvar $anchor, value, item, path, self = this\n\t\t\t,\tsearch_url = this.getApplication().getConfig('defaultSearchUrl');\n\n\t\t\ttypeahead.$menu.find('a').each(function (index, anchor)\n\t\t\t{\n\t\t\t\t$anchor = jQuery(anchor);\n\t\t\t\tvalue = $anchor.parent().data('value');\n\t\t\t\titem = typeahead.results[value];\n\t\t\t\tpath = item ? item.get('_url') : search_url + '?keywords=' + value.replace('see-all-', '') + currentSearchOptions();\n\n\t\t\t\t$anchor\n\t\t\t\t\t.attr({'href': path})\n\t\t\t\t\t.data({\n\t\t\t\t\t\ttouchpoint: 'home'\n\t\t\t\t\t,\thashtag: (path.indexOf('/') === 0)  ? path.replace('/', '') : path\n\t\t\t\t\t}).click(function ()\n\t\t\t\t\t{\n\t\t\t\t\t\ttypeahead.$menu.hide();\n\t\t\t\t\t});\n\n\t\t\t\t// and manually fix the link because it is a touchpoint\n\t\t\t\tself.getApplication().getLayout().touchpointMousedown({currentTarget: $anchor});\n\t\t\t});\n\n\t\t\ttypeahead.$menu.off('click');\n\t\t}\n\n\t\t// typeaheadConfig:\n\t\t// methods to customize the user experience of the typeahead\n\t\t// http://twitter.github.com/bootstrap/javascript.html#typeahead\n\t\t// (important to read the source code of the plugin to fully understand)\n\t,\ttypeaheadConfig: {\n\t\t\t// source:\n\t\t\t// trims de query\n\t\t\t// adds the 'see-all' label\n\t\t\t// fetches the data from the model\n\t\t\t// and pre-process it\n\t\t\tsource: function (query, process)\n\t\t\t{\n\t\t\t\tvar self = this;\n\t\t\t\tself.ajaxDone = false;\n\n\t\t\t\tthis.model = this.model || this.options.model;\n\t\t\t\tthis.labels = this.labels || this.options.labels;\n\t\t\t\tthis.results = this.results || this.options.results;\n\t\t\t\tthis.application = this.application || this.options.application;\n\n\t\t\t\tquery = SiteSearch.formatKeywords(this.application, jQuery.trim(query));\n\n\t\t\t\t// if the character length from the query is over the min length\n\t\t\t\tif (query.length >= this.options.minLength)\n\t\t\t\t{\n\t\t\t\t\tthis.labels = ['see-all-' + query];\n\t\t\t\t\tprocess(this.labels);\n\t\t\t\t}\n\n\t\t\t\t// silent = true makes it invisible to any listener that is waiting for the data to load\n\t\t\t\t// http://backbonejs.org/#Model-fetch\n\t\t\t\t// We can use jQuery's .done, as the fetch method returns a promise\n\t\t\t\t// http://api.jquery.com/deferred.done/\n\t\t\t\tthis.model.fetch(\n\t\t\t\t\t{\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tq: query\n\t\t\t\t\t\t,\tsort: this.options.sort\n\t\t\t\t\t\t,\tlimit: this.options.limit\n\t\t\t\t\t\t,\toffset: 0\n\t\t\t\t\t\t}\n\t\t\t\t\t,\tkillerId: _.uniqueId('ajax_killer_')\n\t\t\t\t\t}\n\t\t\t\t,\t{\n\t\t\t\t\t\tsilent: true\n\t\t\t\t\t}\n\t\t\t\t).done(function ()\n\t\t\t\t{\n\t\t\t\t\tself.ajaxDone = true;\n\t\t\t\t\tself.results = {};\n\t\t\t\t\tself.labels = ['see-all-' + query];\n\n\t\t\t\t\tself.model.get('items').each(function (item)\n\t\t\t\t\t{\n\t\t\t\t\t\t// In some ocations the search term meay not be in the itemid\n\t\t\t\t\t\tself.results[item.get('_id') + query] = item;\n\t\t\t\t\t\tself.labels.push(item.get('_id') + query);\n\t\t\t\t\t});\n\n\t\t\t\t\tprocess(self.labels);\n\t\t\t\t\tself.$element.trigger('processed', self);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// matcher:\n\t\t\t// Method used to match the query within a text\n\t\t\t// we lowercase and trim to be safe\n\t\t\t// returns 0 only if the text doesn't contains the query\n\t\t,\tmatcher: function (text)\n\t\t\t{\n\t\t\t\treturn ~text.indexOf(SiteSearch.formatKeywords(this.application, jQuery.trim(this.query)));\n\t\t\t}\n\n\t\t\t// highlighter:\n\t\t\t// method to generate the html used in the dropdown box bellow the search input\n\t\t,\thighlighter: function (itemid)\n\t\t\t{\n\t\t\t\tvar template = ''\n\t\t\t\t,\tmacro = this.options.macro\n\t\t\t\t,\titem = this.results[itemid];\n\n\t\t\t\tif (item)\n\t\t\t\t{\n\t\t\t\t\t// if we have macro, and the macro exists, we use that for the html\n\t\t\t\t\t// otherwise we just highlith the keyword in the item id\n\t\t\t\t\t// _.highlightKeyword is in file Utils.js\n\t\t\t\t\ttemplate = macro && SC.macros[macro] ? SC.macros[macro](item, this.query, this.application) : _.highlightKeyword(itemid, this.query);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (_.size(this.results))\n\t\t\t\t\t{\n\t\t\t\t\t\t// 'See All Results' label\n\t\t\t\t\t\ttemplate = '<strong>' + this.options.seeAllLabel + '<span class=\"hide\">' + _(this.query).escape() + '</span></strong>';\n\t\t\t\t\t}\n\t\t\t\t\telse if (this.ajaxDone)\n\t\t\t\t\t{\n\t\t\t\t\t\ttemplate = '<strong>' + this.options.noResultsLabel + '<span class=\"hide\">' + _(this.query).escape() + '</span></strong>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttemplate = '<strong>' + this.options.searchingLabel + '<span class=\"hide\">' + _(this.query).escape() + '</span></strong>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn template;\n\t\t\t}\n\n\t\t\t// its supposed to return the selected item\n\t\t,\tupdater: function (itemid)\n\t\t\t{\n\t\t\t\tvar a = this.$menu.find('li[data-value=\"' + itemid + '\"] a')\n\t\t\t\t,\thref = a.attr('href');\n\n\t\t\t\tif (href && href !== '#')\n\t\t\t\t{\n\t\t\t\t\ta.trigger('click');\n\t\t\t\t}\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t,\tlabels: []\n\t\t,\tresults: {}\n\t\t,\tmodel: new Model()\n\t\t,\tseeAllLabel: _('See all results').translate()\n\t\t,\tnoResultsLabel: _('No results').translate()\n\t\t,\tsearchingLabel: _('Searching...').translate()\n\t\t}\n\t};\n\n\treturn {\n\n\t\tSiteSearch: SiteSearch\n\n\t,\tmountToApp: function (application)\n\t\t{\n\t\t\tvar Layout = application.getLayout()\n\t\t\t,\tconfig = application.getConfig('typeahead');\n\n\t\t\t// we add the methods to the layout\n\t\t\t_.extend(Layout, SiteSearch);\n\n\t\t\t// then we extend the key elements\n\t\t\t_.extend(Layout.key_elements, {search: '#site-search-container'});\n\t\t\tLayout.updateUI();\n\n\t\t\t// and then the event listeners\n\t\t\t_.extend(Layout.events, {\n\t\t\t\t'submit #site-search-container form': 'searchEventHandler'\n\t\t\t,\t'focus #site-search-container input': 'focusEventHandler'\n\t\t\t,\t'seeAll #site-search-container input': 'seeAllEventHandler'\n\t\t\t,\t'processed #site-search-container input': 'processAnchorTags'\n\t\t\t});\n\n\t\t\tModel.mountToApp(application);\n\t\t\t// We extend the previously defined typeaheadConfig\n\t\t\t// with options from the configuration file\n\t\t\tSiteSearch.typeaheadConfig = _.extend(SiteSearch.typeaheadConfig, {\n\t\t\t\tapplication: application\n\t\t\t,\tminLength: config.minLength\n\t\t\t,\titems: config.maxResults + 1\n\t\t\t,\tmacro: config.macro\n\t\t\t,\tlimit: config.maxResults\n\t\t\t,\tsort: config.sort\n\t\t\t});\n\n\t\t\tLayout.on('afterRender', function ()\n\t\t\t{\n\t\t\t\t// after the layout has be rendered, we initialize the plugin\n\t\t\t\tLayout.$search.find('input').typeahead(SiteSearch.typeaheadConfig);\n\t\t\t});\n\t\t}\n\t};\n});\n\n\n// TypeAhead.Model.js\n// ---------------\n// Connects to the search api to get the minimal information of the items to show on the typeahead of the search\n// A Model Contains a Collection of items and the list of facet groups with its values\ndefine('TypeAhead.Model', ['ItemDetails.Collection', 'Session'], function (ItemDetailsCollection, Session)\n{\n\t'use strict';\n\n\tvar original_fetch = Backbone.CachedModel.prototype.fetch;\n\n\treturn Backbone.CachedModel.extend({\n\t\t\n\t\turl: function()\n\t\t{\n\t\t\tvar url = _.addParamsToUrl(\n\t\t\t\t'/api/items'\n\t\t\t,\t_.extend(\n\t\t\t\t\t{}\n\t\t\t\t,\tthis.searchApiMasterOptions\n\t\t\t\t,\tSession.getSearchApiParams()\n\t\t\t\t)\n\t\t\t);\n\t\t\t\n\t\t\treturn url;\n\t\t}\n\n\t,\tinitialize: function ()\n\t\t{\n\t\t\t// Listen to the change event of the items and converts it to an ItemDetailsCollection\n\t\t\tthis.on('change:items', function (model, items)\n\t\t\t{\n\t\t\t\tif (!(items instanceof ItemDetailsCollection))\n\t\t\t\t{\n\t\t\t\t\t// NOTE: Compact is used to filter null values from response\n\t\t\t\t\tmodel.set('items', new ItemDetailsCollection(_.compact(items)));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// model.fetch\n\t\t// -----------\n\t\t// We need to make sure that the cache is set to true, so we wrap it\n\t,\tfetch: function (options)\n\t\t{\n\t\t\toptions = options || {};\n\n\t\t\toptions.cache = true;\n\n\t\t\treturn original_fetch.apply(this, arguments);\n\t\t}\n\n\t}, {\n\t\tmountToApp: function (application) \n\t\t{\n\t\t\t// sets default options for the search api\n\t\t\tthis.prototype.searchApiMasterOptions = application.getConfig('searchApiMasterOptions.typeAhead');\n\t\t}\n\t});\n});\n\n// SocialSharing.js\n// ----------------\n// Provides standalone social sharing icons\n// Handles the integration with ShareThis\n\n/*global FB:true*/\n\ndefine('SocialSharing', ['ItemDetails.View', 'Facets.Views'], function (ItemDetailsView, FacetsViews)\n{\n\t/*jshint validthis:true*/\n\t'use strict';\n\n\tvar facebook_script_loaded = false\n\t,\taddthis_script_loaded = false; \n\n\t// getSocialAttributes:\n\t// get Social attributes from the dom\n\tfunction getSocialAttributes (dom_selectors)\n\t{\n\t\tvar result = {url: document.location.href};\n\t\t\n\t\t// we extend dom_selectors with some default selectors\n\t\t// if already defined, they don't get overriden\n\t\tdom_selectors = _.extend({\n\t\t\tdescription: '[data-type=\"social-description\"]'\n\t\t,\timages: '[data-type=\"social-image\"]'\n\t\t,\timage: '[data-type=\"lead-social-image\"]'\n\t\t}, dom_selectors);\n\t\t\n\t\t// Looks for the description in the dom\n\t\tif (this.$(dom_selectors.description).length)\n\t\t{\n\t\t\tresult.description = jQuery.trim(this.$(dom_selectors.description).text());\n\t\t}\n\t\t\n\t\t// Some social media services support several images\n\t\tif (this.$(dom_selectors.images).length)\n\t\t{\n\t\t\tresult.images = _.map(this.$(dom_selectors.images), function ()\n\t\t\t{\n\t\t\t\treturn this.src;\n\t\t\t});\n\t\t}\n\t\t\n\t\t// You can allways set a lead image\n\t\tif (this.$(dom_selectors.image).length)\n\t\t{\n\t\t\tresult.image = this.$(dom_selectors.image).get(0).src;\n\t\t}\n\t\t// if there is none, we try to get the first one from images\n\t\telse if (result.images && result.images.length)\n\t\t{\n\t\t\tresult.image = result.images[0];\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\n\t// getPopupOptionsStringFromObject:\n\t// {translates: \"this\", to: \"\"} to translates=this,to=\n\tfunction getPopupOptionsStringFromObject (popup_options)\n\t{\n\t\tvar popup_options_string = '';\n\t\t\n\t\t_.each(popup_options, function (value, name)\n\t\t{\n\t\t\tpopup_options_string += ','+ name +'='+ value;\n\t\t});\n\n\t\t// the substring is to get rid of the leading coma\n\t\treturn popup_options_string.substring(1);\n\t}\n\t\n\t// shareInMouseoverPinItButtonEventListener\n\tfunction shareInMouseoverPinItButtonEventListener (e)\n\t{\n\t\te.preventDefault();\n\n\t\tif (this.getApplication().getConfig('hover_pin_it_button.enable_pin_it_hover')) {\n\t\t\tjQuery('.pin-it-link').remove();\n\n\t\t\t// button hover pin-it-link\n\t\t\t// hidden-phone hidden-tablet because of the interaction on desktop with hover (phone and tablet always hidden)\n\t\t\tjQuery('[data-share-hover-pint-it-button=\"true\"] img')\n\t\t\t\t.after('<a class=\"pin-it-link hidden-phone hidden-tablet\" data-share-click-pint-it-button=\"true\"></a>');\n\t\t}\n\t}\n\t\n\t// shareInClickPinItButton: \n\t// opens a new window to share the page in Pintrest\n\t// based on some configuration options\n\tfunction shareInClickPinItButton (url, image, title)\n\t{\n\t\tvar popup_options_string = getPopupOptionsStringFromObject(this.getConfig('hover_pin_it_button.popupOptions'))\n\t\t,\ttarget_url = 'http://pinterest.com/pin/create/button/?url=' + encodeURIComponent(url) + '&media=' + encodeURIComponent(image) + '&description=' + encodeURIComponent(title);\n\t\t\n\t\twindow.open(target_url, _.uniqueId('window'), popup_options_string );\n\t}\n\t\n\t// shareInClickPinItButtonEventListener:\n\t// calls shareInClickPinItButton method passing the configuration options\n\tfunction shareInClickPinItButtonEventListener (e)\n\t{\n\t\te.preventDefault();\n\t\tif (!this.getApplication().getConfig('hover_pin_it_button.enable_pin_it_hover') && !this.getApplication().getConfig('hover_pin_it_button.enable_pin_it_button'))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tvar self = this\n\t\t,\timage_size = self.getApplication().getConfig('hover_pin_it_button').image_size\n\t\t,\tmetaTagMappingOg = self.getApplication().getConfig('metaTagMappingOg')\n\t\t,\turl = metaTagMappingOg['og:url'](self, 'pinterest')\n\t\t,\timage = jQuery('a.bx-pager-link.active').find('img').attr('src') // selected image\n\t\t,\ttitle = metaTagMappingOg['og:title'](self, 'pinterest');\n\n\t\tif (!image){\n\t\t\timage = jQuery('.item-detailed-image').find('img').attr('src');\n\t\t}\n\n\t\timage = self.getApplication().resizeImage(image.split('?')[0], image_size);\n\n\t\tself.getApplication().shareInClickPinItButton(url, image, title);\n\t}\n\t\n\t// shareInPinterest:\n\t// opens a new window to share the page in Pinterest\n\t// based on some configuration options\n\tfunction shareInPinterest (url, image, description, popup_options)\n\t{\n\t\tvar popup_options_string = getPopupOptionsStringFromObject(popup_options || this.getConfig('pinterest.popupOptions'))\n\n\t\t,\ttarget_url = 'http://pinterest.com/pin/create/button/?url=' + encodeURIComponent(url) + '&media=' + encodeURIComponent(image) + '&description=' + encodeURIComponent(description);\n\t\t\n\t\twindow.open(target_url, _.uniqueId('window'), popup_options_string );\n\t}\n\t\n\t// shareInPinterestEventListener:\n\t// calls shareInPinterest method passing the configuration options\n\tfunction shareInPinterestEventListener (e)\n\t{\n\t\te.preventDefault();\n\t\t\n\t\tvar metaTagMappingOg = this.getApplication().getConfig('metaTagMappingOg')\n\t\t,\turl = metaTagMappingOg['og:url'](this, 'pinterest')\n\t\t,\timage = metaTagMappingOg['og:image'](this, 'pinterest')\n\t\t,\tdescription = metaTagMappingOg['og:description'](this, 'pinterest');\n\t\t\n\t\tthis.Application.shareInPinterest(url, image, description);\n\t}\n\t\n\t// shareInTwitter:\n\t// opens a new window to share the page in Twitter\n\t// based on some configuration options\n\tfunction shareInTwitter (url, description, via, popup_options)\n\t{\n\t\tvar popup_options_string = getPopupOptionsStringFromObject(popup_options || this.getConfig('twitter.popupOptions'))\n\t\t,\ttarget_url = 'https://twitter.com/intent/tweet?original_referer='+ encodeURIComponent(url) +'&source=tweetbutton&text='+ encodeURIComponent(description) +'&url='+ encodeURIComponent(url) +'&via='+ encodeURIComponent(via);\n\t\t\n\t\twindow.open(target_url, _.uniqueId('window'), popup_options_string);\n\t}\n\t\n\t// shareInTwitterEventListener: \n\t// calls shareInTwitter method passing the configuration options\n\tfunction shareInTwitterEventListener (e)\n\t{\n\t\te.preventDefault();\n\n\t\tvar metaTagMappingOg = this.getApplication().getConfig('metaTagMappingOg')\n\t\t,\turl = metaTagMappingOg['og:url'](this, 'twitter')\n\t\t,\ttitle = metaTagMappingOg['og:title'](this, 'twitter')\n\t\t,\tvia = this.getApplication().getConfig('twitter.via').replace('@', '');\n\t\t\n\t\tthis.Application.shareInTwitter(url, title, via);\n\t}\n\t\n\t// refreshFacebookElements:\n\t// re-writes the DOM of the facebook elements\n\tfunction refreshFacebookElements ()\n\t{\n\t\tvar buttons = this.$('[data-toggle=\"like-in-facebook\"]'); \n\n\t\t// don't make any calculations if there are no placeholders or facebook is not enabled.\n\t\tif (!buttons.size() || typeof FB === 'undefined')\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tvar\tmetaTagMappingOg = this.getApplication().getConfig('metaTagMappingOg')\n\t\t,\tpluginOptions = this.getApplication().getConfig('facebook.pluginOptions')\n\t\t,\turl = metaTagMappingOg['og:url'](this, 'facebook');\n\t\t\n\t\tbuttons.empty();\n\t\t\n\t\tvar attr = {\n\t\t\t'href': url\n\t\t,\t'data-href': url\n\t\t};\n\t\t\n\t\t_.each(pluginOptions, function (value, name)\n\t\t{\n\t\t\tattr['data-'+ name] = value;\n\t\t});\n\t\t\n\t\tbuttons.attr(attr).addClass('fb-like');\n\t\t\n\t\tFB.XFBML.parse();\n\t}\n\t// shareInGooglePlus: \n\t// opens a new window to share the page in Google+\n\t// based on some configuration options\n\tfunction shareInGooglePlus (url, popup_options)\n\t{\n\t\tvar popup_options_string = getPopupOptionsStringFromObject(popup_options || this.getConfig('googlePlus.popupOptions'))\n\t\t,\ttarget_url = 'https://plus.google.com/share?url=' + encodeURIComponent(url);\n\t\t\n\t\twindow.open(target_url, _.uniqueId('window'), popup_options_string );\n\t}\n\t\n\t//  shareInGooglePlusEventListener: \n\t// calls shareInGooglePlus method passing the configuration options\n\tfunction shareInGooglePlusEventListener (e)\n\t{\n\t\te.preventDefault();\n\t\tvar metaTagMappingOg = this.getApplication().getConfig('metaTagMappingOg')\n\t\t,\turl = metaTagMappingOg['og:url'](this, 'google-plus');\n\t\t\n\t\tthis.Application.shareInGooglePlus(url);\n\t}\n\n\tvar meta_tag = {};\n\t\n\t\n\t/**\n\t * setMetaTags: Based on the meta tags config, \n\t */\n\tfunction setMetaTags ()\n\t{\n\t\tvar self = this\n\t\t,\tapplication = this.getApplication()\n\t\t,\tcurrent_view = application.getLayout().currentView\n\t\t,\tmeta_tag_mapping_og = application.getConfig('metaTagMappingOg')\n\t\t,\tmeta_tag_mapping_twitter_productCard = application.getConfig('metaTagMappingTwitterProductCard')\n\t\t,\tmeta_tagMapping_twitter_gallery_card = application.getConfig('metaTagMappingTwitterGalleryCard');\n\n\t\tclearMetaTagsByConfiguration(meta_tag_mapping_og);\n\t\tclearMetaTagsByConfiguration(meta_tag_mapping_twitter_productCard);\n\t\tclearMetaTagsByConfiguration(meta_tagMapping_twitter_gallery_card);\n\n\t\tif (current_view instanceof ItemDetailsView)\n\t\t{\n\t\t\tsetMetaTagsByConfiguration(self, meta_tag_mapping_og);\n\t\t\tsetMetaTagsByConfiguration(self, meta_tag_mapping_twitter_productCard);\n\t\t}\n\t\telse if (current_view instanceof FacetsViews.Browse)\n\t\t{\n\t\t\tsetMetaTagsByConfiguration(self, meta_tagMapping_twitter_gallery_card);\n\t\t}\n\t}\n\n\t/**\n\t * setMetaTagsByConfiguration:\n\t */\n\tfunction setMetaTagsByConfiguration (self, meta_tag_configuration) {\n\t\t_.each(meta_tag_configuration, function (fn, name)\n\t\t{\n\t\t\tvar value = fn(self);\n\t\t\t\n\t\t\tif (!meta_tag[name])\n\t\t\t{\n\t\t\t\tif (jQuery('meta[name=\"'+name+'\"]').length)\n\t\t\t\t{\n\t\t\t\t\tmeta_tag[name] = jQuery('meta[name=\"'+name+'\"]');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmeta_tag[name] = jQuery('<meta />', {name: name});\n\t\t\t\t\tjQuery('head').append(meta_tag[name]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tmeta_tag[name].attr('content', value || '');\n\t\t});\n\t}\n\n\t/**\n\t * clearMetaTagsByConfiguration\n\t */\n\tfunction clearMetaTagsByConfiguration (meta_tag_configuration) {\n\t\tvar $meta_tag = '';\n\t\t\n\t\t_.each(meta_tag_configuration, function (fn, name)\n\t\t{\n\t\t\t$meta_tag = jQuery('meta[name=\"'+name+'\"]');\n\t\t\tif ($meta_tag.length)\n\t\t\t{\n\t\t\t\t$meta_tag.attr('content', '');\n\t\t\t}\n\t\t});\n\t}\n\t\n\t// refreshAddThisElements\n\t// The plugin of \"Add this\" expects a very strict html and a function of their plugin\n\t//  needs to be called every time a new page is displayed, we do this here\n\tfunction refreshAddThisElements ()\n\t{\t\n\t\tif (!window.addthis || !jQuery('[data-toggle=\"share-in-add-this\"]').size())\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tvar Configuration = this.getApplication().getConfig()\n\t\t,\tmetaTagMappingOg = this.getApplication().getConfig('metaTagMappingOg')\n\t\t,\tinnerHTML = '';\n\n\t\t_.each(Configuration.addThis.servicesToShow, function (name, code)\n\t\t{\n\t\t\tinnerHTML += '<a class=\"addthis_button_'+code+'\">'+ name +'</a>';\n\t\t});\n\t\t\n\t\tvar share_options = {\n\t\t\turl: metaTagMappingOg['og:url'](this, 'add-this')\n\t\t,\ttitle: metaTagMappingOg['og:title'](this, 'add-this')\n\t\t,\tdescription: metaTagMappingOg['og:description'](this, 'add-this')\n\t\t};\n\t\t\n\t\tjQuery('[data-toggle=\"share-in-add-this\"]').each(function ()\n\t\t{\n\t\t\tif (this)\n\t\t\t{\n\t\t\t\tvar $this = jQuery(this);\n\t\t\t\t$this.html(innerHTML).addClass(Configuration.addThis.toolboxClass);\n\t\t\t\twindow.addthis.toolbox(this, Configuration.addThis.options, share_options);\n\t\t\t}\n\t\t});\n\t}\n\t\n\tvar social_sharing = {\n\t\tsetMetaTags: setMetaTags\n\t,\trefreshAddThisElements: refreshAddThisElements\n\t,\tshareInMouseoverPinItButtonEventListener: shareInMouseoverPinItButtonEventListener\n\t,\tmountToApp: function (Application)\n\t\t{\n\t\t\tvar Layout = Application.getLayout()\n\t\t\t,\tConfiguration = Application.getConfig();\n\t\t\t\t\t\t\n\t\t\t// This functions could be triggered by anyone, so we put them in the app level\n\t\t\t_.extend(Application, {\n\t\t\t\tshareInClickPinItButton: shareInClickPinItButton\n\t\t\t,\tshareInPinterest: shareInPinterest\n\t\t\t,\tshareInTwitter: shareInTwitter\n\t\t\t,\tshareInGooglePlus: shareInGooglePlus\n\t\t\t});\n\t\t\t\n\t\t\t// This are mostly related to the dom, or to events, so we add them in the layout\n\t\t\t_.extend(Layout, {\n\t\t\t\tgetSocialAttributes: getSocialAttributes\n\t\t\t,\tshareInMouseoverPinItButtonEventListener: shareInMouseoverPinItButtonEventListener\n\t\t\t,\tshareInClickPinItButtonEventListener: shareInClickPinItButtonEventListener\n\t\t\t,\tshareInPinterestEventListener: shareInPinterestEventListener\n\t\t\t,\tshareInTwitterEventListener: shareInTwitterEventListener\n\t\t\t,\trefreshFacebookElements: refreshFacebookElements\n\t\t\t,\tshareInGooglePlusEventListener: shareInGooglePlusEventListener\n\t\t\t,\tsetMetaTags: setMetaTags\n\t\t\t,\trefreshAddThisElements: refreshAddThisElements\n\t\t\t});\n\t\t\t\n\t\t\t// add event listeners\n\t\t\tLayout.delegateEvents({\n\t\t\t\t'click [data-toggle=share-in-pinterest]': 'shareInPinterestEventListener'\n\t\t\t,\t'click [data-toggle=share-in-twitter]': 'shareInTwitterEventListener'\n\t\t\t,\t'click [data-toggle=share-in-google-plus]': 'shareInGooglePlusEventListener'\n\t\t\t});\n\n\t\t\t// extend Layout and add event listeners\n\t\t\t_.extend(Layout.events, {\n\t\t\t\t'mouseover [data-share-hover-pint-it-button=\"true\"]': 'shareInMouseoverPinItButtonEventListener'\n\t\t\t,\t'click [data-share-click-pint-it-button=\"true\"]': 'shareInClickPinItButtonEventListener'\n\t\t\t});\n\t\t\t\n\t\t\tLayout.on('afterAppendView', function ()\n\t\t\t{\n\t\t\t\t// Everytime a new view is appended, if you have placed an element with \n\t\t\t\t// data-toggle=social-share-icons attribute we will render the macro here\n\t\t\t\tthis.$('[data-toggle=\"social-share-icons\"]').each(function (index, element)\n\t\t\t\t{\n\t\t\t\t\tjQuery(element).html(SC.macros[Configuration.socialSharingIconsMacro](Configuration));\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// check if facebook script isn't already loaded and if there is an actual placeholder on where to load it\n\t\t\t\tif (!facebook_script_loaded && Configuration.facebook.enable && jQuery('[data-toggle=\"like-in-facebook\"]').size())\n\t\t\t\t{\n\t\t\t\t\tvar facebook_script_url = ('https:' === document.location.protocol ? 'https://' : 'http://') + 'connect.facebook.net/en_US/all.js#xfbml=1&appId='+ Configuration.facebook.appId; \n\t\t\t\t\t// avoid on SEO and start facebook library\n\t\t\t\t\t(SC.ENVIRONMENT.jsEnvironment === 'browser') && jQuery.getScript(facebook_script_url, function ()\n\t\t\t\t\t{\n\t\t\t\t\t\tif (typeof FB !== 'undefined')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfacebook_script_loaded = true;\n\t\t\t\t\t\t\tFB.init();\n\t\t\t\t\t\t\tLayout.refreshFacebookElements();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// check if addthis script isn't already loaded and if there is an actual placeholder on where to load it\n\t\t\t\tif (!addthis_script_loaded && Configuration.addThis.enable && jQuery('[data-toggle=\"share-in-add-this\"]').size())\n\t\t\t\t{\n\t\t\t\t\tvar addthis_script_url = ('https:' === document.location.protocol ? 'https://' : 'http://') + 's7.addthis.com/js/300/addthis_widget.js#domready=1';\n\t\t\t\t\t// avoid on SEO and start addthis library\n\t\t\t\t\t(SC.ENVIRONMENT.jsEnvironment === 'browser') && jQuery.getScript(addthis_script_url, function ()\n\t\t\t\t\t{\n\t\t\t\t\t\taddthis_script_loaded = true;\n\t\t\t\t\t\tLayout.refreshAddThisElements();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Then Facebook and addthis plugins are called\n\t\t\t\tLayout.refreshFacebookElements();\n\t\t\t\tLayout.refreshAddThisElements();\n\t\t\t\t\n\t\t\t\t// Then we set the meta tags\n\t\t\t\tLayout.setMetaTags();\n\t\t\t});\n\n\t\t}\n\t};\n\n\treturn social_sharing;\n});\n\n\n// UrlHelper.js\n// ------------\n// Keeps track of the URL, triggering custom events to specific parameters\n// Provides moethods to add, get and remove parameters from the url\n// Extends SC.Utils and add this methods to underscore\ndefine('UrlHelper', function ()\n{\n\t'use strict';\n\t\n\tvar UrlHelper = {\n\n\t\turl : ''\n\t,\tlisteners : {}\n\t,\tparameters : {}\n\n\t,\tsetUrl: function (url)\n\t\t{\n\t\t\tvar self = this;\n\n\t\t\tthis.url = url;\n\t\t\tthis.parameters = {};\n\n\t\t\t// for each of the listeners\n\t\t\t_.each(this.listeners, function (fn, token)\n\t\t\t{\n\t\t\t\tvar parameter_value = self.getParameterValue(token);\n\n\t\t\t\t// if the key (token) is in the url\n\t\t\t\tif (parameter_value)\n\t\t\t\t{\n\t\t\t\t\t// we trigger the function\n\t\t\t\t\tvar value = _.isFunction(fn) ? fn(parameter_value) : fn;\n\n\t\t\t\t\t// if there is a value, we store it in our parameters object\n\t\t\t\t\tif (value)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (_.isBoolean(value))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tself.parameters[token] = parameter_value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tself.parameters[token] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t,\taddTokenListener: function (token, fn)\n\t\t{\n\t\t\tthis.listeners[token] = fn;\n\t\t}\n\n\t,\tgetParameters: function ()\n\t\t{\n\t\t\treturn this.parameters;\n\t\t}\n\n\t,\tgetParameterValue: function (parameter)\n\t\t{\n\t\t\tvar value = this.url.match(parameter +'{1}\\\\={1}(.*?[^&#]*)');\n\t\t\t\n\t\t\tif (value && value[1])\n\t\t\t{\n\t\t\t\treturn value[1];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t,\tclearValues: function ()\n\t\t{\n\t\t\tthis.url = '';\n\t\t\tthis.listeners = {};\n\t\t\tthis.parameters = {};\n\t\t}\n\t};\n\n\tfunction fixUrl (url)\n\t{\n\t\tif (!new RegExp('^http').test(url))\n\t\t{\n\t\t\tvar parameters = UrlHelper.getParameters()\n\t\t\t,\tcharValue = ''\n\t\t\t,\tvalue = '';\n\n\t\t\t// for each of the parameters in the helper\n\t\t\t_.each(parameters, function (i, parameter)\n\t\t\t{\n\t\t\t\tvalue = url.match(new RegExp(parameter +'{1}\\\\={1}(.*?[^&]*)'));\n\n\t\t\t\t// if the parameter is not in the url\n\t\t\t\tif (!value)\n\t\t\t\t{\n\t\t\t\t\tcharValue = ~url.indexOf('?') ? '&' : '?';\n\t\t\t\t\t// we append it\n\t\t\t\t\turl += charValue + parameter +'='+ parameters[parameter];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn url;\n\t}\n\n\t// changes the value of a parameter in the url\n\tfunction setUrlParameter(url, parameter, new_value)\n\t{\n\t\tvar value = url.match(new RegExp(parameter + '{1}\\\\={1}(.*?[^(&|#)]*)'))\n\t\t,\tcharValue = '';\n\n\t\tif (value)\n\t\t{\n\t\t\treturn url.replace(value[0], parameter +'='+ new_value);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcharValue = ~url.indexOf('?') ? '&' : '?';\n\n\t\t\treturn url + charValue + parameter +'='+  new_value;\n\t\t}\n\t}\n\n\tfunction removeUrlParameter(url, parameter)\n\t{\n\t\tvar value = url.match(new RegExp('(\\\\?|&)' + parameter + '{1}\\\\={1}(.*?[^(&|#)]*)'));\n\n\t\tif (value)\n\t\t{\n\t\t\tif (~value[0].indexOf('?') && ~url.indexOf('&'))\n\t\t\t{\n\t\t\t\treturn url.replace(value[0] +'&', '?');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn url.replace(value[0], '');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn url;\n\t\t}\n\t}\n\n\t_.extend(SC.Utils, {\n\t\tfixUrl: fixUrl\n\t,\tsetUrlParameter: setUrlParameter\n\t,\tremoveUrlParameter: removeUrlParameter\n\t});\n\n\t// http://underscorejs.org/#mixin\n\t_.mixin(SC.Utils);\n\t\n\treturn _.extend(UrlHelper, {\n\n\t\tmountToApp: function (Application)\n\t\t{\n\t\t\tvar self = this;\n\n\t\t\tApplication.getLayout().on('afterAppendView', function ()\n\t\t\t{\n\t\t\t\t// Every time afterAppendView is called, we set the url to the helper\n\t\t\t\tself.setUrl(window.location.href);\n\t\t\t});\n\t\t}\n\t});\n});\n\n// ApplicationSkeleton.js\n// ----------------------\n// @module core @class ApplicationSkeleton\n// Defines the top level components of an application\n// like the name, layout, or the start function\n// @extends BackboneEvents\n(function ()\n{\n\t'use strict';\n\n\t// @constructor @param {String} name\n\tfunction ApplicationSkeleton (name)\n\t{\n\t\t// Enforces new object to be created even if you do ApplicationSkeleton() (without new)\n\t\tif (!(this instanceof ApplicationSkeleton))\n\t\t{\n\t\t\treturn new ApplicationSkeleton();\n\t\t}\n\n\t\t// Application Default settings:\n\t\tthis.Configuration = {};\n\n\t\tthis.name = name;\n\t}\n\n\t// @method resizeImage Wraps the SC.Utils.resizeImage and passes in the settings it needs\n\tApplicationSkeleton.prototype.resizeImage = function (url, size)\n\t{\n\t\tvar mapped_size = this.getConfig('imageSizeMapping.'+ size, size);\n\t\treturn SC.Utils.resizeImage(this.getConfig('siteSettings.imagesizes', []), url, mapped_size);\n\t};\n\n\t// @class ApplicationSkeletonLayout @extends BackboneView\n\t// This View will be created and added to the dom as soon as the app starts.\n\t// All module's views will get into the dom through this view by calling\n\t// either showContent, showInModal, showError or other application specific method\n\tApplicationSkeleton.prototype.Layout = Backbone.View.extend({\n\n\t\t// @property {String} template this is the tag asociated to the .txt file\n\t\ttemplate: 'layout'\n\n\t\t// @property {String} container_element where it will be appended\n\t,\tcontainer_element: '#main'\n\n\t\t// @property {String} content_element where the content (views) will be apended\n\t,\tcontent_element: '#content'\n\n\t\t// @property {Object} key_elements\n\t,\tkey_elements: {}\n\n\t,\tevents: {}\n\n\t\t// @method initialize @param {ApplicationSkeleton} application\n\t,\tinitialize: function (Application)\n\t\t{\n\t\t\tthis.events =\n\t\t\t{\n\t\t\t\t'click [data-type=\"post-to-touchpoint\"]': 'touchpointPost'\n\t\t\t,\t'click [data-action=\"items-expander\"]' : 'itemsExpander'\n\t\t\t,\t'click [data-action=\"dropdown-expander\"]' : 'dropdownExpander'\n\t\t\t};\n\t\t\tthis.application = Application;\n\n\t\t\tthis.afterAppendViewPromise = jQuery.Deferred();\n\t\t\tvar self = this;\n\t\t\tthis.once('afterAppendView', function ()\n\t\t\t{\n\t\t\t\tself.afterAppendViewPromise.resolve();\n\t\t\t});\n\t\t}\n\n\t\t// @method render\n\t,\trender: function ()\n\t\t{\n\t\t\t// @event beforeRender triggered before the Layout is rendered\n\t\t\tthis.trigger('beforeRender', this);\n\n\t\t\tBackbone.View.prototype.render.call(this);\n\n\t\t\tthis.updateUI();\n\n\t\t\t// @event afterRender triggered after the Layout is rendered\n\t\t\tthis.trigger('afterRender', this);\n\t\t}\n\n\t\t// @method updateHeader\n\t,\tupdateHeader: function ()\n\t\t{\n\t\t\tif (this.application.getConfig('siteSettings.sitetype') === 'ADVANCED')\n\t\t\t{\n\t\t\t\tthis.$('.site-header').html(SC.macros.header(this));\n\t\t\t\tthis.updateUI(); //notify the layout we have change its internal DOM\n\t\t\t}\n\t\t}\n\n\t\t// @method updateFooter\n\t,\tupdateFooter: function()\n\t\t{\n\t\t\tif (this.application.getConfig('siteSettings.sitetype') === 'ADVANCED')\n\t\t\t{\n\t\t\t\tthis.$('.site-footer').html(SC.macros.footer(this));\n\t\t\t\tthis.updateUI(); //notify the layout we have change its internal DOM\n\t\t\t}\n\t\t}\n\n\t\t// @method updateUI update the internal dom references (this.key_elements) . Since this method (should) is called when important markup is updated/added dynamically it is wrapped by those modules who need to enrich the content like the Content Delivery module.\n\t,\tupdateUI: function ()\n\t\t{\n\t\t\tvar self = this;\n\n\t\t\t// Re-usable Layout Dom elements\n\t\t\t// We will generate an association to the jQuery version of the elements in the key_elements obj\n\t\t\t_.each(this.key_elements, function (element_selector, element_name)\n\t\t\t{\n\t\t\t\tself['$' + element_name] = self.$(element_selector);\n\t\t\t});\n\n\t\t\t// We need to ensure the content element is this.content_element\n\t\t\t// if you wish to change the selector do it directly to this prop\n\t\t\tthis.$content = this.$(this.content_element);\n\t\t\tthis.trigger('afterRender', this);\n\t\t}\n\n\t\t// @method appendToDom\n\t,\tappendToDom: function ()\n\t\t{\n\t\t\tvar self = this;\n\t\t\tthis.afterAppendViewPromise.done(function ()\n\t\t\t{\n\t\t\t\tvar isPageGenerator = _.result(SC,'isPageGenerator');\n\t\t\t\t\n\t\t\t\t// @event beforeAppendToDom triggered before the Layout view is appended to the DOM\n\t\t\t\tself.trigger('beforeAppendToDom', self);\n\n\t\t\t\tif (isPageGenerator && !SC.blurInitialHTML) \n\t\t\t\t{\n\t\t\t\t\tjQuery('<noscript></noscript>').append(self.$el).appendTo(jQuery(self.container_element)); \n\t\t\t\t}\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\tjQuery(self.container_element).html(self.$el);\n\t\t\t\t}\n\n\t\t\t\tif (!isPageGenerator)\n\t\t\t\t{\n\t\t\t\t\tjQuery(self.container_element).removeClass('blurred').removeClass('ie').css('filter', '');\n\t\t\t\t}\n\n\t\t\t\t// @event afterAppendToDom triggered after the Layout view is appended to the DOM\n\t\t\t\tself.trigger('afterAppendToDom', self);\n\t\t\t});\n\n\t\t}\n\n\t\t// @method getApplication @return {ApplicationSkeleton}\n\t,\tgetApplication: function ()\n\t\t{\n\t\t\treturn this.application;\n\t\t}\n\n\t\t// @method touchpointPost perform a POST operation to the specified touchpoint ('post-touchpoint') @param {HTMLEvent} e\n\t,\ttouchpointPost: function(e)\n\t\t{\n\t\t\tvar touchpoint = this.$(e.target).data('post-touchpoint')\n\t\t\t,\ttouchpoints = SC.getSessionInfo('touchpoints')\n\t\t\t,\ttarget_touchpoint = (touchpoints ? touchpoints[touchpoint] : '') || ''\n\t\t\t,\tnew_url = _.fixUrl(target_touchpoint);\n\n\t\t\t_.doPost(new_url);\n\t\t}\n\n\t\t// @method itemsExpander @param {HTMLEvent} e\n\t,\titemsExpander: function (e)\n\t\t{\n\t\t\te.preventDefault();\n\n\t\t\tjQuery(e.currentTarget)\n\t\t\t\t.parent().find('[data-action=\"items-expander\"] a i').toggleClass('icon-minus').end()\n\t\t\t\t.find('[data-content=\"items-body\"]').stop().slideToggle();\n\t\t}\n\n\t\t// @method dropdownExpander @param {HTMLEvent} e\n\t,\tdropdownExpander: function (e)\n\t\t{\n\t\t\te.preventDefault();\n\n\t\t\tjQuery(e.currentTarget)\n\t\t\t\t.parent().find('[data-action=\"dropdown-expander\"] a i').toggleClass('icon-chevron-up').end()\n\t\t\t\t.find('[data-content=\"items-body\"]').stop().slideToggle();\n\t\t}\n\n\t\t// Defining the interface for this class\n\t\t// All modules will interact with the layout trough this methods\n\t\t// some others may be added as well\n\n\t\t// @method showContent\n\t,\tshowContent: jQuery.noop\n\n\t\t// @method showInModal\n\t,\tshowInModal: jQuery.noop\n\n\t\t// @method showError\n\t,\tshowError: jQuery.noop\n\n\t\t// @method showSuccess\n\t,\tshowSuccess: jQuery.noop\n\n\t});\n\n\n\t// @class ApplicationSkeleton @method getLayout @return {ApplicationSkeletonLayout}\n\tApplicationSkeleton.prototype.getLayout = function getLayout ()\n\t{\n\t\tthis._layoutInstance = this._layoutInstance || new this.Layout(this);\n\t\treturn this._layoutInstance;\n\t};\n\n\n\t// @method getConfig \n\t// returns the configuration object of the aplication\n\t// if a path is applied, it returns that attribute of the config\n\t// if nothing is found, it returns the default value\n\t// @param {String} path @param {Any} default_value\n\tApplicationSkeleton.prototype.getConfig = function getConfig (path, default_value)\n\t{\n\t\treturn _.getPathFromObject(this.Configuration, path, default_value);\n\t};\n\n\tApplicationSkeleton.prototype.UserModel = Backbone.Model.extend({});\n\n\t// @method getUser\n\tApplicationSkeleton.prototype.getUser = function ()\n\t{\n\n\t\tif (!this.user_instance)\n\t\t{\n\t\t\tthis.user_instance = new this.UserModel();\n\t\t}\n\t\treturn this.user_instance;\n\t};\n\n\t// @method getUserPromise\n\t// Because the application MAY load the user's profile asynchronous some modules may want to register when the profile is ready\n\t// to be used application.getUser(). Note: from views is OK to call getUser() directly, but for mountToApp(), please call getUserPromise() first!\n\t// the profile itself it is responsible of resolving the SC.PROFILE_PROMISE global promise (like in sc.user.environment.ssp)\n\t// @return {jQueryDeferred}\n\tApplicationSkeleton.prototype.getUserPromise = function()\n\t{\n\t\tvar self = this;\n\t\tif (!SC.PROFILE_PROMISE)\n\t\t{\n\t\t\tSC.PROFILE_PROMISE = jQuery.Deferred().done(function(profile)\n\t\t\t{\n\t\t\t\tself.getUser().set(profile);\n\t\t\t});\n\t\t}\n\n\t\tif (SC.ENVIRONMENT.PROFILE && SC.PROFILE_PROMISE.state() !== 'resolved')\n\t\t{\n\t\t\tSC.PROFILE_PROMISE.resolve(SC.ENVIRONMENT.PROFILE);\n\t\t}\n\t\treturn SC.PROFILE_PROMISE;\n\t};\n\n\t// @method start @param {Function} done_fn\n\tApplicationSkeleton.prototype.start = function start (done_fn)\n\t{\n\n\t\t// trigger beforeStart before loading modules so users have a chance to include new modules at this point.\n\t\tthis.trigger('beforeStart', self);\n\n\t\tvar self = this\n\t\t\t// Here we will store\n\t\t,\tmodule_options = {}\n\t\t\t// we get the list of modules from the config file\n\t\t,\tmodules_list = _.map(self.getConfig('modules', []), function (module)\n\t\t\t{\n\t\t\t\t// we check all the options are strings\n\t\t\t\tif (_.isString(module))\n\t\t\t\t{\n\t\t\t\t\treturn module;\n\t\t\t\t}\n\t\t\t\t// for the ones that are the expectation is that it's an array,\n\t\t\t\t// where the 1st index is the name of the modules and\n\t\t\t\t// the rest are options for the mountToApp function\n\t\t\t\telse if (_.isArray(module))\n\t\t\t\t{\n\t\t\t\t\tmodule_options[module[0]] = module.slice(1);\n\t\t\t\t\treturn module[0];\n\t\t\t\t}\n\t\t\t});\n\n\t\t// we use require.js to load the modules\n\t\t// require.js takes care of the dependencies between modules\n\t\trequire(modules_list, function ()\n\t\t{\n\t\t\t// then we set the modules to the aplication\n\t\t\t// the keys are the modules_list (names)\n\t\t\t// and the values are the loaded modules returned in the arguments by require.js\n\t\t\tself.modules = _.object(modules_list, arguments);\n\n\t\t\tself.modulesMountToAppResult = {};\n\n\t\t\t// we mount each module to our application\n\t\t\t_.each(self.modules, function (module, module_name)\n\t\t\t{\n\t\t\t\t// We pass the application and the arguments from the config file to the mount to app function\n\t\t\t\tvar mount_to_app_arguments = _.union([self], module_options[module_name] || []);\n\t\t\t\tif (module && _.isFunction(module.mountToApp))\n\t\t\t\t{\n\t\t\t\t\tself.modulesMountToAppResult[module_name] = module.mountToApp.apply(module, mount_to_app_arguments);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// This checks if you have registered modules\n\t\t\tif (!Backbone.history)\n\t\t\t{\n\t\t\t\tthrow new Error('No Backbone.Router has been initialized (Hint: Are your modules properly set?).');\n\t\t\t}\n\n\t\t\tself.trigger('afterModulesLoaded', self);\n\n\t\t\tdone_fn && _.isFunction(done_fn) && done_fn(self);\n\n\t\t\tself.trigger('afterStart', self);\n\t\t});\n\t};\n\n\t// We allow ApplicationSkeleton to listen and trigger custom events\n\t// http://backbonejs.org/#Events\n\t_.extend(ApplicationSkeleton.prototype, Backbone.Events);\n\n\tSC.ApplicationSkeleton = ApplicationSkeleton;\n\n})();\n\n\n\n// Main.js\n// -------\n// Defines\n//  Namespace\n//  a model for SiteSettings (used on the Applications)\n//  methods to:\n//   create and get applications\n//   create singletons\n//   get the SiteSettings\n// Relinquish jQuery's control of the $ variable.\n(function ()\n{\n\t'use strict';\n\t\n\t// Global Name Space SC, stands for SuiteCommerce.\n\tvar SC = window.SC = _.extend(window.SC || {}, Backbone.Events);\n\t\n\t// Make jQuery not use the $ alias\n\tjQuery.noConflict();\n\t\n\t// Application Creation:\n\t// Applications will provide by default: Layout (So your views can talk to)\n\t// and a Router (so you can extend them with some nice defaults)\n\t// If you like to create extensions to the Skeleton you should extend SC.ApplicationSkeleton\n\tSC._applications = {};\n\tSC.Application = function (application_name)\n\t{\n\t\tSC._applications[application_name] = SC._applications[application_name] || new SC.ApplicationSkeleton(application_name);\n\t\treturn SC._applications[application_name];\n\t};\n\t\n\t// SC.Singleton:\n\t// Defines a simple getInstance method for:\n\t// models, collections, views or any other object to use to be used as singletons\n\t// How to use:\n\t// Backbone.[Collection, Model, View].extend({Your code}, SC.Singleton);\n\t// or _.extend({Object literal}, SC.Singleton);\n\tSC.Singleton = {\n\t\tgetInstance: function ()\n\t\t{\n\t\t\tvar This = this;\n\t\t\tthis.instance = this.instance || new This();\n\t\t\treturn this.instance;\n\t\t}\n\t};\n\n\t// Defines the template function as a noop, so it needs to be implemented by an extension\n\tSC.template = jQuery.noop;\n\t\n})();\n\n\n// Utils.js\n// --------\n// A collection of utility methods\n// This are added to both SC.Utils, and Underscore.js\n// eg: you could use SC.Utils.formatPhone() or _.formatPhone()\n(function ()\n{\n\t'use strict';\n\n\t// _.formatPhone:\n\t// Will try to reformat a phone number for a given phone Format,\n\t// If no format is given, it will try to use the one in site settings.\n\tfunction formatPhone (phone, format)\n\t{\n\t\t// fyi: the tilde (~) its used as !== -1\n\t\tvar extentionSearch = phone.search(/[A-Za-z#]/)\n\t\t,\textention = ~extentionSearch ? ' '+ phone.substring(extentionSearch) : ''\n\t\t,\tphoneNumber = ~extentionSearch ? ' '+ phone.substring(0, extentionSearch) : phone;\n\n\t\tformat = format || SC.ENVIRONMENT.siteSettings.phoneformat;\n\n\t\tif (/^[0-9()-.\\s]+$/.test(phoneNumber) && format)\n\t\t{\n\t\t\tvar format_tokens = {}\n\t\t\t,\tphoneDigits = phoneNumber.replace(/[()-.\\s]/g, '');\n\n\t\t\tswitch (format)\n\t\t\t{\n\t\t\t// c: country, ab: area_before, aa: area_after, d: digits\n\t\t\tcase '(123) 456-7890':\n\t\t\t\tformat_tokens = {c: ' ', ab: '(', aa: ') ', d: '-'};\n\t\t\t\tbreak;\n\t\t\tcase '123 456 7890':\n\t\t\t\tformat_tokens = {c: ' ', ab: '', aa: ' ', d: ' '};\n\t\t\t\tbreak;\n\t\t\tcase '123-456-7890':\n\t\t\t\tformat_tokens = {c: ' ', ab: '', aa: '-', d: '-'};\n\t\t\t\tbreak;\n\t\t\tcase '123.456.7890':\n\t\t\t\tformat_tokens = {c: ' ', ab: '', aa: '.', d: '.'};\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn phone;\n\t\t\t}\n\n\t\t\tswitch (phoneDigits.length)\n\t\t\t{\n\t\t\tcase 7:\n\t\t\t\treturn phoneDigits.substring(0, 3) + format_tokens.d + phoneDigits.substring(3) + extention;\n\t\t\tcase 10:\n\t\t\t\treturn format_tokens.ab + phoneDigits.substring(0, 3) + format_tokens.aa + phoneDigits.substring(3, 6) + format_tokens.d + phoneDigits.substring(6) + extention;\n\t\t\tcase 11:\n\t\t\t\treturn phoneDigits.substring(0, 1) + format_tokens.c + format_tokens.ab + phoneDigits.substring(1, 4) + format_tokens.aa + phoneDigits.substring(4, 7) + format_tokens.d + phoneDigits.substring(7) + extention;\n\t\t\tdefault:\n\t\t\t\treturn phone;\n\t\t\t}\n\t\t}\n\n\t\treturn phone;\n\t}\n\n\t// Convert a date object to string using international format YYYY-MM-dd\n\t// Useful for inputs of type=\"date\"\n\tfunction dateToString (date)\n\t{\n\t\tvar month = ''+(date.getMonth()+1)\n\t\t,\tday = ''+ date.getDate();\n\n\t\tif (month.length === 1)\n\t\t{\n\t\t\tmonth = '0' + month;\n\t\t}\n\n\t\tif (day.length === 1)\n\t\t{\n\t\t\tday = '0'+day;\n\t\t}\n\n\t\treturn date.getFullYear() + '-' + month + '-' + day;\n\t}\n\n\t//This method parse a string date into a date object.\n\t// str_date: String date.\n\t// options.format: String format that specify the format of the input string. By Default YYYY-MM-dd.\n\t// options.plusMonth: Number that indicate how many month offset should be applied whne creating the date object.\n\tfunction stringToDate (str_date, options)\n\t{\n\t\toptions = _.extend({\n\t\t\tformat: 'YYYY-MM-dd'\n\t\t,\tplusMonth: -1\n\t\t,\tdateSplitCharacter: '-'\n\t\t}, options || {});\n\n\t\t//plumbing\n\t\tvar date_parts = str_date ? str_date.split(options.dateSplitCharacter) : []\n\t\t,\tformat_parts = options.format ? options.format.split('-') : []\n\t\t,\tyear_index = _.indexOf(format_parts, 'YYYY') >= 0 ? _.indexOf(format_parts, 'YYYY') : 2\n\t\t,\tmonth_index = _.indexOf(format_parts, 'MM') >= 0 ? _.indexOf(format_parts, 'MM') : 1\n\t\t,\tday_index = _.indexOf(format_parts, 'dd') >= 0 ? _.indexOf(format_parts, 'dd') : 0\n\t\t//Date parts\n\t\t,\tyear = parseInt(date_parts[year_index], 10)\n\t\t,\tmonth = parseInt(date_parts[month_index], 10) + (options.plusMonth || 0)\n\t\t,\tday = parseInt(date_parts[day_index], 10)\n\t\t,\tresult = new Date(year, month, day);\n\n\t\tif (!(result.getMonth() !== month || day !== result.getDate() || result.getFullYear() !== year))\n\t\t{\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tfunction isDateValid (date)\n\t{\n\t\tif (Object.prototype.toString.call(date) === '[object Date]')\n\t\t{\n\t\t\t// it is a date\n\t\t\tif (isNaN(date.getTime()))\n\t\t\t{\n\t\t\t\t// d.valueOf() could also work\n\t\t\t\t// date is not valid\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// date is valid\n\t\t\t\t// now validate the values of day, month and year\n\t\t\t\tvar dtDay = date.getDate()\n\t\t\t\t,   dtMonth= date.getMonth() + 1\n\t\t\t\t,   dtYear = date.getFullYear()\n\t\t\t\t,   pattern = /^\\d{4}$/;\n\n\t\t\t\tif (!pattern.test(dtYear))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if (dtMonth < 1 || dtMonth > 12)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if (dtDay < 1 || dtDay > 31)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if ((dtMonth === 4 || dtMonth ===6 || dtMonth === 9 || dtMonth === 11) && dtDay  === 31)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if (dtMonth === 2)\n\t\t\t\t{\n\t\t\t\t\tvar isleap = (dtYear % 4 === 0 && (dtYear % 100 !== 0 || dtYear % 400 === 0));\n\t\t\t\t\tif (dtDay> 29 || (dtDay === 29 && !isleap))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// not a date\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tfunction paymenthodIdCreditCart (cc_number)\n\t{\n\t\t// regex for credit card issuer validation\n\t\tvar cards_reg_ex = {\n\t\t\t'VISA': /^4[0-9]{12}(?:[0-9]{3})?$/\n\t\t,\t'Master Card': /^5[1-5][0-9]{14}$/\n\t\t,\t'American Express': /^3[47][0-9]{13}$/\n\t\t,\t'Discover': /^6(?:011|5[0-9]{2})[0-9]{12}$/\n\t\t,\t'Maestro': /^(?:5[0678]\\d\\d|6304|6390|67\\d\\d)\\d{8,15}$/\n\t\t}\n\n\t\t// get the credit card name\n\t\t,\tpaymenthod_name;\n\n\t\t// validate that the number and issuer\n\t\t_.each(cards_reg_ex, function (reg_ex, name)\n\t\t{\n\t\t\tif (reg_ex.test(cc_number))\n\t\t\t{\n\t\t\t\tpaymenthod_name = name;\n\t\t\t}\n\t\t});\n\n\t\tvar paymentmethod = paymenthod_name && _.findWhere(SC.ENVIRONMENT.siteSettings.paymentmethods, {name: paymenthod_name.toString()});\n\n\t\treturn paymentmethod && paymentmethod.internalid;\n\t}\n\n\n\tfunction validateSecurityCode (value)\n\t{\n\t\tvar ccsn = jQuery.trim(value);\n\n\t\tif (!ccsn)\n\t\t{\n\t\t\treturn _('Security Number is required').translate();\n\t\t}\n\n\t\tif (!(Backbone.Validation.patterns.number.test(ccsn) && (ccsn.length === 3 || ccsn.length === 4)))\n\t\t{\n\t\t\treturn _('Security Number is invalid').translate();\n\t\t}\n\t}\n\n\tfunction validatePhone (phone)\n\t{\n\t\tvar minLength = 7;\n\n\n\t\tif (_.isNumber(phone))\n\t\t{\n\t\t\t// phone is a number so we can't ask for .length\n\t\t\t// we elevate 10 to (minLength - 1)\n\t\t\t// if the number is lower, then its invalid\n\t\t\t// eg: phone = 1234567890 is greater than 1000000, so its valid\n\t\t\t//     phone = 123456 is lower than 1000000, so its invalid\n\t\t\tif (phone < Math.pow(10, minLength - 1))\n\t\t\t{\n\t\t\t\treturn _('Phone Number is invalid').translate();\n\t\t\t}\n\t\t}\n\t\telse if (phone)\n\t\t{\n\t\t\t// if its a string, we remove all the useless characters\n\t\t\tvar value = phone.replace(/[()-.\\s]/g, '');\n\t\t\t// we then turn the value into an integer and back to string\n\t\t\t// to make sure all of the characters are numeric\n\n\t\t\t//first remove leading zeros for number comparison\n\t\t\twhile(value.length && value.substring(0,1) === '0')\n\t\t\t{\n\t\t\t\tvalue = value.substring(1, value.length);\n\t\t\t}\n\t\t\tif (parseInt(value, 10).toString() !== value || value.length < minLength)\n\t\t\t{\n\t\t\t\treturn _('Phone Number is invalid').translate();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn _('Phone is required').translate();\n\t\t}\n\n\t}\n\n\tfunction validateState (value, valName, form)\n\t{\n\t\tvar countries = SC.ENVIRONMENT.siteSettings.countries || {};\n\t\tif (countries[form.country] && countries[form.country].states && value === '')\n\t\t{\n\t\t\treturn _('State is required').translate();\n\t\t}\n\t}\n\n\tfunction validateZipCode (value, valName, form)\n\t{\n\t\tvar countries = SC.ENVIRONMENT.siteSettings.countries || {};\n\t\tif (!value && (!form.country || countries[form.country] && countries[form.country].isziprequired === 'T'))\n\t\t{\n\t\t\treturn _('Zip Code is required').translate();\n\t\t}\n\t}\n\n\t// translate:\n\t// used on all of the harcoded texts in the templates\n\t// gets the translated value from SC.Translations object literal\n\tfunction translate (text)\n\t{\n\t\tif (!text)\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\ttext = text.toString();\n\t\t// Turns the arguments object into an array\n\t\tvar args = Array.prototype.slice.call(arguments)\n\n\t\t// Checks the translation table\n\t\t,\tresult = SC.Translations && SC.Translations[text] ? SC.Translations[text] : text;\n\n\t\tif (args.length && result)\n\t\t{\n\t\t\t// Mixes in inline variables\n\t\t\tresult = result.format.apply(result, args.slice(1));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t// getFullPathForElement:\n\t// returns a string containing the path\n\t// in the DOM tree of the element\n\tfunction getFullPathForElement (el)\n\t{\n\t\tvar names = [], c, e;\n\n\t\twhile (el.parentNode)\n\t\t{\n\t\t\tif (el.id)\n\t\t\t{\n\t\t\t\t// if a parent element has an id, that is enough for our path\n\t\t\t\tnames.unshift('#'+ el.id);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(el === document.body)\n\t\t\t{\n\t\t\t\tnames.unshift('HTML > BODY');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(el === (document.head || document.getElementsByTagName('head')[0]))\n\t\t\t{\n\t\t\t\tnames.unshift('HTML > HEAD');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (el === el.ownerDocument.documentElement)\n\t\t\t{\n\t\t\t\tnames.unshift(el.tagName);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\te = el;\n\t\t\t\tfor (c = 1; e.previousElementSibling; c++)\n\t\t\t\t{\n\t\t\t\t\te = e.previousElementSibling;\n\t\t\t\t}\n\t\t\t\tnames.unshift(el.tagName +':nth-child('+ c +')');\n\t\t\t\tel = el.parentNode;\n\t\t\t}\n\t\t}\n\n\t\treturn names.join(' > ');\n\t}\n\n\tfunction formatCurrency (value, symbol)\n\t{\n\t\tvar value_float = parseFloat(value);\n\n\t\tif (isNaN(value_float))\n\t\t{\n\t\t\treturn value;\n\t\t}\n\n\t\tvar negative = value_float < 0;\n\t\tvalue_float = Math.abs(value_float);\n\t\tvalue_float = parseInt((value_float + 0.005) * 100, 10) / 100;\n\n\t\tvar value_string = value_float.toString()\n\n\t\t,\tgroupseparator = ','\n\t\t,\tdecimalseparator = '.'\n\t\t,\tnegativeprefix = '('\n\t\t,\tnegativesuffix = ')'\n\t\t,\tsettings = SC && SC.ENVIRONMENT && SC.ENVIRONMENT.siteSettings ? SC.ENVIRONMENT.siteSettings : {};\n\n\t\tif (Object.prototype.hasOwnProperty.call(window,'groupseparator'))\n\t\t{\n\t\t\tgroupseparator = window.groupseparator;\n\t\t}\n\t\telse if (Object.prototype.hasOwnProperty.call(settings,'groupseparator'))\n\t\t{\n\t\t\tgroupseparator = settings.groupseparator;\n\t\t}\n\n\t\tif (Object.prototype.hasOwnProperty.call(window,'decimalseparator'))\n\t\t{\n\t\t\tdecimalseparator = window.decimalseparator;\n\t\t}\n\t\telse if (Object.prototype.hasOwnProperty.call(settings, 'decimalseparator'))\n\t\t{\n\t\t\tdecimalseparator = settings.decimalseparator;\n\t\t}\n\n\t\tif (Object.prototype.hasOwnProperty.call(window,'negativeprefix'))\n\t\t{\n\t\t\tnegativeprefix = window.negativeprefix;\n\t\t}\n\t\telse if (Object.prototype.hasOwnProperty.call(settings,'negativeprefix'))\n\t\t{\n\t\t\tnegativeprefix = settings.negativeprefix;\n\t\t}\n\n\t\tif (Object.prototype.hasOwnProperty.call(window,'negativesuffix'))\n\t\t{\n\t\t\tnegativesuffix = window.negativesuffix;\n\t\t}\n\t\telse if (Object.prototype.hasOwnProperty.call(settings,'negativesuffix'))\n\t\t{\n\t\t\tnegativesuffix = settings.negativesuffix;\n\t\t}\n\n\t\tvalue_string = value_string.replace('.',decimalseparator);\n\t\tvar decimal_position = value_string.indexOf(decimalseparator);\n\n\t\t// if the string doesn't contains a .\n\t\tif (!~decimal_position)\n\t\t{\n\t\t\tvalue_string += decimalseparator+'00';\n\t\t\tdecimal_position = value_string.indexOf(decimalseparator);\n\t\t}\n\t\t// if it only contains one number after the .\n\t\telse if (value_string.indexOf(decimalseparator) === (value_string.length - 2))\n\t\t{\n\t\t\tvalue_string += '0';\n\t\t}\n\n\t\tvar thousand_string = '';\n\t\tfor (var i=value_string.length-1; i>=0; i--)\n\t\t{\n\t\t\t\t\t\t\t\t//If the distance to the left of the decimal separator is a multiple of 3 you need to add the group separator\n\t\t\tthousand_string =\t(i > 0 && i < decimal_position && (((decimal_position-i) % 3) === 0) ? groupseparator : '') +\n\t\t\t\t\t\t\t\tvalue_string[i] + thousand_string;\n\t\t}\n\n\t\tif (!symbol)\n\t\t{\n\t\t\tif (typeof session !== 'undefined' && session.getShopperCurrency)\n\t\t\t{\n\t\t\t\tsymbol = session.getShopperCurrency().symbol;\n\t\t\t}\n\t\t\telse if (settings.shopperCurrency)\n\t\t\t{\n\t\t\t\tsymbol = settings.shopperCurrency.symbol;\n\t\t\t}\n\t\t\telse if (SC.getSessionInfo('currentCurrency'))\n\t\t\t{\n\t\t\t\tsymbol = SC.getSessionInfo('currentCurrency').symbol;\n\t\t\t}\n\n\t\t\tif (!symbol)\n\t\t\t{\n\t\t\t\tsymbol = '$';\n\t\t\t}\n\t\t}\n\n\t\tvalue_string  = symbol + thousand_string;\n\n\t\treturn negative ? (negativeprefix + value_string + negativesuffix) : value_string;\n\t}\n\n\t// Formats a non-negative number with commas as thousand separator (e.g. for displaying quantities)\n\tfunction formatQuantity (number)\n\t{\n\t\tvar result = []\n\t\t,\tparts = ('' + number).split('.')\n\t\t,\tintegerPart = parts[0].split('').reverse();\n\n\t\tfor (var i = 0; i < integerPart.length; i++)\n\t\t{\n\t\t\tif (i > 0 && (i % 3 === 0))\n\t\t\t{\n\t\t\t\tresult.unshift(',');\n\t\t\t}\n\n\t\t\tresult.unshift(integerPart[i]);\n\t\t}\n\n\t\tif (parts.length > 1)\n\t\t{\n\t\t\tresult.push('.');\n\t\t\tresult.push(parts[1]);\n\t\t}\n\n\t\treturn result.join('');\n\t}\n\n\tfunction highlightKeyword (text, keyword)\n\t{\n\t\ttext = text || '';\n\t\tif(!keyword)\n\t\t{\n\t\t\treturn text;\n\t\t}\n\n\t\tkeyword = jQuery.trim(keyword).replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n\n\t\treturn text.replace(new RegExp('('+ keyword +')', 'ig'), function ($1, match)\n\t\t{\n\t\t\treturn '<strong>' + match + '</strong>';\n\t\t});\n\t}\n\n\tfunction substitute (text, object)\n\t{\n\t\ttext = text || '';\n\n\t\treturn text.replace(/\\{(\\w+)\\}/g, function (match, key)\n\t\t{\n\t\t\treturn typeof object[key] !== 'undefined' ? object[key] : match;\n\t\t});\n\t}\n\n\t// iterates a collection of objects, runs a custom function getValue on each item and then joins them\n\t// returns a string.\n\tfunction collectionToString (options)\n\t{\n\t\tvar temp = [];\n\t\t_.each(options.collection, function (item)\n\t\t{\n\t\t\ttemp.push(options.getValue(item));\n\t\t});\n\n\t\treturn temp.join(options.joinWith);\n\t}\n\n\t// params map\n\tfunction addParamsToUrl (baseUrl, params)\n\t{\n\t\t// We get the search options from the config file\n\t\tif (params)\n\t\t{\n\t\t\tvar paramString = jQuery.param(params)\n\t\t\t,\tjoin_string = ~baseUrl.indexOf('?') ? '&' : '?';\n\n\t\t\treturn baseUrl + join_string + paramString;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn baseUrl;\n\t\t}\n\t}\n\n\t// parseUrlOptions:\n\t// Takes a url with options (or just the options part of the url) and returns an object. You can do the reverse operation (object to url string) using jQuery.param()\n\tfunction parseUrlOptions (options_string)\n\t{\n\t\toptions_string = options_string || '';\n\n\t\tif (~options_string.indexOf('?'))\n\t\t{\n\t\t\toptions_string = _.last(options_string.split('?'));\n\t\t}\n\n\t\tif (~options_string.indexOf('#'))\n\t\t{\n\t\t\toptions_string = _.first(options_string.split('#'));\n\t\t}\n\n\t\tvar options = {};\n\n\t\tif (options_string.length > 0)\n\t\t{\n\t\t\tvar tokens = options_string.split(/\\&/g)\n\t\t\t,\tcurrent_token;\n\n\t\t\twhile (tokens.length > 0)\n\t\t\t{\n\t\t\t\tcurrent_token = tokens.shift().split(/\\=/g);\n\n\t\t\t\tif (current_token[0].length === 0)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\toptions[current_token[0]] = decodeURIComponent(current_token[1]);\n\t\t\t}\n\t\t}\n\n\t\treturn options;\n\t}\n\n\tfunction objectToStyles (obj)\n\t{\n\t\treturn _.reduce(obj, function (memo, value, index)\n\t\t{\n\t\t\treturn memo += index + ':' + value + ';';\n\t\t}, '');\n\t}\n\n\t// simple hyphenation of a string, replaces non-alphanumerical characters with hyphens\n\tfunction hyphenate (string)\n\t{\n\t\treturn string.replace(/[\\W]/g, '-');\n\t}\n\n\tfunction objectToAtrributes (obj, prefix)\n\t{\n\t\tprefix = prefix ? prefix + '-' : '';\n\n\t\treturn _.reduce(obj, function (memo, value, index)\n\t\t{\n\t\t\tif (index !== 'text' && index !== 'categories')\n\t\t\t{\n\t\t\t\tmemo += ' ' + prefix;\n\n\t\t\t\tif (index.toLowerCase() === 'css' || index.toLowerCase() === 'style')\n\t\t\t\t{\n\t\t\t\t\tindex = 'style';\n\t\t\t\t\t// styles value has to be an obj\n\t\t\t\t\tvalue = objectToStyles(value);\n\t\t\t\t}\n\n\t\t\t\tif (_.isObject(value))\n\t\t\t\t{\n\t\t\t\t\treturn memo += objectToAtrributes(value, index);\n\t\t\t\t}\n\n\t\t\t\tmemo += index;\n\n\t\t\t\tif (value)\n\t\t\t\t{\n\t\t\t\t\tmemo += '=\"' + value + '\"';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn memo;\n\t\t}, '');\n\t}\n\n\tfunction resizeImage (sizes, url, size)\n\t{\n\t\tvar resize = _.where(sizes, {name: size})[0];\n\n\t\tif (!!resize)\n\t\t{\n\t\t\treturn url + (~url.indexOf('?') ? '&' : '?') + resize.urlsuffix;\n\t\t}\n\n\t\treturn url;\n\t}\n\n\tfunction getAbsoluteUrl (file)\n\t{\n\t\tvar base_url = SC.ENVIRONMENT.baseUrl\n\t\t,\tfileReplace = file ? file : '';\n\t\treturn base_url ? base_url.replace('{{file}}', fileReplace) : file;\n\t}\n\n\tfunction getDownloadPdfUrl (params)\n\t{\n\t\tparams = params || {};\n\t\tparams.n = SC.ENVIRONMENT.siteSettings.siteid;\n\n\t\tvar origin = window.location.origin ? window.location.origin :\n\t\t\t\t(window.location.protocol + '//' + window.location.hostname + (window.location.port ? (':' + window.location.port) : ''));\n\t\treturn  _.addParamsToUrl(origin + _.getAbsoluteUrl('download.ssp'), params);\n\t}\n\n\t//Fixes anchor elements, preventing default behavior so that\n\t//they do not change the views (ie: checkout steps)\n\tfunction preventAnchorNavigation (selector)\n\t{\n\t\tjQuery(selector).on('click', function (e)\n\t\t{\n\t\t\te.preventDefault();\n\t\t});\n\t}\n\n\t// The reason for this method is be able to test logic regarding window.location - so tests can mock the window object\n\tfunction getWindow()\n\t{\n\t\treturn window;\n\t}\n\n\t// Performs a POST operation to a specific url\n\tfunction doPost (url)\n\t{\n\t\tvar form = jQuery('<form id=\"do-post\" method=\"POST\" action=\"' + url + '\"></form>').hide();\n\n\t\t// we have to append it to the dom  for browser compatibility\n\t\t// check if the form already exists (user could cancel the operation before it gets to the submit)\n\t\tvar do_post = jQuery('#do-post');\n\t\tif(do_post && do_post[0])\n\t\t{\n\t\t\tdo_post[0].action = url;\n\t\t\tdo_post[0].method = 'POST';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tjQuery('html').append(form);\n\t\t\tdo_post = jQuery('#do-post');\n\t\t}\n\n\t\tdo_post[0].submit();\n\t}\n\n\tfunction getPathFromObject (object, path, default_value)\n\t{\n\t\tif (!path)\n\t\t{\n\t\t\treturn object;\n\t\t}\n\t\telse if (object)\n\t\t{\n\t\t\tvar tokens = path.split('.')\n\t\t\t,\tprev = object\n\t\t\t,\tn = 0;\n\n\t\t\twhile (!_.isUndefined(prev) && n < tokens.length)\n\t\t\t{\n\t\t\t\tprev = prev[tokens[n++]];\n\t\t\t}\n\n\t\t\tif (!_.isUndefined(prev))\n\t\t\t{\n\t\t\t\treturn prev;\n\t\t\t}\n\t\t}\n\n\t\treturn default_value;\n\t}\n\n\tfunction setPathFromObject(object, path, value)\n\t{\n\t\tif (!path)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\telse if (!object)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tvar tokens = path.split('.')\n\t\t,\tprev = object;\n\n\t\tfor(var token_idx = 0; token_idx < tokens.length-1; ++token_idx)\n\t\t{\n\t\t\tvar current_token = tokens[token_idx];\n\n\t\t\tif( _.isUndefined(prev[current_token]))\n\t\t\t{\n\t\t\t\tprev[current_token] = {};\n\t\t\t}\n\t\t\tprev = prev[current_token];\n\t\t}\n\t\t\n\t\tprev[_.last(tokens)] = value;\n\t}\n\n\tfunction getItemLinkAttributes (item)\n\t{\n\t\tvar url = _(item.get('_url') + item.getQueryStringWithQuantity(1)).fixUrl()\n\t\t,\tlink_attributes = '';\n\n\t\tif (url)\n\t\t{\n\t\t\tlink_attributes = {\n\t\t\t\thref: url\n\t\t\t};\n\n\t\t\tif (SC.ENVIRONMENT.siteType === 'ADVANCED')\n\t\t\t{\n\t\t\t\t_.extend(link_attributes, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttouchpoint: 'home'\n\t\t\t\t\t,\thashtag: '#' + url\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn _.objectToAtrributes(link_attributes);\n\t}\n\n\tfunction ellipsis (selector)\n\t{\n\t\tif (!jQuery(selector).data('ellipsis'))\n\t\t{\n\t\t\tvar values = ['', '.', '..', '...', '..', '.']\n\t\t\t// var values = ['┏(°.°)┛', '┗(°.°)┛', '┗(°.°)┓', '┏(°.°)┓']\n\t\t\t,\tcount = 0\n\t\t\t,\ttimer = null\n\t\t\t,\telement = jQuery(selector);\n\n\t\t\telement.data('ellipsis', true);\n\t\t\telement.css('visibility', 'hidden');\n\t\t\telement.html('...');\n\t\t\t// element.html('┏(°.°)┛');\n\t\t\telement.css('width', element.css('width'));\n\t\t\telement.css('display', 'inline-block');\n\t\t\telement.html('');\n\t\t\telement.css('visibility', 'visible');\n\n\t\t\ttimer = setInterval(function ()\n\t\t\t{\n\t\t\t\tif (jQuery(selector).length)\n\t\t\t\t{\n\t\t\t\t\telement.html(values[count % values.length]);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tclearInterval(timer);\n\t\t\t\t\telement = null;\n\t\t\t\t}\n\t\t\t}, 250);\n\t\t}\n\t}\n\n\tfunction reorderUrlParams (url)\n\t{\n\t\tvar params = []\n\t\t,\turl_array = url.split('?');\n\n\t\tif (url_array.length > 1)\n\t\t{\n\t\t\tparams = url_array[1].split('&');\n\t\t\treturn url_array[0] + '?' + params.sort().join('&');\n\t\t}\n\n\t\treturn url_array[0];\n\t}\n\n\n\tSC.Utils = {\n\t\ttranslate: translate\n\t,\tsubstitute: substitute\n\t,\tpaymenthodIdCreditCart: paymenthodIdCreditCart\n\t,\tformatPhone: formatPhone\n\t,\tdateToString: dateToString\n\t,\tisDateValid: isDateValid\n\t,\tstringToDate: stringToDate\n\t,\tvalidatePhone: validatePhone\n\t,\tvalidateState: validateState\n\t,\tvalidateZipCode: validateZipCode\n\t,\tvalidateSecurityCode: validateSecurityCode\n\t,\tformatCurrency: formatCurrency\n\t,\tformatQuantity: formatQuantity\n\t,\thighlightKeyword: highlightKeyword\n\t,\tgetFullPathForElement: getFullPathForElement\n\t,\tcollectionToString: collectionToString\n\t,\taddParamsToUrl: addParamsToUrl\n\t,\tparseUrlOptions: parseUrlOptions\n\t,\tobjectToAtrributes: objectToAtrributes\n\t,\tresizeImage: resizeImage\n\t,\thyphenate: hyphenate\n\t,\tgetAbsoluteUrl: getAbsoluteUrl\n\t,\tpreventAnchorNavigation: preventAnchorNavigation\n\t,\tgetWindow: getWindow\n\t,\tgetDownloadPdfUrl: getDownloadPdfUrl\n\t,\tdoPost: doPost\n\t,\tgetPathFromObject: getPathFromObject\n\t,\tsetPathFromObject: setPathFromObject\n\t,\tgetItemLinkAttributes: getItemLinkAttributes\n\t,\tellipsis: ellipsis\n\t,\treorderUrlParams: reorderUrlParams\n\t};\n\n\t// We extend underscore with our utility methods\n\t// see http://underscorejs.org/#mixin\n\t_.mixin(SC.Utils);\n\n})();\n\n\n// ApplicationSkeleton.Layout.showContent.js\n// -----------------------------------------\n// Renders a View into the layout\n// if the view needs to be rendered in a modal, it does so\n// triggers a few different events on the layout\n(function ()\n{\n\t'use strict';\n\n\tSC.ApplicationSkeleton.prototype.Layout.prototype.showContent = function showContent (view, dont_scroll)\n\t{\n\t\t// if the user profile has not been loaded this makes it wait untill its done.\n\t\tvar user_promise = this.application.getUserPromise();\n\t\tif (user_promise.state() !== 'resolved')\n\t\t{\n\t\t\tvar self = this;\n\t\t\tuser_promise.done(function()\n\t\t\t{\n\t\t\t\tself.render();\n\t\t\t\t// force backbone to reroute the current route. https://github.com/jashkenas/backbone/issues/652\n\t\t\t\tBackbone.history.loadUrl(Backbone.history.fragment);\n\t\t\t});\n\n\t\t\tif (this.application.getConfig('performance.waitForUserProfile'))\n\t\t\t{\n\t\t\t\treturn jQuery.Deferred();\n\t\t\t}\n\t\t}\n\n\t\tvar current_view = this.currentView;\n\n\t\t// if the current view displays a bootstrap modal manually (without calling view.showInModal)\n\t\t// then it is neccessary to clean up the modal backdrop manually here\n\t\tjQuery('.modal').modal('hide');\n\n\t\tif (view.inModal)\n\t\t{\n\t\t\treturn view.showInModal();\n\t\t}\n\n\t\t// We render the layout only once, the first time showContent is called\n\t\tif (!this.rendered)\n\t\t{\n\t\t\tthis.render();\n\t\t\tthis.rendered = true;\n\t\t}\n\n\t\t// This line will destroy the view only if you are adding a diferent instance of a view\n\t\tif (current_view && current_view !== view)\n\t\t{\n\t\t\tcurrent_view.destroy();\n\n\t\t\tif (current_view.bodyClass)\n\t\t\t{\n\t\t\t\tthis.$el.removeClass(current_view.bodyClass);\n\t\t\t}\n\t\t}\n\n\t\t// the layout should have only one view, the currentView\n\t\tthis.currentView = view;\n\n\t\t// Empties the content first, so events dont get unbind\n\t\tthis.$content.empty();\n\t\tview.render();\n\n\t\tif (view.bodyClass)\n\t\t{\n\t\t\tthis.$el.addClass(view.bodyClass);\n\t\t}\n\n\t\t//document's title\n\t\tdocument.title = view.title || '';\n\n\t\tthis.trigger('beforeAppendView', view);\n\t\tthis.$content.append(view.$el);\n\t\tthis.trigger('afterAppendView', view);\n\n\t\tview.isRenderedInLayout = true;\n\n\t\t// Sometimes we do not want to scroll top when the view is rendered\n\t\t// Eventually we might change view and dont_scroll to an option obj\n\t\tif (!dont_scroll)\n\t\t{\n\t\t\tjQuery(document).scrollTop(0);\n\t\t}\n\n\t\t// we need to return a promise always, as show content might be async\n\t\treturn jQuery.Deferred().resolveWith(this, [view]);\n\t};\n\n})();\n\n\n// ApplicationSkeleton.Layout.showInModal.js\n// -----------------------------------------\n// Shows a view inside of a modal\n// Uses Bootstrap's Modals http://twitter.github.com/bootstrap/javascript.html#modals\n// All of the ids are added the prefix 'in-modal-' to avoid duplicated ids in the DOM\n(function ()\n{\n\t'use strict';\n\n\t// the last opened modal will be hold in this var\n\tvar current_modal;\n\n\t_.extend(SC.ApplicationSkeleton.prototype.Layout.prototype, {\n\n\t\twrapModalView: function (view)\n\t\t{\n\t\t\t// If the view doesn't has a div with the class modal-body\n\t\t\t// we need to wrap it inside of a div that does for propper styling\n\t\t\tvar $modal_body = view.$containerModal.find('.modal-body');\n\n\t\t\t// The view has it's own body so the template is probably doing some fancy stuff, so lets remove the other body\n\t\t\tif (view.$('.modal-body').length && $modal_body.length)\n\t\t\t{\n\t\t\t\t$modal_body.remove();\n\t\t\t\t$modal_body = [];\n\t\t\t}\n\t\t\t// if there is no body anywere lets wrap it with one\n\t\t\telse if (!$modal_body.length)\n\t\t\t{\n\t\t\t\tview.$el = view.$el.wrap('<div class=\"modal-body\"/>').parent();\n\t\t\t}\n\n\t\t\tif ($modal_body.length)\n\t\t\t{\n\t\t\t\t$modal_body.append(view.$el);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tview.$containerModal.find('.modal-content').append(view.$el);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t,\tprefixViewIds: function (view, prefix)\n\t\t{\n\t\t\tif (typeof view === 'string')\n\t\t\t{\n\t\t\t\tprefix = view;\n\t\t\t\tview = this.currentView;\n\t\t\t}\n\n\t\t\tif (view instanceof Backbone.View)\n\t\t\t{\n\t\t\t\tprefix = prefix || '';\n\t\t\t\t// Adding the prefix to all ids\n\t\t\t\tview.$('[id]').each(function ()\n\t\t\t\t{\n\t\t\t\t\tvar el = jQuery(this);\n\t\t\t\t\tif (el.parents('svg').length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn; // don't overwrite svg child ids\n\t\t\t\t\t}\n\n\t\t\t\t\tel.attr('id', function (i, old_id)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn prefix + old_id;\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t// Adding the prefix to all fors, so labels still work\n\t\t\t\tview.$('[for]').each(function ()\n\t\t\t\t{\n\t\t\t\t\tjQuery(this).attr('for', function (i, old_id)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn prefix + old_id;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t,\taddModalListeners: function (view)\n\t\t{\n\t\t\tvar self = this;\n\n\t\t\t// hidden is an even triggered by the bootstrap modal plugin\n\t\t\t// we obliterate anything related to the view once the modal is closed\n\t\t\tview.$containerModal.on('hidden.bs.modal', function ()\n\t\t\t{\n\t\t\t\tview.$containerModal.closest('.modal-container').remove();\n\t\t\t\tview.$containerModal = null;\n\t\t\t\tself.$containerModal = null;\n\t\t\t\tself.modalCurrentView = null;\n\t\t\t\tcurrent_modal = false;\n\t\t\t\tview.destroy();\n\n\t\t\t\t//After closing te modal, impose the underlying view's title\n\t\t\t\tdocument.title = self.currentView && self.currentView.getTitle() || '';\n\t\t\t});\n\n\t\t\t//Only trigger afterAppendView when finished showing the modal (has animation which causes a delay)\n\t\t\tview.$containerModal.on('shown.bs.modal',function ()\n\t\t\t{\n\t\t\t\t// 271487 set properties in media tag for browsers not supporting them.\n\t\t\t\t// Important: Keep in sync with modals.less\n\t\t\t\tif (!(window.matchMedia || window.msMatchMedia))\n\t\t\t\t{\n\t\t\t\t\tif (jQuery(window).width() >= 768)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar props = {\n\t\t\t\t\t\t\tleft: '50%',\n\t\t\t\t\t\t\tright: 'auto',\n\t\t\t\t\t\t\twidth: '600px',\n\t\t\t\t\t\t\tpaddingTop: '30px',\n\t\t\t\t\t\t\tpaddingBottom: '30px'\n\t\t\t\t\t\t};\n\t\t\t\t\t\tview.$containerModal.find('.modal-dialog').first().css(props);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tself.trigger('afterAppendView', view);\n\t\t\t});\n\t\t}\n\n\t,\tshowInModal: function (view, options)\n\t\t{\n\t\t\toptions = jQuery.extend({ modalOptions: {} }, options);\n\n\t\t\t// we tell the view its beeing shown in a Modal\n\t\t\tview.inModal = true;\n\n\t\t\t// we need a different variable to know if the view has already been rendered in a modal\n\t\t\t// this is to add the Modal container only once to the DOM\n\t\t\tif (!view.hasRenderedInModal)\n\t\t\t{\n\t\t\t\tvar element_id = view.$el.attr('id');\n\n\t\t\t\tthis.$containerModal = view.$containerModal = jQuery(\n\t\t\t\t\tSC.macros.modal(view.page_header || view.title || '')\n\t\t\t\t).closest('div');\n\n\t\t\t\tthis.$containerModal\n\t\t\t\t\t.addClass(view.modalClass || element_id ? ('modal-'+ element_id) : '')\n\t\t\t\t\t.attr('id', view.modalId || element_id ? ('modal-'+ element_id) : '');\n\n\t\t\t\tthis.modalCurrentView = view;\n\t\t\t\tview.options.layout = this;\n\t\t\t}\n\n\t\t\tthis.trigger('beforeAppendView', view);\n\t\t\t// Generates the html for the view based on its template\n\t\t\t// http://backbonejs.org/#View-render\n\t\t\tview.render();\n\n\t\t\tthis.wrapModalView(view).prefixViewIds(view, 'in-modal-');\n\n\t\t\tif (!view.hasRenderedInModal)\n\t\t\t{\n\t\t\t\t// if there was a modal opened we close it\n\t\t\t\tcurrent_modal && current_modal.modal('hide');\n\t\t\t\t// Stores the modal dom reference\n\t\t\t\tcurrent_modal = view.$containerModal;\n\n\t\t\t\tthis.addModalListeners(view);\n\t\t\t\t// So, now we add the wrapper modal with the view in it to the dom - we append it to the Layout view instead of body, so modal links are managed by NavigationHelper.\n\t\t\t\tview.$containerModal.appendTo(this.el).wrap('<div class=\"modal-container\"/>');\n\n\t\t\t\t// We trigger the plugin, it can be passed custom options\n\t\t\t\t// http://twitter.github.com/bootstrap/javascript.html#modals\n\t\t\t\tview.$containerModal.modal(options.modalOptions);\n\t\t\t}\n\n\t\t\tif (options.className)\n\t\t\t{\n\t\t\t\tview.$containerModal.addClass(options.className);\n\t\t\t}\n\n\t\t\t// the view has now been rendered in a modal\n\t\t\tview.hasRenderedInModal = true;\n\n\t\t\treturn jQuery.Deferred().resolveWith(this, [view]);\n\t\t}\n\t});\n})();\n\n\n// ApplicationSkeleton.Tracking.js\n// -----------------------------------------\n// Extends the application's prototype to allow multiple tracking methods.\n// Also warps the Layout's showContent to track the page view each time a view is rendered.\n(function ()\n{\n\t'use strict';\n\n\tvar application_prototype = SC.ApplicationSkeleton.prototype\n\t,\tlayout_prototype = application_prototype.Layout.prototype;\n\n\t_.extend(application_prototype, {\n\t\t// Application.trackers\n\t\t// Place holder for tracking modules.\n\t\t// When creating your own tracker module, be sure to push it to this array.\n\t\ttrackers: []\n\t\t// Tracking\n\t,\ttrack: function (method)\n\t\t{\n\t\t\tvar self = this\n\t\t\t\t// Each method could be called with different type of parameters.\n\t\t\t\t// So we pass them all what ever they are.\n\t\t\t,\tparameters = Array.prototype.slice.call(arguments, 1);\n\n\t\t\t_.each(this.trackers, function (tracker)\n\t\t\t{\n\t\t\t\t// Only call the method if it exists, the context is the application.\n\t\t\t\ttracker[method] && tracker[method].apply(self, parameters);\n\t\t\t});\n\n\t\t\treturn this;\n\t\t}\n\n\t,\ttrackPageview: function (url)\n\t\t{\n\t\t\treturn this.track('trackPageview', url);\n\t\t}\n\n\t,\ttrackEvent: function (event)\n\t\t{\n\t\t\tvar GoogleUniversalAnalytics = null\n\t\t\t,\thas_universal_analytics = false;\n\n\t\t\tthis.track('trackEvent', event);\n\n\t\t\tif (event.callback)\n\t\t\t{\n\t\t\t\tGoogleUniversalAnalytics = require('GoogleUniversalAnalytics');\n\n\t\t\t\thas_universal_analytics = _.find(this.trackers, function (tracker)\n\t\t\t\t{\n\t\t\t\t\treturn tracker === GoogleUniversalAnalytics;\n\t\t\t\t});\n\t\t\t\t// GoogleUniversalAnalytics has an asynchronous callback.\n\t\t\t\t// So we anly call the non async ones if UniversalAnalytics is not there.\n\t\t\t\t!has_universal_analytics && event.callback();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t,\ttrackTransaction: function (transaction)\n\t\t{\n\t\t\treturn this.track('trackTransaction', transaction);\n\t\t}\n\n\t\t// Application.addCrossDomainParameters:\n\t\t// Some tracking services require to pass special parameters when navigating to a different domain.\n\t\t// This method will be call for each of the services whenever that happens.\n\t,\taddCrossDomainParameters: function (url)\n\t\t{\n\t\t\t_.each(this.trackers, function (tracker)\n\t\t\t{\n\t\t\t\tif (tracker.addCrossDomainParameters)\n\t\t\t\t{\n\t\t\t\t\turl = tracker.addCrossDomainParameters(url);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn url;\n\t\t}\n\t});\n\n\t_.extend(layout_prototype, {\n\n\t\tshowContent: _.wrap(layout_prototype.showContent, function (fn, view)\n\t\t{\n\t\t\tvar application = view.application || view.options.application\n\t\t\t\t// Prefix is added so the only application that tracks the root ('/') is Shopping\n\t\t\t\t// any other application that has '/' as the home, like MyAccount\n\t\t\t\t// will track '/APPLICATION-NAME'\n\t\t\t,\tprefix = application.name !== 'Shopping' ? '/' + application.name.toLowerCase() : '';\n\n\t\t\tapplication.trackPageview(prefix + '/' + Backbone.history.fragment);\n\n\t\t\treturn fn.apply(this, _.toArray(arguments).slice(1));\n\t\t})\n\t});\n})();\n\n\n// Backbone.History.js\n// -----------------\n// Extends native Backbone.History to override the getFragment to include the location.search\n(function ()\n{  \n  'use strict';\n\n  // Cached regex for stripping a leading hash/slash and trailing space.\n  var routeStripper = /^[#\\/]|\\s+$/g;\n  // Cached regex for removing a trailing slash.\n  var trailingSlash = /\\/$/;\n\n  //Add query string parameters in case of using push state\n  _.extend(Backbone.History.prototype, {\n      getFragment: function(fragment, forcePushState) {\n        if (!fragment)\n        {\n          if (this._hasPushState || !this._wantsHashChange || forcePushState)\n          {\n            fragment = this.location.pathname + this.location.search;\n            var root = this.root.replace(trailingSlash, '');\n            if (!fragment.indexOf(root))\n            {\n              fragment = fragment.substr(root.length);\n            }\n          } \n          else \n          {\n            fragment = this.getHash();\n          }\n        }\n        return fragment.replace(routeStripper, '');\n      }\n  });\n})();\n\n// Backbone.Model.js\n// -----------------\n// Extends native Backbone.Model to make internalid the idAttribute\n(function ()\n{\n\t'use strict';\n\n\t_.extend(Backbone.Model.prototype, {\n\n\t\turl: function ()\n\t\t{\n\t\t\t// http://underscorejs.org/#result\n\t\t\tvar base = _.result(this, 'urlRoot') || _.result(this.collection, 'url');\n\n\t\t\tif (this.isNew()) \n\t\t\t{\n\t\t\t\treturn base;\n\t\t\t}\n\n\t\t\t/// This will pass the id as a parameter instead of as part of the url\n\t\t\treturn base +'?internalid='+ encodeURIComponent(this.id);\n\t\t}\n\n\t,\tidAttribute: 'internalid'\n\n\t});\n\n})();\n\n// Backbone.Sync.js\n// -----------------\n// Extends native Backbone.Sync to pass company and site id on all requests\n(function ()\n{\n\t'use strict';\n\n\tBackbone.sync = _.wrap(Backbone.sync, function (fn, method, model, options)\n\t{\n\t\tvar url = options.url || _.result(model, 'url');\n\n\t\tif (url)\n\t\t{\n\t\t\toptions = options || {};\n\n\t\t\toptions.url = url + (~url.indexOf('?') ? '&' : '?') + jQuery.param({\n\t\t\t\t// Account Number\n\t\t\t\tc: SC.ENVIRONMENT.companyId\n\t\t\t\t// Site Number\n\t\t\t,\tn: SC.ENVIRONMENT.siteSettings.siteid\n\t\t\t});\n\t\t}\n\n\t\treturn fn.apply(this, [method, model, options]);\n\t});\n})();\n\n// Backbone.Validation.callbacks.js\n// --------------------------------\n// Extends the callbacks of the Backbone Validation plugin\n// https://github.com/thedersen/backbone.validation\n(function ()\n{\n\t'use strict';\n\n\t//\n\t//\tUsage: \n\t//\t\tFirst the view must have a model or collection attribute in order to activate the validation\n\t//\t\tcallbacks\n\t// \n\t//\t\tMyView = Backbone.View.extend({\n\t//\t\t\ttemplate: 'my_template'\n\t//\t\t,\tmodel: MyModel\t\n\t//\t\t});\n\t//\n\t//\t\tThe view template must have for each control group (or field) a '.controls' element\n\t//\t\twhere the error message is shown.\n\t//\n\t//\t\tExample:\n\t//\n\t//\t\t<div class=\"form-group\">\n\t//\t\t\t<label class=\"control-label\" for=\"city\">City:</label>\n\t//\t\t\t<span  class=\"controls pull-right\"></span>\n\t//\t\t\t<input class=\"form-control\" id=\"city\" name=\"city\" value=\"\">\n\t//\t\t</div>\n\t//\n\t//\t\tIf you are using bootstrap3, be sure that you call Backbone.Validation.callbacks.setSelectorStyle('bootstrap3')\n\t//\t\tor your error messages will not be shown.\n\t//\t\n\t_.extend(Backbone.Validation.callbacks, {\n\t\t//\tcontrol-group is used for Bootstrap2 and form-group is used for Bootstrap3\n\t\tcontrol_group_selector: '.control-group, .form-group'\n\t\t//\terror is used for Bootstrap2 and has-error is used for Bootstrap3\n\t,\terror_state_class: 'error has-error'\n\n\t,\tvalid: function (view, attr, selector)\n\t\t{\n\t\t\tvar $control = view.$el.find('['+ selector +'=\"'+ attr +'\"]')\n\t\t\t\t// if its valid we remove the error classnames\n\t\t\t,\t$group = $control.parents(this.control_group_selector).removeClass(this.error_state_class);\n\n\t\t\t// we also need to remove all of the error messages\n\t\t\treturn $group.find('.backbone-validation').remove().end();\n\t\t}\n\n\t,\tinvalid: function (view, attr, error, selector)\n\t\t{\n\t\t\tvar $target\n\t\t\t,\t$control = view.$el.find('['+ selector +'=\"'+ attr +'\"]')\n\t\t\t,\t$group = $control.parents(this.control_group_selector).addClass(this.error_state_class);\n\n\n\t\t\tview.$('[data-type=\"alert-placeholder\"]').html(\n\t\t\t\tSC.macros.message(_(' Sorry, the information you provided is either incomplete or needs to be corrected.').translate(), 'error', true)\n\t\t\t);\n\n\t\t\t//This case happens when calling validation on attribute setting with { validate: true; }\n\t\t\tif (!view.$savingForm)\n\t\t\t{\n\t\t\t\tview.$savingForm = $control.closest('form');\n\t\t\t}\n\n\t\t\tview.$savingForm.find('*[type=submit], *[type=reset]').attr('disabled', false);\n\n\t\t\tview.$savingForm.find('input[type=\"reset\"], button[type=\"reset\"]').show();\n\n\t\t\tif ($control.data('error-style') === 'inline')\n\t\t\t{\n\t\t\t\t// if we don't have a place holder for the error\n\t\t\t\t// we need to add it. $target will be the placeholder\n\t\t\t\tif (!$group.find('.help-inline').length)\n\t\t\t\t{\n\t\t\t\t\t$group.find('.controls').append('<span class=\"help-inline backbone-validation\"></span>');\n\t\t\t\t}\n\n\t\t\t\t$target = $group.find('.help-inline');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// if we don't have a place holder for the error\n\t\t\t\t// we need to add it. $target will be the placeholder\n\t\t\t\tif (!$group.find('.help-block').length)\n\t\t\t\t{\n\t\t\t\t\t$group.find('.controls').append('<p class=\"help-block backbone-validation\"></p>');\n\t\t\t\t}\n\n\t\t\t\t$target = $group.find('.help-block');\n\t\t\t}\n\n\t\t\treturn $target.text(error);\n\t\t}\n\t});\n})();\n\n// Backbone.View.js\n// ----------------\n// Extends native Backbone.View with a bunch of required methods\n// most of this were defined as no-ops in ApplicationSkeleton.js\n(function ()\n{\n\t'use strict';\n\t\n\t_.extend(Backbone.View.prototype, {\n\t\t// Default error message, usally overwritten by server response on error\n\t\terrorMessage: 'Sorry, the information you provided is either incomplete or needs to be corrected.'\n\t\t\n\t\t// dont_scroll will eventually be changed to an object literal\n\t,\tshowContent: function (dont_scroll)\n\t\t{\n\t\t\treturn this.options.application && this.options.application.getLayout().showContent(this, dont_scroll);\n\t\t}\n\n\t,\tshowInModal: function (options)\n\t\t{\n\t\t\treturn this.options.application && this.options.application.getLayout().showInModal(this, options);\n\t\t}\n\n\t\t// Get view's SEO attributes\n\t,\tgetMetaDescription: function ()\n\t\t{\n\t\t\treturn this.metaDescription;\n\t\t}\n\n\t,\tgetMetaKeywords: function ()\n\t\t{\n\t\t\treturn this.metaKeywords;\n\t\t}\n\n\t,\tgetMetaTags: function ()\n\t\t{\n\t\t\treturn jQuery('<head/>').html(this.metaTags || '').children('meta');\n\t\t}\n\n\t\t//Backbone.View.getTitle() : returns the document's title to show when this view is active. \n\t,\tgetTitle: function ()\n\t\t{\n\t\t\treturn this.title;\n\t\t}\n\n\t,\tgetCanonical: function ()\n\t\t{\n\t\t\tvar canonical = window.location.protocol + '//' + window.location.hostname + '/' + Backbone.history.fragment\n\t\t\t,\tindex_of_query = canonical.indexOf('?');\n\n\t\t\t// !~ means: indexOf == -1\n\t\t\treturn !~index_of_query ? canonical : canonical.substring(0, index_of_query);\n\t\t}\n\n\t\t// For paginated pages, you should implement this operations\n\t\t// to return the url of the previous and next pages\n\t,\tgetRelPrev: jQuery.noop\n\t,\tgetRelNext: jQuery.noop\n\n\t\t// \"private\", shouldn't be overwritten\n\t\t// if a custom destroy method is required\n\t\t// override the destroy method.\n\t\t// This method should still be called\n\t,\t_destroy: function ()\n\t\t{\n\t\t\t// http://backbonejs.org/#View-undelegateEvents\n\t\t\tthis.undelegateEvents();\n\n\t\t\t// http://backbonejs.org/#Events-off\n\t\t\tthis.model && this.model.off(null, null, this);\n\t\t\tthis.collection && this.collection.off(null, null, this);\n\t\t}\n\t\t\n\t,\tdestroy: function ()\n\t\t{\n\t\t\tthis._destroy();\n\t\t}\n\n\t,\tshowConfirmationMessage: function (message)\n\t\t{\n\t\t\tvar $msg_el = jQuery(SC.macros.message(message, 'success', true))\n\t\t\t,\t$confirmation_message = jQuery('[data-confirm-message]');\n\t\t\t\n\t\t\t$msg_el.find('.close').click(function() \n\t\t\t{\n\t\t\t\t$confirmation_message.hide();\n\t\t\t});\n\n\t\t\t$confirmation_message.show().empty().append($msg_el);\n\n\t\t\tsetTimeout(function() \n\t\t\t{\n\t\t\t\t$confirmation_message.fadeOut(3000);\n\t\t\t}, 5000);\n\t\t}\n\n\t,\tshowWarningMessage: function (message)\n\t\t{\n\t\t\tvar $msg_el = jQuery(SC.macros.message(message, 'warning', true));\n\t\t\t\n\t\t\tthis.$('[data-confirm-message]').empty().append($msg_el);\t\t\t\n\t\t}\n\n\t\t// Disables and re-enables a given set of elements based on a promise\n\t,\tdisableElementsOnPromise: function (promise, selector)\n\t\t{\n\t\t\tvar $target = this.$(selector);\n\n\t\t\tif ($target.length === 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$target.attr('disabled', true);\n\n\t\t\tpromise.always(function ()\n\t\t\t{\n\t\t\t\t$target.attr('disabled', false);\n\t\t\t});\n\t\t}\n\t});\n})();\n\n// Backbone.View.render.js\n// -----------------------\n// Extends native Backbone.View with a custom rendering method\n(function ()\n{\n\t'use strict';\n\n\t_.extend(Backbone.View.prototype, {\n\n\t\t_render: function ()\n\t\t{\n\t\t\t// http://backbonejs.org/#View-undelegateEvents\n\t\t\tthis.undelegateEvents();\n\n\t\t\t// if there is a collection or a model, we\n\t\t\t(this.model || this.collection) && Backbone.Validation.bind(this);\n\n\n\t\t\t// Renders the template\n\t\t\tvar tmpl = SC.template(this.template+'_tmpl', {view: this});\n\n\t\t\t// Workaround for internet explorer 7. href is overwritten with the absolute path so we save the original href\n\t\t\t// in data-href (only if we are in IE7)\n\t\t\t// IE7 detection courtesy of Backbone\n\t\t\t// More info: http://www.glennjones.net/2006/02/getattribute-href-bug/\n\t\t\tvar isExplorer = /msie [\\w.]+/\n\t\t\t,\tdocMode = document.documentMode\n\t\t\t,\toldIE = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));\n\n\t\t\tif (oldIE)\n\t\t\t{\n\t\t\t\ttmpl = tmpl.replace(/href=\"(.+?)(?=\")/g,'$&\" data-href=\"$1');\n\t\t\t}\n\n\t\t\t//Apply permissions\n\t\t\tvar $tmpl = this.applyPermissions(tmpl);\n\n\t\t\tthis.$el.empty();\n\n\t\t\tthis.trigger('beforeViewRender', this);\n\n\t\t\t// appends the content to the view's element\n\t\t\tif (SC.ENVIRONMENT.jsEnvironment === 'server')\n\t\t\t{\n\t\t\t\t// in SEO we append the content this way because of a envjs bug. \n\t\t\t\tthis.$el[0].innerHTML = $tmpl[0].innerHTML;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.$el.append($tmpl);\n\t\t\t}\n\n\t\t\tthis.$('[data-toggle=\"tooltip\"]').tooltip({html: true});\n\n\t\t\tthis.trigger('afterViewRender', this);\n\n\t\t\t// http://backbonejs.org/#View-delegateEvents\n\t\t\tthis.delegateEvents();\n\n\t\t\treturn this;\n\t\t}\n\n\t\t// Given an HTML template string, removes the elements from the DOM that\n\t\t// do not comply with the list of permissions level\n\t\t// The permission level is specified by using the data-permissions attribute and data-permissions-operator (the latter is optional)\n\t\t// on any html tag in the following format:\n\t\t// <permission_category>.<permission_name>.<minimum_level>\n\t\t// permission_category and permission_name come from SC.ENVIRONMENT.permissions. (See commons.js)\n\t\t// e.g:\n\t\t//     <div data-permissions=\"transactions.tranFind.1\"></div>\n\t\t//     <div data-permissions=\"transactions.tranCustDep.3,transactions.tranDepAppl.1 lists.tranFind.1\"></div>\n\t\t// Notice several permissions can be separated by space or comma, by default (in case that data-permissions-operator is missing) all permission will be evaluates\n\t\t// as AND, otherwise data-permissions-operator should have the value OR\n\t\t// e.g:\n\t\t//     <div data-permissions=\"transactions.tranFind.1\"></div>\n\t\t//     <div data-permissions=\"transactions.tranCustDep.3,transactions.tranDepAppl.1 lists.tranFind.1\" data-permissions-operator=\"OR\" ></div>\n\n\t,\tapplyPermissions: function (tmpl)\n\t\t{\n\t\t\t// We need to wrap the template in a container so then we can find\n\t\t\t// and remove parent nodes also (jQuery.find only works in descendants).\n\t\t\tvar $template = SC.ENVIRONMENT.jsEnvironment === 'server' ? jQuery('<div/>').append(tmpl) : jQuery(tmpl)\n\t\t\t,\t$permissioned_elements = $template.find('[data-permissions]');\n\n\t\t\t$permissioned_elements.each(function ()\n\t\t\t{\n\t\t\t\tvar $el = jQuery(this)\n\t\t\t\t,\telement_permission = $el.data('permissions')\n\t\t\t\t,\tperms = element_permission.split(/[\\s,]+/)\n\t\t\t\t,\tperm_operator = $el.data('permissions-operator') || 'AND'\n\t\t\t\t,\tperm_eval\n\t\t\t\t,\tperm_evaluation = perm_operator !== 'OR';\n\n\t\t\t\t_.each(perms, function (perm)\n\t\t\t\t{\n\t\t\t\t\tvar perm_tokens = perm.split('.');\n\n\t\t\t\t\tperm_eval = !(perm_tokens.length === 3 &&\n\t\t\t\t\t\tperm_tokens[2] < 5 &&\n\t\t\t\t\t\tSC.ENVIRONMENT.permissions &&\n\t\t\t\t\t\tSC.ENVIRONMENT.permissions[perm_tokens[0]] &&\n\t\t\t\t\t\tSC.ENVIRONMENT.permissions[perm_tokens[0]][perm_tokens[1]] < perm_tokens[2]);\n\n\t\t\t\t\tif (perm_operator === 'OR')\n\t\t\t\t\t{\n\t\t\t\t\t\tperm_evaluation = perm_evaluation || perm_eval;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tperm_evaluation = perm_evaluation &&  perm_eval;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (!perm_evaluation)\n\t\t\t\t{\n\t\t\t\t\t$el.remove();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn $template;\n\t\t}\n\n\t,\trender: function ()\n\t\t{\n\t\t\treturn this._render();\n\t\t}\n\t});\n})();\n\n// Backbone.View.saveForm.js\n// -------------------------\n// Extends native Backbone.View with a custom saveForm function to be called when forms are submited\n(function ()\n{\n\t'use strict';\n\n\t_.extend(Backbone.View.prototype, {\n\t\t\n\t\t// view.saveForm\n\t\t// Event halders added to all views\n\t\tsaveForm: function (e, model, props)\n\t\t{\n\t\t\te.preventDefault();\n\n\t\t\tmodel = model || this.model;\n\t\t\t\n\t\t\tthis.$savingForm = jQuery(e.target).closest('form');\n\t\t\t\n\t\t\tif (this.$savingForm.length)\n\t\t\t{\n\t\t\t\t// Disables all for submit buttons, to prevent double submitions\n\t\t\t\tthis.$savingForm.find('input[type=\"submit\"], button[type=\"submit\"]').attr('disabled', true);\n\t\t\t\t// and hides reset buttons \n\t\t\t\tthis.$savingForm.find('input[type=\"reset\"], button[type=\"reset\"]').hide();\n\t\t\t}\n\t\t\t\n\t\t\tthis.hideError();\n\n\t\t\tvar self = this;\n\n\t\t\t// Returns the promise of the save acction of the model\n\t\t\treturn model.save(props || this.$savingForm.serializeObject(), {\n\n\t\t\t\t\twait: true\n\n\t\t\t\t\t// Hides error messages, re enables buttons and triggers the save event \n\t\t\t\t\t// if we are in a modal this also closes it \n\t\t\t\t,\tsuccess: function (model, response)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (self.inModal && self.$containerModal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tself.$containerModal.modal('hide');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (self.$savingForm.length)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tself.hideError(self.$savingForm);\n\t\t\t\t\t\t\tself.$savingForm.find('[type=\"submit\"], [type=\"reset\"]').attr('disabled', false);\n\t\t\t\t\t\t\tmodel.trigger('save', model, response);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Re enables all button and shows an error message\n\t\t\t\t,\terror: function (model, response)\n\t\t\t\t\t{\n\t\t\t\t\t\tself.$savingForm.find('*[type=submit], *[type=reset]').attr('disabled', false);\n\n\t\t\t\t\t\tif (response.responseText)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmodel.trigger('error', jQuery.parseJSON(response.responseText));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t});\n})();\n\n// Backbone.cachedSync.js\n// ----------------------\n// This module defines a new type of Module and Collection and an alternative \n// to Backbone.sync that adds a cacheing layer to all read requests, but \n// leaves all write actions unmodified\n(function ()\n{\n\t\n\t'use strict';\n\t\n\t// The cache is an object where keys are a request identifier and values are a the result of the request and some metadata \n\tBackbone.localCache = {};\n\t// We will cap the size of the cache by an arbitratry number, fell free to change it to meet your needs.\n\tBackbone.cacheSize = 100;\n\t\n\t// Removes the oldest requests once the limit is reached\n\tfunction evictRecords()\n\t{\n\t\tvar keys = _.keys(Backbone.localCache)\n\t\t,\tcache_size = keys.length;\n\t\tif (cache_size > Backbone.cacheSize)\n\t\t{\n\t\t\tdelete Backbone.localCache[keys[0]];\n\t\t}\n\t}\n\t\n\t// Backbone.cachedSync:\n\t// Can be used interchangeably with Backbone.sync, it will retun a jQuery promise\n\t// once it's done will call the apropiate function \n\tBackbone.cachedSync = function (action, self, options)\n\t{\n\t\tif (action === 'read')\n\t\t{\n\t\t\t// Generates an uninque url that will be used as the request identifier\n\t\t\tvar url = _.result(this, 'url');\n\t\t\tif (options && options.data)\n\t\t\t{\n\t\t\t\turl += ((~url.indexOf('?')) ? '&' : '?') + jQuery.param(options.data);\n\t\t\t}\n\n\t\t\t// Generates a new deferred for every new sync, no matter if its or not in the cache\n\t\t\t// This is the responce of this method, this promice will be resolved by the ajax request\n\t\t\tvar deferred = jQuery.Deferred();\n\n\t\t\t// jQuery.ajax maps error to fail and success to done\n\t\t\tdeferred.error = deferred.fail;\n\t\t\tdeferred.success = deferred.done;\n\n\t\t\t// Now we make sure the success and error options are called\n\t\t\tdeferred.success(options.success);\n\t\t\tdeferred.error(options.error);\n\n\t\t\t// We then delete them from the options that will be passed to the real call so they are not called twice, for the 1st request\n\t\t\tdelete options.success;\n\t\t\tdelete options.error;\n\n\t\t\t// Force ajaxSetup cache to be true and not append a &_={timestamp} to the end of the URL\n\t\t\toptions.cache = true;\n\n\t\t\t// Now we get the actual request from the cache or we perform it\n\t\t\tBackbone.localCache[url] = Backbone.localCache[url] || Backbone.sync.apply(this, arguments);\n\n\t\t\t// Now we resolve the Deferred by listeinig to the resolution of the real request\n\t\t\t// if the request was already resolved our methods will be called imediatelly\n\t\t\tBackbone.localCache[url].then(\n\t\t\t\t// Success Callback \n\t\t\t\tfunction (response, status, jqXhr)\n\t\t\t\t{\n\t\t\t\t\t// Sometimes parse modifies the responce object (that is passed by reference)\n\t\t\t\t\tresponse = (jqXhr.responseText) ? JSON.parse(jqXhr.responseText) : response;\n\t\t\t\t\t// now we resolve the defered one with results \n\t\t\t\t\tdeferred.resolveWith(Backbone.localCache[url], [response, status, jqXhr]);\n\t\t\t\t\t// This make sure the cache is keept short\n\t\t\t\t\tevictRecords();\n\t\t\t\t}\n\t\t\t\t// Error Callback \n\t\t\t,\tfunction ()\n\t\t\t\t{\n\t\t\t\t\t// if it fails we make sure the next time its requested, dont read from cache\n\t\t\t\t\tdelete Backbone.localCache[url];\n\t\t\t\t\tdeferred.rejectWith(Backbone.localCache[url], arguments);\n\t\t\t\t}\n\t\t\t\t// Progess Callback\n\t\t\t,\tfunction ()\n\t\t\t\t{\n\t\t\t\t\tdeferred.notifyWith(Backbone.localCache[url], arguments);\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// Then we just return the defered\n\t\t\treturn deferred;\n\t\t\t// Bottom line: we are piping a fake ajax deferred from the original one\n\t\t}\n\n\t\t// if cache is not present we just call the original Backbone.sync\n\t\treturn  Backbone.sync.apply(this, arguments);\n\t};\n\t\n\t\n\tfunction addToCache (data, params)\n\t{\n\t\t/*jshint validthis:true*/\n\t\t// Generates an uninque url that will be used as the request identifier\n\t\tvar url = _.result(this, 'url');\n\t\turl += ((~url.indexOf('?')) ? '&' : '?') + jQuery.param(params || {});\n\n\t\t// This defered will be used as a fake Ajax Request we are gonna store in the cache\n\t\tvar deferred =  jQuery.Deferred();\n\n\t\t// We resolve the defered with the data you sent and some fake ajax info\n\t\tdeferred.resolveWith(this, [\n\t\t\tdata\n\t\t,\t'success'\n\t\t,\t{\n\t\t\t\tresponse: data\n\t\t\t,\tstatus: 'success'\n\t\t\t,\tstatusCode: '200'\n\t\t\t,\treadyState: 4\n\t\t\t,\tstatusText: 'OK'\n\t\t\t,\tresponseText: false // So it will use response instead of responseText\n\t\t\t}\n\t\t]);\n\n\t\t// Stores this fake promice in the cache\n\t\tBackbone.localCache[url] = deferred;\n\t}\n\n\tfunction isCached(data)\n\t{\n\t\t/*jshint validthis:true*/\n\t\t// Generates an uninque url that will be used as the request identifier\n\t\tvar url = _.result(this, 'url');\n\t\tif (data)\n\t\t{\n\t\t\turl += ((~url.indexOf('?')) ? '&' : '?') + jQuery.param(data);\n\t\t}\n\t\treturn !!Backbone.localCache[url];\n\t}\n\n\t\n\t// Backbone.CachedCollection: \n\t// It's just an extention of the original Backbone.Collection but it uses the Backbone.cachedSync\n\tBackbone.CachedCollection = Backbone.Collection.extend({\n\t\tsync: Backbone.cachedSync\n\t,\taddToCache: addToCache\n\t,\tisCached: isCached\n\t});\n\t\n\t// Backbone.CachedModel: \n\t// It's just an extention of the original Backbone.Model but it uses the Backbone.cachedSync\n\tBackbone.CachedModel = Backbone.Model.extend({\n\t\tsync: Backbone.cachedSync\n\t,\taddToCache: addToCache\n\t,\tisCached: isCached\n\t});\n\t\n})();\n\n\n/* ==========================================================\n * RATER\n * We developed jQuery plugin to provide rate selection functionality\n * Used on file: star_rating_macro.txt\n * \n * We tried to follow same syntax and practices as Bootstrap.js\n * so we are using Bootstrap's jsHint settings\n * http://blog.getbootstrap.com/2012/04/19/bootstrap-jshint-and-recess/\n * ==================================================================== */\n\n!function ($) {\n\n\t'use strict'; \n\n\t/* RATER CLASS DEFINITION\n\t * ====================== */\n\n\tvar Rater = function (element, options) {\n\t\tthis.init(element, options);\n\t};\n\n\tRater.prototype = {\n\n\t\tinit: function (element, options)\n\t\t{\n\t\t\tthis.options = options;\n\t\t\tthis.$element = $(element);\n\n\t\t\t// The element that displays the rating selection\n\t\t\tthis.$fill = this.$element.children('.rating-area-fill');\n\n\t\t\tvar data = this.$element.data();\n\n\t\t\tthis.max = data.max;\n\t\t\tthis.value = data.value;\n\t\t\t// used as an identifier from the outside\n\t\t\tthis.name = data.name;\n\n\t\t\tthis.listen();\n\t\t}\n\n\t,\tlisten: function () \n\t\t{\n\t\t\tvar self = this;\n\n\t\t\t// The .rater and .data-api are namespacing convention\n\t\t\tthis.$element\n\t\t\t\t.on('click.rater.data-api', function (e) {\n\t\t\t\t\tself.handleClick.call(self, e);\n\t\t\t\t})\n\t\t\t\t.on('mousemove.rater.data-api', function (e) {\n\t\t\t\t\tself.handleMouseMove.call(self, e);\n\t\t\t\t})\n\t\t\t\t.on('mouseleave.rater.data-api', function (e) {\n\t\t\t\t\tself.handleMouseLeave.call(self, e);\n\t\t\t\t});\n\t\t}\n\t\t\n\t,\thandleClick: function (e)\n\t\t{\n\t\t\te.preventDefault();\n\t\t\t\n\t\t\t// our rating area is composed by buttons\n\t\t\t// when one is clicked, we set its value to this\n\t\t\tif (e.target.tagName.toLowerCase() === 'button')\n\t\t\t{\n\t\t\t\tthis.setValue(e.target.value);\n\t\t\t}\n\t\t}\n\t\t\n\t,\thandleMouseMove: function (e)\n\t\t{\n\t\t\te.preventDefault();\n\t\t\t\n\t\t\t// our rating area is composed by buttons\n\t\t\t// when one is hovered, we fill the bar with that value\n\t\t\tif (e.target.tagName.toLowerCase() === 'button')\n\t\t\t{\n\t\t\t\tthis.setFillStatus(e.target.value);\n\t\t\t}\n\t\t}\n\t\t\n\t,\thandleMouseLeave: function ()\n\t\t{\n\t\t\t// on mouse leave we reset the value\n\t\t\tthis.setFillStatus(this.value);\n\t\t}\n\t\t\n\t,\tsetValue: function (value, silent)\n\t\t{\n\t\t\tthis.value = typeof value === 'number' ? Math.round(value) : parseInt(value, 10);\n\n\t\t\t// we set the value so it can be listened from the outside\n\t\t\tthis.$element.data('value', this.value);\n\t\t\t// then fill the rating selection with that value\n\t\t\tthis.setFillStatus(this.value);\n\n\t\t\t!silent && this.$element.trigger('rate', this);\n\t\t}\n\t\t\n\t,\tsetFillStatus: function (value)\n\t\t{\n\t\t\t// the percentage value is calculated\n\t\t\t// and the area to be filled is filled\n\t\t\tthis.$fill.css('width', (value * 100 / this.max) +'%');\n\t\t}\n\t};\n\n\t/* RATER PLUGIN DEFINITION\n\t * ======================= */\n\n\t// standar jQuery plugin definition\n\t$.fn.rater = function (options)\n\t{\n\t\treturn this.each(function ()\n\t\t{\n\t\t\tvar $this = $(this)\n\t\t\t,\tdata = $this.data('rater');\n\n\t\t\tif (!data){\n\t\t\t\t$this.data('rater', (data = new Rater(this, options)));\n\t\t\t}\n\t\t});\n\t};\n\n\t$.fn.rater.Constructor = Rater;\n\n\t$.fn.rater.defaults = {};\n\n\t/* Rater DATA-API\n\t * ============== */\n\n\t$(window).on('load', function () {\n\t\t$('[data-toggle=\"rater\"]').rater();\n\t});\n\n}(window.jQuery);\n\n/* ====================================================================\n * SLIDER\n * We developed jQuery plugin to provide range slider functionality\n * Used on file: facet_range_macro.txt\n *\n * We tried to follow same syntax and practices as Bootstrap.js\n * so we are using Bootstrap's jsHint settings\n * http://blog.getbootstrap.com/2012/04/19/bootstrap-jshint-and-recess/\n * ==================================================================== */\n\n!function ($) {\n\n\t'use strict';\n\n\t/* SLIDER CLASS DEFINITION\n\t * ======================= */\n\n\tvar Slider = function (element, options) {\n\t\tthis.init(element, options);\n\t};\n\n\tSlider.prototype = {\n\n\t\tinit: function (element, options)\n\t\t{\n\t\t\tvar $element = $(element)\n\t\t\t,\t$children = $element.children();\n\n\t\t\tthis.$element = $element;\n\t\t\tthis.options = options;\n\n\t\t\tthis.values = this.parseValues(options.values, $element.data());\n\t\t\tthis.$bar = $children.filter('.bar');\n\n\t\t\tthis.controls = {\n\t\t\t\t$low: $children.filter('[data-control=\"low\"]')\n\t\t\t,\t$high: $children.filter('[data-control=\"high\"]')\n\t\t\t};\n\n\t\t\tthis.slideToInitial(true);\n\t\t\tthis.listen();\n\t\t}\n\n\t,\tparseValues: function (defaults, dom_data)\n\t\t{\n\t\t\tvar values = {\n\t\t\t\tmin: dom_data.min || defaults.min\n\t\t\t,\tmax: dom_data.max || defaults.max\n\t\t\t};\n\n\t\t\t$.extend(values, {\n\t\t\t\tlow: Math.max(dom_data.low || defaults.min, values.min)\n\t\t\t,\thigh: Math.min(dom_data.high || defaults.high, values.max)\n\t\t\t});\n\n\t\t\treturn values;\n\t\t}\n\n\t,\tlisten: function ()\n\t\t{\n\t\t\tvar proxy = jQuery.proxy;\n\n\t\t\tthis.$element\n\t\t\t\t.on('mousedown.slider.data-api', proxy(this.handleMouseDown, this))\n\t\t\t\t.on('touchstart.slider.data-api', proxy(this.handleMouseDown, this));\n\n\t\t\t$('html')\n\t\t\t\t.on('mousemove.slider.data-api', proxy(this.handleMouseMove, this))\n\t\t\t\t.on('touchmove.slider.data-api', proxy(this.handleMouseMove, this))\n\n\t\t\t\t.on('mouseup.slider.data-api', proxy(this.handleMouseUp, this))\n\t\t\t\t.on('touchend.slider.data-api', proxy(this.handleMouseUp, this))\n\t\t\t\t.on('touchcancel.slider.data-api', proxy(this.handleMouseUp, this));\n\t\t}\n\n\t,\tgetMinBoundary: function () {\n\t\t\treturn this.$element.offset().left;\n\t\t}\n\n\t,\tgetMaxBoundary: function () {\n\t\t\treturn this.getMinBoundary() + this.$element.innerWidth();\n\t\t}\n\n\t,\thandleMouseDown: function (e)\n\t\t{\n\t\t\tif (e.which !== 1 && e.type !== 'touchstart') {\n\t\t\t\treturn;\n\t\t\t} \n\n\t\t\tvar page_x = this.getPageX(e)\n\t\t\t,\t$target = $(e.target);\n\n\t\t\tif ($target.is('a') || $target.is('button'))\n\t\t\t{\n\t\t\t\tif (this.values.low === this.values.max || this.values.high === this.values.min)\n\t\t\t\t{\n\t\t\t\t\t$target = this.controls['$'+ (page_x < this.$element.offset().left + this.$element.innerWidth() / 2 ? 'high':'low')];\n\t\t\t\t}\n\n\t\t\t\tthis.$dragging = $target;\n\t\t\t\tthis.$element.trigger('start', this);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.$dragging = this.getClosestControl(page_x);\n\t\t\t\tthis.slideToValue(this.getSlidValue(page_x));\n\t\t\t}\n\n\t\t\te.preventDefault();\n\t\t}\n\n\t,\thandleMouseMove: function (e)\n\t\t{\n\t\t\tif (!this.$dragging) {\n\t\t\t\treturn;\t\n\t\t\t} \n\n\t\t\tvar page_x = this.getPageX(e)\n\t\t\t,\tslid_value = this.getSlidValue(page_x)\n\n\t\t\t,\tis_low = this.$dragging.data('control') === 'low'\n\t\t\t,\tvalue = Math[is_low ? 'min':'max'](slid_value, this.values[is_low ? 'high':'low']);\n\n\t\t\tthis.slideToValue(value);\n\n\t\t\te.preventDefault();\t\n\t\t}\n\n\t,\thandleMouseUp: function (e)\n\t\t{\n\t\t\tif (!this.$dragging) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.$dragging = null;\n\t\t\tthis.$element.trigger('stop', this);\n\n\t\t\te.preventDefault();\n\t\t}\n\n\t,\tgetPageX: function (e)\n\t\t{\n\t\t\tvar touch = e.originalEvent && e.originalEvent.touches ? e.originalEvent.touches[0] || e.originalEvent.changedTouches[0] : null;\n\t\t\treturn touch ? touch.pageX : e.pageX;\n\t\t}\n\n\t,\tgetSlidValue: function (page_x)\n\t\t{\n\t\t\tvar minBoundary = this.getMinBoundary()\n\t\t\t,\tmaxBoundary = this.getMaxBoundary()\n\t\t\t,\tlocation = page_x > maxBoundary ? maxBoundary : page_x < minBoundary ? minBoundary : page_x;\n\n\t\t\treturn ((location - minBoundary) / this.$element.innerWidth() * this.getSizeInValue() + this.values.min);\n\t\t}\n\n\t,\tgetClosestControl: function (page_x)\n\t\t{\n\t\t\tvar value = this.getSlidValue(page_x)\n\t\t\t,\tdistance_low = Math.abs(this.values.low - value)\n\t\t\t,\tdistance_high = Math.abs(this.values.high - value)\n\t\t\t,\t$low = this.controls.$low;\n\n\t\t\tif (distance_low !== distance_high)\n\t\t\t{\n\t\t\t\treturn distance_low < distance_high ? $low : this.controls.$high;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn page_x < $low.offset().left ? $low : this.controls.$high;\n\t\t\t}\n\t\t}\n\n\t,\tgetSizeInValue: function () {\n\t\t\treturn this.values.max - this.values.min;\n\t\t}\n\n\t,\tmoveControl: function ($control, value)\n\t\t{\n\t\t\treturn $control.css({\n\t\t\t\tleft: ((value - this.values.min) * 100 / this.getSizeInValue()) +'%'\n\t\t\t});\n\t\t}\n\t\n\t,\tresizeBar: function ()\n\t\t{\n\t\t\treturn this.$bar.css({\n\t\t\t\tleft: ((this.values.low - this.values.min) * 100 / this.getSizeInValue()) +'%'\n\t\t\t,\twidth: ((this.values.high - this.values.low) / this.getSizeInValue()) * 100 +'%'\n\t\t\t});\n\t\t}\n\n\t,\tslideToInitial: function (trigger)\n\t\t{\n\t\t\tthis.slideControls();\n\t\t\tthis.resizeBar();\n\n\t\t\tif (trigger)\n\t\t\t{\n\t\t\t\tthis.$element.trigger('slide', this);\n\t\t\t}\n\t\t}\n\n\t,\tslideControls: function ()\n\t\t{\n\t\t\tthis.moveControl(this.controls.$low, this.values.low);\n\t\t\tthis.moveControl(this.controls.$high, this.values.high);\n\t\t}\n\n\t,\tslideToValue: function (value)\n\t\t{\n\t\t\tvar is_low = this.$dragging.data('control') === 'low';\n\t\t\tthis.values[is_low ? 'low':'high'] = value;\n\t\t\t\n\t\t\tthis.moveControl(this.$dragging, value);\n\t\t\tthis.resizeBar();\n\n\t\t\tthis.$element.trigger('slide', this);\n\t\t}\n\t};\n\n\t/* SLIDER PLUGIN DEFINITION\n\t * ======================== */\n\n\t// standar jQuery plugin definition\n\t$.fn.slider = function (option)\n\t{\n\t\treturn this.each(function ()\n\t\t{\n\t\t\tvar $this = $(this)\n\t\t\t,\tdata = $this.data('slider');\n\n\t\t\t// if it wasn't initialized, we do so\n\t\t\tif (!data) {\n\t\t\t\t// we extend the passed options with the default ones\n\t\t\t\tvar options = $.extend({}, $.fn.slider.defaults, typeof option === 'object' && options);\n\t\t\t\t$this.data('slider', (data = new Slider(this, options)));\t\n\t\t\t}\n\t\t});\n\t};\n\n\t$.fn.slider.Constructor = Slider;\n\n\t$.fn.slider.defaults = {\n\t\tvalues: {\n\t\t\tmin: 0\n\t\t,\tmax: 100\n\t\t}\n\t};\n\n\t/* SLIDER DATA-API\n\t * =============== */\n\n\t$(window).on('load', function () {\n\t\t$('[data-toggle=\"slider\"]').slider();\n\t});\n\n}(window.jQuery);\n\n// String.format.js\n// ----------------\n// Used for the translation method in Utils.js\n// Will replace $(n) for the n parameter entered \n// eg: \"This $(0) a $(1), $(0) it?\".format(\"is\", \"test\");\n//     returns \"This is a test, is it?\"\n(function ()\n{\n\t'use strict';\n\t\n\tString.prototype.format = function ()\n\t{\n\t\tvar args = arguments;\n\n\t\treturn this.replace(/\\$\\((\\d+)\\)/g, function (match, number)\n\t\t{ \n\t\t\treturn typeof args[number] !== 'undefined' ? args[number] : match;\n\t\t});\n\t};\n\n})();\n\n// Underscore.templates.js\n// -----------------------\n// Handles compiling for the templates\n// Pre-compiles all of the macros\n// Adds comments to the begining and end of each template/macro\n// to make it easier to spot templates with development tools\n(function ()\n{\n\t'use strict';\n\n\tSC.handleMacroError = function (error, macro_name)\n\t{\n\t\tconsole.error('Error in macro: '+ macro_name + '\\n' + error + '\\n ' + error.stack);\n\t};\n\n\tvar isPageGenerator = function ()\n\t{\n\t\treturn SC.isPageGenerator ? SC.isPageGenerator() : false; \n\t}; \n\n\tSC.compileMacros = function compileMacros(macros)\n\t{\n\t\t// Exports all macros to SC.macros\n\t\tSC.macros = {};\n\n\t\tvar context = {\n\n\t\t\t// registerMacro:\n\t\t\t// method used on every macro to define itself\n\t\t\tregisterMacro: function (name, fn)\n\t\t\t{\n\t\t\t\tvar original_source = fn.toString()\n\t\t\t\t,\tprefix = isPageGenerator() ? '' : '\\\\n\\\\n<!-- MACRO STARTS: ' + name + ' -->\\\\n'\n\t\t\t\t,\tposfix = isPageGenerator() ? '' : '\\\\n<!-- MACRO ENDS: ' + name + ' -->\\\\n'\n\t\t\t\t\t// Adds comment lines at the begining and end of the macro\n\t\t\t\t\t// The rest of the mumbo jumbo is to play nice with underscore.js\n\t\t\t\t,\tmodified_source = ';try{var __p=\"' + prefix + '\";' + original_source.replace(/^function[^\\{]+\\{/i, '').replace(/\\}[^\\}]*$/i, '') +';__p+=\"' + posfix + '\";return __p;}catch(e){SC.handleMacroError(e,\"'+ name +'\")}' || []\n\t\t\t\t\t// We get the parameters from the string with a RegExp\n\t\t\t\t,\tparameters = original_source.slice(original_source.indexOf('(') + 1, original_source.indexOf(')')).match(/([^\\s,]+)/g) || [];\n\n\t\t\t\tparameters.push(modified_source);\n\n\t\t\t\t// Add the macro to SC.macros\n\t\t\t\tSC.macros[name] = _.wrap(Function.apply(null, parameters), function (fn)\n\t\t\t\t{\n\t\t\t\t\tvar result = fn.apply(this, _.toArray(arguments).slice(1));\n\t\t\t\t\tresult = minifyMarkup(result);\n\t\t\t\t\tresult = removeScripts(result);\n\t\t\t\t\treturn result;\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\t// Now we compile de macros\n\t\t_.each(macros, function (macro)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// http://underscorejs.org/#template\n\t\t\t\t_.template(macro, context);\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// if there's an arror compiling a macro we just\n\t\t\t\t// show the name of the macro in the console and carry on\n\t\t\t\tSC.handleMacroError(e, macro.substring(macro.indexOf('(') + 2, macro.indexOf(',') - 1));\n\t\t\t}\n\t\t});\n\t};\n\n\t// Template compiling and rendering.\n\t// We compile the templates as they are needed\n\tvar processed_templates = {};\n\n\tfunction template (template_id, obj)\n\t{\n\t\t// Makes sure the template is present in the template collection\n\t\tif (!SC.templates[template_id])\n\t\t{\n\t\t\tthrow new Error('Template \\''+template_id+'\\' is not present in the template hash.');\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\t// If the template hasn't been compiled we compile it and add it to the dictionary\n\t\t\tprocessed_templates[template_id] = processed_templates[template_id] || _.template(SC.templates[template_id] || '');\n\t\t\tvar prefix = isPageGenerator() ? '' : '\\n\\n<!-- TEMPLATE STARTS: '+ template_id +'-->\\n'\n\t\t\t,\tposfix = isPageGenerator() ? '' : '\\n<!-- TEMPLATE ENDS: '+ template_id +' -->\\n';\n\t\t\t// Then we return the template, adding the start and end comment lines\n\t\t\treturn prefix + processed_templates[template_id](_.extend({}, SC.macros, obj)) + posfix;\n\t\t}\n\t\tcatch (err)\n\t\t{\n\t\t\t// This adds the template id to the error message so you know which template to look at\n\t\t\terr.message = 'Error in template '+template_id+': '+err.message;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t// This is the noop function declared on Main.js\n\tSC.template = template;\n\n\t// needed to reset already processed templates\n\tfunction resetTemplates()\n\t{\n\t\tprocessed_templates = {};\n\t}\n\tSC.resetTemplates = resetTemplates;\n\n\n\t// heads up! - we override the _.template function for removing scripts.\n\t// Also we remove spaces and comments if the current runtime is the SEO engine for performance.\n\t// <script>s are removed for avoiding accidentally XSS injections on code evaluation using external values.\n\tvar SCRIPT_REGEX = /<\\s*script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi\n\n\t\t// Recursively removes all the appearances of script tags from tempaltes&macros output - only for SEO output. Originally this was designed to prevent XSS attacks but now it is only for cleaning up SEO output.\n\t,\tremoveScripts = function (text)\n\t\t{\n\t\t\tif (isPageGenerator() && text)\n\t\t\t{\n\t\t\t\ttext = text.replace(/(<!--[\\s\\S]*?-->)/g, ' $1 '); //invalidates de XSS attack like <scr<!--cheat-->ipt> - keep the comment and add spaces\n\t\t\t\twhile (SCRIPT_REGEX.test(text))\n\t\t\t\t{\n\t\t\t\t\ttext = text.replace(SCRIPT_REGEX, '');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn text || '';\n\t\t}\n\n\t\t// minifyMarkup\n\t\t// function that runs only in SEO and minifies templates&macros output, jQuery.html() and jQuery.append(). It minifies HTML output, remove comments and wrap images with noscript for performance.\n\t,\tminifyMarkup = function (text)\n\t\t{\n\t\t\tif (isPageGenerator() && text)\n\t\t\t{\n\t\t\t\ttext = text\n\t\t\t\t\t// remove spaces between tags.\n\t\t\t\t\t.replace(/\\>\\s+</g, '><')\n\t\t\t\t\t// remove html comments that our markup could have.\n\t\t\t\t\t.replace(/<!--[\\s\\S]*?-->/g, '')\n\t\t\t\t\t// replace multiple spaces with a single one.\n\t\t\t\t\t.replace(/\\s+/g, ' ');\n\n\t\t\t\tif (SC.blurInitialHTML)\n\t\t\t\t{\n\t\t\t\t\t// if SC.blurInitialHTML is turned on then the @main is not wrapped with no script that's why we need to wrap image by image:\n\t\t\t\t\t// Performance: wrap all images with noscript if in SEO so the browser don't start loading the images when parsing the SEO markup.\n\t\t\t\t\t// We do this with a regexp instead using parsed object because of the SEO engine. The following regexp wrap all <img> tags\n\t\t\t\t\t// with <noscript> only if they are not already wrapped. It supports the three formats: <img />, <img></img> and <img>\n\t\t\t\t\ttext = text.replace(/(<img\\s+[^>]*>\\s*<\\/img>|<img\\s+[^>]*\\/>|(?:<img\\s+[^>]*>)(?!\\s*<\\/img>))(?!\\s*<\\s*\\/noscript\\s*>)/gmi,'<noscript>$1</noscript>');\n\t\t\t\t}\t\t\t\t\t\n\t\t\t}\n\t\t\tif (!isPageGenerator() && window.fixImagesForLoader)\n\t\t\t{\n\t\t\t\ttext = window.fixImagesForLoader(text); \n\t\t\t}\n\t\t\treturn text || '';\n\t\t};\n\n\t// if in SEO we also override jQuery.html() and jQuery.append() so html output is minified. Also remove scripts - so content scripts don't appear in SEO output.\n\tif (isPageGenerator())\n\t{\n\t\tvar jQuery_originalHtml = jQuery.fn.html;\n\t\tjQuery.fn.html = function(html)\n\t\t{\n\t\t\tif (typeof html === 'string')\n\t\t\t{\n\t\t\t\thtml = minifyMarkup(html);\n\t\t\t\thtml = removeScripts(html);\n\t\t\t}\n\t\t\treturn jQuery_originalHtml.apply(this, [html]);\n\t\t};\n\n\t\tvar jQuery_originalAppend = jQuery.fn.append;\n\t\tjQuery.fn.append = function(html)\n\t\t{\n\t\t\tif (typeof html === 'string')\n\t\t\t{\n\t\t\t\thtml = minifyMarkup(html);\n\t\t\t\thtml = removeScripts(html);\n\t\t\t}\n\t\t\treturn jQuery_originalAppend.apply(this, [html]);\n\t\t};\n\t}\n\n\t// _.template\n\t// Patch to the _.template function that removes all the script tags in the processed template\n\t_.template_original = _.template;\n\n\t_.template = _.wrap(_.template, function(_template)\n\t{\n\t\t// Calls the original _.template(), wrap if neccesary and filter the output with minifyMarkup() and removeScripts()\n\t\tvar compiled_or_executed_template = _template.apply(this, Array.prototype.slice.call(arguments, 1));\n\n\t\t// The original has two signatures - we override both _.template('', {}) and _.template('').apply(this, [{}]);\n\t\t// _.template(source), generates a compiled version of the template to be executed at later time\n\t\tif (typeof compiled_or_executed_template === 'function')\n\t\t{\n\t\t\treturn _.wrap(compiled_or_executed_template, function(compiled_template_function)\n\t\t\t{\n\t\t\t\tvar result = compiled_template_function.apply(this, Array.prototype.slice.call(arguments, 1));\n\t\t\t\tresult = minifyMarkup(result);\n\t\t\t\tresult = removeScripts(result);\n\t\t\t\treturn result;\n\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcompiled_or_executed_template = minifyMarkup(compiled_or_executed_template);\n\t\t\tcompiled_or_executed_template = removeScripts(compiled_or_executed_template);\n\t\t\treturn compiled_or_executed_template;\n\t\t}\n\t});\n\n})();\n\n\n// jQuery.ajaxSetup.js\n// -------------------\n// Adds the loading icon, updates icon's placement on mousemove\n// Changes jQuery's ajax setup defaults\n(function ()\n{\n\t'use strict';\n\n\t// Variable used to track the mouse position\n\tvar mouse_position = {\n\t\ttop: 0\n\t,\tleft: 0\n\t};\n\n\tjQuery(document).ready(function ()\n\t{\n\t\tvar $body = jQuery(document.body)\n\t\t,\t$loading_icon = jQuery('#loadingIndicator');\n\n\t\tif (!$loading_icon.length && !SC.ENVIRONMENT.isTouchEnabled)\n\t\t{\n\t\t\t// if the icon wasn't there, lets add it and make a reference in the global scope\n\t\t\t$loading_icon = jQuery('<img/>', {\n\t\t\t\tid: 'loadingIndicator'\n\t\t\t,\t'class': 'global-loading-indicator'\n\t\t\t,\tsrc: _.getAbsoluteUrl('img/ajax-loader.gif')\n\t\t\t,\tcss: {\n\t\t\t\t\tzIndex: 9999\n\t\t\t\t,\tposition: 'absolute'\n\t\t\t\t}\n\t\t\t}).hide();\n\n\t\t\tif (!_.result(SC, 'isPageGenerator'))\n\t\t\t{\n\t\t\t\t$loading_icon.appendTo($body);\n\t\t\t}\n\t\t}\n\n\t\tSC.$loadingIndicator = $loading_icon;\n\n\t\t// loading icon sizes, used for positioning math\n\t\tvar icon_height = 16\n\t\t,\ticon_width = 16;\n\n\t\t$body.on({\n\t\t\t// On mouse move, we update the icon's position, even if its not shown\n\t\t\tmousemove: _.throttle(function (e)\n\t\t\t{\n\t\t\t\tmouse_position = {\n\t\t\t\t\ttop: Math.min($body.innerHeight() - icon_height, e.pageY + icon_width)\n\t\t\t\t,\tleft: Math.min($body.innerWidth() - icon_width, e.pageX + icon_height)\n\t\t\t\t};\n\n\t\t\t\t$loading_icon.filter(':visible').css(mouse_position);\n\t\t\t}, 50)\n\t\t\t// when the body resizes, we move the icon to the bottom of the page\n\t\t\t// so we don't get some empty white space at the end of the body\n\t\t,\tresize: _.throttle(function ()\n\t\t\t{\n\t\t\t\tvar icon_offset = $loading_icon.offset();\n\t\t\t\tif(!icon_offset){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tmouse_position = {\n\t\t\t\t\ttop: Math.min($body.innerHeight() - icon_height, icon_offset.top)\n\t\t\t\t,\tleft: Math.min($body.innerWidth() - icon_width, icon_offset.left)\n\t\t\t\t};\n\n\t\t\t\t$loading_icon.filter(':visible').css(mouse_position);\n\t\t\t}, 50)\n\t\t});\n\t});\n\n\tSC.loadingIndicatorShow = function ()\n\t{\n\t\tSC.$loadingIndicator && SC.$loadingIndicator.css(mouse_position).show();\n\t};\n\n\tSC.loadingIndicatorHide = function ()\n\t{\n\t\tSC.$loadingIndicator && SC.$loadingIndicator.hide();\n\t};\n\n\t// This registers an event listener to any ajax call\n\tjQuery(document)\n\t\t// http://api.jquery.com/ajaxStart/\n\t\t.ajaxStart(SC.loadingIndicatorShow)\n\t\t// http://api.jquery.com/ajaxStop/\n\t\t.ajaxStop(SC.loadingIndicatorHide);\n\n\t// http://api.jquery.com/jQuery.ajaxSetup/\n\tjQuery.ajaxSetup({\n\t\tbeforeSend: function (jqXhr, options)\n\t\t{\n\t\t\t// BTW: \"!~\" means \"== -1\"\n\t\t\tif (!~options.contentType.indexOf('charset'))\n\t\t\t{\n\t\t\t\t// If there's no charset, we set it to UTF-8\n\t\t\t\tjqXhr.setRequestHeader('Content-Type', options.contentType + '; charset=UTF-8');\n\t\t\t}\n\t\t}\n\t});\n})();\n\n\n// jQuery.serializeObject.js\n// -------------------------\n// Used to transform a $form's data into an object literal\n// with 'name: value' pairs\n(function ()\n{\n\t'use strict';\n\n\tjQuery.fn.serializeObject = function ()\n\t{\n\t\tvar o = {}\n\t\t\t// http://api.jquery.com/serializeArray/\n\t\t,\ta = this.serializeArray();\n\t\t\n\t\t// When a checkbox is not checked, we need to send the \"unchecked value\"\n\t\t// that value is held as a data attribute: \"data-unchecked-value\"\n\t\tthis.find('input[type=checkbox]:not(:checked)[data-unchecked-value]').each(function ()\n\t\t{\n\t\t\tvar $this = jQuery(this);\n\n\t\t\ta.push({\n\t\t\t\tname: $this.prop('name')\n\t\t\t,\tvalue: $this.data('unchecked-value')\n\t\t\t});\n\t\t});\n\t\t\n\t\t// Then we just loop through the array to create the object\n\t\tjQuery.each(a, function ()\n\t\t{\n\t\t\tif (o[this.name] !== undefined)\n\t\t\t{\n\t\t\t\tif (!o[this.name].push)\n\t\t\t\t{\n\t\t\t\t\to[this.name] = [o[this.name]];\n\t\t\t\t}\n\n\t\t\t\to[this.name].push(this.value || '');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\to[this.name] = this.value || '';\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn o;\n\t};\n\t\n})();","classes":{"Backbone.BackboneEvents":{"annotation":"class","name":"BackboneEvents","text":"Events is a module that can be mixed in to any object, giving the object the ability to bind and trigger custom named events. Events do not have to be declared before they are bound, and may take passed arguments. For example:\n\n\tvar object = {};\n\n\t_.extend(object, Backbone.Events);\n\n\tobject.on(\"alert\", function(msg) {\n\t  alert(\"Triggered \" + msg);\n\t});\n\n\tobject.trigger(\"alert\", \"an event\");\n\t\nFor example, to make a handy event dispatcher that can coordinate events among different areas of your application: var dispatcher = _.clone(Backbone.Events)\n\n\n#Catalog of Events \nHere's the complete list of built-in Backbone events, with arguments. You're also free to trigger your own events on Models, Collections and Views as you see fit. The Backbone object itself mixes in Events, and can be used to emit any global events that your application needs.\n\n\t\"add\" (model, collection, options) — when a model is added to a collection.\n\t\"remove\" (model, collection, options) — when a model is removed from a collection.\n\t\"reset\" (collection, options) — when the collection's entire contents have been replaced.\n\t\"sort\" (collection, options) — when the collection has been re-sorted.\n\t\"change\" (model, options) — when a model's attributes have changed.\n\t\"change:[attribute]\" (model, value, options) — when a specific attribute has been updated.\n\t\"destroy\" (model, collection, options) — when a model is destroyed.\n\t\"request\" (model_or_collection, xhr, options) — when a model or collection has started a request to the server.\n\t\"sync\" (model_or_collection, resp, options) — when a model or collection has been successfully synced with the server.\n\t\"error\" (model_or_collection, resp, options) — when model's or collection's request to remote server has failed.\n\t\"invalid\" (model, error, options) — when a model's validation fails on the client.\n\t\"route:[name]\" (params) — Fired by the router when a specific route is matched.\n\t\"route\" (route, params) — Fired by the router when any route has been matched.\n\t\"route\" (router, route, params) — Fired by history when any route has been matched.\n\t\"all\" — this special event fires for any triggered event, passing the event name as the first argument.\nGenerally speaking, when calling a function that emits an event (model.set, collection.add, and so on...), if you'd like to prevent the event from being triggered, you may pass {silent: true} as an option. Note that this is rarely, perhaps even never, a good idea. Passing through a specific flag in the options for your event callback to look at, and choose to ignore, will usually work out better.","commentRange":[21,2642],"fileName":"ALL.js","module":{"annotation":"module","name":"Backbone","text":"\n\n#About\nBackbone.js gives structure to web applications by providing models with key-value binding and custom events, collections with a rich API of enumerable functions, views with declarative event handling, and connects it all to your existing API over a RESTful JSON interface.\n\nThe project is hosted on GitHub, and the annotated source code is available, as well as an online test suite, an example application, a list of tutorials and a long list of real-world projects that use Backbone. Backbone is available for use under the MIT software license.\n\nYou can report bugs and discuss features on the GitHub issues page, on Freenode IRC in the #documentcloud channel, post questions to the Google Group, add pages to the wiki or send tweets to","commentRange":[1,19],"fileName":"ALL.js"},"absoluteName":"Backbone.BackboneEvents","methods":{"bind":{"annotation":"method","name":"bind","text":"Alias on\n\nBind a callback function to an object. The callback will be invoked whenever the event is fired. If you have a large number of different events on a page, the convention is to use colons to namespace them: \"poll:start\", or \"change:selection\". The event string may also be a space-delimited list of several events...\n\n\tbook.on(\"change:title change:author\", ...);\n\nTo supply a context value for this when the callback is invoked, pass the optional third argument: model.on('change', this.render, this)\n\nCallbacks bound to the special \"all\" event will be triggered when any event occurs, and are passed the name of the event as the first argument. For example, to proxy all events from one object to another:\n\n\tproxy.on(\"all\", function(eventName) {\n\t  object.trigger(eventName);\n\t});\nAll Backbone event methods also support an event map syntax, as an alternative to positional arguments:\n\n\tbook.on({\n\t  \"change:title\": titleView.update,\n\t  \"change:author\": authorPane.update,\n\t  \"destroy\": bookView.remove\n\t});","children":[{"annotation":"param","type":"{String}","name":"event","text":"","theRestString":"@param {Function} callback\n@param {Object} context optional"},{"annotation":"param","type":"{Function}","name":"callback","text":"","theRestString":"@param {Object} context optional"},{"annotation":"param","type":"{Object}","name":"context","text":"optional","theRestString":""}],"commentRange":[2646,3766],"fileName":"ALL.js"},"off":{"annotation":"method","name":"off","text":"Remove a previously-bound callback function from an object. If no context is specified, all of the versions of the callback with different contexts will be removed. If no callback is specified, all callbacks for the event will be removed. If no event is specified, callbacks for all events will be removed.\n\n\t// Removes just the `onChange` callback.\n\tobject.off(\"change\", onChange);\n\n\t// Removes all \"change\" callbacks.\n\tobject.off(\"change\");\n\n\t// Removes the `onChange` callback for all events.\n\tobject.off(null, onChange);\n\n\t// Removes all callbacks for `context` for all events.\n\tobject.off(null, null, context);\n\n\t// Removes all callbacks on `object`.\n\tobject.off();\nNote that calling model.off(), for example, will indeed remove all events on the model — including events that Backbone uses for internal bookkeeping.","commentRange":[3770,4609],"fileName":"ALL.js"},"trigger":{"annotation":"method","name":"trigger","text":"Trigger callbacks for the given event, or space-delimited list of events. Subsequent arguments to trigger will be passed along to the event callbacks.","commentRange":[4613,4784],"fileName":"ALL.js"},"once":{"annotation":"method","name":"once","text":"Just like on, but causes the bound callback to only fire once before being removed. Handy for saying \"the next time that X happens, do this\".","children":[{"annotation":"param","type":"{String}","name":"event","text":"","theRestString":"@param {Function} callback"},{"annotation":"param","type":"{Function}","name":"callback","text":"","theRestString":""}],"commentRange":[4788,4995],"fileName":"ALL.js"},"listenTo":{"annotation":"method","name":"listenTo","text":"Tell an object to listen to a particular event on an other object. The advantage of using this form, instead of other.on(event, callback, object), is that listenTo allows the object to keep track of the events, and they can be removed all at once later on. The callback will always be called with object as context.\n\n\tview.listenTo(model, 'change', view.render);","children":[{"annotation":"param","type":"{BackboneEvents}","name":"other","text":"","theRestString":"@param {String} event\n@param {Function} calback"},{"annotation":"param","type":"{String}","name":"event","text":"","theRestString":"@param {Function} calback"},{"annotation":"param","type":"{Function}","name":"calback","text":"","theRestString":""}],"commentRange":[4998,5463],"fileName":"ALL.js"},"stopListening":{"annotation":"method","name":"stopListening","text":"Tell an object to stop listening to events. Either call stopListening with no arguments to have the object remove all of its registered callbacks ... or be more precise by telling it to remove just the events it's listening to on a specific object, or a specific event, or just a specific callback.\n\n\tview.stopListening();\n\n\tview.stopListening(model);","children":[{"annotation":"param","type":"{BackboneEvents}","name":"other","text":"optional","theRestString":"@param {String} event optional\n@param {Function} calback optional"},{"annotation":"param","type":"{String}","name":"event","text":"optional","theRestString":"@param {Function} calback optional"},{"annotation":"param","type":"{Function}","name":"calback","text":"optional","theRestString":""}],"commentRange":[5467,5955],"fileName":"ALL.js"},"listenToOnce":{"annotation":"method","name":"listenToOnce","text":"Just like listenTo, but causes the bound callback to only fire once before being removed.","commentRange":[5958,6073],"fileName":"ALL.js"}}},"Backbone.BackboneModel":{"annotation":"class","name":"BackboneModel","text":"Models are the heart of any JavaScript application, containing the interactive data as well as a large part of the logic surrounding it: conversions, validations, computed properties, and access control. You extend Backbone.Model with your domain-specific methods, and Model provides a basic set of functionality for managing changes.\n\nThe following is a contrived example, but it demonstrates defining a model with a custom method, setting an attribute, and firing an event keyed to changes in that specific attribute. After running this code once, sidebar will be available in your browser's console, so you can play around with it.\n\n\tvar Sidebar = Backbone.Model.extend({\n\t  promptColor: function() {\n\t    var cssColor = prompt(\"Please enter a CSS color:\");\n\t    this.set({color: cssColor});\n\t  }\n\t});\n\n\twindow.sidebar = new Sidebar;\n\n\tsidebar.on('change:color', function(model, color) {\n\t  $('#sidebar').css({background: color});\n\t});\n\n\tsidebar.set({color: 'white'});\n\n\tsidebar.promptColor();\n\n","commentRange":[6075,7118],"fileName":"ALL.js","module":{"annotation":"module","name":"Backbone","text":"","commentRange":[6075,7118],"fileName":"ALL.js"},"absoluteName":"Backbone.BackboneModel","methods":{"extend":{"annotation":"method","name":"extend","text":"To create a Model class of your own, you extend Backbone.Model and provide instance properties, as well as optional classProperties to be attached directly to the constructor function.\n\nextend correctly sets up the prototype chain, so subclasses created with extend can be further extended and subclassed as far as you like.\n\n\tvar Note = Backbone.Model.extend({\n\n\t  initialize: function() { ... },\n\n\t  author: function() { ... },\n\n\t  coordinates: function() { ... },\n\n\t  allowedToEdit: function(account) {\n\t    return true;\n\t  }\n\n\t});\n\n\tvar PrivateNote = Note.extend({\n\n\t  allowedToEdit: function(account) {\n\t    return account.owns(this);\n\t  }\n\n\t});\n\n#super\n\nBrief aside on super: JavaScript does not provide a simple way to call super — the function of the same name defined higher on the prototype chain. If you override a core function like set, or save, and you want to invoke the parent object's implementation, you'll have to explicitly call it, along these lines:\n\n\tvar Note = Backbone.Model.extend({\n\t  set: function(attributes, options) {\n\t    Backbone.Model.prototype.set.apply(this, arguments);\n\t    ...\n\t  }\n\t});","children":[{"annotation":"static","name":"dummy","text":"","theRestString":"@param {Object} properties\n@param {Object} classProperties"},{"annotation":"param","type":"{Object}","name":"properties","text":"","theRestString":"@param {Object} classProperties"},{"annotation":"param","type":"{Object}","name":"classProperties","text":"","theRestString":""}],"commentRange":[7123,8340],"fileName":"ALL.js"},"initialize":{"annotation":"method","name":"initialize","text":"Use like this:\n\n\tnew Model([attributes], [options]) \n\nWhen creating an instance of a model, you can pass in the initial values of the attributes, which will be set on the model. If you define an initialize function, it will be invoked when the model is created.\n\n\tnew Book({\n\t  title: \"One Thousand and One Nights\",\n\t  author: \"Scheherazade\"\n\t});\nIn rare cases, if you're looking to get fancy, you may want to override constructor, which allows you to replace the actual constructor function for your model.\n\n\tvar Library = Backbone.Model.extend({\n\t  constructor: function() {\n\t    this.books = new Books();\n\t    Backbone.Model.apply(this, arguments);\n\t  },\n\t  parse: function(data, options) {\n\t    this.books.reset(data.books);\n\t    return data.library;\n\t  }\n\t});\nIf you pass a {collection: ...} as the options, the model gains a collection property that will be used to indicate which collection the model belongs to, and is used to help compute the model's url. The model.collection property is normally created automatically when you first add a model to a collection. Note that the reverse is not true, as passing this option to the constructor will not automatically add the model to the collection. Useful, sometimes.\n\nIf {parse: true} is passed as an option, the attributes will first be converted by parse before being set on the model.","commentRange":[8344,9716],"fileName":"ALL.js"},"get":{"annotation":"method","name":"get","text":"Get the current value of an attribute from the model. For example: note.get(\"title\")","children":[{"annotation":"param","type":"{String}","name":"name","text":"the property name to get","theRestString":"@returns {Any} the value of the property"},{"annotation":"returns","type":"{Any}","name":"the","text":"value of the property","theRestString":""}],"commentRange":[9720,9908],"fileName":"ALL.js"},"set":{"annotation":"method","name":"set","text":"Set a hash of attributes (one or many) on the model. If any of the attributes change the model's state, a \"change\" event will be triggered on the model. Change events for specific attributes are also triggered, and you can bind to those as well, for example: change:title, and change:content. You may also pass individual keys and values.\n\n\tnote.set({title: \"March 20\", content: \"In his eyes she eclipses...\"});\n\n\tbook.set(\"title\", \"A Scandal in Bohemia\");","children":[{"annotation":"param","type":"{String}","name":"name","text":"","theRestString":"@param {Any} value"},{"annotation":"param","type":"{Any}","name":"value","text":"","theRestString":""}],"commentRange":[9910,10426],"fileName":"ALL.js"},"escape":{"annotation":"method","name":"escape","text":"Similar to get, but returns the HTML-escaped version of a model's attribute. If you're interpolating data from the model into HTML, using escape to retrieve attributes will prevent XSS attacks.\n\n\tvar hacker = new Backbone.Model({\n\t  name: \"<script>alert('xss')</script>\"\n\t});\n\n\talert(hacker.escape('name'));","commentRange":[10430,10759],"fileName":"ALL.js"},"has":{"annotation":"method","name":"has","text":"Returns true if the attribute is set to a non-null or non-undefined value.\n\n\tif (note.has(\"title\")) {\n\t  ...\n\t}","children":[{"annotation":"param","type":"{String}","name":"name","text":"","theRestString":""}],"commentRange":[10762,10913],"fileName":"ALL.js"},"unset":{"annotation":"method","name":"unset","text":"Remove an attribute by deleting it from the internal attributes hash. Fires a \"change\" event unless silent is passed as an option.","children":[{"annotation":"param","type":"{String}","name":"attribute","text":"","theRestString":""}],"commentRange":[10916,11091],"fileName":"ALL.js"}}},"Backbone.BackboneView":{"annotation":"class","name":"BackboneView","text":"","commentRange":[14080,14243],"fileName":"ALL.js","module":{"annotation":"module","name":"Backbone","text":"#About\nBackbone.js gives structure to web applications by providing models with key-value binding and custom events, collections with a rich API of enumerable functions, views with declarative event handling, and connects it all to your existing API over a RESTful JSON interface.\n\nThe project is hosted on GitHub, and the annotated source code is available, as well as an online test suite, an example application, a list of tutorials and a long list of real-world projects that use Backbone. Backbone is available for use under the MIT software license.\n\nYou can report bugs and discuss features on the GitHub issues page, on Freenode IRC in the #documentcloud channel, post questions to the Google Group, add pages to the wiki or send tweets to","children":[{"annotation":"documentcloud","name":".","text":"Backbone is an open-source component of DocumentCloud.\n\n#Dependencies\nBackbone's only hard dependency is Underscore.js ( >= 1.5.0). For RESTful persistence, history support via Backbone.Router and DOM manipulation with Backbone.View, include jQuery, and json2.js for older Internet Explorer support. (Mimics of the Underscore and jQuery APIs, such as Lo-Dash and Zepto, will also tend to work, with varying degrees of compatibility.)\n\n#Introduction\n\nWhen working on a web application that involves a lot of JavaScript, one of the first things you learn is to stop tying your data to the DOM. It's all too easy to create JavaScript applications that end up as tangled piles of jQuery selectors and callbacks, all trying frantically to keep data in sync between the HTML UI, your JavaScript logic, and the database on your server. For rich client-side applications, a more structured approach is often helpful.\n\nWith Backbone, you represent your data as Models, which can be created, validated, destroyed, and saved to the server. Whenever a UI action causes an attribute of a model to change, the model triggers a \"change\" event; all the Views that display the model's state can be notified of the change, so that they are able to respond accordingly, re-rendering themselves with the new information. In a finished Backbone app, you don't have to write the glue code that looks into the DOM to find an element with a specific id, and update the HTML manually — when the model changes, the views simply update themselves.\n\nPhilosophically, Backbone is an attempt to discover the minimal set of data-structuring (models and collections) and user interface (views and URLs) primitives that are generally useful when building web applications with JavaScript. In an ecosystem where overarching, decides-everything-for-you frameworks are commonplace, and many libraries require your site to be reorganized to suit their look, feel, and default behavior — Backbone should continue to be a tool that gives you the freedom to design the full experience of your web application.\n\nIf you're new here, and aren't yet quite sure what Backbone is for, start by browsing the list of Backbone-based projects.","theRestString":""}],"commentRange":[11095,14078],"fileName":"ALL.js"},"absoluteName":"Backbone.BackboneView","properties":{"$el":{"annotation":"property","type":"{jQuery}","name":"$el","text":"","commentRange":[14080,14243],"fileName":"ALL.js"},"$":{"annotation":"property","type":"{jQuery}","name":"$","text":"","commentRange":[14080,14243],"fileName":"ALL.js"},"el":{"annotation":"property","type":"{HTMLElement}","name":"el","text":"","commentRange":[14080,14243],"fileName":"ALL.js"}},"methods":{"render":{"annotation":"method","name":"render","text":"","commentRange":[14080,14243],"fileName":"ALL.js"}}},"Backbone.BackboneRouter":{"annotation":"class","name":"BackboneRouter","text":"","commentRange":[14080,14243],"fileName":"ALL.js","module":{"annotation":"module","name":"Backbone","text":"#About\nBackbone.js gives structure to web applications by providing models with key-value binding and custom events, collections with a rich API of enumerable functions, views with declarative event handling, and connects it all to your existing API over a RESTful JSON interface.\n\nThe project is hosted on GitHub, and the annotated source code is available, as well as an online test suite, an example application, a list of tutorials and a long list of real-world projects that use Backbone. Backbone is available for use under the MIT software license.\n\nYou can report bugs and discuss features on the GitHub issues page, on Freenode IRC in the #documentcloud channel, post questions to the Google Group, add pages to the wiki or send tweets to","children":[{"annotation":"documentcloud","name":".","text":"Backbone is an open-source component of DocumentCloud.\n\n#Dependencies\nBackbone's only hard dependency is Underscore.js ( >= 1.5.0). For RESTful persistence, history support via Backbone.Router and DOM manipulation with Backbone.View, include jQuery, and json2.js for older Internet Explorer support. (Mimics of the Underscore and jQuery APIs, such as Lo-Dash and Zepto, will also tend to work, with varying degrees of compatibility.)\n\n#Introduction\n\nWhen working on a web application that involves a lot of JavaScript, one of the first things you learn is to stop tying your data to the DOM. It's all too easy to create JavaScript applications that end up as tangled piles of jQuery selectors and callbacks, all trying frantically to keep data in sync between the HTML UI, your JavaScript logic, and the database on your server. For rich client-side applications, a more structured approach is often helpful.\n\nWith Backbone, you represent your data as Models, which can be created, validated, destroyed, and saved to the server. Whenever a UI action causes an attribute of a model to change, the model triggers a \"change\" event; all the Views that display the model's state can be notified of the change, so that they are able to respond accordingly, re-rendering themselves with the new information. In a finished Backbone app, you don't have to write the glue code that looks into the DOM to find an element with a specific id, and update the HTML manually — when the model changes, the views simply update themselves.\n\nPhilosophically, Backbone is an attempt to discover the minimal set of data-structuring (models and collections) and user interface (views and URLs) primitives that are generally useful when building web applications with JavaScript. In an ecosystem where overarching, decides-everything-for-you frameworks are commonplace, and many libraries require your site to be reorganized to suit their look, feel, and default behavior — Backbone should continue to be a tool that gives you the freedom to design the full experience of your web application.\n\nIf you're new here, and aren't yet quite sure what Backbone is for, start by browsing the list of Backbone-based projects.","theRestString":""}],"commentRange":[11095,14078],"fileName":"ALL.js"},"absoluteName":"Backbone.BackboneRouter"},"javascript.Boolean":{"annotation":"class","name":"Boolean","text":"#Summary\nThe Boolean object is an object wrapper for a boolean value.\n\n#Constructor\n\tnew Boolean(value)\n\n#Description\nThe value passed as the first parameter is converted to a boolean value, if necessary. If value is omitted or is 0, -0, null, false, NaN, undefined, or the empty string (\"\"), the object has an initial value of false. All other values, including any object or the string \"false\", create an object with an initial value of true.\n\nDo not confuse the primitive Boolean values true and false with the true and false values of the Boolean object.\n\nAny object whose value is not undefined or null, including a Boolean object whose value is false, evaluates to true when passed to a conditional statement. For example, the condition in the following if statement evaluates to true:\n\n\tx = new Boolean(false);\n\tif (x) {\n\t  // . . . this code is executed\n\t}\n\tThis behavior does not apply to Boolean primitives. For example, the condition in the following if statement evaluates to false:\n\n\tx = false;\n\tif (x) {\n\t  // . . . this code is not executed\n\t}\nDo not use a Boolean object to convert a non-boolean value to a boolean value. Instead, use Boolean as a function to perform this task:\n\n\tx = Boolean(expression);     // preferred\n\tx = new Boolean(expression); // don't use\n\tIf you specify any object, including a Boolean object whose value is false, as the initial value of a Boolean object, the new Boolean object has a value of true.\n\n\tmyFalse = new Boolean(false);   // initial value of false\n\tg = new Boolean(myFalse);       // initial value of true\n\tmyString = new String(\"Hello\"); // string object\n\ts = new Boolean(myString);      // initial value of true\n\tDo not use a Boolean object in place of a Boolean primitive.\n\n#Properties\nFor properties available on Boolean instances, see Properties of Boolean instances.\n\nBoolean.length\nLength property whose value is 1.\nBoolean.prototype\nRepresents the prototype for the Boolean constructor.\n#Properties inherited from Function:\narity, caller, constructor, length, name\n##Methods\nFor methods available on Boolean instances, see Methods of Boolean instances.\n\nThe global Boolean object contains no methods of its own, however, it does inherit some methods through the prototype chain:\n\n#Methods inherited from Function:\napply, call, toSource, toString\n\n#Boolean instances\nAll Boolean instances inherit from Boolean.prototype. As with all constructors, the prototype object dictates instances' inherited properties and methods.\n\n#Properties\n\nBoolean.prototype.constructor\nReturns the function that created an instance's prototype. This is the Boolean function by default.\nProperties inherited from Object:\n__parent__, __proto__\n#Methods\n\nBoolean.prototype.toSource() \nReturns a string containing the source of the Boolean object; you can use this string to create an equivalent object. Overrides the Object.prototype.toSource() method.\nBoolean.prototype.toString()\nReturns a string of either \"true\" or \"false\" depending upon the value of the object. Overrides the Object.prototype.toString() method.\nBoolean.prototype.valueOf()\nReturns the primitive value of the Boolean object. Overrides the Object.prototype.valueOf() method.\n\n\n#Examples\nCreating Boolean objects with an initial value of false\n\n\tvar bNoParam = new Boolean();\n\tvar bZero = new Boolean(0);\n\tvar bNull = new Boolean(null);\n\tvar bEmptyString = new Boolean(\"\");\n\tvar bfalse = new Boolean(false);\n\tCreating Boolean objects with an initial value of true\n\n\tvar btrue = new Boolean(true);\n\tvar btrueString = new Boolean(\"true\");\n\tvar bfalseString = new Boolean(\"false\");\n\tvar bSuLin = new Boolean(\"Su Lin\");","commentRange":[14245,17913],"fileName":"ALL.js","module":{"annotation":"module","name":"javascript","text":"","commentRange":[14245,17913],"fileName":"ALL.js"},"absoluteName":"javascript.Boolean","methods":{"valueOf":{"annotation":"method","name":"valueOf","text":"#Summary\nThe valueOf() method returns the primitive value of a Boolean object.\n\n#Syntax\n\tbool.valueOf()\n\n#Description\nThe valueOf method of Boolean returns the primitive value of a Boolean object or literal Boolean as a Boolean data type.\n\nThis method is usually called internally by JavaScript and not explicitly in code.\n\n#Examples\n##Example: Using valueOf\n\n\tx = new Boolean();\n\tmyVar = x.valueOf()      // assigns false to myVar","commentRange":[17916,18369],"fileName":"ALL.js"}}},"javascript.Error":{"annotation":"class","name":"Error","text":"#Summary\nThe Error constructor creates an error object. Instances of Error objects are thrown when runtime errors occur. The Error object can also be used as a base objects for user-defined exceptions. See below for standard built-in error types.\n\n#Syntax\n\tnew Error([message[, fileName[,lineNumber]]])\n#Description\nRuntime errors result in new Error objects being created and thrown.\n\nThis page documents the use of the Error object itself and its use as a constructor function. For a list of properties and methods inherited by Error instances, see Error.prototype.\n\n#Error types\n\nBesides the generic Error constructor, there are six other core error constructors in JavaScript. For client-side exceptions, see Exception Handling Statements.\n\n\tEvalError\n\tCreates an instance representing an error that occurs regarding the global function eval().\n\tInternalError \n\tCreates an instance representing an error that occurs when an internal error in the JavaScript engine is thrown. E.g. \"too much recursion\".\n\tRangeError\n\tCreates an instance representing an error that occurs when a numeric variable or parameter is outside of its valid range.\n\tReferenceError\n\tCreates an instance representing an error that occurs when de-referencing an invalid reference.\n\tSyntaxError\n\tCreates an instance representing a syntax error that occurs while parsing code in eval().\n\tTypeError\n\tCreates an instance representing an error that occurs when a variable or parameter is not of a valid type.\n\tURIError\n\tCreates an instance representing an error that occurs when encodeURI() or decodeURl() are passed invalid parameters.\n\n#Properties\nError.prototype\nAllows the addition of properties to Error instances.\n#Methods\nThe global Error object contains no methods of its own, however, it does inherit some methods through the prototype chain.\n\n#Error instances\nAll Error instances and instances of non-generic errors inherit from Error.prototype. As with all constructor functions, you can use the prototype of the constructor to add properties or methods to all instances created with that constructor.\n\n#Properties\n\n##Standard properties\n\nError.prototype.constructor\nSpecifies the function that created an instance's prototype.\n\tError.prototype.message\n\tError message.\n\tError.prototype.name\n\tError name.\n\n\n#Vendor-specific extensions\n\n##Non-standard\nThis feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n##Microsoft\n\n\tError.prototype.description\n\tError description. Similar to message.\n\tError.prototype.number\n\tError number.\n##Mozilla\n\n\tError.prototype.fileName\n\tPath to file that raised this error.\n\tError.prototype.lineNumber\n\tLine number in file that raised this error.\n\tError.prototype.columnNumber\n\tColumn number in line that raised this error.\n\tError.prototype.stack\n\tStack trace.\n\n#Examples\n##Example: Throwing a generic error\n\nUsually you create an Error object with the intention of raising it using the throw keyword. You can handle the error using the try...catch construct:\n\n\ttry {\n\t  throw new Error(\"Whoops!\");\n\t} catch (e) {\n\t  alert(e.name + \": \" + e.message);\n\t}\n\tExample: Handling a specific error\n\n\tYou can choose to handle only specific error types by testing the error type with the error's constructor property or, if you're writing for modern JavaScript engines, instanceof keyword:\n\n\ttry {\n\t  foo.bar();\n\t} catch (e) {\n\t  if (e instanceof EvalError) {\n\t    alert(e.name + \": \" + e.message);\n\t  } else if (e instanceof RangeError) {\n\t    alert(e.name + \": \" + e.message);\n\t  }\n\t  // ... etc\n\t}\n##Custom Error Types\n\nYou might want to define your own error types deriving from Error to be able to throw new MyError() and use instanceof MyError to check the kind of error in the exception handler. The common way to do this is demonstrated below.\n\nNote that the thrown MyError will report incorrect lineNumber and fileName at least in Firefox.\nSee also the \"What's a good way to extend Error in JavaScript?\" discussion on Stackoverflow.\n\n\t// Create a new object, that prototypally inherits from the Error constructor.\n\tfunction MyError(message) {\n\t  this.name = \"MyError\";\n\t  this.message = message || \"Default Message\";\n\t}\n\tMyError.prototype = new Error();\n\tMyError.prototype.constructor = MyError;\n\n\ttry {\n\t  throw new MyError();\n\t} catch (e) {\n\t  console.log(e.name);     // \"MyError\"\n\t  console.log(e.message);  // \"Default Message\"\n\t}\n\n\ttry {\n\t  throw new MyError(\"custom message\");\n\t} catch (e) {\n\t  console.log(e.name);     // \"MyError\"\n\t  console.log(e.message);  // \"custom message\"\n\t}","commentRange":[18371,23105],"fileName":"ALL.js","module":{"annotation":"module","name":"javascript","text":"","commentRange":[18371,23105],"fileName":"ALL.js"},"absoluteName":"javascript.Error","constructors":[{"annotation":"constructor","name":"n","text":"Boolean","children":[{"annotation":"param","type":"{String}","name":"message","text":"Human-readable description of the error","theRestString":"@param {String} fileName The value for the fileName property on the created Error object. Defaults to the name of the file containing the code that called the Error() constructor.\n@param {Number} lineNumber The value for the lineNumber property on the created Error object. Defaults to the line number containing the Error() constructor invocation."},{"annotation":"param","type":"{String}","name":"fileName","text":"The value for the fileName property on the created Error object. Defaults to the name of the file containing the code that called the Error() constructor.","theRestString":"@param {Number} lineNumber The value for the lineNumber property on the created Error object. Defaults to the line number containing the Error() constructor invocation."},{"annotation":"param","type":"{Number}","name":"lineNumber","text":"The value for the lineNumber property on the created Error object. Defaults to the line number containing the Error() constructor invocation.","theRestString":""}],"commentRange":[23107,23547],"fileName":"ALL.js","params":[{"annotation":"param","type":"{String}","name":"message","text":"Human-readable description of the error","theRestString":"@param {String} fileName The value for the fileName property on the created Error object. Defaults to the name of the file containing the code that called the Error() constructor.\n@param {Number} lineNumber The value for the lineNumber property on the created Error object. Defaults to the line number containing the Error() constructor invocation."},{"annotation":"param","type":"{String}","name":"fileName","text":"The value for the fileName property on the created Error object. Defaults to the name of the file containing the code that called the Error() constructor.","theRestString":"@param {Number} lineNumber The value for the lineNumber property on the created Error object. Defaults to the line number containing the Error() constructor invocation."},{"annotation":"param","type":"{Number}","name":"lineNumber","text":"The value for the lineNumber property on the created Error object. Defaults to the line number containing the Error() constructor invocation.","theRestString":""}],"throws":[]}],"properties":{"message":{"annotation":"property","type":"{String}","name":"message","text":"#Summary\nThe message property is a human-readable description of the error.\n\n#Description\nThis property contains a brief description of the error if one is available or has been set. SpiderMonkey makes extensive use of the message property for exceptions. The message property combined with the name property is used by the Error.prototype.toString() method to create a string representation of the Error.\n\nBy default, the message property is an empty string, but this behavior can be overridden for an instance by specifying a message as the first argument to the Error constructor.\n\n#Examples\n##Example: Throwing a custom error\n\n\tvar e = new Error(\"Could not parse input\"); // e.message is \"Could not parse input\"\n\tthrow e;","commentRange":[23551,24310],"fileName":"ALL.js"},"name":{"annotation":"property","type":"{String}","name":"name","text":"#Summary\nThe name property represents a name for the type of error. The initial value is \"Error\".\n\n#Description\nBy default, Error instances are given the name \"Error\". The name property, in addition to the message property, is used by the Error.prototype.toString() method to create a string representation of the error.\n\n#Examples\n##Example: Throwing a custom error\n\n\tvar e = new Error(\"Malformed input\"); // e.name is \"Error\"\n\n\te.name = \"ParseError\"; \n\tthrow e;\n\t// e.toString() would return \"ParseError: Malformed input\"","commentRange":[24316,24870],"fileName":"ALL.js"}}},"javascript.EvalError":{"annotation":"class","name":"EvalError","text":"","children":[{"annotation":"extends","name":"Error","text":"The EvalError object indicates an error regarding the global eval() function.","theRestString":""}],"commentRange":[24875,24990],"fileName":"ALL.js","module":{"annotation":"module","name":"javascript","text":"","commentRange":[18371,23105],"fileName":"ALL.js"},"absoluteName":"javascript.EvalError"},"javascript.RangeError":{"annotation":"class","name":"RangeError","text":"","children":[{"annotation":"extends","name":"Error","text":"The RangeError object indicates an error when a value is not in the set or range of allowed values.\n\nA RangeError is thrown when trying to pass a number as an argument to a function that does not allow a range that includes that number. This can be encountered when to create an array of an illegal length with the Array constructor, or when passing bad values to the numeric methods Number.toExponential(), Number.toFixed() or Number.toPrecision().","theRestString":""}],"commentRange":[24992,25481],"fileName":"ALL.js","module":{"annotation":"module","name":"javascript","text":"","commentRange":[18371,23105],"fileName":"ALL.js"},"absoluteName":"javascript.RangeError"},"javascript.ReferenceError":{"annotation":"class","name":"ReferenceError","text":"","children":[{"annotation":"extends","name":"Error","text":"#Summary\nThe ReferenceError object represents an error when a non-existent variable is referenced.\n\n#Description\nA ReferenceError is thrown when trying to dereference a variable that has not been declared.","theRestString":""}],"commentRange":[25484,25732],"fileName":"ALL.js","module":{"annotation":"module","name":"javascript","text":"","commentRange":[18371,23105],"fileName":"ALL.js"},"absoluteName":"javascript.ReferenceError"},"javascript.SyntaxError":{"annotation":"class","name":"SyntaxError","text":"","children":[{"annotation":"extends","name":"Error","text":"#Summary\nThe SyntaxError object represents an error when trying to interpret syntactically invalid code.\n\n#Description\nA SyntaxError is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.","theRestString":""}],"commentRange":[25736,26050],"fileName":"ALL.js","module":{"annotation":"module","name":"javascript","text":"","commentRange":[18371,23105],"fileName":"ALL.js"},"absoluteName":"javascript.SyntaxError"},"javascript.TypeError":{"annotation":"class","name":"TypeError","text":"","children":[{"annotation":"extends","name":"Error","text":"The TypeError object represents an error when a value is not of the expected type.","theRestString":""}],"commentRange":[26053,26173],"fileName":"ALL.js","module":{"annotation":"module","name":"javascript","text":"","commentRange":[18371,23105],"fileName":"ALL.js"},"absoluteName":"javascript.TypeError"},"javascript.URIError":{"annotation":"class","name":"URIError","text":"","children":[{"annotation":"extends","name":"Error","text":"The URIError object represents an error when a global URI handling function was used in a wrong way.","theRestString":""}],"commentRange":[26175,26313],"fileName":"ALL.js","module":{"annotation":"module","name":"javascript","text":"","commentRange":[18371,23105],"fileName":"ALL.js"},"absoluteName":"javascript.URIError"},"javascript.Function":{"annotation":"class","name":"Function","text":"#Summary\nThe Function.prototype property represents the Function prototype object.\n\n#Description\nFunction objects inherit from Function.prototype.  Function.prototype cannot be modified.","commentRange":[26316,26545],"fileName":"ALL.js","module":{"annotation":"module","name":"javascript","text":"","commentRange":[26316,26545],"fileName":"ALL.js"},"absoluteName":"javascript.Function","properties":{"length":{"annotation":"property","type":"{Number}","name":"length","text":"#Summary\nThe length property specifies the number of arguments expected by the function.\n\n#Description\nlength is a property of a function object, and indicates how many arguments the function expects, i.e. the number of formal parameters. This number does not include the rest parameter. By contrast, arguments.length is local to a function and provides the number of arguments actually passed to the function.\n\nData property of the Function constructor\n\nThe Function constructor is itself a Function object. It's length data property has a value of 1. The property attributes are: Writable: false, Enumerable: false, Configurable: true.\n\nProperty of the Function prototype object\n\nThe length property of the Function prototype object has a value of 0.\n\n#Examples\n\tconsole.log ( Function.length ); //1\n\n\tconsole.log( (function ()        {}).length ); //0\n\tconsole.log( (function (a)       {}).length ); //1\n\tconsole.log( (function (a, b)    {}).length ); //2 etc. \n\tconsole.log( (function (...args) {}).length ); //0, rest parameter is no","commentRange":[26548,27620],"fileName":"ALL.js"},"prototype":{"annotation":"property","type":"{FunctionPrototype}","name":"prototype","text":"#Summary\nThe Function.prototype property represents the Function prototype object.\n\n#Description\nFunction objects inherit from Function.prototype.  Function.prototype cannot be modified.","commentRange":[27623,27855],"fileName":"ALL.js"}},"methods":{"apply":{"annotation":"method","name":"apply","text":"The apply() method calls a function with a given this value and arguments provided as an array (or an array-like object).\n\nNote: While the syntax of this function is almost identical to that of call(), the fundamental difference is that call() accepts an argument list, while apply() accepts a single array of arguments.\n#Syntax\n\tfun.apply(thisArg, [argsArray])\n#Description\nYou can assign a different this object when calling an existing function. this refers to the current object, the calling object. With apply, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.\n\napply is very similar to call(), except for the type of arguments it supports. You can use an arguments array instead of a named set of parameters. With apply, you can use an array literal, for example, fun.apply(this, ['eat', 'bananas']), or an Array object, for example, fun.apply(this, new Array('eat', 'bananas')).\n\nYou can also use arguments for the argsArray parameter. arguments is a local variable of a function. It can be used for all unspecified arguments of the called object. Thus, you do not have to know the arguments of the called object when you use the apply method. You can use arguments to pass all the arguments to the called object. The called object is then responsible for handling the arguments.\n\nSince ECMAScript 5th Edition you can also use any kind of object which is array-like, so in practice this means it's going to have a property length and integer properties in the range [0...length). As an example you can now use a NodeList or a own custom object like {'length': 2, '0': 'eat', '1': 'bananas'}.\n\nNote: Most browsers, including Chrome 14 and Internet Explorer 9, still do not accept array-like objects and will throw an exception.\n#Examples\nUsing apply to chain constructors\n\nYou can use apply to chain constructors for an object, similar to Java. In the following example we will create a global Function method called construct, which will make you able to use an array-like object with a constructor instead of an arguments list.\n\n\tFunction.prototype.construct = function (aArgs) {\n\t    var fConstructor = this, fNewConstr = function () { fConstructor.apply(this, aArgs); };\n\t    fNewConstr.prototype = fConstructor.prototype;\n\t    return new fNewConstr();\n\t};\n\nExample usage:\n\n\tfunction MyConstructor () {\n\t    for (var nProp = 0; nProp < arguments.length; nProp++) {\n\t        this[\"property\" + nProp] = arguments[nProp];\n\t    }\n\t}\n\n\tvar myArray = [4, \"Hello world!\", false];\n\tvar myInstance = MyConstructor.construct(myArray);\n\n\talert(myInstance.property1); // alerts \"Hello world!\"\n\talert(myInstance instanceof MyConstructor); // alerts \"true\"\n\talert(myInstance.constructor); // alerts \"MyConstructor\"\n\nNote: This non-native Function.construct method will not work with some native constructors (like Date, for example). In these cases you have to use the Function.bind method (for example, imagine to have an array like the following, to be used with Date constructor: [2012, 11, 4]; in this case you have to write something like: new (Function.prototype.bind.apply(Date, [null].concat([2012, 11, 4])))() – anyhow this is not the best way to do things and probably should not be used in any production environment).\nUsing apply and built-in functions\n\nClever usage of apply allows you to use built-ins functions for some tasks that otherwise probably would have been written by looping over the array values. As an example here we are going to use Math.max/Math.min to find out the maximum/minimum value in an array.\n\n\t//min/max number in an array \n\tvar numbers = [5, 6, 2, 3, 7];\n\n\t//using Math.min/Math.max apply \n\tvar max = Math.max.apply(null, numbers); // This about equal to Math.max(numbers[0], ...) or Math.max(5, 6, ..) \n\tvar min = Math.min.apply(null, numbers);\n\n\t/ vs. simple loop based algorithm \n\tmax = -Infinity, min = +Infinity;\n\n\tfor (var i = 0; i < numbers.length; i++) {\n\t  if (numbers[i] > max)\n\t    max = numbers[i];\n\t  if (numbers[i] < min) \n\t    min = numbers[i];\n\t}\n\nBut beware: in using apply this way, you run the risk of exceeding the JavaScript engine's argument length limit. The consequences of applying a function with too many arguments (think more than tens of thousands of arguments) vary across engines (JavaScriptCore has hard-coded argument limit of 65536), because the limit (indeed even the nature of any excessively-large-stack behavior) is unspecified. Some engines will throw an exception. More perniciously, others will arbitrarily limit the number of arguments actually passed to the applied function. (To illustrate this latter case: if such an engine had a limit of four arguments [actual limits are of course significantly higher], it would be as if the arguments 5, 6, 2, 3 had been passed to apply in the examples above, rather than the full array.) If your value array might grow into the tens of thousands, use a hybrid strategy: apply your function to chunks of the array at a time:\n\n\tfunction minOfArray(arr) {\n\t  var min = Infinity;\n\t  var QUANTUM = 32768;\n\n\t  for (var i = 0, len = arr.length; i < len; i += QUANTUM) {\n\t    var submin = Math.min.apply(null, arr.slice(i, Math.min(i + QUANTUM, len)));\n\t    min = Math.min(submin, min);\n\t  }\n\n\t  return min;\n\t}\n\n\tvar min = minOfArray([5, 6, 2, 3, 7]);\nUsing apply in \"monkey-patching\"\n\nApply can be the best way to monkey-patch a builtin function of Firefox, or JS libraries. Given someobject.foo function, you can modify the function in a somewhat hacky way, like so:\n\n\tvar originalfoo = someobject.foo;\n\tsomeobject.foo = function() {\n\t  //Do stuff before calling function\n\t  console.log(arguments);\n\t  //Call the function as it would have been called normally:\n\t  originalfoo.apply(this,arguments);\n\t  //Run stuff after, here.\n\t}\n\nThis method is especially handy where you want to debug events, or interface with something that has no API like the various .on([event]... events, such as those usable on the Devtools Inspector).","children":[{"annotation":"param","type":"{Object}","name":"thisArg","text":"The value of this provided for the call to fun. Note that this may not be the actual value seen by the method: if the method is a function in non-strict mode code, null and undefined will be replaced with the global object, and primitive values will be boxed.","theRestString":"@param {Array} argsArray An array-like object, specifying the arguments with which fun should be called, or null or undefined if no arguments should be provided to the function. Starting with ECMAScript 5 these arguments can be a generic array-like object instead of an array. See below for browser compatibility information.\n\n@returns the result of evaluating this function with given context and parameters"},{"annotation":"param","type":"{Array}","name":"argsArray","text":"An array-like object, specifying the arguments with which fun should be called, or null or undefined if no arguments should be provided to the function. Starting with ECMAScript 5 these arguments can be a generic array-like object instead of an array. See below for browser compatibility information.","theRestString":"@returns the result of evaluating this function with given context and parameters"},{"annotation":"returns","name":"the","text":"result of evaluating this function with given context and parameters","theRestString":""}],"commentRange":[27859,34589],"fileName":"ALL.js"},"bind":{"annotation":"method","name":"bind","text":"#Summary\nThe bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.\n\n#Syntax\n\tfun.bind(thisArg[, arg1[, arg2[, ...]]])\n\n#Description\nThe bind() function creates a new function (a bound function) with the same function body (internal call property in ECMAScript 5 terms) as the function it is being called on (the bound function's target function) with the this value bound to the first argument of bind(), which cannot be overridden. bind() also accepts leading default arguments to provide to the target function when the bound function is called. A bound function may also be constructed using the new operator: doing so acts as though the target function had instead been constructed. The provided this value is ignored, while prepended arguments are provided to the emulated function.\n\n#Examples\nCreating a bound function\n\nThe simplest use of bind() is to make a function that, no matter how it is called, is called with a particular this value. A common mistake for new JavaScript programmers is to extract a method from an object, then to later call that function and expect it to use the original object as its this (e.g. by using that method in callback-based code). Without special care, however, the original object is usually lost. Creating a bound function from the function, using the original object, neatly solves this problem:\n\n\tthis.x = 9; \n\tvar module = {\n\t  x: 81,\n\t  getX: function() { return this.x; }\n\t};\n\n\tmodule.getX(); // 81\n\n\tvar getX = module.getX;\n\tgetX(); // 9, because in this case, \"this\" refers to the global object\n\n\t// create a new function with 'this' bound to module\n\tvar boundGetX = getX.bind(module);\n\tboundGetX(); // 81\n\n##Partial Functions\n\nThe next simplest use of bind() is to make a function with pre-specified initial arguments. These arguments (if any) follow the provided this value and are then inserted at the start of the arguments passed to the target function, followed by the arguments passed to the bound function, whenever the bound function is called.\n\n\tfunction list() {\n\t  return Array.prototype.slice.call(arguments);\n\t}\n\n\tvar list1 = list(1, 2, 3); // [1, 2, 3]\n\n\t//  Create a function with a preset leading argument\n\tvar leadingThirtysevenList = list.bind(undefined, 37);\n\n\tvar list2 = leadingThirtysevenList(); // [37]\n\tvar list3 = leadingThirtysevenList(1, 2, 3); // [37, 1, 2, 3]\n\n##With setTimeout\n\nBy default within window.setTimeout(), the this keyword will be set to the window (or global) object. When working with class methods that require this to refer to class instances, you may explicitly bind this to the callback function, in order to maintain the instance.\n\n\tfunction LateBloomer() {\n\t  this.petalCount = Math.ceil( Math.random() * 12 ) + 1;\n\t}\n\n\t// declare bloom after a delay of 1 second\n\tLateBloomer.prototype.bloom = function() {\n\t  window.setTimeout( this.declare.bind( this ), 1000 );\n\t};\n\n\tLateBloomer.prototype.declare = function() {\n\t  console.log('I am a beautiful flower with ' + \n\t    this.petalCount + ' petals!');\n\t};\n\n##Bound functions used as constructors\n\nWarning: This section demonstrates JavaScript capabilities and documents some edge cases of the bind() method. The methods shown below are not the best way to do things and probably should not be used in any production environment.\nBound functions are automatically suitable for use with the new operator to construct new instances created by the target function. When a bound function is used to construct a value, the provided this is ignored. However, provided arguments are still prepended to the constructor call:\n\n\tfunction Point(x, y) {\n\t  this.x = x;\n\t  this.y = y;\n\t}\n\n\tPoint.prototype.toString = function() { \n\t  return this.x + \",\" + this.y; \n\t};\n\n\tvar p = new Point(1, 2);\n\tp.toString(); // \"1,2\"\n\n\n\tvar emptyObj = {};\n\tvar YAxisPoint = Point.bind(emptyObj, 0);\n\t// not supported in the polyfill below, works fine with native bind:\n\tvar YAxisPoint = Point.bind(null,0 );\n\n\tvar axisPoint = new YAxisPoint(5);\n\taxisPoint.toString(); //  \"0,5\"\n\n\taxisPoint instanceof Point; // true\n\taxisPoint instanceof YAxisPoint; // true\n\tnew Point(17, 42) instanceof YAxisPoint; // false\nNote that you need do nothing special to create a bound function for use with new. The corollary is that you need do nothing special to create a bound function to be called plainly, even if you would rather require the bound function to only be called using new.\n\n\t// Example can be run directly in your JavaScript console\n\t// ...continuing from above\n\n\t// Can still be called as a normal function \n\t// (although usually this is undesired)\n\tYAxisPoint(13);\n\n\temptyObj.x + \",\" + emptyObj.y;\n\t// >  \"0,13\"\nIf you wish to support use of a bound function only using new, or only by calling it, the target function must enforce that restriction.\n\n##Creating shortcuts\n\nbind() is also helpful in cases where you want to create a shortcut to a function which requires a specific this value.\n\nTake Array.prototype.slice, for example, which you want to use for converting an array-like object to a real array. You could create a shortcut like this:\n\n\tvar slice = Array.prototype.slice;\n\n\t// ...\n\n\tslice.call(arguments);\n\tWith bind(), this can be simplified. In the following piece of code, slice is a bound function to the call() function of Function.prototype, with the this value set to the slice() function of Array.prototype. This means that additional call() calls can be eliminated:\n\n\t// same as \"slice\" in the previous example\n\tvar unboundSlice = Array.prototype.slice;\n\tvar slice = Function.prototype.call.bind(unboundSlice);\n\n\t// ...\n\n\tslice(arguments);\n#Polyfill\nThe bind function is a recent addition to ECMA-262, 5th edition; as such it may not be present in all browsers. You can partially work around this by inserting the following code at the beginning of your scripts, allowing use of much of the functionality of bind() in implementations that do not natively support it.\n\n\tif (!Function.prototype.bind) {\n\t  Function.prototype.bind = function (oThis) {\n\t    if (typeof this !== \"function\") {\n\t      // closest thing possible to the ECMAScript 5\n\t      // internal IsCallable function\n\t      throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n\t    }\n\n\t    var aArgs = Array.prototype.slice.call(arguments, 1), \n\t        fToBind = this, \n\t        fNOP = function () {},\n\t        fBound = function () {\n\t          return fToBind.apply(this instanceof fNOP && oThis\n\t                 ? this\n\t                 : oThis,\n\t                 aArgs.concat(Array.prototype.slice.call(arguments)));\n\t        };\n\n\t    fNOP.prototype = this.prototype;\n\t    fBound.prototype = new fNOP();\n\n\t    return fBound;\n\t  };\n\t}\n\nSome of the many differences (there may well be others, as this list does not seriously attempt to be exhaustive) between this algorithm and the specified algorithm are:\n\nThe partial implementation relies Array.prototype.slice, Array.prototype.concat, Function.prototype.call and Function.prototype.apply, built-in methods to have their original values.\nThe partial implementation creates functions that do not have immutable \"poison pill\" caller and arguments properties that throw a TypeError upon get, set, or deletion. (This could be added if the implementation supports Object.defineProperty, or partially implemented [without throw-on-delete behavior] if the implementation supports the __defineGetter__ and __defineSetter__ extensions.)\nThe partial implementation creates functions that have a prototype property. (Proper bound functions have none.)\nThe partial implementation creates bound functions whose length property does not agree with that mandated by ECMA-262: it creates functions with length 0, while a full implementation, depending on the length of the target function and the number of pre-specified arguments, may return a non-zero length.\nIf you choose to use this partial implementation, you must not rely on those cases where behavior deviates from ECMA-262, 5th edition! With some care, however (and perhaps with additional modification to suit specific needs), this partial implementation may be a reasonable bridge to the time when bind() is widely implemented according to the specification.","children":[{"annotation":"param","name":"thisArg","text":"The value to be passed as the this parameter to the target function when the bound function is called. The value is ignored if the bound function is constructed using the new operator.","theRestString":"@param args Arguments to prepend to arguments provided to the bound function when invoking the target function."},{"annotation":"param","name":"args","text":"Arguments to prepend to arguments provided to the bound function when invoking the target function.","theRestString":""}],"commentRange":[34597,43281],"fileName":"ALL.js"},"call":{"annotation":"method","name":"call","text":"#Summary\nThe call() method calls a function with a given this value and arguments provided individually.\n\nNOTE: While the syntax of this function is almost identical to that of apply(), the fundamental difference is that call() accepts an argument list, while apply() accepts a single array of arguments.\n#Syntax\n\tfun.call(thisArg[, arg1[, arg2[, ...]]])\n\n#Description\nYou can assign a different this object when calling an existing function. this refers to the current object, the calling object.\n\nWith call, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.\n\n#Examples\n##Using call to chain constructors for an object\n\nYou can use call to chain constructors for an object, similar to Java. In the following example, the constructor for the Product object is defined with two parameters, name and price. Two other functions Food and Toy invoke Product passing this and name and price. Product initializes the properties name and price, both specialized functions define the category.\n\n\tfunction Product(name, price) {\n\t  this.name = name;\n\t  this.price = price;\n\n\t  if (price < 0) {\n\t    throw RangeError('Cannot create product ' +\n\t                      this.name + ' with a negative price');\n\t  }\n\n\t  return this;\n\t}\n\n\tfunction Food(name, price) {\n\t  Product.call(this, name, price);\n\t  this.category = 'food';\n\t}\n\n\tFood.prototype = Object.create(Product.prototype);\n\n\tfunction Toy(name, price) {\n\t  Product.call(this, name, price);\n\t  this.category = 'toy';\n\t}\n\n\tToy.prototype = Object.create(Product.prototype);\n\n\tvar cheese = new Food('feta', 5);\n\tvar fun = new Toy('robot', 40);\n \n##Using call to invoke an anonymous function\n\nIn this purely constructed example, we create anonymous function and use call to invoke it on every object in an array. The main purpose of the anonymous function here is to add a print function to every object, which is able to print the right index of the object in the array. Passing the object as this value was not strictly necessary, but is done for explanatory purpose.\n\n\tvar animals = [\n\t  {species: 'Lion', name: 'King'},\n\t  {species: 'Whale', name: 'Fail'}\n\t];\n\n\tfor (var i = 0; i < animals.length; i++) {\n\t  (function (i) { \n\t    this.print = function () { \n\t      console.log('#' + i  + ' ' + this.species \n\t                  + ': ' + this.name); \n\t    } \n\t    this.print();\n\t  }).call(animals[i], i);\n\t}","children":[{"annotation":"param","name":"thisArg","text":"The value of this provided for the call to fun. Note that this may not be the actual value seen by the method: if the method is a function in non-strict mode code, null and undefined will be replaced with the global object, and primitive values will be boxed.","theRestString":"@param arg1,arg2,... Arguments for the object."},{"annotation":"param","name":"arg1","text":",arg2,... Arguments for the object.","theRestString":""}],"commentRange":[43288,46057],"fileName":"ALL.js"},"toString":{"annotation":"method","name":"toString","text":"#Summary\nThe toString() method returns a string representing the source code of the function.\n\n#Syntax\n\tfunction.toString(indentation)\n#Description\nThe Function object overrides the toString method inherited from Object; it does not inherit Object.prototype.toString. For Function objects, the toString method returns a string representation of the object in the form of a function declaration. That is, toString decompiles the function, and the string returned includes the function keyword, the argument list, curly braces, and the source of the function body.\n\nJavaScript calls the toString method automatically when a Function is to be represented as a text value, e.g. when a function is concatenated with a string.","children":[{"annotation":"return","type":"{String}","text":"","theRestString":""}],"commentRange":[46062,46823],"fileName":"ALL.js"}}},"javascript.Number":{"annotation":"class","name":"Number","text":"#Summary\nThe Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor.\n\n#Constructor\n\tnew Number(value);\n\n#Description\nThe primary uses for the Number object are:\n\nIf the argument cannot be converted into a number, it returns NaN.\nIn a non-constructor context (i.e., without the new operator, Number can be used to perform a type conversion.\n\n\n#Examples\n##Example: Using the Number object to assign values to numeric variables\n\nThe following example uses the Number object's properties to assign values to several numeric variables:\n\n\tvar biggestNum = Number.MAX_VALUE;\n\tvar smallestNum = Number.MIN_VALUE;\n\tvar infiniteNum = Number.POSITIVE_INFINITY;\n\tvar negInfiniteNum = Number.NEGATIVE_INFINITY;\n\tvar notANum = Number.NaN;\n##Example: Integer range for Number\n\nThe following example shows minimum and maximum integer values that can be represented as Number object (for details, refer to EcmaScript standard, chapter 8.5 The Number Type):\n\n\tvar biggestInt = 9007199254740992;\n\tvar smallestInt = -9007199254740992;\n\nWhen parsing data that has been serialized to JSON, integer values falling out of this range can be expected to become corrupted when JSON parser coerces them to Number type. Using String instead is a possible workaround.\n\n##Example: Using Number to convert a Date object\n\nThe following example converts the Date object to a numerical value using Number as a function:\n\n\tvar d = new Date(\"December 17, 1995 03:24:00\");\n\tprint(Number(d));\n\nThis displays \"819199440000\".","commentRange":[46825,48442],"fileName":"ALL.js","module":{"annotation":"module","name":"javascript","text":"","commentRange":[46825,48442],"fileName":"ALL.js"},"absoluteName":"javascript.Number","constructors":[{"annotation":"constructor","name":"n","text":"Number","children":[{"annotation":"param","type":"{Any}","name":"value","text":"The numeric value of the object being created.","theRestString":""}],"commentRange":[48444,48534],"fileName":"ALL.js","params":[{"annotation":"param","type":"{Any}","name":"value","text":"The numeric value of the object being created.","theRestString":""}],"throws":[]}],"properties":{"MAX_VALUE":{"annotation":"property","type":"{Number}","name":"MAX_VALUE","text":"#Summary\nThe Number.MAX_VALUE property represents the maximum numeric value representable in JavaScript.\n\n#Description\nThe MAX_VALUE property has a value of approximately 1.79E+308. Values larger than MAX_VALUE are represented as \"Infinity\".\n\nBecause MAX_VALUE is a static property of Number, you always use it as Number.MAX_VALUE, rather than as a property of a Number object you created.\n\n#Examples\n##Example: Using MAX_VALUE\n\n\tThe following code multiplies two numeric values. If the result is less than or equal to MAX_VALUE, the func1 function is called; otherwise, the func2 function is called.\n\n\tif (num1 * num2 <= Number.MAX_VALUE) {\n\t   func1();\n\t} else {\n\t   func2();\n\t}","children":[{"annotation":"static","name":"dummy","text":"","theRestString":""}],"commentRange":[48541,49267],"fileName":"ALL.js"},"MIN_VALUE":{"annotation":"property","type":"{Number}","name":"MIN_VALUE","text":"#Summary\nThe Number.MIN_VALUE property represents the smallest positive numeric value representable in JavaScript.\n\n#Description\nThe MIN_VALUE property is the number closest to 0, not the most negative number, that JavaScript can represent.\n\nMIN_VALUE has a value of approximately 5e-324. Values smaller than MIN_VALUE (\"underflow values\") are converted to 0.\n\nBecause MIN_VALUE is a static property of Number, you always use it as Number.MIN_VALUE, rather than as a property of a Number object you created.\n\n#Examples\n##Example: Using MIN_VALUE\n\nThe following code divides two numeric values. If the result is greater than or equal to MIN_VALUE, the func1 function is called; otherwise, the func2 function is called.\n\n\tif (num1 / num2 >= Number.MIN_VALUE) {\n\t    func1();\n\t} else {\n\t    func2();\n\t}","children":[{"annotation":"static","name":"dummy","text":"","theRestString":""}],"commentRange":[49271,50115],"fileName":"ALL.js"},"NEGATIVE_INFINITY":{"annotation":"property","type":"{Number}","name":"NEGATIVE_INFINITY","text":"#Summary\nThe Number.NEGATIVE_INFINITY property represents the negative Infinity value.\n\nYou do not have to create a Number object to access this static property (use Number.NEGATIVE_INFINITY).\n\n#Description\nThe value of Number.NEGATIVE_INFINITY is the same as the negative value of the global object's Infinity property.\n\nThis value behaves slightly differently than mathematical infinity:\n\n* Any positive value, including POSITIVE_INFINITY, multiplied by NEGATIVE_INFINITY is NEGATIVE_INFINITY.\n* Any negative value, including NEGATIVE_INFINITY, multiplied by NEGATIVE_INFINITY is POSITIVE_INFINITY.\n* Zero multiplied by NEGATIVE_INFINITY is NaN.\n* NaN multiplied by NEGATIVE_INFINITY is NaN.\n* NEGATIVE_INFINITY, divided by any negative value except NEGATIVE_INFINITY, is POSITIVE_INFINITY.\n* NEGATIVE_INFINITY, divided by any positive value except POSITIVE_INFINITY, is NEGATIVE_INFINITY.\n* NEGATIVE_INFINITY, divided by either NEGATIVE_INFINITY or POSITIVE_INFINITY, is NaN.\n* Any number divided by NEGATIVE_INFINITY is zero.\n\nYou might use the Number.NEGATIVE_INFINITY property to indicate an error condition that returns a finite number in case of success. Note, however, that isFinite would be more appropriate in such a case.\n\n#Example\nIn the following example, the variable smallNumber is assigned a value that is smaller than the minimum value. When the if statement executes, smallNumber has the value \"-Infinity\", so smallNumber is set to a more manageable value before continuing.\n\n\tvar smallNumber = (-Number.MAX_VALUE) * 2\n\n\tif (smallNumber == Number.NEGATIVE_INFINITY) {\n\t smallNumber = returnFinite();\n\t}","children":[{"annotation":"static","name":"dummy","text":"","theRestString":""}],"commentRange":[50120,51793],"fileName":"ALL.js"},"NaN":{"annotation":"property","type":"{Number}","name":"NaN","text":"#Summary\nThe Number.NaN property represents Not-A-Number. Equivalent of NaN.\n\nYou do not have to create a Number object to access this static property (use Number.NaN).","children":[{"annotation":"static","name":"dummy","text":"","theRestString":""}],"commentRange":[51797,52002],"fileName":"ALL.js"},"POSITIVE_INFINITY":{"annotation":"property","type":"{Number}","name":"POSITIVE_INFINITY","text":"#Summary\nThe Number.POSITIVE_INFINITY property represents the positive Infinity value.\n\nYou do not have to create a Number object to access this static property (use Number.POSITIVE_INFINITY).\n\n#Description\nThe value of Number.POSITIVE_INFINITY is the same as the value of the global object's Infinity property.\n\nThis value behaves slightly differently than mathematical infinity:\n\n* Any positive value, including POSITIVE_INFINITY, multiplied by POSITIVE_INFINITY is POSITIVE_INFINITY.\n* Any negative value, including NEGATIVE_INFINITY, multiplied by POSITIVE_INFINITY is NEGATIVE_INFINITY.\n* Zero multiplied by POSITIVE_INFINITY is NaN.\n* NaN multiplied by POSITIVE_INFINITY is NaN.\n* POSITIVE_INFINITY, divided by any negative value except NEGATIVE_INFINITY, is NEGATIVE_INFINITY.\n* POSITIVE_INFINITY, divided by any positive value except POSITIVE_INFINITY, is POSITIVE_INFINITY.\n* POSITIVE_INFINITY, divided by either NEGATIVE_INFINITY or POSITIVE_INFINITY, is NaN.\n* Any number divided by POSITIVE_INFINITY is Zero.\n* You might use the Number.POSITIVE_INFINITY property to indicate an error condition that returns a finite number in case of success. Note, however, that isFinite would be more appropriate in such a case.\n\n#Example\nIn the following example, the variable bigNumber is assigned a value that is larger than the maximum value. When the if statement executes, bigNumber has the value \"Infinity\", so bigNumber is set to a more manageable value before continuing.\n\n\tvar bigNumber = Number.MAX_VALUE * 2\n\tif (bigNumber == Number.POSITIVE_INFINITY) {\n\t bigNumber = returnFinite();\n\t}","children":[{"annotation":"static","name":"dummy","text":"","theRestString":""}],"commentRange":[52006,53654],"fileName":"ALL.js"}}},"javascript.Object":{"annotation":"class","name":"Object","text":"Adapted from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n#Description\nThe Object constructor creates an object wrapper for the given value. If the value is null or undefined, it will create and return an empty object, otherwise, it will return an object of a Type that corresponds to the given value. If the value is an object already, it will return the value.\n\nWhen called in a non-constructor context, Object behaves identically to new Object().\n\n#Object instances and Object prototype object\nAll objects in JavaScript are descended from Object; all objects inherit methods and properties from Object.prototype, although they may be overridden. For example, other constructors' prototypes override the constructor property and provide their own toString methods. Changes to the Object prototype object are propagated to all objects unless the properties and methods subject to those changes are overridden further along the prototype chain.\n\n#Examples\n##Example: Using Object given undefined and null types\n\nThe following examples store an empty Object object in o:\n\n\tvar o = new Object();\n\tvar o = new Object(undefined);\n\tvar o = new Object(null);\n##Example: Using Object to create Boolean objects\n\nThe following examples store Boolean objects in o:\n\n\t// equivalent to o = new Boolean(true);\n\tvar o = new Object(true);\n\t// equivalent to o = new Boolean(false);\n\tvar o = new Object(Boolean());","commentRange":[53656,55188],"fileName":"ALL.js","module":{"annotation":"module","name":"javascript","text":"","commentRange":[53656,55188],"fileName":"ALL.js"},"absoluteName":"javascript.Object","properties":{"prototype":{"annotation":"property","type":"{ObjectPrototype}","name":"prototype","text":"","children":[{"annotation":"static","name":"dummy","text":"","theRestString":""}],"commentRange":[53656,55188],"fileName":"ALL.js"}},"constructors":[{"annotation":"constructor","name":"n","text":"bla bla\n\n\t// Object initialiser or literal \n\t{ [ nameValuePair1 [, nameValuePair2 [, ...nameValuePairN] ] ] }  \n\t// Called as a constructor \n\tnew Object( [ value ] )","children":[{"annotation":"param","name":"nameValuePair1","text":",nameValuePair2,...nameValuePairN Pairs of names (strings) and values (any value) where the name is separated from the value by a colon.","theRestString":"@param value Any value."},{"annotation":"param","name":"value","text":"Any value.","theRestString":""}],"commentRange":[55190,55557],"fileName":"ALL.js","params":[{"annotation":"param","name":"nameValuePair1","text":",nameValuePair2,...nameValuePairN Pairs of names (strings) and values (any value) where the name is separated from the value by a colon.","theRestString":"@param value Any value."},{"annotation":"param","name":"value","text":"Any value.","theRestString":""}],"throws":[]}],"methods":{"__defineGetter__":{"annotation":"method","name":"__defineGetter__","text":"()  \nAssociates a function with a property that, when accessed, executes that function and returns its return value.","commentRange":[55573,55719],"fileName":"ALL.js"},"hasOwnProperty":{"annotation":"method","name":"hasOwnProperty","text":"#Summary\nThe hasOwnProperty() method returns a boolean indicating whether the object has the specified property.\n\n#Syntax\n\tobj.hasOwnProperty(prop)\n\n#Description\nEvery object descended from Object inherits the hasOwnProperty method. This method can be used to determine whether an object has the specified property as a direct property of that object; unlike the in operator, this method does not check down the object's prototype chain.\n\n#Examples\n##Example: Using hasOwnProperty to test for a property's existence\n\nThe following example determines whether the o object contains a property named prop:\n\n\to = new Object();\n\to.prop = 'exists';\n\n\tfunction changeO() {\n\t  o.newprop = o.prop;\n\t  delete o.prop;\n\t}\n\n\to.hasOwnProperty('prop');   // returns true\n\tchangeO();\n\to.hasOwnProperty('prop');   // returns false\n\tExample: Direct versus inherited properties\n\n\tThe following example differentiates between direct properties and properties inherited through the prototype chain:\n\n\to = new Object();\n\to.prop = 'exists';\n\to.hasOwnProperty('prop');             // returns true\n\to.hasOwnProperty('toString');         // returns false\n\to.hasOwnProperty('hasOwnProperty');   // returns false\n##Example: Iterating over the properties of an object\n\nThe following example shows how to iterate over the properties of an object without executing on inherit properties. Note that the for...in loop is already only iterating enumerable items, so one should not assume based on the lack of non-enumerable properties shown in the loop that hasOwnProperty itself is confined strictly to enumerable items (as with Object.getOwnPropertyNames()).\n\n\tvar buz = {\n\t  fog: 'stack'\n\t};\n\n\tfor (var name in buz) {\n\t  if (buz.hasOwnProperty(name)) {\n\t    alert('this is fog (' + name + ') for sure. Value: ' + buz[name]);\n\t  }\n\t  else {\n\t    alert(name); // toString or something else\n\t  }\n\t}\n##Example: hasOwnProperty as a property\n\nJavaScript does not protect the property name hasOwnProperty; thus, if the possibility exists that an object might have a property with this name, it is necessary to use an external hasOwnProperty to get correct results:\n\n\tvar foo = {\n\t  hasOwnProperty: function() {\n\t    return false;\n\t  },\n\t  bar: 'Here be dragons'\n\t};\n\n\tfoo.hasOwnProperty('bar'); // always returns false\n\n\t// Use another Object's hasOwnProperty and call it with 'this' set to foo\n\t({}).hasOwnProperty.call(foo, 'bar'); // true\n\n\t// It's also possible to use the hasOwnProperty property from the Object prototype for this purpose\n\tObject.prototype.hasOwnProperty.call(foo, 'bar'); // true\nNote that in the last case there are no newly created objects.","children":[{"annotation":"static","name":"dummy","text":"","theRestString":"@param {String}prop The name of the property to test."},{"annotation":"param","type":"{String}","name":"prop","text":"The name of the property to test.","theRestString":""}],"commentRange":[102449,105171],"fileName":"ALL.js"},"isPrototypeOf":{"annotation":"method","name":"isPrototypeOf","text":"#Summary\nThe isPrototypeOf() method tests for an object in another object's prototype chain.\n\nNote: isPrototypeOf differs from the instanceof operator. In the expression \"object instanceof AFunction\", the object prototype chain is checked against AFunction.prototype, not against AFunction itself.\n#Syntax\n\tprototypeObj.isPrototypeOf(obj)\n#Description\nThe isPrototypeOf method allows you to check whether or not an object exists within another object's prototype chain.\n\nFor example, consider the following prototype chain:\n\n\tfunction Fee() {\n\t  // ...\n\t}\n\n\tfunction Fi() {\n\t  // ...\n\t}\n\tFi.prototype = new Fee();\n\n\tfunction Fo() {\n\t  // ...\n\t}\n\tFo.prototype = new Fi();\n\n\tfunction Fum() {\n\t  // ...\n\t}\n\tFum.prototype = new Fo();\nLater on down the road, if you instantiate Fum and need to check if Fi's prototype exists within the Fum prototype chain, you could do this:\n\n\tvar fum = new Fum();\n\t// ...\n\n\tif (Fi.prototype.isPrototypeOf(fum)) {\n\t  // do something safe\n\t}\nThis, along with the instanceof operator particularly comes in handy if you have code that can only function when dealing with objects descended from a specific prototype chain, e.g., to guarantee that certain methods or properties will be present on that object.","children":[{"annotation":"static","name":"dummy","text":"","theRestString":"@param {Object} prototypeObj An object to be tested against each link in the prototype chain of the object argument.\n@param {Object}object The object whose prototype chain will be searched.\n@returns {boolean}"},{"annotation":"param","type":"{Object}","name":"prototypeObj","text":"An object to be tested against each link in the prototype chain of the object argument.","theRestString":"@param {Object}object The object whose prototype chain will be searched.\n@returns {boolean}"},{"annotation":"param","type":"{Object}","name":"object","text":"The object whose prototype chain will be searched.","theRestString":"@returns {boolean}"},{"annotation":"returns","type":"{boolean}","text":"","theRestString":""}],"commentRange":[105179,106663],"fileName":"ALL.js"},"propertyIsEnumerable":{"annotation":"method","name":"propertyIsEnumerable","text":"#Summary\nThe propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable.\n#Syntax\n\tobj.propertyIsEnumerable(prop)\n\n#Description\nEvery object has a propertyIsEnumerable method. This method can determine whether the specified property in an object can be enumerated by a for...in loop, with the exception of properties inherited through the prototype chain. If the object does not have the specified property, this method returns false.\n\n#Examples\n##Example: A basic use of propertyIsEnumerable\n\nThe following example shows the use of propertyIsEnumerable on objects and arrays:\n\n\tvar o = {};\n\tvar a = [];\n\to.prop = 'is enumerable';\n\ta[0] = 'is enumerable';\n\n\to.propertyIsEnumerable('prop');   // returns true\n\ta.propertyIsEnumerable(0);        // returns true\n##Example: User-defined versus built-in objects\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n\tvar a = ['is enumerable'];\n\n\ta.propertyIsEnumerable(0);          // returns true\n\ta.propertyIsEnumerable('length');   // returns false\n\n\tMath.propertyIsEnumerable('random');   // returns false\n\tthis.propertyIsEnumerable('Math');     // returns false\n##Example: Direct versus inherited properties\n\n\tvar a = [];\n\ta.propertyIsEnumerable('constructor');         // returns false\n\n\tfunction firstConstructor() {\n\t  this.property = 'is not enumerable';\n\t}\n\n\tfirstConstructor.prototype.firstMethod = function() {};\n\n\tfunction secondConstructor() {\n\t  this.method = function method() { return 'is enumerable'; };\n\t}\n\n\tsecondConstructor.prototype = new firstConstructor;\n\tsecondConstructor.prototype.constructor = secondConstructor;\n\n\tvar o = new secondConstructor();\n\to.arbitraryProperty = 'is enumerable';\n\n\to.propertyIsEnumerable('arbitraryProperty');   // returns true\n\to.propertyIsEnumerable('method');              // returns true\n\to.propertyIsEnumerable('property');            // returns false\n\n\to.property = 'is enumerable';\n\n\to.propertyIsEnumerable('property');            // returns true\n\n\t// These return false as they are on the prototype which \n\t// propertyIsEnumerable does not consider (even though the last two\n\t// are iteratable with for-in)\n\to.propertyIsEnumerable('prototype');   // returns false (as of JS 1.8.1/FF3.6)\n\to.propertyIsEnumerable('constructor'); // returns false\n\to.propertyIsEnumerable('firstMethod'); // returns false","children":[{"annotation":"param","type":"{String}","name":"prop","text":"The name of the property to test.","theRestString":"@return {boolean}"},{"annotation":"return","type":"{boolean}","text":"","theRestString":""}],"commentRange":[106670,109177],"fileName":"ALL.js"},"toLocaleString":{"annotation":"method","name":"toLocaleString","text":"#Summary\nThe toLocaleString() method returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.\n\n#Syntax\n\tobj.toLocaleString();\n#Description\nObject's toLocaleString returns the result of calling toString().\n\nThis function is provided to give objects a generic toLocaleString method, even though not all may use it. See the list below.\n\nObjects overriding toLocaleString\n\n\tArray: Array.prototype.toLocaleString()\n\tNumber: Number.prototype.toLocaleString()\n\tDate: Date.prototype.toLocaleString()","commentRange":[109181,109772],"fileName":"ALL.js"},"toString":{"annotation":"method","name":"toString","text":"#Summary\nThe toString() method returns a string representing object.\n\n#Syntax\n\tobj.toString()\n#Description\nEvery object has a toString() method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the toString() method is inherited by every object descended from Object. If this method is not overridden in a custom object, toString() returns \"[object type]\", where type is the object type. The following code illustrates this:\n\n\tvar o = new Object();\n\to.toString();           // returns [object Object]\nNote: Starting in JavaScript 1.8.5 toString() called on null returns [object Null], and undefined returns [object Undefined], as defined in the 5th Edition of ECMAScript and a subsequent Errata. See Using toString to detect object type.\n#Examples\n##Example: Overriding the default toString method\n\nYou can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object.\n\nThe following code defines the Dog object type and creates theDog, an object of type Dog:\n\n\tfunction Dog(name, breed, color, sex) {\n\t  this.name = name;\n\t  this.breed = breed;\n\t  this.color = color;\n\t  this.sex = sex;\n\t}\n\n\ttheDog = new Dog('Gabby', 'Lab', 'chocolate', 'female');\nIf you call the toString() method on this custom object, it returns the default value inherited from Object:\n\n\ttheDog.toString(); // returns [object Object]\nThe following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form \"property = value;\".\n\n\tDog.prototype.toString = function dogToString() {\n\t  var ret = 'Dog ' + this.name + ' is a ' + this.sex + ' ' + this.color + ' ' + this.breed;\n\t  return ret;\n\t}\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:\n\n\tDog Gabby is a female chocolate Lab\n\n##Example: Using toString() to detect object class\n\ntoString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg.\n\n\tvar toString = Object.prototype.toString;\n\n\ttoString.call(new Date);    // [object Date]\n\ttoString.call(new String);  // [object String]\n\ttoString.call(Math);        // [object Math]\n\n\t// Since JavaScript 1.8.5\n\ttoString.call(undefined);   // [object Undefined]\n\ttoString.call(null);        // [object Null]","children":[{"annotation":"return","type":"{String}","name":"returns","text":"a string representing object.","theRestString":""}],"commentRange":[109776,112741],"fileName":"ALL.js"},"create":{"annotation":"method","name":"create","text":"#Summary\nThe Object.create() method creates a new object with the specified prototype object and properties.\n\n#Syntax\n\tObject.create(proto[, propertiesObject])\n\n#Examples\n\n##Example: Classical inheritance with Object.create\n\nBelow is an example of how to use Object.create to achieve classical inheritance. This is for single inheritance, which is all that Javascript supports.\n\n\t// Shape - superclass\n\tfunction Shape() {\n\t  this.x = 0;\n\t  this.y = 0;\n\t}\n\n\t// superclass method\n\tShape.prototype.move = function(x, y) {\n\t  this.x += x;\n\t  this.y += y;\n\t  console.info('Shape moved.');\n\t};\n\n\t// Rectangle - subclass\n\tfunction Rectangle() {\n\t  Shape.call(this); // call super constructor.\n\t}\n\n\t// subclass extends superclass\n\tRectangle.prototype = Object.create(Shape.prototype);\n\tRectangle.prototype.constructor = Rectangle;\n\n\tvar rect = new Rectangle();\n\n\trect instanceof Rectangle; // true\n\trect instanceof Shape; // true\n\n\trect.move(1, 1); // Outputs, 'Shape moved.'\n\tIf you wish to inherit from multiple objects, then mixins are a possibility.\n\n\tfunction MyClass() {\n\t  SuperClass.call(this);\n\t  OtherSuperClass.call(this);\n\t}\n\n\tMyClass.prototype = Object.create(SuperClass.prototype); // inherit\n\tmixin(MyClass.prototype, OtherSuperClass.prototype); // mixin\n\n\tMyClass.prototype.myMethod = function() {\n\t  // do a thing\n\t};\n\nThe mixin function would copy the functions from the superclass prototype to the subclass prototype, the mixin function needs to be supplied by the user. An example of a mixin like function would be jQuery.extend.\n\n##Example: Using propertiesObject argument with Object.create\n\n\tvar o;\n\n\t// create an object with null as prototype\n\to = Object.create(null);\n\n\n\to = {};\n\t// is equivalent to:\n\to = Object.create(Object.prototype);\n\n\n\t// Example where we create an object with a couple of sample properties.\n\t// (Note that the second parameter maps keys to *property descriptors*.)\n\to = Object.create(Object.prototype, {\n\t  // foo is a regular 'value property'\n\t  foo: { writable: true, configurable: true, value: 'hello' },\n\t  // bar is a getter-and-setter (accessor) property\n\t  bar: {\n\t    configurable: false,\n\t    get: function() { return 10; },\n\t    set: function(value) { console.log('Setting `o.bar` to', value); }\n\t  }\n\t});\n\n\n\tfunction Constructor() {}\n\to = new Constructor();\n\t// is equivalent to:\n\to = Object.create(Constructor.prototype);\n\t// Of course, if there is actual initialization code in the\n\t// Constructor function, the Object.create cannot reflect it\n\n\n\t// create a new object whose prototype is a new, empty object\n\t// and a adding single property 'p', with value 42\n\to = Object.create({}, { p: { value: 42 } });\n\n\t// by default properties ARE NOT writable, enumerable or configurable:\n\to.p = 24;\n\to.p;\n\t// 42\n\n\to.q = 12;\n\tfor (var prop in o) {\n\t  console.log(prop);\n\t}\n\t// 'q'\n\n\tdelete o.p;\n\t// false\n\n\t// to specify an ES3 property\n\to2 = Object.create({}, {\n\t  p: {\n\t    value: 42,\n\t    writable: true,\n\t    enumerable: true,\n\t    configurable: true\n\t  }\n\t});\n\n##Polyfill\nThis polyfill covers the main use case which is creating a new object for which the prototype has been chosen but doesn't take the second argument into account.\n\n\tif (typeof Object.create != 'function') {\n\t  Object.create = (function() {\n\t    var Object = function() {};\n\t    return function (prototype) {\n\t      if (arguments.length > 1) {\n\t        throw Error('Second argument not supported');\n\t      }\n\t      if (typeof prototype != 'object') {\n\t        throw TypeError('Argument must be an object');\n\t      }\n\t      Object.prototype = prototype;\n\t      var result = new Object();\n\t      Object.prototype = null;\n\t      return result;\n\t    };\n\t  })();\n\t}","children":[{"annotation":"static","name":"dummy","text":"","theRestString":"@param {Object} proto The object which should be the prototype of the newly-created object.\n\n@param {Object} propertiesObject If specified and not undefined, an object whose enumerable own properties (that is, those properties defined upon itself and not enumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of Object.defineProperties(). @optional dummy @throws Throws a TypeError exception if the proto parameter isn't null or an object."},{"annotation":"param","type":"{Object}","name":"proto","text":"The object which should be the prototype of the newly-created object.","theRestString":"@param {Object} propertiesObject If specified and not undefined, an object whose enumerable own properties (that is, those properties defined upon itself and not enumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of Object.defineProperties(). @optional dummy @throws Throws a TypeError exception if the proto parameter isn't null or an object."},{"annotation":"param","type":"{Object}","name":"propertiesObject","text":"If specified and not undefined, an object whose enumerable own properties (that is, those properties defined upon itself and not enumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of Object.defineProperties().","theRestString":"@optional dummy @throws Throws a TypeError exception if the proto parameter isn't null or an object."},{"annotation":"optional","name":"dummy","text":"","theRestString":"@throws Throws a TypeError exception if the proto parameter isn't null or an object."},{"annotation":"throws","name":"Throws","text":"a TypeError exception if the proto parameter isn't null or an object.","theRestString":""}],"commentRange":[65397,69699],"fileName":"ALL.js"},"defineProperties":{"annotation":"method","name":"defineProperties","text":"#Summary\nThe Object.defineProperties() method defines new or modifies existing properties directly on an object, returning the object.\n\n#Syntax\n\tObject.defineProperties(obj, props)\n\n#Description\nObject.defineProperties, in essence, defines all properties corresponding to the enumerable own properties of props on the object obj object.\n\n#Example\n\n\tObject.defineProperties(obj, {\n\t  \"property1\": {\n\t    value: true,\n\t    writable: true\n\t  },\n\t  \"property2\": {\n\t    value: \"Hello\",\n\t    writable: false\n\t  }\n\t  // etc. etc.\n\t});\n\n\n# Polyfill\n\nAssuming a pristine execution environment with all names and properties referring to their initial values, Object.defineProperties is almost completely equivalent (note the comment in isCallable) to the following reimplementation in JavaScript:\n\n\tfunction defineProperties(obj, properties) {\n\t  function convertToDescriptor(desc) {\n\t    function hasProperty(obj, prop) {\n\t      return Object.prototype.hasOwnProperty.call(obj, prop);\n\t    }\n\n\t    function isCallable(v) {\n\t      // NB: modify as necessary if other values than functions are callable.\n\t      return typeof v === \"function\";\n\t    }\n\n\t    if (typeof desc !== \"object\" || desc === null)\n\t      throw new TypeError(\"bad desc\");\n\n\t    var d = {};\n\n\t    if (hasProperty(desc, \"enumerable\"))\n\t      d.enumerable = !!obj.enumerable;\n\t    if (hasProperty(desc, \"configurable\"))\n\t      d.configurable = !!obj.configurable;\n\t    if (hasProperty(desc, \"value\"))\n\t      d.value = obj.value;\n\t    if (hasProperty(desc, \"writable\"))\n\t      d.writable = !!desc.writable;\n\t    if (hasProperty(desc, \"get\")) {\n\t      var g = desc.get;\n\n\t      if (!isCallable(g) && typeof g !== \"undefined\")\n\t        throw new TypeError(\"bad get\");\n\t      d.get = g;\n\t    }\n\t    if (hasProperty(desc, \"set\")) {\n\t      var s = desc.set;\n\t      if (!isCallable(s) && typeof s !== \"undefined\")\n\t        throw new TypeError(\"bad set\");\n\t      d.set = s;\n\t    }\n\n\t    if ((\"get\" in d || \"set\" in d) && (\"value\" in d || \"writable\" in d))\n\t      throw new TypeError(\"identity-confused descriptor\");\n\n\t    return d;\n\t  }\n\n\t  if (typeof obj !== \"object\" || obj === null)\n\t    throw new TypeError(\"bad obj\");\n\n\t  properties = Object(properties);\n\n\t  var keys = Object.keys(properties);\n\t  var descs = [];\n\n\t  for (var i = 0; i < keys.length; i++)\n\t    descs.push([keys[i], convertToDescriptor(properties[keys[i]])]);\n\n\t  for (var i = 0; i < descs.length; i++)\n\t    Object.defineProperty(obj, descs[i][0], descs[i][1]);\n\n\t  return obj;\n\t}","children":[{"annotation":"static","name":"dummy","text":"","theRestString":"@param {Object} obj The object on which to define or modify properties.\n@param {Object} props An object whose own enumerable properties constitute descriptors for the properties to be defined or modified."},{"annotation":"param","type":"{Object}","name":"obj","text":"The object on which to define or modify properties.","theRestString":"@param {Object} props An object whose own enumerable properties constitute descriptors for the properties to be defined or modified."},{"annotation":"param","type":"{Object}","name":"props","text":"An object whose own enumerable properties constitute descriptors for the properties to be defined or modified.","theRestString":""}],"commentRange":[69708,72460],"fileName":"ALL.js"},"defineProperty":{"annotation":"method","name":"defineProperty","text":"#Summary\nThe Object.defineProperty() method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.\n\n#Syntax\nObject.defineProperty(obj, prop, descriptor)\n\n#Description\nThis method allows precise addition to or modification of a property on an object. Normal property addition through assignment creates properties which show up during property enumeration (for...in loop or Object.keys method), whose values may be changed, and which may be deleted. This method allows these extra details to be changed from their defaults.\n\nProperty descriptors present in objects come in two main flavors: data descriptors and accessor descriptors. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter pair of functions. A descriptor must be one of these two flavors; it cannot be both.\n\nBoth data and accessor descriptors are objects. They share the following optional keys:\n\n###configurable\ntrue if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.\nDefaults to false.\n\n###enumerable\ntrue if and only if this property shows up during enumeration of the properties on the corresponding object.\nDefaults to false.\nA data descriptor also has the following optional keys:\n\n###value\nThe value associated with the property. Can be any valid JavaScript value (number, object, function, etc).\nDefaults to undefined.\nwritable\ntrue if and only if the value associated with the property may be changed with an assignment operator.\nDefaults to false.\nAn accessor descriptor also has the following optional keys:\n\n###get\nA function which serves as a getter for the property, or undefined if there is no getter. The function return will be used as the value of property.\nDefaults to undefined.\n\n###set\nA function which serves as a setter for the property, or undefined if there is no setter. The function will receive as only argument the new value being assigned to the property.\nDefaults to undefined.\nBear in mind that these options are not necessarily own properties so, if inherited, will be considered too. In order to ensure these defaults are preserved you might freeze the Object.prototype upfront, specify all options explicitly, or point to null as __proto__ property.\n\n\t// using __proto__\n\tObject.defineProperty(obj, 'key', {\n\t  __proto__: null, // no inherited properties\n\t  value: 'static'  // not enumerable\n\t                   // not configurable\n\t                   // not writable\n\t                   // as defaults\n\t});\n\n\t// being explicit\n\tObject.defineProperty(obj, 'key', {\n\t  enumerable: false,\n\t  configurable: false,\n\t  writable: false,\n\t  value: 'static'\n\t});\n\n\t// recycling same object\n\tfunction withValue(value) {\n\t  var d = withValue.d || (\n\t    withValue.d = {\n\t      enumerable: false,\n\t      writable: false,\n\t      configurable: false,\n\t      value: null\n\t    }\n\t  );\n\t  d.value = value;\n\t  return d;\n\t}\n\t// ... and ...\n\tObject.defineProperty(obj, 'key', withValue('static'));\n\n\t// if freeze is available, prevents the code to add\n\t// value, get, set, enumerable, writable, configurable\n\t// to the Object prototype\n\t(Object.freeze || Object)(Object.prototype);\n\n#Examples\n\nIf you want to see how to use the Object.defineProperty method with a binary-flags-like syntax, see additional examples.\n\n##Example: Creating a property\n\nWhen the property specified doesn't exist in the object, Object.defineProperty() creates a new property as described. Fields may be omitted from the descriptor, and default values for those fields are imputed. All of the Boolean-valued fields default to false. The value, get, and set fields default to undefined. A property which is defined without get/set/value/writable is called “generic” and is “typed” as a data descriptor.\n\n\tvar o = {}; // Creates a new object\n\n\t// Example of an object property added with defineProperty with a data property descriptor\n\tObject.defineProperty(o, 'a', {\n\t  value: 37,\n\t  writable: true,\n\t  enumerable: true,\n\t  configurable: true\n\t});\n\t// 'a' property exists in the o object and its value is 37\n\n\t// Example of an object property added with defineProperty with an accessor property descriptor\n\tvar bValue = 38;\n\tObject.defineProperty(o, 'b', {\n\t  get: function() { return bValue; },\n\t  set: function(newValue) { bValue = newValue; },\n\t  enumerable: true,\n\t  configurable: true\n\t});\n\to.b; // 38\n\t// 'b' property exists in the o object and its value is 38\n\t// The value of o.b is now always identical to bValue, unless o.b is redefined\n\n\t// You cannot try to mix both:\n\tObject.defineProperty(o, 'conflict', {\n\t  value: 0x9f91102,\n\t  get: function() { return 0xdeadbeef; }\n\t});\n\t// throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors\n\n##Example: Modifying a property\n\nWhen the property already exists, Object.defineProperty() attempts to modify the property according to the values in the descriptor and the object's current configuration. If the old descriptor had its configurable attribute set to false (the property is said to be “non-configurable”), then no attribute besides writable can be changed. In that case, it is also not possible to switch back and forth between the data and accessor property types.\n\nIf a property is non-configurable, its writable attribute can only be changed to false.\n\nA TypeError is thrown when attempts are made to change non-configurable property attributes (besides the writable attribute) unless the current and new values are the same.\n\n##Writable attribute\n\nWhen the writable property attribute is set to false, the property is said to be “non-writable”. It cannot be reassigned.\n\n\tvar o = {}; // Creates a new object\n\n\tObject.defineProperty(o, 'a', {\n\t  value: 37,\n\t  writable: false\n\t});\n\n\tconsole.log(o.a); // logs 37\n\to.a = 25; // No error thrown (it would throw in strict mode, even if the value had been the same)\n\tconsole.log(o.a); // logs 37. The assignment didn't work.\n\nAs seen in the example, trying to write into the non-writable property doesn't change it but doesn't throw an error either.\n\n##Enumerable attribute\n\nThe enumerable property attribute defines whether the property shows up in a for...in loop and Object.keys() or not.\n\n\tvar o = {};\n\tObject.defineProperty(o, 'a', { value: 1, enumerable: true });\n\tObject.defineProperty(o, 'b', { value: 2, enumerable: false });\n\tObject.defineProperty(o, 'c', { value: 3 }); // enumerable defaults to false\n\to.d = 4; // enumerable defaults to true when creating a property by setting it\n\n\tfor (var i in o) {\n\t  console.log(i);\n\t}\n\t// logs 'a' and 'd' (in undefined order)\n\n\tObject.keys(o); // ['a', 'd']\n\n\to.propertyIsEnumerable('a'); // true\n\to.propertyIsEnumerable('b'); // false\n\to.propertyIsEnumerable('c'); // false\n\tConfigurable attribute\n\n\tThe configurable attribute controls at the same time whether the property can be deleted from the object and whether its attributes (other than writable) can be changed.\n\n\tvar o = {};\n\tObject.defineProperty(o, 'a', {\n\t  get: function() { return 1; },\n\t  configurable: false\n\t});\n\n\tObject.defineProperty(o, 'a', { configurable: true }); // throws a TypeError\n\tObject.defineProperty(o, 'a', { enumerable: true }); // throws a TypeError\n\tObject.defineProperty(o, 'a', { set: function() {} }); // throws a TypeError (set was undefined previously)\n\tObject.defineProperty(o, 'a', { get: function() { return 1; } }); // throws a TypeError (even though the new get does exactly the same thing)\n\tObject.defineProperty(o, 'a', { value: 12 }); // throws a TypeError\n\n\tconsole.log(o.a); // logs 1\n\tdelete o.a; // Nothing happens\n\tconsole.log(o.a); // logs 1\n\n\nIf the configurable attribute of o.a had been true, none of the errors would be thrown and the property would be deleted at the end.\n\n##Example: Adding properties and default values\n\nIt's important to consider the way default values of attributes are applied. There is often a difference between simply using dot notation to assign a value and using Object.defineProperty(), as shown in the example below.\n\n\tvar o = {};\n\n\to.a = 1;\n\t// is equivalent to:\n\tObject.defineProperty(o, 'a', {\n\t  value: 1,\n\t  writable: true,\n\t  configurable: true,\n\t  enumerable: true\n\t});\n\n\n\t// On the other hand,\n\tObject.defineProperty(o, 'a', { value: 1 });\n\t// is equivalent to:\n\tObject.defineProperty(o, 'a', {\n\t  value: 1,\n\t  writable: false,\n\t  configurable: false,\n\t  enumerable: false\n\t});\n\n\n##Example: Custom Setters and Getters\n\nExample below shows how to implement a self-archiving object. When temperature property is set, the archive array gets a log entry.\n\n\tfunction Archiver() {\n\t  var temperature = null;\n\t  var archive = [];\n\n\t  Object.defineProperty(this, 'temperature', {\n\t    get: function() {\n\t      console.log('get!');\n\t      return temperature;\n\t    },\n\t    set: function(value) {\n\t      temperature = value;\n\t      archive.push({ val: temperature });\n\t    }\n\t  });\n\n\t  this.getArchive = function() { return archive; };\n\t}\n\n\tvar arc = new Archiver();\n\tarc.temperature; // 'get!'\n\tarc.temperature = 11;\n\tarc.temperature = 13;\n\tarc.getArchive(); // [{ val: 11 }, { val: 13 }]","children":[{"annotation":"static","name":"dummy","text":"","theRestString":"@param {Object} obj The object on which to define the property.\n@param {String} prop The name of the property to be defined or modified.\n@param {Object} descriptor The descriptor for the property being defined or modified."},{"annotation":"param","type":"{Object}","name":"obj","text":"The object on which to define the property.","theRestString":"@param {String} prop The name of the property to be defined or modified.\n@param {Object} descriptor The descriptor for the property being defined or modified."},{"annotation":"param","type":"{String}","name":"prop","text":"The name of the property to be defined or modified.","theRestString":"@param {Object} descriptor The descriptor for the property being defined or modified."},{"annotation":"param","type":"{Object}","name":"descriptor","text":"The descriptor for the property being defined or modified.","theRestString":""}],"commentRange":[72472,81966],"fileName":"ALL.js"},"freeze":{"annotation":"method","name":"freeze","text":"#Summary\nThe Object.freeze() method freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed. In essence the object is made effectively immutable. The method returns the object being frozen.\n\n#Syntax\nObject.freeze(obj)\n\n#Description\nNothing can be added to or removed from the properties set of a frozen object. Any attempt to do so will fail, either silently or by throwing a TypeError exception (most commonly, but not exclusively, when in strict mode).\n\nValues cannot be changed for data properties. Accessor properties (getters and setters) work the same (and still give the illusion that you are changing the value). Note that values that are objects can still be modified, unless they are also frozen.\n\n#Examples\n\tvar obj = {\n\t  prop: function() {},\n\t  foo: 'bar'\n\t};\n\n\t// New properties may be added, existing properties may be changed or removed\n\tobj.foo = 'baz';\n\tobj.lumpy = 'woof';\n\tdelete obj.prop;\n\n\tvar o = Object.freeze(obj);\n\n\tassert(Object.isFrozen(obj) === true);\n\n\t// Now any changes will fail\n\tobj.foo = 'quux'; // silently does nothing\n\tobj.quaxxor = 'the friendly duck'; // silently doesn't add the property\n\n\t// ...and in strict mode such attempts will throw TypeErrors\n\tfunction fail(){\n\t  'use strict';\n\t  obj.foo = 'sparky'; // throws a TypeError\n\t  delete obj.quaxxor; // throws a TypeError\n\t  obj.sparky = 'arf'; // throws a TypeError\n\t}\n\n\tfail();\n\n\t// Attempted changes through Object.defineProperty will also throw\n\tObject.defineProperty(obj, 'ohai', { value: 17 }); // throws a TypeError\n\tObject.defineProperty(obj, 'foo', { value: 'eit' }); // throws a TypeError\n\tThe following example shows that object values in a frozen object can be mutated (freeze is shallow).\n\n\tobj = {\n\t  internal: {}\n\t};\n\n\tObject.freeze(obj);\n\tobj.internal.a = 'aValue';\n\n\tobj.internal.a // 'aValue'\n\n\t// To make obj fully immutable, freeze each object in obj.\n\t// To do so, we use this function.\n\n\tfunction deepFreeze(o) {\n\t  var prop, propKey;\n\t  Object.freeze(o); // First freeze the object.\n\t  for (propKey in o) {\n\t    prop = o[propKey];\n\t    if (!o.hasOwnProperty(propKey) || !(typeof prop === 'object') || Object.isFrozen(prop)) {\n\t      // If the object is on the prototype, not an object, or is already frozen,\n\t      // skip it. Note that this might leave an unfrozen reference somewhere in the\n\t      // object if there is an already frozen object containing an unfrozen object.\n\t      continue;\n\t    }\n\n\t    deepFreeze(prop); // Recursively call deepFreeze.\n\t  }\n\t}\n\n\tobj2 = {\n\t  internal: {}\n\t};\n\n\tdeepFreeze(obj2);\n\tobj2.internal.a = 'anotherValue';\n\tobj2.internal.a; // undefined","children":[{"annotation":"static","name":"dummy","text":"","theRestString":"@param obj The object to freeze."},{"annotation":"param","name":"obj","text":"The object to freeze.","theRestString":""}],"commentRange":[81977,84823],"fileName":"ALL.js"},"getOwnPropertyDescriptor":{"annotation":"method","name":"getOwnPropertyDescriptor","text":"#Summary\nThe Object.getOwnPropertyDescriptor() method returns a property descriptor for an own property (that is, one directly present on an object, not present by dint of being along an object's prototype chain) of a given object.\n\n#Syntax\n\tObject.getOwnPropertyDescriptor(obj, prop)\n\n#Description\nThis method permits examination of the precise description of a property. A property in JavaScript consists of a string-valued name and a property descriptor. Further information about property descriptor types and their attributes can be found in Object.defineProperty().\n\nA property descriptor is a record with some of the following attributes:\n\n###value\nThe value associated with the property (data descriptors only).\n###writable\ntrue if and only if the value associated with the property may be changed (data descriptors only).\n###get\nA function which serves as a getter for the property, or undefined if there is no getter (accessor descriptors only).\n###set\nA function which serves as a setter for the property, or undefined if there is no setter (accessor descriptors only).\n###configurable\ntrue if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.\n###enumerable\ntrue if and only if this property shows up during enumeration of the properties on the corresponding object.\n\n#Examples\n\n\tvar o, d;\n\n\to = { get foo() { return 17; } };\n\td = Object.getOwnPropertyDescriptor(o, 'foo');\n\t// d is { configurable: true, enumerable: true, get: , set: undefined }\n\n\to = { bar: 42 };\n\td = Object.getOwnPropertyDescriptor(o, 'bar');\n\t// d is { configurable: true, enumerable: true, value: 42, writable: true }\n\n\to = {};\n\tObject.defineProperty(o, 'baz', { value: 8675309, writable: false, enumerable: false });\n\td = Object.getOwnPropertyDescriptor(o, 'baz');\n\t// d is { value: 8675309, writable: false, enumerable: false, configurable: false }","children":[{"annotation":"static","name":"dummy","text":"","theRestString":"@param {Object}obj The object in which to look for the property.\n@param {String}prop The name of the property whose description is to be retrieved.\n@returns A property descriptor of the given property if it exists on the object, undefined otherwise."},{"annotation":"param","type":"{Object}","name":"obj","text":"The object in which to look for the property.","theRestString":"@param {String}prop The name of the property whose description is to be retrieved.\n@returns A property descriptor of the given property if it exists on the object, undefined otherwise."},{"annotation":"param","type":"{String}","name":"prop","text":"The name of the property whose description is to be retrieved.","theRestString":"@returns A property descriptor of the given property if it exists on the object, undefined otherwise."},{"annotation":"returns","name":"A","text":"property descriptor of the given property if it exists on the object, undefined otherwise.","theRestString":""}],"commentRange":[84834,87049],"fileName":"ALL.js"},"getOwnPropertyNames":{"annotation":"method","name":"getOwnPropertyNames","text":"#Summary\nThe Object.getOwnPropertyNames() method returns an array of all properties (enumerable or not) found directly upon a given object.\n\n#Syntax\nObject.getOwnPropertyNames(obj)\n\n#Description\nObject.getOwnPropertyNames returns an array whose elements are strings corresponding to the enumerable and non-enumerable properties found directly upon obj. The ordering of the enumerable properties in the array is consistent with the ordering exposed by a for...in loop (or by Object.keys) over the properties of the object. The ordering of the non-enumerable properties in the array, and among the enumerable properties, is not defined.\n\n#Examples\n##Example: Using getOwnPropertyNames\n\n\tvar arr = ['a', 'b', 'c'];\n\tprint(Object.getOwnPropertyNames(arr).sort()); // prints '0,1,2,length'\n\n\t// Array-like object\n\tvar obj = { 0: 'a', 1: 'b', 2: 'c' };\n\tprint(Object.getOwnPropertyNames(obj).sort()); // prints '0,1,2'\n\n\t// Printing property names and values using Array.forEach\n\tObject.getOwnPropertyNames(obj).forEach(function(val, idx, array) {\n\t  print(val + ' -> ' + obj[val]);\n\t});\n\t// prints\n\t// 0 -> a\n\t// 1 -> b\n\t// 2 -> c\n\n\t// non-enumerable property\n\tvar my_obj = Object.create({}, { getFoo: { value: function() { return this.foo; }, enumerable: false } });\n\tmy_obj.foo = 1;\n\n\tprint(Object.getOwnPropertyNames(my_obj).sort()); // prints 'foo,getFoo'\n\nIf you want only the enumerable properties, see Object.keys() or use a for...in loop (although note that this will return enumerable properties not found directly upon that object but also along the prototype chain for the object unless the latter is filtered with hasOwnProperty()).\n\nItems on the prototype chain are not listed:\n\n\tfunction ParentClass() {}\n\tParentClass.prototype.inheritedMethod = function() {};\n\n\tfunction ChildClass() {\n\t  this.prop = 5;\n\t  this.method = function() {};\n\t}\n\tChildClass.prototype = new ParentClass;\n\tChildClass.prototype.prototypeMethod = function() {};\n\n\talert(\n\t  Object.getOwnPropertyNames(\n\t    new ChildClass() // ['prop', 'method']\n\t  )\n\t);\n\n##Example: Get Non-Enumerable Only\n\nThis uses the Array.prototype.filter() function to remove the enumerable keys (obtained with Object.keys()) from a list of all keys (obtained with Object.getOwnPropertyNames) leaving only the non-enumerable keys.\n\n\tvar target = myObject;\n\tvar enum_and_nonenum = Object.getOwnPropertyNames(target);\n\tvar enum_only = Object.keys(target);\n\tvar nonenum_only = enum_and_nonenum.filter(function(key) {\n\t  var indexInEnum = enum_only.indexOf(key);\n\t  if (indexInEnum == -1) {\n\t    // not found in enum_only keys mean the key is non-enumerable,\n\t    // so return true so we keep this in the filter\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t});\n\n\tconsole.log(nonenum_only);","children":[{"annotation":"static","name":"dummy","text":"","theRestString":"@param {Object} obj The object whose enumerable and non-enumerable own properties are to be returned."},{"annotation":"param","type":"{Object}","name":"obj","text":"The object whose enumerable and non-enumerable own properties are to be returned.","theRestString":""}],"commentRange":[87060,89959],"fileName":"ALL.js"},"isExtensible":{"annotation":"method","name":"isExtensible","text":"#Summary\nThe Object.isExtensible() method determines if an object is extensible (whether it can have new properties added to it).\n\n#Syntax\n\tObject.isExtensible(obj)\n\n#Description\nObjects are extensible by default: they can have new properties added to them, and (in engines that support __proto__  their __proto__ property) can be modified. An object can be marked as non-extensible using Object.preventExtensions(), Object.seal(), or Object.freeze().\n\n#Examples\n\t// New objects are extensible.\n\tvar empty = {};\n\tassert(Object.isExtensible(empty) === true);\n\n\t// ...but that can be changed.\n\tObject.preventExtensions(empty);\n\tassert(Object.isExtensible(empty) === false);\n\n\t// Sealed objects are by definition non-extensible.\n\tvar sealed = Object.seal({});\n\tassert(Object.isExtensible(sealed) === false);\n\n\t// Frozen objects are also by definition non-extensible.\n\tvar frozen = Object.freeze({});\n\tassert(Object.isExtensible(frozen) === false);\n\tNotes\n\tIn ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError. In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n\n\t> Object.isExtensible(1)\n\tTypeError: 1 is not an object // ES5 code\n\n\t> Object.isExtensible(1)\n\tfalse","children":[{"annotation":"static","name":"dummy","text":"","theRestString":"@param {Object} obj The object which should be checked.\n@return {boolean}"},{"annotation":"param","type":"{Object}","name":"obj","text":"The object which should be checked.","theRestString":"@return {boolean}"},{"annotation":"return","type":"{boolean}","text":"","theRestString":""}],"commentRange":[89970,91371],"fileName":"ALL.js"},"isFrozen":{"annotation":"method","name":"isFrozen","text":"#Summary\nThe Object.isFrozen() determines if an object is frozen.\n\n#Syntax\n\tObject.isFrozen(obj)\n\n#Description\nAn object is frozen if and only if it is not extensible, all its properties are non-configurable, and all its data properties (that is, properties which are not accessor properties with getter or setter components) are non-writable.\n\n#Examples\n\t// A new object is extensible, so it is not frozen.\n\tassert(Object.isFrozen({}) === false);\n\n\t// An empty object which is not extensible is vacuously frozen.\n\tvar vacuouslyFrozen = Object.preventExtensions({});\n\tassert(Object.isFrozen(vacuouslyFrozen) === true);\n\n\t// A new object with one property is also extensible, ergo not frozen.\n\tvar oneProp = { p: 42 };\n\tassert(Object.isFrozen(oneProp) === false);\n\n\t// Preventing extensions to the object still doesn't make it frozen,\n\t// because the property is still configurable (and writable).\n\tObject.preventExtensions(oneProp);\n\tassert(Object.isFrozen(oneProp) === false);\n\n\t// ...but then deleting that property makes the object vacuously frozen.\n\tdelete oneProp.p;\n\tassert(Object.isFrozen(oneProp) === true);\n\n\t// A non-extensible object with a non-writable but still configurable property is not frozen.\n\tvar nonWritable = { e: 'plep' };\n\tObject.preventExtensions(nonWritable);\n\tObject.defineProperty(nonWritable, 'e', { writable: false }); // make non-writable\n\tassert(Object.isFrozen(nonWritable) === false);\n\n\t// Changing that property to non-configurable then makes the object frozen.\n\tObject.defineProperty(nonWritable, 'e', { configurable: false }); // make non-configurable\n\tassert(Object.isFrozen(nonWritable) === true);\n\n\t// A non-extensible object with a non-configurable but still writable property also isn't frozen.\n\tvar nonConfigurable = { release: 'the kraken!' };\n\tObject.preventExtensions(nonConfigurable);\n\tObject.defineProperty(nonConfigurable, 'release', { configurable: false });\n\tassert(Object.isFrozen(nonConfigurable) === false);\n\n\t// Changing that property to non-writable then makes the object frozen.\n\tObject.defineProperty(nonConfigurable, 'release', { writable: false });\n\tassert(Object.isFrozen(nonConfigurable) === true);\n\n\t// A non-extensible object with a configurable accessor property isn't frozen.\n\tvar accessor = { get food() { return 'yum'; } };\n\tObject.preventExtensions(accessor);\n\tassert(Object.isFrozen(accessor) === false);\n\n\t// ...but make that property non-configurable and it becomes frozen.\n\tObject.defineProperty(accessor, 'food', { configurable: false });\n\tassert(Object.isFrozen(accessor) === true);\n\n\t// But the easiest way for an object to be frozen is if Object.freeze has been called on it.\n\tvar frozen = { 1: 81 };\n\tassert(Object.isFrozen(frozen) === false);\n\tObject.freeze(frozen);\n\tassert(Object.isFrozen(frozen) === true);\n\n\t// By definition, a frozen object is non-extensible.\n\tassert(Object.isExtensible(frozen) === false);\n\n\t// Also by definition, a frozen object is sealed.\n\tassert(Object.isSealed(frozen) === true);\n\n#Notes\nIn ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError. In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n\n\t> Object.isFrozen(1)\n\tTypeError: 1 is not an object // ES5 code\n\n\t> Object.isFrozen(1)\n\ttrue                          // ES6 code","children":[{"annotation":"static","name":"dummy","text":"","theRestString":"@param {Object}obj The object which should be checked.\n@returns boolean"},{"annotation":"param","type":"{Object}","name":"obj","text":"The object which should be checked.","theRestString":"@returns boolean"},{"annotation":"returns","name":"boolean","text":"","theRestString":""}],"commentRange":[91376,94816],"fileName":"ALL.js"},"isSealed":{"annotation":"method","name":"isSealed","text":"#Summary\nThe Object.isSealed() method determines if an object is sealed.\n\n#Syntax\n\tObject.isSealed(obj)\n#Description\nReturns true if the object is sealed, otherwise false. An object is sealed if it is not extensible and if all its properties are non-configurable and therefore not removable (but not necessarily non-writable).\n\n#Examples\n\t// Objects aren't sealed by default.\n\tvar empty = {};\n\tassert(Object.isSealed(empty) === false);\n\n\t// If you make an empty object non-extensible, it is vacuously sealed.\n\tObject.preventExtensions(empty);\n\tassert(Object.isSealed(empty) === true);\n\n\t// The same is not true of a non-empty object, unless its properties are all non-configurable.\n\tvar hasProp = { fee: 'fie foe fum' };\n\tObject.preventExtensions(hasProp);\n\tassert(Object.isSealed(hasProp) === false);\n\n\t// But make them all non-configurable and the object becomes sealed.\n\tObject.defineProperty(hasProp, 'fee', { configurable: false });\n\tassert(Object.isSealed(hasProp) === true);\n\n\t// The easiest way to seal an object, of course, is Object.seal.\n\tvar sealed = {};\n\tObject.seal(sealed);\n\tassert(Object.isSealed(sealed) === true);\n\n\t// A sealed object is, by definition, non-extensible.\n\tassert(Object.isExtensible(sealed) === false);\n\n\t// A sealed object might be frozen, but it doesn't have to be.\n\tassert(Object.isFrozen(sealed) === true); // all properties also non-writable\n\n\tvar s2 = Object.seal({ p: 3 });\n\tassert(Object.isFrozen(s2) === false); // 'p' is still writable\n\n\tvar s3 = Object.seal({ get p() { return 0; } });\n\tassert(Object.isFrozen(s3) === true); // only configurability matters for accessor properties\n\n#Notes\n\tIn ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError. In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n\n\t> Object.isSealed(1)\n\tTypeError: 1 is not an object // ES5 code\n\n\t> Object.isSealed(1)\n\ttrue                          // ES6 code","children":[{"annotation":"static","name":"dummy","text":"","theRestString":"@param {Object} obj The object which should be checked.\n@returns {boolean}"},{"annotation":"param","type":"{Object}","name":"obj","text":"The object which should be checked.","theRestString":"@returns {boolean}"},{"annotation":"returns","type":"{boolean}","text":"","theRestString":""}],"commentRange":[94822,96904],"fileName":"ALL.js"},"keys":{"annotation":"method","name":"keys","text":"#Summary\nThe Object.keys() method returns an array of a given object's own enumerable properties, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).\n\n#Syntax\n\tObject.keys(obj)\n\n#Examples\n\tvar arr = ['a', 'b', 'c'];\n\tconsole.log(Object.keys(arr)); // console: ['0', '1', '2']\n\n\t// array like object\n\tvar obj = { 0: 'a', 1: 'b', 2: 'c' };\n\tconsole.log(Object.keys(obj)); // console: ['0', '1', '2']\n\n\t// array like object with random key ordering\n\tvar an_obj = { 100: 'a', 2: 'b', 7: 'c' };\n\tconsole.log(Object.keys(an_obj)); // console: ['2', '7', '100']\n\n\t// getFoo is property which isn't enumerable\n\tvar my_obj = Object.create({}, { getFoo: { value: function() { return this.foo; } } });\n\tmy_obj.foo = 1;\n\n\tconsole.log(Object.keys(my_obj)); // console: ['foo']\nIf you want all properties, even not enumerables, see Object.getOwnPropertyNames().\n\n#Polyfill\nTo add compatible Object.keys support in older environments that do not natively support it, copy the following snippet:\n\n\t// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n\tif (!Object.keys) {\n\t  Object.keys = (function() {\n\t    'use strict';\n\t    var hasOwnProperty = Object.prototype.hasOwnProperty,\n\t        hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString'),\n\t        dontEnums = [\n\t          'toString',\n\t          'toLocaleString',\n\t          'valueOf',\n\t          'hasOwnProperty',\n\t          'isPrototypeOf',\n\t          'propertyIsEnumerable',\n\t          'constructor'\n\t        ],\n\t        dontEnumsLength = dontEnums.length;\n\n\t    return function(obj) {\n\t      if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {\n\t        throw new TypeError('Object.keys called on non-object');\n\t      }\n\n\t      var result = [], prop, i;\n\n\t      for (prop in obj) {\n\t        if (hasOwnProperty.call(obj, prop)) {\n\t          result.push(prop);\n\t        }\n\t      }\n\n\t      if (hasDontEnumBug) {\n\t        for (i = 0; i < dontEnumsLength; i++) {\n\t          if (hasOwnProperty.call(obj, dontEnums[i])) {\n\t            result.push(dontEnums[i]);\n\t          }\n\t        }\n\t      }\n\t      return result;\n\t    };\n\t  }());\n\t}\nPlease note that the above code includes non-enumerable keys in IE7 (and maybe IE8), when passing in an object from a different window.\n\nFor a simple browser polyfill, see Javascript - Object.keys Browser Compatibility.","children":[{"annotation":"static","name":"dummy","text":"","theRestString":"@param {Object} obj The object whose enumerable own properties are to be returned.\n@returns {Array<String>} method returns an array of a given object's own enumerable properties, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well)."},{"annotation":"param","type":"{Object}","name":"obj","text":"The object whose enumerable own properties are to be returned.","theRestString":"@returns {Array<String>} method returns an array of a given object's own enumerable properties, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well)."},{"annotation":"returns","type":"{Array<String>}","name":"method","text":"returns an array of a given object's own enumerable properties, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).","theRestString":""}],"commentRange":[96912,99752],"fileName":"ALL.js"},"preventExtensions":{"annotation":"method","name":"preventExtensions","text":"#Summary\nThe Object.preventExtensions() method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).\n\n#Syntax\n\tObject.preventExtensions(obj)\n\n#Description\nAn object is extensible if new properties can be added to it. Object.preventExtensions() marks an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible. Note that the properties of a non-extensible object, in general, may still be deleted. Attempting to add new properties to a non-extensible object will fail, either silently or by throwing a TypeError (most commonly, but not exclusively, when in strict mode).\n\nObject.preventExtensions() only prevents addition of own properties. Properties can still be added to the object prototype. However, calling Object.preventExtensions() on an object will also prevent extensions on its __proto__  property.\n\nIf there is a way to turn an extensible object to a non-extensible one, there is no way to do the opposite in ECMAScript 5.\n\n#Examples\n\t// Object.preventExtensions returns the object being made non-extensible.\n\tvar obj = {};\n\tvar obj2 = Object.preventExtensions(obj);\n\tassert(obj === obj2);\n\n\t// Objects are extensible by default.\n\tvar empty = {};\n\tassert(Object.isExtensible(empty) === true);\n\n\t// ...but that can be changed.\n\tObject.preventExtensions(empty);\n\tassert(Object.isExtensible(empty) === false);\n\n\t// Object.defineProperty throws when adding a new property to a non-extensible object.\n\tvar nonExtensible = { removable: true };\n\tObject.preventExtensions(nonExtensible);\n\tObject.defineProperty(nonExtensible, 'new', { value: 8675309 }); // throws a TypeError\n\n\t// In strict mode, attempting to add new properties to a non-extensible object throws a TypeError.\n\tfunction fail() {\n\t  'use strict';\n\t  nonExtensible.newProperty = 'FAIL'; // throws a TypeError\n\t}\n\tfail();\n\n\t// EXTENSION (only works in engines supporting __proto__\n\t// (which is deprecated. Use Object.getPrototypeOf instead)):\n\t// A non-extensible object's prototype is immutable.\n\tvar fixed = Object.preventExtensions({});\n\tfixed.__proto__ = { oh: 'hai' }; // throws a TypeError\n\n#Notes\nIn ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError. In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return it.\n\n\t> Object.preventExtensions(1)\n\tTypeError: 1 is not an object // ES5 code\n\n\t> Object.preventExtensions(1)\n\t1                             // ES6 code","children":[{"annotation":"static","name":"dummy","text":"","theRestString":"@param {Object}obj The object which should be made non-extensible."},{"annotation":"param","type":"{Object}","name":"obj","text":"The object which should be made non-extensible.","theRestString":""}],"commentRange":[99761,102441],"fileName":"ALL.js"},"valueOf":{"annotation":"method","name":"valueOf","text":"#Summary\nThe valueOf() method returns the primitive value of the specified object.\n\n#Syntax\n\tobject.valueOf()\n#Description\nJavaScript calls the valueOf method to convert an object to a primitive value. You rarely need to invoke the valueOf method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.\n\nBy default, the valueOf method is inherited by every object descended from Object. Every built-in core object overrides this method to return an appropriate value. If an object has no primitive value, valueOf returns the object itself, which is displayed as:\n\n\t[object Object]\nYou can use valueOf within your own code to convert a built-in object into a primitive value. When you create a custom object, you can override Object.prototype.valueOf() to call a custom method instead of the default Object method.\n\n##Overriding valueOf for custom objects\n\nYou can create a function to be called in place of the default valueOf method. Your function must take no arguments.\n\nSuppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object's valueOf method:\n\n\tmyNumberType.prototype.valueOf = function() { return customPrimitiveValue; };\nWith the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code.\n\nAn object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:\n\n\tmyNumber.valueOf()\nNote: Objects in string contexts convert via the toString() method, which is different from String objects converting to string primitives using valueOf. All objects have a string conversion, if only \"[object type]\". But many objects do not convert to number, boolean, or function.\n#Examples\n##Example: Using valueOf\n\n\to = new Object();\n\tmyVar = o.valueOf();      // [object Object]","commentRange":[112747,114784],"fileName":"ALL.js"},"seal":{"annotation":"method","name":"seal","text":"#Summary\nThe Object.seal() method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.\n\n#Syntax\n\tObject.seal(obj)\n\n#Description\nBy default, objects are extensible (new properties can be added to them). Sealing an object prevents new properties from being added and marks all existing properties as non-configurable. This has the effect of making the set of properties on the object fixed and immutable. Making all properties non-configurable also prevents them from being converted from data properties to accessor properties and vice versa, but it does not prevent the values of data properties from being changed. Attempting to delete or add properties to a sealed object, or to convert a data property to accessor or vice versa, will fail, either silently or by throwing a TypeError (most commonly, although not exclusively, when in strict mode code).\n\nThe prototype chain remains untouched. However, the __proto__  property is sealed as well.\n\n#Examples\n\tvar obj = {\n\t  prop: function() {},\n\t  foo: 'bar'\n\t};\n\n\t// New properties may be added, existing properties may be changed or removed.\n\tobj.foo = 'baz';\n\tobj.lumpy = 'woof';\n\tdelete obj.prop;\n\n\tvar o = Object.seal(obj);\n\n\tassert(o === obj);\n\tassert(Object.isSealed(obj) === true);\n\n\t// Changing property values on a sealed object still works.\n\tobj.foo = 'quux';\n\n\t// But you can't convert data properties to accessors, or vice versa.\n\tObject.defineProperty(obj, 'foo', { get: function() { return 'g'; } }); // throws a TypeError\n\n\t// Now any changes, other than to property values, will fail.\n\tobj.quaxxor = 'the friendly duck'; // silently doesn't add the property\n\tdelete obj.foo; // silently doesn't delete the property\n\n\t// ...and in strict mode such attempts will throw TypeErrors.\n\tfunction fail() {\n\t  'use strict';\n\t  delete obj.foo; // throws a TypeError\n\t  obj.sparky = 'arf'; // throws a TypeError\n\t}\n\tfail();\n\n\t// Attempted additions through Object.defineProperty will also throw.\n\tObject.defineProperty(obj, 'ohai', { value: 17 }); // throws a TypeError\n\tObject.defineProperty(obj, 'foo', { value: 'eit' }); // changes existing property value","children":[{"annotation":"static","name":"dummy","text":"","theRestString":"@param  obj The object which should be sealed."},{"annotation":"param","name":"obj","text":"The object which should be sealed.","theRestString":""}],"commentRange":[114789,117130],"fileName":"ALL.js"}}},"javascript.Any":{"annotation":"class","name":"Any","text":"This is an artificial type that means 'any value is valid here'","commentRange":[117136,117216],"fileName":"ALL.js","module":{"annotation":"module","name":"javascript","text":"","commentRange":[53656,55188],"fileName":"ALL.js"},"absoluteName":"javascript.Any"},"javascript.ObjectPrototype":{"annotation":"class","name":"ObjectPrototype","text":"Adapted from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\n\n#Description\nThe Object.prototype property represents the Object prototype object.\n\nAll objects in JavaScript are descended from Object; all objects inherit methods and properties from Object.prototype, although they may be overridden (except an Object with a null prototype, i.e. Object.create(null)). For example, other constructors' prototypes override the constructor property and provide their own toString() methods. Changes to the Object prototype object are propagated to all objects unless the properties and methods subject to those changes are overridden further along the prototype chain.\n\n#Examples\nSince Javascript doesn't exactly have sub-class objects, prototype is a useful workaround to make a “base class” object of certain functions that act as objects. For example:\n\n\tvar Person = function() {\n\t  this.canTalk = true;\n\t  this.greet = function() {\n\t    if (this.canTalk) {\n\t      console.log('Hi, I'm ' + this.name);\n\t    }\n\t  };\n\t};\n\n\tvar Employee = function(name, title) {\n\t  this.name = name;\n\t  this.title = title;\n\t  this.greet = function() {\n\t    if (this.canTalk) {\n\t      console.log(\"Hi, I'm \" + this.name + \", the \" + this.title);\n\t    }\n\t  };\n\t};\n\tEmployee.prototype = new Person();\n\n\tvar Customer = function(name) {\n\t  this.name = name;\n\t};\n\tCustomer.prototype = new Person();\n\n\tvar Mime = function(name) {\n\t  this.name = name;\n\t  this.canTalk = false;\n\t};\n\tMime.prototype = new Person();\n\n\tvar bob = new Employee('Bob', 'Builder');\n\tvar joe = new Customer('Joe');\n\tvar rg = new Employee('Red Green', 'Handyman');\n\tvar mike = new Customer('Mike');\n\tvar mime = new Mime('Mime');\n\tbob.greet();\n\tjoe.greet();\n\trg.greet();\n\tmike.greet();\n\tmime.greet();\n\nThis will output:\n\n\tHi, I'm Bob, the Builder\n\tHi, I'm Joe\n\tHi, I'm Red Green, the Handyman\n\tHi, I'm Mike","commentRange":[117218,119171],"fileName":"ALL.js","module":{"annotation":"module","name":"javascript","text":"","commentRange":[117218,119171],"fileName":"ALL.js"},"absoluteName":"javascript.ObjectPrototype","properties":{"constructor":{"annotation":"property","type":"{Function}","name":"constructor","text":"Specifies the function that creates an object's prototype.\n\n##Summary\nReturns a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name. The value is only read-only for primitive values such as 1, true and \"test\".\n\n##Description\n\nAll objects inherit a constructor property from their prototype:\n\n\tvar o = {};\n\to.constructor === Object; // true\n\n\tvar a = [];\n\ta.constructor === Array; // true\n\n\tvar n = new Number(3);\n\tn.constructor === Number; // true\n\n##Examples\n\n###Example: Displaying the constructor of an object\n\nThe following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.\n\n\tfunction Tree(name) {\n\t  this.name = name;\n\t}\n\n\tvar theTree = new Tree('Redwood');\n\tconsole.log('theTree.constructor is ' + theTree.constructor);\n\tThis example displays the following output:\n\n\ttheTree.constructor is function Tree(name) {\n\t  this.name = name;\n\t}\n\n###Example: Changing the constructor of an object\n\nThe following example shows how to modify constructor value of generic objects. Only true, 1 and \"test\" will not be affected as they have read-only native constructors. This example shows that it is not always safe to rely on the constructor property of an object.\n\n\tfunction Type () {}\n\n\tvar types = [\n\t  new Array(),\n\t  [],\n\t  new Boolean(),\n\t  true,             // remains unchanged\n\t  new Date(),\n\t  new Error(),\n\t  new Function(),\n\t  function () {},\n\t  Math,\n\t  new Number(),\n\t  1,                // remains unchanged\n\t  new Object(),\n\t  {},\n\t  new RegExp(),\n\t  /(?:)/,\n\t  new String(),\n\t  'test'            // remains unchanged\n\t];\n\tfor (var i = 0; i < types.length; i++) {\n\t  types[i].constructor = Type;\n\t  types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n\t}\n\tconsole.log(types.join('\\n'));\n\tThis example displays the following output:\n\n\tfunction Type() {},false,\n\tfunction Type() {},false,\n\tfunction Type() {},false,false\n\tfunction Boolean() {\n\t    [native code]\n\t},false,true\n\tfunction Type() {},false,Mon Sep 01 2014 16:03:49 GMT+0600\n\tfunction Type() {},false,Error\n\tfunction Type() {},false,function anonymous() {\n\n\t}\n\tfunction Type() {},false,function () {}\n\tfunction Type() {},false,[object Math]\n\tfunction Type() {},false,0\n\tfunction Number() {\n\t    [native code]\n\t},false,1\n\tfunction Type() {},false,[object Object]\n\tfunction Type() {},false,[object Object]\n\tfunction Type() {},false,/(?:)/\n\tfunction Type() {},false,/(?:)/\n\tfunction Type() {},false,\n\tfunction String() {\n\t    [native code]\n\t},false,тест","commentRange":[119175,121903],"fileName":"ALL.js"},"__noSuchMethod__":{"annotation":"property","type":"{Function}","name":"__noSuchMethod__","text":"Allows a function to be defined that will be executed when an undefined object member is called as a method.","commentRange":[121911,122178],"fileName":"ALL.js"}}},"javascript.String":{"annotation":"class","name":"String","text":"#Summary\nThe String global object is a constructor for strings, or a sequence of characters.\n\n#Syntax\nString literals take the forms:\n\n\t'string text' \"string text\" \"中文 español English हिन्दी العربية português বাংলা русский 日本語 ਪੰਜਾਬੀ 한국어\"\n\nBeside regular, printable characters, special characters can be encoded using escape notation:\n\n\tCode\tOutput\n\t\\0\tthe NUL character\n\t\\'\tsingle quote\n\t\\\"\tdouble quote\n\t\\\\\tbackslash\n\t\\n\tnew line\n\t\\r\tcarriage return\n\t\\v\tvertical tab\n\t\\t\ttab\n\t\\b\tbackspace\n\t\\f\tform feed\n\t\\uXXXX\tunicode codepoint\n\t\\xXX\tthe Latin-1 character\n\nOr, using the String global object directly:\n\n\tString(thing) new String(thing)\n\n#Description\nStrings are useful for holding data that can be represented in text form. Some of the most-used operations on strings are to check their length, to build and concatenate them using the + and += string operators, checking for the existence or location of substrings with the indexOf method, or extracting substrings with the substring method.\n\n##Character access\n\nThere are two ways to access an individual character in a string. The first is the charAt method:\n\n\treturn 'cat'.charAt(1); // returns \"a\"\n\nThe other way (introduced in ECMAScript 5) is to treat the string as an array-like object, where individual characters correspond to a numerical index:\n\n\treturn 'cat'[1]; // returns \"a\"\n\nFor character access using bracket notation, attempting to delete or assign a value to these properties will not succeed. The properties involved are neither writable nor configurable. (See Object.defineProperty for more information.)\n\n##Comparing strings\n\nC developers have the strcmp() function for comparing strings. In JavaScript, you just use the less-than and greater-than operators:\n\n\tvar a = \"a\";\n\tvar b = \"b\";\n\tif (a < b) // true\n\t  print(a + \" is less than \" + b);\n\telse if (a > b)\n\t  print(a + \" is greater than \" + b);\n\telse\n\t  print(a + \" and \" + b + \" are equal.\");\n\nA similar result can be achieved using the localeCompare method inherited by String instances.\n\n##Distinction between string primitives and String objects\n\nNote that JavaScript distinguishes between String objects and primitive string values. (The same is true of Boolean and Numbers.)\n\nString literals (denoted by double or single quotes) and strings returned from String calls in a non-constructor context (i.e., without using the new keyword) are primitive strings. JavaScript automatically converts primitives to String objects, so that it's possible to use String object methods for primitive strings. In contexts where a method is to be invoked on a primitive string or a property lookup occurs, JavaScript will automatically wrap the string primitive and call the method or perform the property lookup.\n\n\tvar s_prim = \"foo\";\n\tvar s_obj = new String(s_prim);\n\n\tconsole.log(typeof s_prim); // Logs \"string\"\n\tconsole.log(typeof s_obj);  // Logs \"object\"\n\tString primitives and String objects also give different results when using eval. Primitives passed to eval are treated as source code; String objects are treated as all other objects are, by returning the object. For example:\n\n\ts1 = \"2 + 2\";               // creates a string primitive\n\ts2 = new String(\"2 + 2\");   // creates a String object\n\tconsole.log(eval(s1));      // returns the number 4\n\tconsole.log(eval(s2));      // returns the string \"2 + 2\"\n\nFor these reasons, code may break when it encounters String objects when it expects a primitive string instead, although generally authors need not worry about the distinction.\n\nA String object can always be converted to its primitive counterpart with the valueOf method.\n\n\tconsole.log(eval(s2.valueOf())); // returns the number 4\n\nNote: For another possible approach to strings in JavaScript, please read the article about StringView – a C-like representation of strings based on typed arrays.\n\n\n#String generic methods\nThe String instance methods are also available in Firefox as of JavaScript 1.6 (though not part of the ECMAScript standard) on the String object for applying String methods to any object:\n\n\tvar num = 15;\n\talert(String.replace(num, /5/, '2'));\n\nGenerics are also available on Array methods.\n\nThe following is a shim to provide support to non-supporting browsers:\n\n\t//globals define\n\t// Assumes all supplied String instance methods already present\n\t// (one may use shims for these if not available)\n\t(function () {\n\t    'use strict';\n\n\t    var i,\n\t        // We could also build the array of methods with the following, but the\n\t        //   getOwnPropertyNames() method is non-shimable:\n\t        // Object.getOwnPropertyNames(String).filter(function (methodName)\n\t        //  {return typeof String[methodName] === 'function'});\n\t        methods = [\n\t            'quote', 'substring', 'toLowerCase', 'toUpperCase', 'charAt',\n\t            'charCodeAt', 'indexOf', 'lastIndexOf', 'startsWith', 'endsWith',\n\t            'trim', 'trimLeft', 'trimRight', 'toLocaleLowerCase',\n\t            'toLocaleUpperCase', 'localeCompare', 'match', 'search',\n\t            'replace', 'split', 'substr', 'concat', 'slice'\n\t        ],\n\t        methodCount = methods.length,\n\t        assignStringGeneric = function (methodName) {\n\t            var method = String.prototype[methodName];\n\t            String[methodName] = function (arg1) {\n\t                return method.apply(arg1, Array.prototype.slice.call(arguments, 1));\n\t            };\n\t        };\n\n\t    for (i = 0; i < methodCount; i++) {\n\t        assignStringGeneric(methods[i]);\n\t    }\n\t}());\n\n#Examples\n##String conversion\n\nIt's possible to use String as a \"safer\" toString alternative, as although it still normally calls the underlying toString, it also works for null and undefined. For example:\n\n\tvar outputStrings = [];\n\tfor (let i = 0, n = inputValues.length; i < n; ++i) {\n\t  outputStrings.push(String(inputValues[i]));\n\t}","commentRange":[122182,128048],"fileName":"ALL.js","module":{"annotation":"module","name":"javascript","text":"","commentRange":[122182,128048],"fileName":"ALL.js"},"absoluteName":"javascript.String","properties":{"length":{"annotation":"property","type":"{Number}","name":"length","text":"#Summary\nThe length property represents the length of a string.\n\n#Syntax\n\n\tstr.length\n\n#Description\n\nThis property returns the number of code units in the string. UTF-16, the string format used by JavaScript, uses a single 16-bit code unit to represent the most common characters, but needs to use two code units for less commonly-used characters, so it's possible for the value returned by length to not match the actual number of characters in the string.\n\nFor an empty string, length is 0.\n\nThe static property String.length returns the value 1.\n\n#Examples\n\n\tvar x = \"Mozilla\";\n\tvar empty = \"\";\n\n\tconsole.log(\"Mozilla is \" + x.length + \" code units long\");\n\t// \"Mozilla is 7 code units long\" \n\n\tconsole.log(\"The empty string is has a length of \" + empty.length);\n\t // \"The empty string is has a length of 0\"","commentRange":[128055,128900],"fileName":"ALL.js"}},"methods":{"fromCharCode":{"annotation":"method","name":"fromCharCode","text":"#Summary\nThe static String.fromCharCode() method returns a string created by using the specified sequence of Unicode values.\n\n#Syntax\nString.fromCharCode(num1, ..., numN)\n#Description\nThis method returns a string and not a String object.\n\nBecause fromCharCode is a static method of String, you always use it as String.fromCharCode(), rather than as a method of a String object you created.\n\n#Examples\nExample: Using fromCharCode\n\nThe following example returns the string \"ABC\".\n\n\tString.fromCharCode(65,66,67)\n\n#Getting it to work with higher values\nAlthough most common Unicode values can be represented with one 16-bit number (as expected early on during JavaScript standardization) and fromCharCode() can be used to return a single character for the most common values (i.e., UCS-2 values which are the subset of UTF-16 with the most common characters), in order to deal with ALL legal Unicode values (up to 21 bits), fromCharCode() alone is inadequate. Since the higher code point characters use two (lower value) \"surrogate\" numbers to form a single character, String.fromCodePoint() (part of the ES6 draft) can be used to return such a pair and thus adequately represent these higher valued characters.","children":[{"annotation":"return","type":"{String}","name":"returns","text":"a string created by using the specified sequence of Unicode values.}","theRestString":"@param p1,...pn A sequence of numbers that are Unicode values"},{"annotation":"param","name":"p1","text":",...pn A sequence of numbers that are Unicode values","theRestString":""}],"commentRange":[128905,130301],"fileName":"ALL.js"},"charAt":{"annotation":"method","name":"charAt","text":"#Summary\nThe charAt() method returns the specified character from a string.\n\n#Syntax\n\tstr.charAt(index)\n#Description\nCharacters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character in a string called stringName is stringName.length - 1. If the index you supply is out of range, JavaScript returns an empty string.\n\n#Examples\n##Example: Displaying characters at different locations in a string\n\nThe following example displays characters at different locations in the string \"Brave new world\":\n\n\tvar anyString = \"Brave new world\";\n\n\tconsole.log(\"The character at index 0   is '\" + anyString.charAt(0)   + \"'\");\n\tconsole.log(\"The character at index 1   is '\" + anyString.charAt(1)   + \"'\");\n\tconsole.log(\"The character at index 2   is '\" + anyString.charAt(2)   + \"'\");\n\tconsole.log(\"The character at index 3   is '\" + anyString.charAt(3)   + \"'\");\n\tconsole.log(\"The character at index 4   is '\" + anyString.charAt(4)   + \"'\");\n\tconsole.log(\"The character at index 999 is '\" + anyString.charAt(999) + \"'\");\n\nThese lines display the following:\n\n\tThe character at index 0 is 'B'\n\tThe character at index 1 is 'r'\n\tThe character at index 2 is 'a'\n\tThe character at index 3 is 'v'\n\tThe character at index 4 is 'e'\n\tThe character at index 999 is ''\n\n##Example: Getting whole characters\n\nThe following provides a means of ensuring that going through a string loop always provides a whole character, even if the string contains characters that are not in the Basic Multi-lingual Plane.\n\n\tvar str = 'A \\uD87E\\uDC04 Z'; // We could also use a non-BMP character directly\n\tfor (var i=0, chr; i < str.length; i++) {\n\t  if ((chr = getWholeChar(str, i)) === false) {\n\t    continue;\n\t  } // Adapt this line at the top of each loop, passing in the whole string and\n\t    // the current iteration and returning a variable to represent the \n\t    // individual character\n\n\t  alert(chr);\n\t}\n\n\tfunction getWholeChar (str, i) {\n\t  var code = str.charCodeAt(i);     \n\t \n\t  if (isNaN(code)) {\n\t    return ''; // Position not found\n\t  }\n\t  if (code < 0xD800 || code > 0xDFFF) {\n\t    return str.charAt(i);\n\t  }\n\n\t  // High surrogate (could change last hex to 0xDB7F to treat high private\n\t  // surrogates as single characters)\n\t  if (0xD800 <= code && code <= 0xDBFF) { \n\t    if (str.length <= (i+1))  {\n\t      throw 'High surrogate without following low surrogate';\n\t    }\n\t    var next = str.charCodeAt(i+1);\n\t      if (0xDC00 > next || next > 0xDFFF) {\n\t        throw 'High surrogate without following low surrogate';\n\t      }\n\t      return str.charAt(i)+str.charAt(i+1);\n\t  }\n\t  // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n\t  if (i === 0) {\n\t    throw 'Low surrogate without preceding high surrogate';\n\t  }\n\t  var prev = str.charCodeAt(i-1);\n\t  \n\t  // (could change last hex to 0xDB7F to treat high private\n\t  // surrogates as single characters)\n\t  if (0xD800 > prev || prev > 0xDBFF) { \n\t    throw 'Low surrogate without preceding high surrogate';\n\t  }\n\t  // We can pass over low surrogates now as the second component\n\t  // in a pair which we have already processed\n\t  return false; \n\t}\n\nIn an exclusive JavaScript 1.7+ environment (such as Firefox) which allows destructured assignment, the following is a more succinct and somewhat more flexible alternative in that it does incrementing for an incrementing variable automatically (if the character warrants it in being a surrogate pair).\n\n\tvar str = 'A\\uD87E\\uDC04Z'; // We could also use a non-BMP character directly\n\tfor (var i=0, chr; i < str.length; i++) {\n\t  [chr, i] = getWholeCharAndI(str, i);\n\t  // Adapt this line at the top of each loop, passing in the whole string and\n\t  // the current iteration and returning an array with the individual character\n\t  // and 'i' value (only changed if a surrogate pair)\n\n\t  alert(chr);\n\t}\n\n\tfunction getWholeCharAndI (str, i) {\n\t  var code = str.charCodeAt(i);\n\n\t  if (isNaN(code)) {\n\t    return ''; // Position not found\n\t  }\n\t  if (code < 0xD800 || code > 0xDFFF) {\n\t    return [str.charAt(i), i]; // Normal character, keeping 'i' the same\n\t  }\n\n\t  // High surrogate (could change last hex to 0xDB7F to treat high private \n\t  // surrogates as single characters)\n\t  if (0xD800 <= code && code <= 0xDBFF) { \n\t    if (str.length <= (i+1))  {\n\t      throw 'High surrogate without following low surrogate';\n\t    }\n\t    var next = str.charCodeAt(i+1);\n\t      if (0xDC00 > next || next > 0xDFFF) {\n\t        throw 'High surrogate without following low surrogate';\n\t      }\n\t      return [str.charAt(i)+str.charAt(i+1), i+1];\n\t  }\n\t  // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n\t  if (i === 0) {\n\t    throw 'Low surrogate without preceding high surrogate';\n\t  }\n\t  var prev = str.charCodeAt(i-1);\n\n\t  // (could change last hex to 0xDB7F to treat high private surrogates\n\t  // as single characters)\n\t  if (0xD800 > prev || prev > 0xDBFF) { \n\t    throw 'Low surrogate without preceding high surrogate';\n\t  }\n\t  // Return the next character instead (and increment)\n\t  return [str.charAt(i+1), i+1]; \n\t}\n\n\n##Example: Fixing charAt to support non-Basic-Multilingual-Plane (BMP) characters\n\nWhile the example above may be more frequently useful for those wishing to support non-BMP characters (since it does not require the caller to know where any non-BMP character might appear), in the event that one does wish, in choosing a character by index, to treat the surrogate pairs within a string as the single characters they represent, one can use the following:\n\n\tfunction fixedCharAt (str, idx) {\n\t  var ret = '';\n\t  str += '';\n\t  var end = str.length;\n\n\t  var surrogatePairs = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n\t  while ((surrogatePairs.exec(str)) != null) {\n\t    var li = surrogatePairs.lastIndex;\n\t    if (li - 2 < idx) {\n\t      idx++;\n\t    } else {\n\t      break;\n\t    }\n\t  }\n\n\t  if (idx >= end || idx < 0) {\n\t    return '';\n\t  }\n\n\t  ret += str.charAt(idx);\n\n\t  if (/[\\uD800-\\uDBFF]/.test(ret) && /[\\uDC00-\\uDFFF]/.test(str.charAt(idx+1))) {\n\t    // Go one further, since one of the \"characters\" is part of a surrogate pair\n\t    ret += str.charAt(idx+1); \n\t  }\n\t  return ret;\n\t}","children":[{"annotation":"param","type":"{Number}","name":"index","text":"An integer between 0 and 1-less-than the length of the string.","theRestString":"@return {String} the specified character from a string."},{"annotation":"return","type":"{String}","name":"the","text":"specified character from a string.","theRestString":""}],"commentRange":[130309,136601],"fileName":"ALL.js"},"charCodeAt":{"annotation":"method","name":"charCodeAt","text":"#Summary\nThe charCodeAt() method returns the numeric Unicode value of the character at the given index (except for unicode codepoints > 0x10000).\n\n#Syntax\n\tstr.charCodeAt(index)\n#Description\nUnicode code points range from 0 to 1,114,111. The first 128 Unicode code points are a direct match of the ASCII character encoding. For information on Unicode, see the JavaScript Guide.\n\nNote that charCodeAt will always return a value that is less than 65,536. This is because the higher code points are represented by a pair of (lower valued) \"surrogate\" pseudo-characters which are used to comprise the real character. Because of this, in order to examine or reproduce the full character for individual characters of value 65,536 and above, for such characters, it is necessary to retrieve not only charCodeAt(i), but also charCodeAt(i+1) (as if examining/reproducing a string with two letters). See example 2 and 3 below.\n\ncharCodeAt returns NaN if the given index is not greater than 0 or is greater than the length of the string.\n\nBackward compatibilty: In historic versions (like JavaScript 1.2) the charCodeAt method returns a number indicating the ISO-Latin-1 codeset value of the character at the given index. The ISO-Latin-1 codeset ranges from 0 to 255. The first 0 to 127 are a direct match of the ASCII character set.\n\n#Examples\n##Example: Using charCodeAt\n\nThe following example returns 65, the Unicode value for A.\n\n\t\"ABC\".charCodeAt(0) // returns 65\n\n#Example: Fixing charCodeAt to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is unknown\n\nThis version might be used in for loops and the like when it is unknown whether non-BMP characters exist before the specified index position.\n\n\tfunction fixedCharCodeAt (str, idx) {\n\t    // ex. fixedCharCodeAt ('\\uD800\\uDC00', 0); // 65536\n\t    // ex. fixedCharCodeAt ('\\uD800\\uDC00', 1); // false\n\t    idx = idx || 0;\n\t    var code = str.charCodeAt(idx);\n\t    var hi, low;\n\t    \n\t    // High surrogate (could change last hex to 0xDB7F to treat high\n\t    // private surrogates as single characters)\n\t    if (0xD800 <= code && code <= 0xDBFF) {\n\t        hi = code;\n\t        low = str.charCodeAt(idx+1);\n\t        if (isNaN(low)) {\n\t            throw 'High surrogate not followed by low surrogate in fixedCharCodeAt()';\n\t        }\n\t        return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n\t    }\n\t    if (0xDC00 <= code && code <= 0xDFFF) { // Low surrogate\n\t        // We return false to allow loops to skip this iteration since should have\n\t        // already handled high surrogate above in the previous iteration\n\t        return false;\n\t        //hi = str.charCodeAt(idx-1);\n\t        //low = code;\n\t        //return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n\t    }\n\t    return code;\n\t}\n\n##Example: Fixing charCodeAt to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is known\n\n\tfunction knownCharCodeAt (str, idx) {\n\t    str += '';\n\t    var code,\n\t        end = str.length;\n\n\t    var surrogatePairs = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n\t    while ((surrogatePairs.exec(str)) != null) {\n\t        var li = surrogatePairs.lastIndex;\n\t        if (li - 2 < idx) {\n\t            idx++;\n\t        }\n\t        else {\n\t            break;\n\t        }\n\t    }\n\n\t    if (idx >= end || idx < 0) {\n\t        return NaN;\n\t    }\n\n\t    code = str.charCodeAt(idx);\n\n\t    var hi, low;\n\t    if (0xD800 <= code && code <= 0xDBFF) {\n\t        hi = code;\n\t        low = str.charCodeAt(idx+1);\n\t        // Go one further, since one of the \"characters\" is part of a surrogate pair\n\t        return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n\t    }\n\t    return code;\n\t}","children":[{"annotation":"param","type":"{Number}","name":"index","text":"An integer greater than or equal to 0 and less than the length of the string; if it is not a number, it defaults to 0.","theRestString":"@returns {Number}returns the numeric Unicode value of the character at the given index (except for unicode codepoints > 0x10000)."},{"annotation":"returns","type":"{Number}","name":"returns","text":"the numeric Unicode value of the character at the given index (except for unicode codepoints > 0x10000).","theRestString":""}],"commentRange":[136606,140600],"fileName":"ALL.js"},"concat":{"annotation":"method","name":"concat","text":"#Summary\nThe concat() method combines the text of two or more strings and returns a new string.\n\n#Syntax\n\tstr.concat(string2, string3[, ..., stringN])\n\n#Description\nThe concat function combines the text from one or more strings and returns a new string. Changes to the text in one string do not affect the other string.\n\n#Examples\n##Example: Using concat\n\nThe following example combines strings into a new string.\n\n\tvar hello = \"Hello, \";\n\tconsole.log(hello.concat(\"Kevin\", \" have a nice day.\")); \n\n\t// Hello, Kevin have a nice day. \n\n#Performance\nIt is strongly recommended that assignment operators (+, +=) are used instead of the concat method. See this perfomance test.","children":[{"annotation":"param","name":"string2...stringN","text":"Strings to concatenate to this string.","theRestString":"@return {String}"},{"annotation":"return","type":"{String}","text":"","theRestString":""}],"commentRange":[140606,141385],"fileName":"ALL.js"},"indexOf":{"annotation":"method","name":"indexOf","text":"#Summary\nThe indexOf() method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found.\n\n#Syntax\n\tstr.indexOf(searchValue[, fromIndex])\n#Description\nCharacters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character of a string called stringName is stringName.length - 1.\n\n\t\"Blue Whale\".indexOf(\"Blue\");     // returns  0\n\t\"Blue Whale\".indexOf(\"Blute\");    // returns -1\n\t\"Blue Whale\".indexOf(\"Whale\", 0); // returns  5\n\t\"Blue Whale\".indexOf(\"Whale\", 5); // returns  5\n\t\"Blue Whale\".indexOf(\"\", 9);      // returns  9\n\t\"Blue Whale\".indexOf(\"\", 10);     // returns 10\n\t\"Blue Whale\".indexOf(\"\", 11);     // returns 10\n\n##Case-sensitivity\n\nThe indexOf method is case sensitive. For example, the following expression returns -1:\n\n\"Blue Whale\".indexOf(\"blue\") // returns -1\n##Checking occurrences\n\nNote that '0' doesn't evaluate to true and '-1' doesn't evaluate to false. Therefore, when checking if a specific string exists within another string the correct way to check would be:\n\n\"Blue Whale\".indexOf(\"Blue\") != -1; // true\n\"Blue Whale\".indexOf(\"Bloe\") != -1; // false\n\n#Examples\n##Example: Using indexOf and lastIndexOf\n\nThe following example uses indexOf and lastIndexOf to locate values in the string \"Brave new world\".\n\n\tvar anyString = \"Brave new world\";\n\n\tconsole.log(\"The index of the first w from the beginning is \" + anyString.indexOf(\"w\"));\n\t// Displays 8\n\tconsole.log(\"The index of the first w from the end is \" + anyString.lastIndexOf(\"w\")); \n\t// Displays 10\n\n\tconsole.log(\"The index of 'new' from the beginning is \" + anyString.indexOf(\"new\"));   \n\t// Displays 6\n\tconsole.log(\"The index of 'new' from the end is \" + anyString.lastIndexOf(\"new\"));\n\t// Displays 6\n##Example: indexOf and case-sensitivity\n\nThe following example defines two string variables. The variables contain the same string except that the second string contains uppercase letters. The first log method displays 19. But because the indexOf method is case sensitive, the string \"cheddar\" is not found in myCapString, so the second log method displays -1.\n\n\tvar myString    = \"brie, pepper jack, cheddar\";\n\tvar myCapString = \"Brie, Pepper Jack, Cheddar\";\n\n\tconsole.log('myString.indexOf(\"cheddar\") is ' + myString.indexOf(\"cheddar\"));    \n\t// Displays 19\n\tconsole.log('myCapString.indexOf(\"cheddar\") is ' + myCapString.indexOf(\"cheddar\")); \n\t// Displays -1\n##Example: Using indexOf to count occurrences of a letter in a string\n\nThe following example sets count to the number of occurrences of the letter x in the string str:\n\n\tcount = 0;\n\tpos = str.indexOf(\"x\");\n\n\twhile ( pos != -1 ) {\n\t   count++;\n\t   pos = str.indexOf( \"x\",pos + 1 );\n\t}","children":[{"annotation":"param","type":"{String}","name":"searchValue","text":"A string representing the value to search for.","theRestString":"@param {Number} fromIndex The location within the calling string to start the search from. It can be any integer. The default value is 0. If fromIndex < 0 the entire string is searched (same as passing 0). If fromIndex >= str.length, the method will return -1 unless searchValue is an empty string in which case str.length is returned. \n@optional dummy @returns {Number} the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found."},{"annotation":"param","type":"{Number}","name":"fromIndex","text":"The location within the calling string to start the search from. It can be any integer. The default value is 0. If fromIndex < 0 the entire string is searched (same as passing 0). If fromIndex >= str.length, the method will return -1 unless searchValue is an empty string in which case str.length is returned.","theRestString":"@optional dummy @returns {Number} the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found."},{"annotation":"optional","name":"dummy","text":"","theRestString":"@returns {Number} the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found."},{"annotation":"returns","type":"{Number}","name":"the","text":"index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found.","theRestString":""}],"commentRange":[141390,144813],"fileName":"ALL.js"},"Parse":{"annotation":"method","name":"Parse","text":"url options and return product reviews api params","children":[{"annotation":"param","type":"{ApplicationSkeleton}","name":"application","text":"","theRestString":"@param {object} options url parameters @return {object} reviews_params"},{"annotation":"param","type":"{object}","name":"options","text":"url parameters","theRestString":"@return {object} reviews_params"},{"annotation":"return","type":"{object}","name":"reviews_params","text":"","theRestString":""}],"commentRange":[539235,539434],"fileName":"ALL.js"}}},"core.ApplicationSkeleton":{"annotation":"class","name":"ApplicationSkeleton","text":"Defines the top level components of an application like the name, layout, or the start function\n\n","children":[{"annotation":"extends","name":"BackboneEvents","text":"","theRestString":""}],"commentRange":[577524,577747],"fileName":"ALL.js","module":{"annotation":"module","name":"core","text":"","commentRange":[577524,577747],"fileName":"ALL.js"},"absoluteName":"core.ApplicationSkeleton","constructors":[{"annotation":"constructor","name":"n","text":"","children":[{"annotation":"param","type":"{String}","name":"name","text":"","theRestString":""}],"commentRange":[577780,577816],"fileName":"ALL.js","params":[{"annotation":"param","type":"{String}","name":"name","text":"","theRestString":""}],"throws":[]}],"methods":{"resizeImage":{"annotation":"method","name":"resizeImage","text":"Wraps the SC.Utils.resizeImage and passes in the settings it needs","commentRange":[578127,578216],"fileName":"ALL.js"},"getLayout":{"annotation":"method","name":"getLayout","text":"","children":[{"annotation":"return","type":"{ApplicationSkeletonLayout}","text":"","theRestString":""}],"commentRange":[583790,583873],"fileName":"ALL.js"},"getConfig":{"annotation":"method","name":"getConfig","text":"returns the configuration object of the aplication if a path is applied, it returns that attribute of the config if nothing is found, it returns the default value","children":[{"annotation":"param","type":"{String}","name":"path","text":"","theRestString":"@param {Any} default_value"},{"annotation":"param","type":"{Any}","name":"default_value","text":"","theRestString":""}],"commentRange":[584052,584300],"fileName":"ALL.js"},"getUser":{"annotation":"method","name":"getUser","text":"","commentRange":[584536,584554],"fileName":"ALL.js"},"getUserPromise":{"annotation":"method","name":"getUserPromise","text":"Because the application MAY load the user's profile asynchronous some modules may want to register when the profile is ready to be used application.getUser(). Note: from views is OK to call getUser() directly, but for mountToApp(), please call getUserPromise() first! the profile itself it is responsible of resolving the SC.PROFILE_PROMISE global promise (like in sc.user.environment.ssp)","children":[{"annotation":"return","type":"{jQueryDeferred}","text":"","theRestString":""}],"commentRange":[584728,585184],"fileName":"ALL.js"},"start":{"annotation":"method","name":"start","text":"","children":[{"annotation":"param","type":"{Function}","name":"done_fn","text":"","theRestString":""}],"commentRange":[585585,585627],"fileName":"ALL.js"}}},"core.ApplicationSkeletonLayout":{"annotation":"class","name":"ApplicationSkeletonLayout","text":"","children":[{"annotation":"extends","name":"BackboneView","text":"This View will be created and added to the dom as soon as the app starts. All module's views will get into the dom through this view by calling either showContent, showInModal, showError or other application specific method","theRestString":""}],"commentRange":[578457,578750],"fileName":"ALL.js","module":{"annotation":"module","name":"core","text":"","commentRange":[577524,577747],"fileName":"ALL.js"},"absoluteName":"core.ApplicationSkeletonLayout","properties":{"template":{"annotation":"property","type":"{String}","name":"template","text":"this is the tag asociated to the .txt file","commentRange":[578817,578890],"fileName":"ALL.js"},"container_element":{"annotation":"property","type":"{String}","name":"container_element","text":"where it will be appended","commentRange":[578915,578980],"fileName":"ALL.js"},"content_element":{"annotation":"property","type":"{String}","name":"content_element","text":"where the content (views) will be apended","commentRange":[579014,579093],"fileName":"ALL.js"},"key_elements":{"annotation":"property","type":"{Object}","name":"key_elements","text":"","commentRange":[579128,579162],"fileName":"ALL.js"}},"methods":{"initialize":{"annotation":"method","name":"initialize","text":"","children":[{"annotation":"param","type":"{ApplicationSkeleton}","name":"application","text":"","theRestString":""}],"commentRange":[579201,579263],"fileName":"ALL.js"},"render":{"annotation":"method","name":"render","text":"","commentRange":[579741,579758],"fileName":"ALL.js"},"updateHeader":{"annotation":"method","name":"updateHeader","text":"","commentRange":[580069,580092],"fileName":"ALL.js"},"updateFooter":{"annotation":"method","name":"updateFooter","text":"","commentRange":[580348,580371],"fileName":"ALL.js"},"updateUI":{"annotation":"method","name":"updateUI","text":"update the internal dom references (this.key_elements) . Since this method (should) is called when important markup is updated/added dynamically it is wrapped by those modules who need to enrich the content like the Content Delivery module.","commentRange":[580626,580886],"fileName":"ALL.js"},"appendToDom":{"annotation":"method","name":"appendToDom","text":"","commentRange":[581445,581467],"fileName":"ALL.js"},"getApplication":{"annotation":"method","name":"getApplication","text":"","children":[{"annotation":"return","type":"{ApplicationSkeleton}","text":"","theRestString":""}],"commentRange":[582283,582338],"fileName":"ALL.js"},"touchpointPost":{"annotation":"method","name":"touchpointPost","text":"perform a POST operation to the specified touchpoint ('post-touchpoint')","children":[{"annotation":"param","type":"{HTMLEvent}","name":"e","text":"","theRestString":""}],"commentRange":[582409,582528],"fileName":"ALL.js"},"itemsExpander":{"annotation":"method","name":"itemsExpander","text":"","children":[{"annotation":"param","type":"{HTMLEvent}","name":"e","text":"","theRestString":""}],"commentRange":[582827,582872],"fileName":"ALL.js"},"dropdownExpander":{"annotation":"method","name":"dropdownExpander","text":"","children":[{"annotation":"param","type":"{HTMLEvent}","name":"e","text":"","theRestString":""}],"commentRange":[583118,583166],"fileName":"ALL.js"},"showContent":{"annotation":"method","name":"showContent","text":"","commentRange":[583423,583594],"fileName":"ALL.js"},"showInModal":{"annotation":"method","name":"showInModal","text":"","commentRange":[583626,583648],"fileName":"ALL.js"},"showError":{"annotation":"method","name":"showError","text":"","commentRange":[583680,583700],"fileName":"ALL.js"},"showSuccess":{"annotation":"method","name":"showSuccess","text":"","commentRange":[583730,583752],"fileName":"ALL.js"}},"events":{"beforeRender":{"annotation":"event","name":"beforeRender","text":"triggered before the Layout is rendered","commentRange":[579789,579851],"fileName":"ALL.js"},"afterRender":{"annotation":"event","name":"afterRender","text":"triggered after the Layout is rendered","commentRange":[579963,580023],"fileName":"ALL.js"},"beforeAppendToDom":{"annotation":"event","name":"beforeAppendToDom","text":"triggered before the Layout view is appended to the DOM","commentRange":[581640,581723],"fileName":"ALL.js"},"afterAppendToDom":{"annotation":"event","name":"afterAppendToDom","text":"triggered after the Layout view is appended to the DOM","commentRange":[582142,582223],"fileName":"ALL.js"}}}},"modules":{"Backbone":{"annotation":"module","name":"Backbone","text":"\n\n#About\nBackbone.js gives structure to web applications by providing models with key-value binding and custom events, collections with a rich API of enumerable functions, views with declarative event handling, and connects it all to your existing API over a RESTful JSON interface.\n\nThe project is hosted on GitHub, and the annotated source code is available, as well as an online test suite, an example application, a list of tutorials and a long list of real-world projects that use Backbone. Backbone is available for use under the MIT software license.\n\nYou can report bugs and discuss features on the GitHub issues page, on Freenode IRC in the #documentcloud channel, post questions to the Google Group, add pages to the wiki or send tweets to","commentRange":[1,19],"fileName":"ALL.js"},"javascript":{"annotation":"module","name":"javascript","text":"","commentRange":[14245,17913],"fileName":"ALL.js"},"core":{"annotation":"module","name":"core","text":"","commentRange":[577524,577747],"fileName":"ALL.js"}}}
