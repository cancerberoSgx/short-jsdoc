{
    "source": "//@module shortjsdoc\n//@class AbstractView @extend Backbone.View @module shortjsdoc\n\nvar AbstractView = Backbone.View.extend({\n\n\ttagName: \"div\"\n\n,\tinitialize: function(application) \n\t{\n\t\tthis.application = application;\n\t}\n\n\t//@method renderIn renders this view in given parent element @param {jQuery} $parent\n,\trenderIn: function($parent)\n\t{\n\t\tvar template = this.application.templates[this.template]; \n\t\tif(template)\n\t\t{\t\t\t\n\t\t\tvar html = template.apply(this, []); \n\t\t\tthis.$el.html(html);\n\t\t\t$parent.append(this.$el); \n\t\t}\n\t\tthis.afterRender();\n\t}\n\n\t// @method afterRender called b the application jsut after this view is shown. Ooverridable b subclasses for doing some post rendering like installing js widgets, or something. Do nothing b default so you extenders don't need to call super\n,\tafterRender: function()\n\t{\n\t}\n});\n\n\n\n//@module shortjsdoc\n// this is the main class for all the application\n// utilities for rendering jsdoc data generated by jsdocgenerator1 js-indentator plugin\n// using backbone. The user should provide with underscore templates. \n// @class AbstractView @extend Backbone.View @module shortjsdoc\n// @author: sgurin\n\n//@class Application \n//@constructor Application @param {Object} data\nvar Application = function(data)\n{\n\tthis.textFormat = 'markdown'; \n\t\n\tthis.templates = shortjsdoc; //global variable given b templates.js\n\n\t// this.parser = jsindentator.styles.shortJsDoc; \n\tthis.data = data; \n\n\tthis.maker = new JsDocMaker();\n\tthis.maker.data = data;\n\tthis.maker.postProccessBinding();\n\n\t// jQuery('body').addClass('container-fluid');\n\n\t// if(jQuery('#mainHeader').size()===0)\n\t// {\n\t// \tjQuery('body').append('<div id=\"mainHeader\"></div>'); \n\t// }\n\t// this.$mainHeader = jQuery('#mainHeader'); \n\n\tif(jQuery('#mainContainer').size()===0)\n\t{\n\t\tjQuery('body').append('<div id=\"mainContainer\"></div>'); \n\t}\n\tthis.$containerEl = jQuery('#mainContainer'); \n};\n\n_(Application.prototype).extend({\n\n\tstart: function()\n\t{\t\t\n\t\tthis.router = new JsDocRouter(this);\n\t\tBackbone.history.start();\n\t\tvar navigateTo = Backbone.history.getHash() || 'index'; \n\t\tBackbone.history.navigate(navigateTo, {trigger: true});\n\t}\n\n,\tshowView: function(view)\n\t{\n\t\tthis.applicationView = this.applicationView || new ApplicationView(this); \n\t\tthis.currentView = view;\n\t\tthis.$containerEl.empty();\n\t\tthis.applicationView.renderIn(this.$containerEl);\n\t\t// view.afterRender(); \n\t}\n\t\n,\trefreshWithNewModel: function(data)\n\t{\n\t\tthis.data = data; \n\t\tBackbone.history.navigate('#index', {trigger: true}); \n\t\tthis.showView(this.currentView);\n\t}\n\n,\tshowErrorView: function(s) \n\t{\n\t\tthis.$containerEl.empty().append('<h1>'+s+'</h1>'); \n\t}\n\n});\n\n//@method start an application loading it with given data. @static\n//@param data the output of passing jsindentator JsDocMaker. \nApplication.start = function(data)\n{\n\tvar app = new Application(data); \n\tapp.start();\n}; \n\n\n//@module shortjsdoc\n//@class ApplicationView @extends AbstractView\nvar ApplicationView = AbstractView.extend({\n\n\tclassName: \"application-view\"\n\n,\ttemplate: 'application'\n\n,\tinitialize: function(application) \n\t{\n\t\tthis.application = application;\n\t}\n\n,\trenderIn: function($el)\n\t{\n\t\tAbstractView.prototype.renderIn.apply(this, arguments); \n\n\t\tthis.headerView = this.headerView || new HeaderView(this.application);\n\t\tthis.headerView.renderIn(this.$('[data-type=\"header-container\"]')); \n\n\t\tthis.mainView = this.application.currentView; \n\n\t\tthis.mainView.renderIn(this.$('[data-type=\"main-view-container\"]')); \n\t}\n\n});\n\n//@module shortjsdoc\n//@class ClassView @extends AbstractView\n\nvar ClassView = AbstractView.extend({\n\n\tclassName: \"class-view\"\n\n,\ttemplate: 'class'\n\n,\tinitialize: function(application, className) \n\t{\n\t\tthis.application = application;\n\t\tthis.jsdoc = this.application.data.classes[className]; \n\t\tif(!this.jsdoc)\n\t\t{\n\t\t\tthis.resourceNotFound = true;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.jsdoc.textHtml = this.getTextHtml(this.jsdoc);\t\n\t\tthis.hierarchy = this.computeHierarchy();\n\t}\n\n,\tcomputeHierarchy: function()\n\t{\n\t\tvar hierarchy = [];\n\t\tvar c = this.jsdoc;\n\t\tdo \n\t\t{\n\t\t\thierarchy = [c].concat(hierarchy);\n\t\t\tif(c.name===this.jsdoc.name)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\twhile( (c = c.extends) ); \n\t\treturn hierarchy;\n\t}\n\n,\tafterRender: function()\n\t{\n\t\tthis.renderSource(this.jsdoc, this.$('[data-type=\"sources\"]')); \n\t}\n});\n\n//@module shortjsdoc\n//@class HeaderView @extends AbstractView\nvar HeaderView = AbstractView.extend({\n\n\tclassName: \"header-view\"\n\n,\ttemplate: 'header'\n\n,\tinitialize: function(application) \n\t{\n\t\tthis.application = application;\n\t}\n\t\n,\trenderIn: function()\n\t{\n\t\tAbstractView.prototype.renderIn.apply(this, arguments); \n\t\tthis.installTypeAhead();\n\t}\n\n,\tinstallTypeAhead: function()\n\t{\n\t\tthis.classes = this.application.data.classes;\n\t\tthis.modules = this.application.data.modules;\n\n\t\tthis.typeahead = $('.main-header .typeahead1').typeahead({\n\t\t\thint: true,\n\t\t\thighlight: true,\n\t\t\tminLength: 1\n\t\t},\t{\n\t\t\tname: 'jsdoc',\n\t\t\tdisplayKey: 'value',\n\t\t\tsource: this.substringMatcher()\n\t\t});\n\n\t\tvar self = this;\n\t\tthis.typeahead.on('typeahead:selected', function()\n\t\t{\n\t\t\tself.handleSearchSelection.apply(self, arguments);\n\t\t});\n\t}\n\n,\thandleSearchSelection: function(event, object, dataset)\n\t{\n\t\tvar href = this.makeLink(object.node);\n\t\tBackbone.history.navigate(href, {trigger: true}); \n\t}\n\n,\tsearch: function(q)\n\t{\n\t\tvar self=this,matches = []\n\n\t\t// regex used to determine if a string contains the substring `q`\n\t\t,\tsubstrRegex = new RegExp(q, 'i');\n\n\t\t// iterate through the pool of strings and for any string that\n\t\t// contains the substring `q`, add it to the `matches` array\n\t\t_(self.classes).each(function (c)\n\t\t{\n\t\t\tif (substrRegex.test(c.name)) \n\t\t\t{\n\t\t\t\tmatches.push({ value: c.name, node: c });\n\t\t\t}\n\t\t\t_(c.methods).each(function (m)\n\t\t\t{\n\t\t\t\tif (substrRegex.test(m.name)) \n\t\t\t\t{\n\t\t\t\t\tmatches.push({ value: m.name, node: m });\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}); \n\t\t}); \n\n\t\t_(self.modules).each(function (m)\n\t\t{\n\t\t\tif (substrRegex.test(m.name)) \n\t\t\t{\n\t\t\t\tmatches.push({ value: m.name, node: m });\n\t\t\t}\n\t\t}); \n\n\t\treturn matches;\n\t}\n\n,\tsubstringMatcher: function() \n\t{\n\t\tvar self = this;\n\t\treturn function findMatches(q, cb) \n\t\t{\n\t\t\tvar matches;\n\t\t\t// an array that will be populated with substring matches\n\t\t\tmatches = self.search(q);\t\t\t\n\t\t\tcb(matches);\n\t\t};\n\t}\n\n});\n\n\n//@module shortjsdoc\n//@class IndexView @extends AbstractView\nvar IndexView = AbstractView.extend({\n\n\tclassName: \"index\"\n\n,\ttemplate: 'index'\n\n});\n\n//@module shortjsdoc\n//@class JsDocRouter @extends BackboneRouter\nvar JsDocRouter = Backbone.Router.extend({\n\n\troutes: {\n\t\t'class/:class': 'showClass'\n\n\t// ,\t'classHierarchy/:class': 'showClass'event\n\n\t,\t'module/:module': 'showModule'\n\n\t,\t'method/:method': 'showMethod'\n\t,\t'constructor/:method': 'showMethod'\n\n\t,\t'property/:property': 'showProperty'\n\t,\t'event/:event': 'showEvent'\n\n\t,\t'index': 'showIndex'\n\t,\t'modules': 'showModules'\n\t,\t'classes': 'showClasses'\n\n\t,\t'parse': 'showParse'\n\t// ,\t'search': 'showSearch'\n\t}\n\n,\tinitialize: function(application) \n\t{\n\t\tthis.application=application;\n\t}\n\n\t//@method showView @param {AbstractView}view @param {String} resourceName\n,\tshowView: function(view, resourceName)\n\t{\n\t\tresourceName = resourceName||'Resource'; \n\t\tif(view.resourceNotFound)\n\t\t{\n\t\t\tthis.application.showErrorView(resourceName+' '+resourceName+' not found!'); \n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.application.showView(view); \n\t\t}\n\t}\n\n\t//@method showModule  @param {String} moduleName\n,\tshowModule: function(moduleName) \n\t{\n\t\tvar view = new ModuleView(this.application, moduleName);\n\t\tthis.showView(view); \n\t}\n\n\t//@method showClass  @param {String} className\n,\tshowClass: function(className) \n\t{ \n\t\tvar view = new ClassView(this.application, className);\n\t\tthis.showView(view); \n\t}\n\n\t//@method showMethod  @param {String} method\n,\tshowMethod: function(method)\n\t{\n\t\tvar view = new MethodView(this.application, method);\n\t\tthis.showView(view); \n\t}\n\n\t//@method showProperty  @param {String} property\n,\tshowProperty: function(property)\n\t{\n\t\tvar view = new PropertyView(this.application, property);\n\t\tthis.showView(view); \n\t}\n\n\t//@method showEvent  @param {String} event\n,\tshowEvent: function(event)\n\t{\n\t\tvar view = new PropertyView(this.application, event, true);\n\t\tthis.showView(view); \n\t}\n\n\t//@method showModules\n,\tshowModules: function()\n\t{\n\t\tvar view = new AbstractView(this.application);\n\t\tview.template = 'modules';\n\t\tthis.showView(view);\n\t}\n\t\n\t//@method showClasses\n,\tshowClasses: function()\n\t{\n\t\tvar view = new AbstractView(this.application);\n\t\tview.template = 'classes';\n\t\tthis.showView(view);\n\t}\n\t\n\t//@method showIndex\n,\tshowIndex: function() \n\t{\n\t\tvar view = new IndexView(this.application);\n\t\tthis.application.showView(view); \n\t}\n\n\t//@method showParse\n,\tshowParse: function() \n\t{\n\t\tvar view = new ParseView(this.application);\n\t\tthis.application.showView(view); \n\t}\n\n});\n\n\n//@module shortjsdoc\n//@class MethodView @extends AbstractView\nvar MethodView = AbstractView.extend({\n\n\tclassName: \"method-view\"\n\n,\ttemplate: 'method'\n\n,\tinitialize: function(application, methodName) \n\t{\n\t\tthis.application = application;\n\t\tvar a = methodName.split('.');\n\t\tvar className = a[0] + '.' + a[1]; \n\t\tvar class_ = this.application.data.classes[className];\n\t\tvar methodSimpleName = a[2];\n\t\tif(!isNaN(parseInt(methodSimpleName, 10)))\n\t\t{\n\t\t\tthis.jsdoc = class_.constructors[parseInt(methodSimpleName, 10)]; \n\t\t\tthis.isConstructor = true;\n\t\t}\n\t\telse\n\t\t{\t\t\t\n\t\t\tthis.jsdoc = class_.methods[methodSimpleName]; \n\t\t\tthis.isConstructor = false;\n\t\t}\n\t\tif(!this.jsdoc)\n\t\t{\n\t\t\tthis.resourceNotFound = true;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.jsdoc.textHtml = this.getTextHtml(this.jsdoc);\t\t\n\t}\n\n,\tafterRender: function()\n\t{\n\t\tthis.renderSource(this.jsdoc, this.$('[data-type=\"sources\"]')); \n\t}\n});\n\n\n\n//@module shortjsdoc\n//@class ModuleView @extends AbstractView\nvar ModuleView = AbstractView.extend({\n\n\tclassName: \"module\"\n\n,\ttemplate: 'module'\n\n,\tinitialize: function(application, moduleName) \n\t{\n\t\tthis.application = application;\n\t\tthis.jsdoc = this.application.data.modules[moduleName]; \n\t\tthis.classes = _( _(this.application.data.classes).values() ).filter(function(c){\n\t\t\treturn c.module.name === moduleName; \n\t\t}); \n\t\t\n\t\tthis.jsdoc.textHtml = this.getTextHtml(this.jsdoc);\t\n\t}\n\n});\n\n//@module shortjsdoc\n//@class ParseView @extends AbstractView\nvar ParseView = AbstractView.extend({\n\n\tclassName: \"parse\"\n\n,\tevents: {\n\t\t'click [data-action=\"inputcode_doit\"]': 'inputCodeDoit'\n\t}\n\n,\ttemplate: 'parse'\n\n,\tinputCodeDoit: function()\n\t{\n\t\tvar code = this.$('[data-type=\"inputcode\"]').val();\n\t\tvar maker = this.application.maker;\n\t\tmaker.parseFile(code, 'textarea');\t\t\n\t\tmaker.postProccess();\n\t\t//console.log(JSON.stringify(maker.data));\n\t\tmaker.postProccessBinding();\n\t\tthis.application.refreshWithNewModel(maker.data);\n\t\t// \n\t}\n\n});\n\n//@module shortjsdoc\n//@class PropertyView @extends AbstractView\nvar PropertyView = AbstractView.extend({\n\n\tclassName: \"property-view\"\n\n,\ttemplate: 'property'\n\n,\tinitialize: function(application, propertyName, isEvent) \n\t{\n\t\tthis.application = application;\n\t\tthis.isEvent = isEvent;\n\t\tvar a = propertyName.split('.');\n\t\tvar className = a[0] + '.' + a[1]; \n\t\tvar class_ = this.application.data.classes[className];\n\t\tvar propertySimpleName = a[2];\n\t\tthis.jsdoc = isEvent ? class_.events[propertySimpleName] : class_.properties[propertySimpleName];\n\t\tif(!this.jsdoc)\n\t\t{\n\t\t\tthis.resourceNotFound = true;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.jsdoc.textHtml = this.getTextHtml(this.jsdoc);\t\t\n\t}\n\n,\tafterRender: function()\n\t{\n\t\tthis.renderSource(this.jsdoc, this.$('[data-type=\"sources\"]')); \n\t}\n});\n\n\n\n//@module shortjsdoc\n//@class SourcesView @extends AbstractView\nvar SourcesView = AbstractView.extend({\n\n\tclassName: \"sources\"\n\n,\ttemplate: 'sources'\n\n,\tevents: {\n\t\t'click [data-type=\"goto-source\"]': 'gotoSource'\n\t}\n\n,\tinitialize: function(application, jsdoc)\n\t{\n\t\tthis.application = application;\n\t\tthis.jsdoc = jsdoc;\n\t\tthis.allSource = this.application.maker.data.source; \n\n\t\tvar rangeRatio = 280;\n\t\tvar rangeMin = Math.min(0, this.jsdoc.commentRange[0] - rangeRatio);\n\t\tvar rangeMax = Math.min(this.allSource.length - 1, this.jsdoc.commentRange[1] + rangeRatio);\n\t\tthis.sourceSubset = String.prototype.substring.apply(this.allSource, [rangeMin, rangeMax]);\n\n\t\tvar jsdocSource = this.sourceSubset.substring.apply(this.sourceSubset, this.jsdoc.commentRange); \n\t\tvar previusSource = this.sourceSubset.substring(0, this.sourceSubset.indexOf(jsdocSource));\n\t\tvar previusSourceLineCount = previusSource.split('\\n').length; \n\n\t\tthis.jsdocLineNumber = previusSourceLineCount - 1;\n\t}\n\n,\tafterRender: function()\n\t{\n\t\tif(typeof prettyPrint !== 'undefined') \n\t\t{\n\t\t\tprettyPrint();\n\t\t}\n\t}\n\n,\tgotoSource: function()\n\t{\n\t\tvar selector = 'ol.linenums>li'\n\t\t,\t$target = jQuery(jQuery(selector).get(this.jsdocLineNumber));\n\t\tif($target.size())\n\t\t{\n\t\t\tjQuery(window).scrollTop($target.position().top);\n\t\t\t$target.addClass('selectedJsDocLine'); \n\t\t}\n\t\t// else\n\t\t// {\n\t\t\t// console.log('empty: ', selector); \n\t\t// }\n\t}\n});\n\n//@module shortjsdoc\n// this file add methods to Abstract Application for dealing with types and html markup. \n// @class AbstractView @extends BackboneView\n\n_(AbstractView.prototype).extend({\n\n\t//@method printTag\n\tprintTag: function(text, classAttribute, tag) {\n\t\ttag = tag || 'span'; \n\t\tclassAttribute = classAttribute ||'';\n\t\tif(text)\n\t\t{\n\t\t\treturn '<'+tag+ (classAttribute?(' class=\"'+classAttribute+'\"'):'') +'>'+text+'</'+tag+'>'; \n\t\t}\n\t\treturn '';\n\t}\n\n\t//@method simpleName @param {String}name\n,\tsimpleName: function(name)\n\t{\n\t\treturn this.application.maker.simpleName(name);\n\t}\n\n\t//@method makeLink @param {boolean} htmlAnchors will output anchor elements html\n,\tmakeLink: function(node, htmlAnchors)\n\t{\n\t\t// if (!node || !node.type) // no type for this node. This isn't undefined ! This means we just simply doesn't have the information.\n\t\t// {\n\t\t//\treturn '';\n\t\t// }\n\t\tvar s = htmlAnchors?'<a href=\"':'';\n\t\tif(node.annotation==='method')\n\t\t{\n\t\t\ts += '#method/' + node.absoluteName; \n\t\t}\n\t\telse if(node.annotation==='constructor')\n\t\t{\t\t\t\n\t\t\ts += '#constructor/' + node.absoluteName; \n\t\t}\n\t\telse if(node.annotation==='property')\n\t\t{\n\t\t\ts += '#property/' + node.absoluteName; \n\t\t}\n\t\telse if(node.annotation==='event')\n\t\t{\n\t\t\ts += '#event/' + node.absoluteName; \n\t\t}\n\t\telse if(node.annotation==='class')\n\t\t{\n\t\t\ts += '#class/' + node.absoluteName; \n\t\t}\n\t\telse if(node.annotation==='module')\n\t\t{\n\t\t\ts += '#module/' + node.name; \n\t\t}\n\n\t\ts += htmlAnchors?('\">'+node.name+'</a>'):'';\n\t\treturn s;\n\t}\n\t\n\t//@method printType @param {Object}context\n,\tprintType: function(context)\n\t{\n\t\tif(!context || !context.type)\n\t\t{\n\t\t\treturn ''; \n\t\t}\n\t\tvar self = this;\n\t\tvar href = context.type.nativeTypeUrl || '#class/'+context.type.absoluteName; \n\t\tvar htmlText = context.type.name; \n\t\t// htmlText += (context.type.nativeTypeUrl ? '<span class=\"external-label\">(external)</span>' : '');\n\t\t// htmlText += (context.type.nativeTypeUrl ? '<span class=\"glyphicon glyphicon-star\"></span>' : '');\n\t\tvar aclass = (context.type.nativeTypeUrl ? ' type external ' : ' type ');\n\t\tvar iconHtml = context.type.nativeTypeUrl ? '<span class=\"glyphicon glyphicon-share\"></span>' : ''; \n\n\t\tcontext.buffer.push('<a class=\"'+aclass+'\" href=\"'+href+'\">'+iconHtml+htmlText+'</a>');\n\n\t\tif(context.type.params) \n\t\t{ \n\t\t\tcontext.buffer.push('&lt;');\n\t\t\tfor (var i = 0; i < (context.type.params||[]).length; i++) \n\t\t\t{\n\t\t\t\tvar param = context.type.params[i]; \n\t\t\t\tself.printType({ //recurse!\n\t\t\t\t\ttype:param\n\t\t\t\t,\tbuffer: context.buffer\n\t\t\t\t});\n\t\t\t\tif(i < context.type.params.length - 1)\n\t\t\t\t{\n\t\t\t\t\tcontext.buffer.push(','); \n\t\t\t\t}\n\t\t\t}\n\t\t\tcontext.buffer.push('>'); \n\t\t} \n\t}\n\n\t//@method printTypeAsString @param {String} type @return {String}\n,\tprintTypeAsString: function(type)\n\t{\n\t\tvar buffer = [];\n\t\tvar context = {type: type, typeTemplate: this.printType, buffer: buffer}; \n\t\tthis.printType(context); \n\t\tvar typeOutput = buffer.join(''); \n\t\treturn typeOutput; \n\t}\n\n\t//@method getTextHtml depends on lib/marked/\n,\tgetTextHtml: function(node)\n\t{\n\t\tif(!node || !node.text)\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t\tvar text = node.text\n\t\t,\ttype = this.application.textFormat\n\t\t,\thtml = _(node.children).find(function(c){return c.annotation==='html'; })\n\t\t,\tmarkdown = _(node.children).find(function(c){return c.annotation==='markdown'; });\n\t\t\n\t\tif(html)\n\t\t{\n\t\t\ttype = 'html'; \n\t\t}\n\t\tif(markdown)\n\t\t{\n\t\t\ttype = 'markdown'; \n\t\t}\n\n\t\tif(type === 'markdown')\n\t\t{\n\t\t\treturn marked(text); \n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn text; \n\t\t}\n\t}\n\n\t//@method printMethod\n,\tprintMethod: function(m)\n\t{\n\t\tvar isConstructor = m.annotation==='constructor'; \n\t\tvar s = '<span class=\"method\">';\n\t\tvar methodName = isConstructor ? this.simpleName(m.ownerClass) : m.name;\n\t\tif(!isConstructor && m.returns)\n\t\t{\n\t\t\ts += this.printTypeAsString(m.returns) + '&nbsp;'; \n\t\t}\n\n\t\ts += '<a href=\"' + this.makeLink(m) + '\">' + methodName + '</a>'; \n\n\t\treturn s + '</span>';\n\t}\n\n,\trenderSource: function(jsdoc, $container)\n\t{\n\t\tvar view = new SourcesView(this.application, jsdoc); \n\t\tview.renderIn($container); \n\t\t// this.application.templates.sources.apply(this, arguments)\t\n\t}\n});\n\n\n//@module Backbone\n// @class BackboneView\n// @class BackboneRouter\n// @class BackboneModel\n\n//@module jQuery\n// @class jQuery a jQuery Object",
    "classes": {
        "shortjsdoc.AbstractView": {
            "annotation": "class",
            "name": "AbstractView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "BackboneView",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                0,
                20
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "this file add methods to Abstract Application for dealing with types and html markup.",
                "commentRange": [
                    0,
                    20
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.AbstractView",
            "methods": {
                "printTag": {
                    "annotation": "method",
                    "name": "printTag",
                    "text": "",
                    "commentRange": [
                        0,
                        20
                    ],
                    "fileName": "ALL.js"
                },
                "simpleName": {
                    "annotation": "method",
                    "name": "simpleName",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{String}",
                            "name": "name",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        0,
                        20
                    ],
                    "fileName": "ALL.js"
                },
                "makeLink": {
                    "annotation": "method",
                    "name": "makeLink",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{boolean}",
                            "name": "htmlAnchors",
                            "text": "will output anchor elements html if (!node || !node.type) // no type for this node. This isn't undefined ! This means we just simply doesn't have the information. { return ''; }",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        0,
                        20
                    ],
                    "fileName": "ALL.js"
                },
                "printType": {
                    "annotation": "method",
                    "name": "printType",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{Object}",
                            "name": "context",
                            "text": "htmlText += (context.type.nativeTypeUrl ? '<span class=\"external-label\">(external)</span>' : ''); htmlText += (context.type.nativeTypeUrl ? '<span class=\"glyphicon glyphicon-star\"></span>' : ''); recurse!",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        0,
                        20
                    ],
                    "fileName": "ALL.js"
                },
                "printTypeAsString": {
                    "annotation": "method",
                    "name": "printTypeAsString",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{String}",
                            "name": "type",
                            "text": "",
                            "theRestString": "@return {String}"
                        },
                        {
                            "annotation": "return",
                            "type": "{String}",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        0,
                        20
                    ],
                    "fileName": "ALL.js"
                },
                "getTextHtml": {
                    "annotation": "method",
                    "name": "getTextHtml",
                    "text": "depends on lib/marked/",
                    "commentRange": [
                        0,
                        20
                    ],
                    "fileName": "ALL.js"
                },
                "printMethod": {
                    "annotation": "method",
                    "name": "printMethod",
                    "text": "this.application.templates.sources.apply(this, arguments)",
                    "commentRange": [
                        0,
                        20
                    ],
                    "fileName": "ALL.js"
                }
            }
        },
        "shortjsdoc.Application": {
            "annotation": "class",
            "name": "Application",
            "text": "",
            "commentRange": [
                0,
                20
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "children": [
                    {
                        "annotation": "author",
                        "text": ": sgurin",
                        "theRestString": ""
                    }
                ],
                "commentRange": [
                    0,
                    20
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.Application",
            "constructors": [
                {
                    "annotation": "constructor",
                    "name": "n",
                    "text": "Application",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{Object}",
                            "name": "data",
                            "text": "global variable given b templates.js this.parser = jsindentator.styles.shortJsDoc; jQuery('body').addClass('container-fluid'); if(jQuery('#mainHeader').size()===0) { jQuery('body').append('<div id=\"mainHeader\"></div>'); } this.$mainHeader = jQuery('#mainHeader'); view.afterRender();",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        0,
                        20
                    ],
                    "fileName": "ALL.js",
                    "params": [
                        {
                            "annotation": "param",
                            "type": "{Object}",
                            "name": "data",
                            "text": "global variable given b templates.js this.parser = jsindentator.styles.shortJsDoc; jQuery('body').addClass('container-fluid'); if(jQuery('#mainHeader').size()===0) { jQuery('body').append('<div id=\"mainHeader\"></div>'); } this.$mainHeader = jQuery('#mainHeader'); view.afterRender();",
                            "theRestString": ""
                        }
                    ]
                }
            ],
            "methods": {
                "start": {
                    "annotation": "method",
                    "name": "start",
                    "text": "an application loading it with given data.",
                    "children": [
                        {
                            "annotation": "static",
                            "name": "dummy",
                            "text": "",
                            "theRestString": "@param data the output of passing jsindentator JsDocMaker."
                        },
                        {
                            "annotation": "param",
                            "name": "data",
                            "text": "the output of passing jsindentator JsDocMaker.",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        0,
                        20
                    ],
                    "fileName": "ALL.js"
                }
            }
        },
        "shortjsdoc.ApplicationView": {
            "annotation": "class",
            "name": "ApplicationView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "AbstractView",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                0,
                20
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    0,
                    20
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.ApplicationView"
        },
        "shortjsdoc.ClassView": {
            "annotation": "class",
            "name": "ClassView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "AbstractView",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                0,
                20
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    0,
                    20
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.ClassView"
        },
        "shortjsdoc.HeaderView": {
            "annotation": "class",
            "name": "HeaderView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "AbstractView",
                    "text": "regex used to determine if a string contains the substring `q` iterate through the pool of strings and for any string that contains the substring `q`, add it to the `matches` array an array that will be populated with substring matches",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                0,
                20
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    0,
                    20
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.HeaderView"
        },
        "shortjsdoc.IndexView": {
            "annotation": "class",
            "name": "IndexView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "AbstractView",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                0,
                20
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    0,
                    20
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.IndexView"
        },
        "shortjsdoc.JsDocRouter": {
            "annotation": "class",
            "name": "JsDocRouter",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "BackboneRouter",
                    "text": ", 'classHierarchy/:class': 'showClass'event , 'search': 'showSearch'",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                0,
                20
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    0,
                    20
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.JsDocRouter",
            "methods": {
                "showView": {
                    "annotation": "method",
                    "name": "showView",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{AbstractView}",
                            "name": "view",
                            "text": "",
                            "theRestString": "@param {String} resourceName"
                        },
                        {
                            "annotation": "param",
                            "type": "{String}",
                            "name": "resourceName",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        0,
                        20
                    ],
                    "fileName": "ALL.js"
                },
                "showModule": {
                    "annotation": "method",
                    "name": "showModule",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{String}",
                            "name": "moduleName",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        0,
                        20
                    ],
                    "fileName": "ALL.js"
                },
                "showClass": {
                    "annotation": "method",
                    "name": "showClass",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{String}",
                            "name": "className",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        0,
                        20
                    ],
                    "fileName": "ALL.js"
                },
                "showMethod": {
                    "annotation": "method",
                    "name": "showMethod",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{String}",
                            "name": "method",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        0,
                        20
                    ],
                    "fileName": "ALL.js"
                },
                "showProperty": {
                    "annotation": "method",
                    "name": "showProperty",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{String}",
                            "name": "property",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        0,
                        20
                    ],
                    "fileName": "ALL.js"
                },
                "showEvent": {
                    "annotation": "method",
                    "name": "showEvent",
                    "text": "",
                    "children": [
                        {
                            "annotation": "param",
                            "type": "{String}",
                            "name": "event",
                            "text": "",
                            "theRestString": ""
                        }
                    ],
                    "commentRange": [
                        0,
                        20
                    ],
                    "fileName": "ALL.js"
                },
                "showModules": {
                    "annotation": "method",
                    "name": "showModules",
                    "text": "",
                    "commentRange": [
                        0,
                        20
                    ],
                    "fileName": "ALL.js"
                },
                "showClasses": {
                    "annotation": "method",
                    "name": "showClasses",
                    "text": "",
                    "commentRange": [
                        0,
                        20
                    ],
                    "fileName": "ALL.js"
                },
                "showIndex": {
                    "annotation": "method",
                    "name": "showIndex",
                    "text": "",
                    "commentRange": [
                        0,
                        20
                    ],
                    "fileName": "ALL.js"
                },
                "showParse": {
                    "annotation": "method",
                    "name": "showParse",
                    "text": "",
                    "commentRange": [
                        0,
                        20
                    ],
                    "fileName": "ALL.js"
                }
            }
        },
        "shortjsdoc.MethodView": {
            "annotation": "class",
            "name": "MethodView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "AbstractView",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                0,
                20
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    0,
                    20
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.MethodView"
        },
        "shortjsdoc.ModuleView": {
            "annotation": "class",
            "name": "ModuleView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "AbstractView",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                0,
                20
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    0,
                    20
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.ModuleView"
        },
        "shortjsdoc.ParseView": {
            "annotation": "class",
            "name": "ParseView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "AbstractView",
                    "text": "console.log(JSON.stringify(maker.data));",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                0,
                20
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    0,
                    20
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.ParseView"
        },
        "shortjsdoc.PropertyView": {
            "annotation": "class",
            "name": "PropertyView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "AbstractView",
                    "text": "",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                0,
                20
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    0,
                    20
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.PropertyView"
        },
        "shortjsdoc.SourcesView": {
            "annotation": "class",
            "name": "SourcesView",
            "text": "",
            "children": [
                {
                    "annotation": "extends",
                    "name": "AbstractView",
                    "text": "else { console.log('empty: ', selector); }",
                    "theRestString": ""
                }
            ],
            "commentRange": [
                0,
                20
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "shortjsdoc",
                "text": "",
                "commentRange": [
                    0,
                    20
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "shortjsdoc.SourcesView"
        },
        "Backbone.BackboneView": {
            "annotation": "class",
            "name": "BackboneView",
            "text": "",
            "commentRange": [
                0,
                20
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "Backbone",
                "text": "",
                "commentRange": [
                    0,
                    20
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "Backbone.BackboneView"
        },
        "Backbone.BackboneRouter": {
            "annotation": "class",
            "name": "BackboneRouter",
            "text": "",
            "commentRange": [
                0,
                20
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "Backbone",
                "text": "",
                "commentRange": [
                    0,
                    20
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "Backbone.BackboneRouter"
        },
        "Backbone.BackboneModel": {
            "annotation": "class",
            "name": "BackboneModel",
            "text": "",
            "commentRange": [
                0,
                20
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "Backbone",
                "text": "",
                "commentRange": [
                    0,
                    20
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "Backbone.BackboneModel"
        },
        "jQuery.jQuery": {
            "annotation": "class",
            "name": "jQuery",
            "text": "a jQuery Object",
            "commentRange": [
                0,
                20
            ],
            "fileName": "ALL.js",
            "module": {
                "annotation": "module",
                "name": "jQuery",
                "text": "",
                "commentRange": [
                    0,
                    20
                ],
                "fileName": "ALL.js"
            },
            "absoluteName": "jQuery.jQuery"
        }
    },
    "modules": {
        "shortjsdoc": {
            "annotation": "module",
            "name": "shortjsdoc",
            "text": "",
            "commentRange": [
                0,
                20
            ],
            "fileName": "ALL.js"
        },
        "Backbone": {
            "annotation": "module",
            "name": "Backbone",
            "text": "",
            "commentRange": [
                0,
                20
            ],
            "fileName": "ALL.js"
        },
        "jQuery": {
            "annotation": "module",
            "name": "jQuery",
            "text": "",
            "commentRange": [
                0,
                20
            ],
            "fileName": "ALL.js"
        }
    }
}
